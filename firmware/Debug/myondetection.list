
myondetection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f30  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014bc  080181d0  080181d0  000191d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801968c  0801968c  0001a68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019694  08019694  0001a694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019698  08019698  0001a698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002d4  24000000  0801969c  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002264  240002d4  08019970  0001b2d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24002538  08019970  0001b538  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001b2d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fc2d  00000000  00000000  0001b302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005f04  00000000  00000000  0004af2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002620  00000000  00000000  00050e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00042e6a  00000000  00000000  00053458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00034288  00000000  00000000  000962c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0018d148  00000000  00000000  000ca54a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00257692  2**0
                  CONTENTS, READONLY
 17 .debug_rnglists 00001d4b  00000000  00000000  002576d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000b218  00000000  00000000  00259420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000061  00000000  00000000  00264638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002d4 	.word	0x240002d4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080181b8 	.word	0x080181b8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002d8 	.word	0x240002d8
 80002dc:	080181b8 	.word	0x080181b8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006c6:	4802      	ldr	r0, [pc, #8]	@ (80006d0 <ST7735_Select+0x14>)
 80006c8:	f003 ff4e 	bl	8004568 <HAL_GPIO_WritePin>
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	58021000 	.word	0x58021000

080006d4 <ST7735_Unselect>:

void ST7735_Unselect() {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006de:	4802      	ldr	r0, [pc, #8]	@ (80006e8 <ST7735_Unselect+0x14>)
 80006e0:	f003 ff42 	bl	8004568 <HAL_GPIO_WritePin>
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	58021000 	.word	0x58021000

080006ec <ST7735_Reset>:

static void ST7735_Reset() {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80006f6:	4807      	ldr	r0, [pc, #28]	@ (8000714 <ST7735_Reset+0x28>)
 80006f8:	f003 ff36 	bl	8004568 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80006fc:	2005      	movs	r0, #5
 80006fe:	f001 ff87 	bl	8002610 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000708:	4802      	ldr	r0, [pc, #8]	@ (8000714 <ST7735_Reset+0x28>)
 800070a:	f003 ff2d 	bl	8004568 <HAL_GPIO_WritePin>
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	58021000 	.word	0x58021000

08000718 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000728:	4806      	ldr	r0, [pc, #24]	@ (8000744 <ST7735_WriteCommand+0x2c>)
 800072a:	f003 ff1d 	bl	8004568 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800072e:	1df9      	adds	r1, r7, #7
 8000730:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000734:	2201      	movs	r2, #1
 8000736:	4804      	ldr	r0, [pc, #16]	@ (8000748 <ST7735_WriteCommand+0x30>)
 8000738:	f00a fbd4 	bl	800aee4 <HAL_SPI_Transmit>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	58021000 	.word	0x58021000
 8000748:	24000434 	.word	0x24000434

0800074c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000756:	2201      	movs	r2, #1
 8000758:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800075c:	4807      	ldr	r0, [pc, #28]	@ (800077c <ST7735_WriteData+0x30>)
 800075e:	f003 ff03 	bl	8004568 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	b29a      	uxth	r2, r3
 8000766:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800076a:	6879      	ldr	r1, [r7, #4]
 800076c:	4804      	ldr	r0, [pc, #16]	@ (8000780 <ST7735_WriteData+0x34>)
 800076e:	f00a fbb9 	bl	800aee4 <HAL_SPI_Transmit>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	58021000 	.word	0x58021000
 8000780:	24000434 	.word	0x24000434

08000784 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000796:	e034      	b.n	8000802 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	607a      	str	r2, [r7, #4]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80007a2:	7afb      	ldrb	r3, [r7, #11]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffb7 	bl	8000718 <ST7735_WriteCommand>

        numArgs = *addr++;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80007b4:	7abb      	ldrb	r3, [r7, #10]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007bc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80007be:	7abb      	ldrb	r3, [r7, #10]
 80007c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80007c4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80007c6:	7abb      	ldrb	r3, [r7, #10]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d008      	beq.n	80007de <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80007cc:	7abb      	ldrb	r3, [r7, #10]
 80007ce:	4619      	mov	r1, r3
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ffbb 	bl	800074c <ST7735_WriteData>
            addr += numArgs;
 80007d6:	7abb      	ldrb	r3, [r7, #10]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	4413      	add	r3, r2
 80007dc:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80007de:	89bb      	ldrh	r3, [r7, #12]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d00e      	beq.n	8000802 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	607a      	str	r2, [r7, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80007ee:	89bb      	ldrh	r3, [r7, #12]
 80007f0:	2bff      	cmp	r3, #255	@ 0xff
 80007f2:	d102      	bne.n	80007fa <ST7735_ExecuteCommandList+0x76>
 80007f4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80007f8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80007fa:	89bb      	ldrh	r3, [r7, #12]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 ff07 	bl	8002610 <HAL_Delay>
    while(numCommands--) {
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	1e5a      	subs	r2, r3, #1
 8000806:	73fa      	strb	r2, [r7, #15]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d1c5      	bne.n	8000798 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3710      	adds	r7, #16
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000816:	b590      	push	{r4, r7, lr}
 8000818:	b085      	sub	sp, #20
 800081a:	af00      	add	r7, sp, #0
 800081c:	4604      	mov	r4, r0
 800081e:	4608      	mov	r0, r1
 8000820:	4611      	mov	r1, r2
 8000822:	461a      	mov	r2, r3
 8000824:	4623      	mov	r3, r4
 8000826:	71fb      	strb	r3, [r7, #7]
 8000828:	4603      	mov	r3, r0
 800082a:	71bb      	strb	r3, [r7, #6]
 800082c:	460b      	mov	r3, r1
 800082e:	717b      	strb	r3, [r7, #5]
 8000830:	4613      	mov	r3, r2
 8000832:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8000834:	202a      	movs	r0, #42	@ 0x2a
 8000836:	f7ff ff6f 	bl	8000718 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800083a:	2300      	movs	r3, #0
 800083c:	733b      	strb	r3, [r7, #12]
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	3301      	adds	r3, #1
 8000842:	b2db      	uxtb	r3, r3
 8000844:	737b      	strb	r3, [r7, #13]
 8000846:	2300      	movs	r3, #0
 8000848:	73bb      	strb	r3, [r7, #14]
 800084a:	797b      	ldrb	r3, [r7, #5]
 800084c:	3301      	adds	r3, #1
 800084e:	b2db      	uxtb	r3, r3
 8000850:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000852:	f107 030c 	add.w	r3, r7, #12
 8000856:	2104      	movs	r1, #4
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff77 	bl	800074c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800085e:	202b      	movs	r0, #43	@ 0x2b
 8000860:	f7ff ff5a 	bl	8000718 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	331a      	adds	r3, #26
 8000868:	b2db      	uxtb	r3, r3
 800086a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800086c:	793b      	ldrb	r3, [r7, #4]
 800086e:	331a      	adds	r3, #26
 8000870:	b2db      	uxtb	r3, r3
 8000872:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2104      	movs	r1, #4
 800087a:	4618      	mov	r0, r3
 800087c:	f7ff ff66 	bl	800074c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000880:	202c      	movs	r0, #44	@ 0x2c
 8000882:	f7ff ff49 	bl	8000718 <ST7735_WriteCommand>
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bd90      	pop	{r4, r7, pc}
	...

08000890 <ST7735_Init>:

void ST7735_Init() {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000894:	f7ff ff12 	bl	80006bc <ST7735_Select>
    ST7735_Reset();
 8000898:	f7ff ff28 	bl	80006ec <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800089c:	4806      	ldr	r0, [pc, #24]	@ (80008b8 <ST7735_Init+0x28>)
 800089e:	f7ff ff71 	bl	8000784 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80008a2:	4806      	ldr	r0, [pc, #24]	@ (80008bc <ST7735_Init+0x2c>)
 80008a4:	f7ff ff6e 	bl	8000784 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80008a8:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <ST7735_Init+0x30>)
 80008aa:	f7ff ff6b 	bl	8000784 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80008ae:	f7ff ff11 	bl	80006d4 <ST7735_Unselect>
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	08018e10 	.word	0x08018e10
 80008bc:	08018e4c 	.word	0x08018e4c
 80008c0:	08018e5c 	.word	0x08018e5c

080008c4 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80008c4:	b082      	sub	sp, #8
 80008c6:	b590      	push	{r4, r7, lr}
 80008c8:	b089      	sub	sp, #36	@ 0x24
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80008ce:	4603      	mov	r3, r0
 80008d0:	80fb      	strh	r3, [r7, #6]
 80008d2:	460b      	mov	r3, r1
 80008d4:	80bb      	strh	r3, [r7, #4]
 80008d6:	4613      	mov	r3, r2
 80008d8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	b2d8      	uxtb	r0, r3
 80008de:	88bb      	ldrh	r3, [r7, #4]
 80008e0:	b2d9      	uxtb	r1, r3
 80008e2:	88fb      	ldrh	r3, [r7, #6]
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80008ea:	4413      	add	r3, r2
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	3b01      	subs	r3, #1
 80008f0:	b2dc      	uxtb	r4, r3
 80008f2:	88bb      	ldrh	r3, [r7, #4]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80008fa:	4413      	add	r3, r2
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	3b01      	subs	r3, #1
 8000900:	b2db      	uxtb	r3, r3
 8000902:	4622      	mov	r2, r4
 8000904:	f7ff ff87 	bl	8000816 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
 800090c:	e043      	b.n	8000996 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800090e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000910:	78fb      	ldrb	r3, [r7, #3]
 8000912:	3b20      	subs	r3, #32
 8000914:	f897 1035 	ldrb.w	r1, [r7, #53]	@ 0x35
 8000918:	fb01 f303 	mul.w	r3, r1, r3
 800091c:	4619      	mov	r1, r3
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	440b      	add	r3, r1
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	4413      	add	r3, r2
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	e029      	b.n	8000984 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000930:	697a      	ldr	r2, [r7, #20]
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800093c:	2b00      	cmp	r3, #0
 800093e:	d00e      	beq.n	800095e <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000940:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8000942:	0a1b      	lsrs	r3, r3, #8
 8000944:	b29b      	uxth	r3, r3
 8000946:	b2db      	uxtb	r3, r3
 8000948:	743b      	strb	r3, [r7, #16]
 800094a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800094c:	b2db      	uxtb	r3, r3
 800094e:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	2102      	movs	r1, #2
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fef8 	bl	800074c <ST7735_WriteData>
 800095c:	e00f      	b.n	800097e <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800095e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000962:	0a1b      	lsrs	r3, r3, #8
 8000964:	b29b      	uxth	r3, r3
 8000966:	b2db      	uxtb	r3, r3
 8000968:	733b      	strb	r3, [r7, #12]
 800096a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800096e:	b2db      	uxtb	r3, r3
 8000970:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	2102      	movs	r1, #2
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fee7 	bl	800074c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	3301      	adds	r3, #1
 8000982:	61bb      	str	r3, [r7, #24]
 8000984:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000988:	461a      	mov	r2, r3
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	4293      	cmp	r3, r2
 800098e:	d3cf      	bcc.n	8000930 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	3301      	adds	r3, #1
 8000994:	61fb      	str	r3, [r7, #28]
 8000996:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800099a:	461a      	mov	r2, r3
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	4293      	cmp	r3, r2
 80009a0:	d3b5      	bcc.n	800090e <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80009a2:	bf00      	nop
 80009a4:	bf00      	nop
 80009a6:	3724      	adds	r7, #36	@ 0x24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80009ae:	b002      	add	sp, #8
 80009b0:	4770      	bx	lr

080009b2 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80009b2:	b082      	sub	sp, #8
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af04      	add	r7, sp, #16
 80009ba:	603a      	str	r2, [r7, #0]
 80009bc:	617b      	str	r3, [r7, #20]
 80009be:	4603      	mov	r3, r0
 80009c0:	80fb      	strh	r3, [r7, #6]
 80009c2:	460b      	mov	r3, r1
 80009c4:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80009c6:	f7ff fe79 	bl	80006bc <ST7735_Select>

    while(*str) {
 80009ca:	e02d      	b.n	8000a28 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80009cc:	88fb      	ldrh	r3, [r7, #6]
 80009ce:	7d3a      	ldrb	r2, [r7, #20]
 80009d0:	4413      	add	r3, r2
 80009d2:	2b9f      	cmp	r3, #159	@ 0x9f
 80009d4:	dd13      	ble.n	80009fe <ST7735_WriteString+0x4c>
            x = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80009da:	7d7b      	ldrb	r3, [r7, #21]
 80009dc:	461a      	mov	r2, r3
 80009de:	88bb      	ldrh	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80009e4:	88bb      	ldrh	r3, [r7, #4]
 80009e6:	7d7a      	ldrb	r2, [r7, #21]
 80009e8:	4413      	add	r3, r2
 80009ea:	2b4f      	cmp	r3, #79	@ 0x4f
 80009ec:	dc21      	bgt.n	8000a32 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b20      	cmp	r3, #32
 80009f4:	d103      	bne.n	80009fe <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	603b      	str	r3, [r7, #0]
                continue;
 80009fc:	e014      	b.n	8000a28 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	781a      	ldrb	r2, [r3, #0]
 8000a02:	88b9      	ldrh	r1, [r7, #4]
 8000a04:	88f8      	ldrh	r0, [r7, #6]
 8000a06:	8c3b      	ldrh	r3, [r7, #32]
 8000a08:	9302      	str	r3, [sp, #8]
 8000a0a:	8bbb      	ldrh	r3, [r7, #28]
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	f7ff ff56 	bl	80008c4 <ST7735_WriteChar>
        x += font.width;
 8000a18:	7d3b      	ldrb	r3, [r7, #20]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	4413      	add	r3, r2
 8000a20:	80fb      	strh	r3, [r7, #6]
        str++;
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d1cd      	bne.n	80009cc <ST7735_WriteString+0x1a>
 8000a30:	e000      	b.n	8000a34 <ST7735_WriteString+0x82>
                break;
 8000a32:	bf00      	nop
    }

    ST7735_Unselect();
 8000a34:	f7ff fe4e 	bl	80006d4 <ST7735_Unselect>
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a42:	b002      	add	sp, #8
 8000a44:	4770      	bx	lr
	...

08000a48 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000a48:	b590      	push	{r4, r7, lr}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4604      	mov	r4, r0
 8000a50:	4608      	mov	r0, r1
 8000a52:	4611      	mov	r1, r2
 8000a54:	461a      	mov	r2, r3
 8000a56:	4623      	mov	r3, r4
 8000a58:	80fb      	strh	r3, [r7, #6]
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	80bb      	strh	r3, [r7, #4]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	807b      	strh	r3, [r7, #2]
 8000a62:	4613      	mov	r3, r2
 8000a64:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	2b9f      	cmp	r3, #159	@ 0x9f
 8000a6a:	d858      	bhi.n	8000b1e <ST7735_FillRectangle+0xd6>
 8000a6c:	88bb      	ldrh	r3, [r7, #4]
 8000a6e:	2b4f      	cmp	r3, #79	@ 0x4f
 8000a70:	d855      	bhi.n	8000b1e <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8000a72:	88fa      	ldrh	r2, [r7, #6]
 8000a74:	887b      	ldrh	r3, [r7, #2]
 8000a76:	4413      	add	r3, r2
 8000a78:	2ba0      	cmp	r3, #160	@ 0xa0
 8000a7a:	dd03      	ble.n	8000a84 <ST7735_FillRectangle+0x3c>
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 8000a82:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8000a84:	88ba      	ldrh	r2, [r7, #4]
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	4413      	add	r3, r2
 8000a8a:	2b50      	cmp	r3, #80	@ 0x50
 8000a8c:	dd03      	ble.n	8000a96 <ST7735_FillRectangle+0x4e>
 8000a8e:	88bb      	ldrh	r3, [r7, #4]
 8000a90:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8000a94:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000a96:	f7ff fe11 	bl	80006bc <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	b2d8      	uxtb	r0, r3
 8000a9e:	88bb      	ldrh	r3, [r7, #4]
 8000aa0:	b2d9      	uxtb	r1, r3
 8000aa2:	88fb      	ldrh	r3, [r7, #6]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	887b      	ldrh	r3, [r7, #2]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	4413      	add	r3, r2
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	b2dc      	uxtb	r4, r3
 8000ab2:	88bb      	ldrh	r3, [r7, #4]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	883b      	ldrh	r3, [r7, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	4413      	add	r3, r2
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4622      	mov	r2, r4
 8000ac4:	f7ff fea7 	bl	8000816 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000ac8:	8c3b      	ldrh	r3, [r7, #32]
 8000aca:	0a1b      	lsrs	r3, r3, #8
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	733b      	strb	r3, [r7, #12]
 8000ad2:	8c3b      	ldrh	r3, [r7, #32]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ade:	4812      	ldr	r0, [pc, #72]	@ (8000b28 <ST7735_FillRectangle+0xe0>)
 8000ae0:	f003 fd42 	bl	8004568 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000ae4:	883b      	ldrh	r3, [r7, #0]
 8000ae6:	80bb      	strh	r3, [r7, #4]
 8000ae8:	e013      	b.n	8000b12 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	80fb      	strh	r3, [r7, #6]
 8000aee:	e00a      	b.n	8000b06 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000af0:	f107 010c 	add.w	r1, r7, #12
 8000af4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000af8:	2202      	movs	r2, #2
 8000afa:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <ST7735_FillRectangle+0xe4>)
 8000afc:	f00a f9f2 	bl	800aee4 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000b00:	88fb      	ldrh	r3, [r7, #6]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	80fb      	strh	r3, [r7, #6]
 8000b06:	88fb      	ldrh	r3, [r7, #6]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1f1      	bne.n	8000af0 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8000b0c:	88bb      	ldrh	r3, [r7, #4]
 8000b0e:	3b01      	subs	r3, #1
 8000b10:	80bb      	strh	r3, [r7, #4]
 8000b12:	88bb      	ldrh	r3, [r7, #4]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1e8      	bne.n	8000aea <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8000b18:	f7ff fddc 	bl	80006d4 <ST7735_Unselect>
 8000b1c:	e000      	b.n	8000b20 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000b1e:	bf00      	nop
}
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd90      	pop	{r4, r7, pc}
 8000b26:	bf00      	nop
 8000b28:	58021000 	.word	0x58021000
 8000b2c:	24000434 	.word	0x24000434

08000b30 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af02      	add	r7, sp, #8
 8000b36:	4603      	mov	r3, r0
 8000b38:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8000b3a:	88fb      	ldrh	r3, [r7, #6]
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2350      	movs	r3, #80	@ 0x50
 8000b40:	22a0      	movs	r2, #160	@ 0xa0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2000      	movs	r0, #0
 8000b46:	f7ff ff7f 	bl	8000a48 <ST7735_FillRectangle>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	f5ad 6d92 	sub.w	sp, sp, #1168	@ 0x490
 8000b5a:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b5c:	f001 f8ba 	bl	8001cd4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b60:	f001 fcc4 	bl	80024ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b64:	f000 fbde 	bl	8001324 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000b68:	f000 fc5a 	bl	8001420 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b6c:	f000 fe88 	bl	8001880 <MX_GPIO_Init>
  MX_SPI4_Init();
 8000b70:	f000 fd96 	bl	80016a0 <MX_SPI4_Init>
  MX_ADC1_Init();
 8000b74:	f000 fc8a 	bl	800148c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b78:	f000 fd04 	bl	8001584 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000b7c:	f000 fde6 	bl	800174c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000b80:	f014 f820 	bl	8014bc4 <MX_USB_DEVICE_Init>
  MX_SDMMC1_SD_Init();
 8000b84:	f000 fd68 	bl	8001658 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8000b88:	f00e fbf8 	bl	800f37c <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8000b8c:	f000 fe2c 	bl	80017e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // init display
  ST7735_Init();
 8000b90:	f7ff fe7e 	bl	8000890 <ST7735_Init>

  // clear display
  ST7735_FillScreen(0x0000);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff ffcb 	bl	8000b30 <ST7735_FillScreen>

  // adc calibration
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED, DISABLE);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000ba0:	485b      	ldr	r0, [pc, #364]	@ (8000d10 <main+0x1bc>)
 8000ba2:	f003 f84f 	bl	8003c44 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED, DISABLE);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8000bac:	4859      	ldr	r0, [pc, #356]	@ (8000d14 <main+0x1c0>)
 8000bae:	f003 f849 	bl	8003c44 <HAL_ADCEx_Calibration_Start>

  // start timer
  HAL_TIM_Base_Start_IT(&htim2);
 8000bb2:	4859      	ldr	r0, [pc, #356]	@ (8000d18 <main+0x1c4>)
 8000bb4:	f00a fcc4 	bl	800b540 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // definitions for upper and lower threshold
  uint16_t upper_thresh = 400;
 8000bb8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000bbc:	f8a7 3436 	strh.w	r3, [r7, #1078]	@ 0x436
  uint16_t lower_thresh = 300;
 8000bc0:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000bc4:	f8a7 3434 	strh.w	r3, [r7, #1076]	@ 0x434

  // define allowed coincidence time difference
  uint16_t coincidence_window = 100;
 8000bc8:	2364      	movs	r3, #100	@ 0x64
 8000bca:	f8a7 3432 	strh.w	r3, [r7, #1074]	@ 0x432

  bool triggered = false;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	f887 347f 	strb.w	r3, [r7, #1151]	@ 0x47f
  bool triggered2 = false;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f887 347e 	strb.w	r3, [r7, #1150]	@ 0x47e

  uint32_t sumval = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
  uint32_t conv_cnt = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
  uint16_t res_val = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8a7 3430 	strh.w	r3, [r7, #1072]	@ 0x430

  uint32_t sumval2 = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 3470 	str.w	r3, [r7, #1136]	@ 0x470
  uint32_t conv_cnt2 = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
  uint16_t res_val2 = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8a7 342e 	strh.w	r3, [r7, #1070]	@ 0x42e

  uint32_t c1_evt_cnt = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 3468 	str.w	r3, [r7, #1128]	@ 0x468
  uint32_t c2_evt_cnt = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
  uint32_t coinc_evt_cnt = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460

  uint32_t times1[100];
  uint8_t counter1 = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	f887 345f 	strb.w	r3, [r7, #1119]	@ 0x45f
  float rate1 = 0;
 8000c16:	f04f 0300 	mov.w	r3, #0
 8000c1a:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8000c1e:	6013      	str	r3, [r2, #0]

  uint32_t times2[100];
  uint8_t counter2 = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
  float rate2 = 0;
 8000c26:	f04f 0300 	mov.w	r3, #0
 8000c2a:	f507 628a 	add.w	r2, r7, #1104	@ 0x450
 8000c2e:	6013      	str	r3, [r2, #0]

  uint32_t coinc_times[20];
  uint8_t coinc_count = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
  float coinc_rate = 0;
 8000c36:	f04f 0300 	mov.w	r3, #0
 8000c3a:	f507 6289 	add.w	r2, r7, #1096	@ 0x448
 8000c3e:	6013      	str	r3, [r2, #0]

  uint32_t last_count1 = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
  uint32_t last_count2 = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440

  ST7735_WriteString(0, 10, "No events.", Font_7x10, 0xFFFF, 0x0000);
 8000c4c:	4b33      	ldr	r3, [pc, #204]	@ (8000d1c <main+0x1c8>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	9202      	str	r2, [sp, #8]
 8000c52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c56:	9201      	str	r2, [sp, #4]
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	9200      	str	r2, [sp, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a30      	ldr	r2, [pc, #192]	@ (8000d20 <main+0x1cc>)
 8000c60:	210a      	movs	r1, #10
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fea5 	bl	80009b2 <ST7735_WriteString>
  ST7735_WriteString(0, 30, "No events.", Font_7x10, 0xFFFF, 0x0000);
 8000c68:	4b2c      	ldr	r3, [pc, #176]	@ (8000d1c <main+0x1c8>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	9202      	str	r2, [sp, #8]
 8000c6e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c72:	9201      	str	r2, [sp, #4]
 8000c74:	685a      	ldr	r2, [r3, #4]
 8000c76:	9200      	str	r2, [sp, #0]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a29      	ldr	r2, [pc, #164]	@ (8000d20 <main+0x1cc>)
 8000c7c:	211e      	movs	r1, #30
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff fe97 	bl	80009b2 <ST7735_WriteString>

  float vref = 3.3f; // Referenzspannung
 8000c84:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <main+0x1d0>)
 8000c86:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8000c8a:	6013      	str	r3, [r2, #0]

  uint32_t microsecs = __HAL_TIM_GET_COUNTER(&htim2);
 8000c8c:	4b22      	ldr	r3, [pc, #136]	@ (8000d18 <main+0x1c4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c92:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
  uint32_t microsecs2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000c96:	4b20      	ldr	r3, [pc, #128]	@ (8000d18 <main+0x1c4>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9c:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438

  findNewFilename();
 8000ca0:	f000 ffd6 	bl	8001c50 <findNewFilename>

  while (1)
  {
	      char buf[40];
	      HAL_ADC_Start(&hadc1);
 8000ca4:	481a      	ldr	r0, [pc, #104]	@ (8000d10 <main+0x1bc>)
 8000ca6:	f002 f8c1 	bl	8002e2c <HAL_ADC_Start>
	      HAL_ADC_Start(&hadc2);
 8000caa:	481a      	ldr	r0, [pc, #104]	@ (8000d14 <main+0x1c0>)
 8000cac:	f002 f8be 	bl	8002e2c <HAL_ADC_Start>
	      HAL_ADC_PollForConversion(&hadc1, 1);
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4817      	ldr	r0, [pc, #92]	@ (8000d10 <main+0x1bc>)
 8000cb4:	f002 f984 	bl	8002fc0 <HAL_ADC_PollForConversion>
	      HAL_ADC_PollForConversion(&hadc2, 1);
 8000cb8:	2101      	movs	r1, #1
 8000cba:	4816      	ldr	r0, [pc, #88]	@ (8000d14 <main+0x1c0>)
 8000cbc:	f002 f980 	bl	8002fc0 <HAL_ADC_PollForConversion>
	      uint16_t val = HAL_ADC_GetValue(&hadc1);
 8000cc0:	4813      	ldr	r0, [pc, #76]	@ (8000d10 <main+0x1bc>)
 8000cc2:	f002 fa71 	bl	80031a8 <HAL_ADC_GetValue>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	f8a7 3426 	strh.w	r3, [r7, #1062]	@ 0x426
	      uint16_t val2 = HAL_ADC_GetValue(&hadc2);
 8000ccc:	4811      	ldr	r0, [pc, #68]	@ (8000d14 <main+0x1c0>)
 8000cce:	f002 fa6b 	bl	80031a8 <HAL_ADC_GetValue>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	f8a7 3424 	strh.w	r3, [r7, #1060]	@ 0x424

	      // process data from 1st ADC
	      if (val >= upper_thresh) {
 8000cd8:	f8b7 2426 	ldrh.w	r2, [r7, #1062]	@ 0x426
 8000cdc:	f8b7 3436 	ldrh.w	r3, [r7, #1078]	@ 0x436
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d323      	bcc.n	8000d2c <main+0x1d8>
	    	  triggered = true;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	f887 347f 	strb.w	r3, [r7, #1151]	@ 0x47f
	    	  sumval = sumval + val;
 8000cea:	f8b7 3426 	ldrh.w	r3, [r7, #1062]	@ 0x426
 8000cee:	f8d7 2478 	ldr.w	r2, [r7, #1144]	@ 0x478
 8000cf2:	4413      	add	r3, r2
 8000cf4:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
	    	  conv_cnt++;
 8000cf8:	f8d7 3474 	ldr.w	r3, [r7, #1140]	@ 0x474
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
	    	  microsecs = __HAL_TIM_GET_COUNTER(&htim2);
 8000d02:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <main+0x1c4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d08:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 8000d0c:	e127      	b.n	8000f5e <main+0x40a>
 8000d0e:	bf00      	nop
 8000d10:	240002f0 	.word	0x240002f0
 8000d14:	24000354 	.word	0x24000354
 8000d18:	240004bc 	.word	0x240004bc
 8000d1c:	24000000 	.word	0x24000000
 8000d20:	080181d0 	.word	0x080181d0
 8000d24:	40533333 	.word	0x40533333
 8000d28:	457ff000 	.word	0x457ff000
	      } else if ((val < lower_thresh) && (triggered)) {
 8000d2c:	f8b7 2426 	ldrh.w	r2, [r7, #1062]	@ 0x426
 8000d30:	f8b7 3434 	ldrh.w	r3, [r7, #1076]	@ 0x434
 8000d34:	429a      	cmp	r2, r3
 8000d36:	f080 8112 	bcs.w	8000f5e <main+0x40a>
 8000d3a:	f897 347f 	ldrb.w	r3, [r7, #1151]	@ 0x47f
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f000 810d 	beq.w	8000f5e <main+0x40a>
	    	  res_val = (uint16_t)round(sumval/conv_cnt);
 8000d44:	f8d7 2478 	ldr.w	r2, [r7, #1144]	@ 0x478
 8000d48:	f8d7 3474 	ldr.w	r3, [r7, #1140]	@ 0x474
 8000d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d50:	ee07 3a90 	vmov	s15, r3
 8000d54:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d5c:	ee17 3a90 	vmov	r3, s15
 8000d60:	f8a7 3430 	strh.w	r3, [r7, #1072]	@ 0x430

	    	  float voltage = (res_val / 4095.0f) * vref;
 8000d64:	f8b7 3430 	ldrh.w	r3, [r7, #1072]	@ 0x430
 8000d68:	ee07 3a90 	vmov	s15, r3
 8000d6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d70:	ed5f 6a13 	vldr	s13, [pc, #-76]	@ 8000d28 <main+0x1d4>
 8000d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d78:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8000d7c:	ed93 7a00 	vldr	s14, [r3]
 8000d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d84:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000d88:	edc3 7a00 	vstr	s15, [r3]
	     	  sprintf(buf, "%lu | %.3f V   ", microsecs, voltage);
 8000d8c:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000d90:	edd3 7a00 	vldr	s15, [r3]
 8000d94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d98:	463b      	mov	r3, r7
 8000d9a:	ed8d 7b00 	vstr	d7, [sp]
 8000d9e:	f8d7 243c 	ldr.w	r2, [r7, #1084]	@ 0x43c
 8000da2:	497c      	ldr	r1, [pc, #496]	@ (8000f94 <main+0x440>)
 8000da4:	4618      	mov	r0, r3
 8000da6:	f015 f9fb 	bl	80161a0 <siprintf>
	          ST7735_WriteString(0, 10, buf, Font_7x10, 0xFFFF, 0x0000);
 8000daa:	4b7b      	ldr	r3, [pc, #492]	@ (8000f98 <main+0x444>)
 8000dac:	4639      	mov	r1, r7
 8000dae:	2200      	movs	r2, #0
 8000db0:	9202      	str	r2, [sp, #8]
 8000db2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000db6:	9201      	str	r2, [sp, #4]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	9200      	str	r2, [sp, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	460a      	mov	r2, r1
 8000dc0:	210a      	movs	r1, #10
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f7ff fdf5 	bl	80009b2 <ST7735_WriteString>

	          times1[counter1] = microsecs;
 8000dc8:	f897 245f 	ldrb.w	r2, [r7, #1119]	@ 0x45f
 8000dcc:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8000dd0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000dd4:	f8d7 143c 	ldr.w	r1, [r7, #1084]	@ 0x43c
 8000dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	          counter1++;
 8000ddc:	f897 345f 	ldrb.w	r3, [r7, #1119]	@ 0x45f
 8000de0:	3301      	adds	r3, #1
 8000de2:	f887 345f 	strb.w	r3, [r7, #1119]	@ 0x45f

	          transmitToTracker(5.50, 10.22, 15.2334);
 8000de6:	ed9f 1a6d 	vldr	s2, [pc, #436]	@ 8000f9c <main+0x448>
 8000dea:	eddf 0a6d 	vldr	s1, [pc, #436]	@ 8000fa0 <main+0x44c>
 8000dee:	eeb1 0a06 	vmov.f32	s0, #22	@ 0x40b00000  5.5
 8000df2:	f000 fdd7 	bl	80019a4 <transmitToTracker>

	          last_count1 = microsecs;
 8000df6:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8000dfa:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
	          if (counter1 == 100) {
 8000dfe:	f897 345f 	ldrb.w	r3, [r7, #1119]	@ 0x45f
 8000e02:	2b64      	cmp	r3, #100	@ 0x64
 8000e04:	d155      	bne.n	8000eb2 <main+0x35e>
	        	  uint32_t timediff = times1[99]-times1[0];
 8000e06:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8000e0a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000e0e:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 8000e12:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8000e16:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
	        	  float timediff_in_min = timediff / 60000000.0f;
 8000e22:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e2e:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8000fa4 <main+0x450>
 8000e32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e36:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000e3a:	edc3 7a00 	vstr	s15, [r3]
	        	  rate1 = 100/timediff_in_min;
 8000e3e:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8000fa8 <main+0x454>
 8000e42:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000e46:	ed93 7a00 	vldr	s14, [r3]
 8000e4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e4e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000e52:	edc3 7a00 	vstr	s15, [r3]

	        	  char buf[20];
	        	  sprintf(buf, "%.1f", rate1);
 8000e56:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000e5a:	edd3 7a00 	vldr	s15, [r3]
 8000e5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e62:	f107 0064 	add.w	r0, r7, #100	@ 0x64
 8000e66:	ec53 2b17 	vmov	r2, r3, d7
 8000e6a:	4950      	ldr	r1, [pc, #320]	@ (8000fac <main+0x458>)
 8000e6c:	f015 f998 	bl	80161a0 <siprintf>
	        	  ST7735_WriteString(0, 70, buf, Font_7x10, 0xFFFF, 0x0000);
 8000e70:	4b49      	ldr	r3, [pc, #292]	@ (8000f98 <main+0x444>)
 8000e72:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 8000e76:	2200      	movs	r2, #0
 8000e78:	9202      	str	r2, [sp, #8]
 8000e7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e7e:	9201      	str	r2, [sp, #4]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	9200      	str	r2, [sp, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	460a      	mov	r2, r1
 8000e88:	2146      	movs	r1, #70	@ 0x46
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	f7ff fd91 	bl	80009b2 <ST7735_WriteString>

	        	  transmitToTracker(rate1, rate2, coinc_rate);
 8000e90:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8000e94:	ed93 1a00 	vldr	s2, [r3]
 8000e98:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8000e9c:	edd3 0a00 	vldr	s1, [r3]
 8000ea0:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8000ea4:	ed93 0a00 	vldr	s0, [r3]
 8000ea8:	f000 fd7c 	bl	80019a4 <transmitToTracker>

	        	  counter1 = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 345f 	strb.w	r3, [r7, #1119]	@ 0x45f
	          }

	          char usbbuf[20];
	          uint8_t buflen = sprintf(usbbuf, "0,%lu,%.3f\n", microsecs, voltage);
 8000eb2:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000eb6:	edd3 7a00 	vldr	s15, [r3]
 8000eba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ebe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000ec2:	ed8d 7b00 	vstr	d7, [sp]
 8000ec6:	f8d7 243c 	ldr.w	r2, [r7, #1084]	@ 0x43c
 8000eca:	4939      	ldr	r1, [pc, #228]	@ (8000fb0 <main+0x45c>)
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f015 f967 	bl	80161a0 <siprintf>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
	          logToSD(usbbuf, buflen);
 8000ed8:	f897 2417 	ldrb.w	r2, [r7, #1047]	@ 0x417
 8000edc:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fd94 	bl	8001a10 <logToSD>
	          CDC_Transmit_FS((uint8_t*)usbbuf, buflen);
 8000ee8:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f013 ff25 	bl	8014d44 <CDC_Transmit_FS>

	          c1_evt_cnt++;
 8000efa:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 8000efe:	3301      	adds	r3, #1
 8000f00:	f8c7 3468 	str.w	r3, [r7, #1128]	@ 0x468

	          if ((c1_evt_cnt % 100) == 0) {
 8000f04:	f8d7 2468 	ldr.w	r2, [r7, #1128]	@ 0x468
 8000f08:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb4 <main+0x460>)
 8000f0a:	fba3 1302 	umull	r1, r3, r3, r2
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2164      	movs	r1, #100	@ 0x64
 8000f12:	fb01 f303 	mul.w	r3, r1, r3
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d101      	bne.n	8000f20 <main+0x3cc>
	        	  findNewFilename();
 8000f1c:	f000 fe98 	bl	8001c50 <findNewFilename>
	          }

	    	  sumval = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
	    	  conv_cnt = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
	     	  triggered = false;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f887 347f 	strb.w	r3, [r7, #1151]	@ 0x47f

		      sprintf(buf, "%lu", c1_evt_cnt);
 8000f32:	463b      	mov	r3, r7
 8000f34:	f8d7 2468 	ldr.w	r2, [r7, #1128]	@ 0x468
 8000f38:	491f      	ldr	r1, [pc, #124]	@ (8000fb8 <main+0x464>)
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f015 f930 	bl	80161a0 <siprintf>
		      ST7735_WriteString(0, 50, buf, Font_7x10, 0xFFFF, 0x0000);
 8000f40:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <main+0x444>)
 8000f42:	4639      	mov	r1, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	9202      	str	r2, [sp, #8]
 8000f48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f4c:	9201      	str	r2, [sp, #4]
 8000f4e:	685a      	ldr	r2, [r3, #4]
 8000f50:	9200      	str	r2, [sp, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	460a      	mov	r2, r1
 8000f56:	2132      	movs	r1, #50	@ 0x32
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f7ff fd2a 	bl	80009b2 <ST7735_WriteString>
	      }

	      // process data from 2nd ADC
	      if (val2 >= upper_thresh) {
 8000f5e:	f8b7 2424 	ldrh.w	r2, [r7, #1060]	@ 0x424
 8000f62:	f8b7 3436 	ldrh.w	r3, [r7, #1078]	@ 0x436
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d32c      	bcc.n	8000fc4 <main+0x470>
	    	  triggered2 = true;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f887 347e 	strb.w	r3, [r7, #1150]	@ 0x47e
	      	  sumval2 = sumval2 + val2;
 8000f70:	f8b7 3424 	ldrh.w	r3, [r7, #1060]	@ 0x424
 8000f74:	f8d7 2470 	ldr.w	r2, [r7, #1136]	@ 0x470
 8000f78:	4413      	add	r3, r2
 8000f7a:	f8c7 3470 	str.w	r3, [r7, #1136]	@ 0x470
	      	  conv_cnt2++;
 8000f7e:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 8000f82:	3301      	adds	r3, #1
 8000f84:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
	    	  microsecs2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000f88:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <main+0x468>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8e:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 8000f92:	e11a      	b.n	80011ca <main+0x676>
 8000f94:	080181dc 	.word	0x080181dc
 8000f98:	24000000 	.word	0x24000000
 8000f9c:	4173bc02 	.word	0x4173bc02
 8000fa0:	4123851f 	.word	0x4123851f
 8000fa4:	4c64e1c0 	.word	0x4c64e1c0
 8000fa8:	42c80000 	.word	0x42c80000
 8000fac:	080181ec 	.word	0x080181ec
 8000fb0:	080181f4 	.word	0x080181f4
 8000fb4:	51eb851f 	.word	0x51eb851f
 8000fb8:	08018200 	.word	0x08018200
 8000fbc:	240004bc 	.word	0x240004bc
 8000fc0:	457ff000 	.word	0x457ff000
	      } else if ((val2 < lower_thresh) && (triggered2)) {
 8000fc4:	f8b7 2424 	ldrh.w	r2, [r7, #1060]	@ 0x424
 8000fc8:	f8b7 3434 	ldrh.w	r3, [r7, #1076]	@ 0x434
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f080 80fc 	bcs.w	80011ca <main+0x676>
 8000fd2:	f897 347e 	ldrb.w	r3, [r7, #1150]	@ 0x47e
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 80f7 	beq.w	80011ca <main+0x676>
	    	  res_val2 = (uint16_t)round(sumval2/conv_cnt2);
 8000fdc:	f8d7 2470 	ldr.w	r2, [r7, #1136]	@ 0x470
 8000fe0:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 8000fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe8:	ee07 3a90 	vmov	s15, r3
 8000fec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ff0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ff4:	ee17 3a90 	vmov	r3, s15
 8000ff8:	f8a7 342e 	strh.w	r3, [r7, #1070]	@ 0x42e

	    	  float voltage2 = (res_val2 / 4095.0f) * vref;
 8000ffc:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	@ 0x42e
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001008:	ed5f 6a13 	vldr	s13, [pc, #-76]	@ 8000fc0 <main+0x46c>
 800100c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001010:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001014:	ed93 7a00 	vldr	s14, [r3]
 8001018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101c:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001020:	edc3 7a00 	vstr	s15, [r3]
	     	  sprintf(buf, "%lu | %.3f V   ", microsecs2, voltage2);
 8001024:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001028:	edd3 7a00 	vldr	s15, [r3]
 800102c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001030:	463b      	mov	r3, r7
 8001032:	ed8d 7b00 	vstr	d7, [sp]
 8001036:	f8d7 2438 	ldr.w	r2, [r7, #1080]	@ 0x438
 800103a:	49b3      	ldr	r1, [pc, #716]	@ (8001308 <main+0x7b4>)
 800103c:	4618      	mov	r0, r3
 800103e:	f015 f8af 	bl	80161a0 <siprintf>
	          ST7735_WriteString(0, 30, buf, Font_7x10, 0xFFFF, 0x0000);
 8001042:	4bb2      	ldr	r3, [pc, #712]	@ (800130c <main+0x7b8>)
 8001044:	4639      	mov	r1, r7
 8001046:	2200      	movs	r2, #0
 8001048:	9202      	str	r2, [sp, #8]
 800104a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800104e:	9201      	str	r2, [sp, #4]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	9200      	str	r2, [sp, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	460a      	mov	r2, r1
 8001058:	211e      	movs	r1, #30
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fca9 	bl	80009b2 <ST7735_WriteString>

	          times2[counter2] = microsecs2;
 8001060:	f897 2457 	ldrb.w	r2, [r7, #1111]	@ 0x457
 8001064:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001068:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 800106c:	f8d7 1438 	ldr.w	r1, [r7, #1080]	@ 0x438
 8001070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	          counter2++;
 8001074:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 8001078:	3301      	adds	r3, #1
 800107a:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457

	          last_count2 = microsecs2;
 800107e:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8001082:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440

	          if (counter2 == 100) {
 8001086:	f897 3457 	ldrb.w	r3, [r7, #1111]	@ 0x457
 800108a:	2b64      	cmp	r3, #100	@ 0x64
 800108c:	d155      	bne.n	800113a <main+0x5e6>
	        	  uint32_t timediff = times2[99]-times2[0];
 800108e:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001092:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8001096:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 800109a:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800109e:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
	          	  float timediff_in_min = timediff / 60000000.0f;
 80010aa:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010b6:	eddf 6a96 	vldr	s13, [pc, #600]	@ 8001310 <main+0x7bc>
 80010ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010be:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80010c2:	edc3 7a00 	vstr	s15, [r3]
	          	  rate2 = 100/timediff_in_min;
 80010c6:	eddf 6a93 	vldr	s13, [pc, #588]	@ 8001314 <main+0x7c0>
 80010ca:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80010ce:	ed93 7a00 	vldr	s14, [r3]
 80010d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010d6:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80010da:	edc3 7a00 	vstr	s15, [r3]

	          	  char buf[20];
	          	  sprintf(buf, "%.1f", rate2);
 80010de:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010ea:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80010ee:	ec53 2b17 	vmov	r2, r3, d7
 80010f2:	4989      	ldr	r1, [pc, #548]	@ (8001318 <main+0x7c4>)
 80010f4:	f015 f854 	bl	80161a0 <siprintf>
	          	  ST7735_WriteString(60, 70, buf, Font_7x10, 0xFFFF, 0x0000);
 80010f8:	4b84      	ldr	r3, [pc, #528]	@ (800130c <main+0x7b8>)
 80010fa:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80010fe:	2200      	movs	r2, #0
 8001100:	9202      	str	r2, [sp, #8]
 8001102:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001106:	9201      	str	r2, [sp, #4]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	9200      	str	r2, [sp, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	460a      	mov	r2, r1
 8001110:	2146      	movs	r1, #70	@ 0x46
 8001112:	203c      	movs	r0, #60	@ 0x3c
 8001114:	f7ff fc4d 	bl	80009b2 <ST7735_WriteString>

	        	  transmitToTracker(rate1, rate2, coinc_rate);
 8001118:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 800111c:	ed93 1a00 	vldr	s2, [r3]
 8001120:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8001124:	edd3 0a00 	vldr	s1, [r3]
 8001128:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800112c:	ed93 0a00 	vldr	s0, [r3]
 8001130:	f000 fc38 	bl	80019a4 <transmitToTracker>

	          	  counter2 = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	f887 3457 	strb.w	r3, [r7, #1111]	@ 0x457
	          }

	          char usbbuf[20];
	          uint8_t buflen = sprintf(usbbuf, "1,%lu,%.3f\n", microsecs2, voltage2);
 800113a:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800113e:	edd3 7a00 	vldr	s15, [r3]
 8001142:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001146:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800114a:	ed8d 7b00 	vstr	d7, [sp]
 800114e:	f8d7 2438 	ldr.w	r2, [r7, #1080]	@ 0x438
 8001152:	4972      	ldr	r1, [pc, #456]	@ (800131c <main+0x7c8>)
 8001154:	4618      	mov	r0, r3
 8001156:	f015 f823 	bl	80161a0 <siprintf>
 800115a:	4603      	mov	r3, r0
 800115c:	f887 3407 	strb.w	r3, [r7, #1031]	@ 0x407
	          logToSD(usbbuf, buflen);
 8001160:	f897 2407 	ldrb.w	r2, [r7, #1031]	@ 0x407
 8001164:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001168:	4611      	mov	r1, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f000 fc50 	bl	8001a10 <logToSD>
	          CDC_Transmit_FS((uint8_t*)usbbuf, buflen);
 8001170:	f897 3407 	ldrb.w	r3, [r7, #1031]	@ 0x407
 8001174:	b29a      	uxth	r2, r3
 8001176:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800117a:	4611      	mov	r1, r2
 800117c:	4618      	mov	r0, r3
 800117e:	f013 fde1 	bl	8014d44 <CDC_Transmit_FS>

	          c2_evt_cnt++;
 8001182:	f8d7 3464 	ldr.w	r3, [r7, #1124]	@ 0x464
 8001186:	3301      	adds	r3, #1
 8001188:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
	    	  sumval2 = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 3470 	str.w	r3, [r7, #1136]	@ 0x470
	    	  conv_cnt2 = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
	     	  triggered2 = false;
 8001198:	2300      	movs	r3, #0
 800119a:	f887 347e 	strb.w	r3, [r7, #1150]	@ 0x47e

	     	  sprintf(buf, "%lu", c2_evt_cnt);
 800119e:	463b      	mov	r3, r7
 80011a0:	f8d7 2464 	ldr.w	r2, [r7, #1124]	@ 0x464
 80011a4:	495e      	ldr	r1, [pc, #376]	@ (8001320 <main+0x7cc>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f014 fffa 	bl	80161a0 <siprintf>
		      ST7735_WriteString(60, 50, buf, Font_7x10, 0xFFFF, 0x0000);
 80011ac:	4b57      	ldr	r3, [pc, #348]	@ (800130c <main+0x7b8>)
 80011ae:	4639      	mov	r1, r7
 80011b0:	2200      	movs	r2, #0
 80011b2:	9202      	str	r2, [sp, #8]
 80011b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011b8:	9201      	str	r2, [sp, #4]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	9200      	str	r2, [sp, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	460a      	mov	r2, r1
 80011c2:	2132      	movs	r1, #50	@ 0x32
 80011c4:	203c      	movs	r0, #60	@ 0x3c
 80011c6:	f7ff fbf4 	bl	80009b2 <ST7735_WriteString>
	      }


	      if ((last_count1 > 0) && (last_count2 > 0)) {
 80011ca:	f8d7 3444 	ldr.w	r3, [r7, #1092]	@ 0x444
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f43f ad68 	beq.w	8000ca4 <main+0x150>
 80011d4:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f43f ad63 	beq.w	8000ca4 <main+0x150>
	    	  if (abs(last_count1-last_count2) < coincidence_window) {
 80011de:	f8d7 2444 	ldr.w	r2, [r7, #1092]	@ 0x444
 80011e2:	f8d7 3440 	ldr.w	r3, [r7, #1088]	@ 0x440
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80011ec:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80011f0:	f8b7 3432 	ldrh.w	r3, [r7, #1074]	@ 0x432
 80011f4:	429a      	cmp	r2, r3
 80011f6:	da2f      	bge.n	8001258 <main+0x704>
	    		  coinc_evt_cnt++;
 80011f8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	@ 0x460
 80011fc:	3301      	adds	r3, #1
 80011fe:	f8c7 3460 	str.w	r3, [r7, #1120]	@ 0x460

	    		  coinc_times[coinc_count] = last_count1;
 8001202:	f897 244f 	ldrb.w	r2, [r7, #1103]	@ 0x44f
 8001206:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800120a:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 800120e:	f8d7 1444 	ldr.w	r1, [r7, #1092]	@ 0x444
 8001212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				  coinc_count++;
 8001216:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 800121a:	3301      	adds	r3, #1
 800121c:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f

	    		  sprintf(buf, "%lu", coinc_evt_cnt);
 8001220:	463b      	mov	r3, r7
 8001222:	f8d7 2460 	ldr.w	r2, [r7, #1120]	@ 0x460
 8001226:	493e      	ldr	r1, [pc, #248]	@ (8001320 <main+0x7cc>)
 8001228:	4618      	mov	r0, r3
 800122a:	f014 ffb9 	bl	80161a0 <siprintf>
	    		  ST7735_WriteString(120, 50, buf, Font_7x10, 0xF800, 0x0000);
 800122e:	4b37      	ldr	r3, [pc, #220]	@ (800130c <main+0x7b8>)
 8001230:	4639      	mov	r1, r7
 8001232:	2200      	movs	r2, #0
 8001234:	9202      	str	r2, [sp, #8]
 8001236:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800123a:	9201      	str	r2, [sp, #4]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	9200      	str	r2, [sp, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	460a      	mov	r2, r1
 8001244:	2132      	movs	r1, #50	@ 0x32
 8001246:	2078      	movs	r0, #120	@ 0x78
 8001248:	f7ff fbb3 	bl	80009b2 <ST7735_WriteString>

	    		  last_count1 = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
	    		  last_count2 = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	f8c7 3440 	str.w	r3, [r7, #1088]	@ 0x440
	    	  }

	    	  if (coinc_count == 20) {
 8001258:	f897 344f 	ldrb.w	r3, [r7, #1103]	@ 0x44f
 800125c:	2b14      	cmp	r3, #20
 800125e:	f47f ad21 	bne.w	8000ca4 <main+0x150>
	    		  uint32_t timediff = coinc_times[19]-coinc_times[0];
 8001262:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001266:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 800126a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800126c:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8001270:	f5a3 737d 	sub.w	r3, r3, #1012	@ 0x3f4
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
	    		  float timediff_in_min = timediff / 60000000.0f;
 800127c:	f8d7 3400 	ldr.w	r3, [r7, #1024]	@ 0x400
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001288:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8001310 <main+0x7bc>
 800128c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001290:	edc7 7aff 	vstr	s15, [r7, #1020]	@ 0x3fc
	    		  coinc_rate = 20/timediff_in_min;
 8001294:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 8001298:	ed97 7aff 	vldr	s14, [r7, #1020]	@ 0x3fc
 800129c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012a0:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80012a4:	edc3 7a00 	vstr	s15, [r3]

	    		  char buf[20];
	    		  sprintf(buf, "%.1f", coinc_rate);
 80012a8:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80012ac:	edd3 7a00 	vldr	s15, [r3]
 80012b0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012b4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80012b8:	ec53 2b17 	vmov	r2, r3, d7
 80012bc:	4916      	ldr	r1, [pc, #88]	@ (8001318 <main+0x7c4>)
 80012be:	f014 ff6f 	bl	80161a0 <siprintf>
	    		  ST7735_WriteString(120, 70, buf, Font_7x10, 0xFFFF, 0x0000);
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <main+0x7b8>)
 80012c4:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80012c8:	2200      	movs	r2, #0
 80012ca:	9202      	str	r2, [sp, #8]
 80012cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012d0:	9201      	str	r2, [sp, #4]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	9200      	str	r2, [sp, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	460a      	mov	r2, r1
 80012da:	2146      	movs	r1, #70	@ 0x46
 80012dc:	2078      	movs	r0, #120	@ 0x78
 80012de:	f7ff fb68 	bl	80009b2 <ST7735_WriteString>

	        	  transmitToTracker(rate1, rate2, coinc_rate);
 80012e2:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80012e6:	ed93 1a00 	vldr	s2, [r3]
 80012ea:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80012ee:	edd3 0a00 	vldr	s1, [r3]
 80012f2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80012f6:	ed93 0a00 	vldr	s0, [r3]
 80012fa:	f000 fb53 	bl	80019a4 <transmitToTracker>

	    		  coinc_count = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	f887 344f 	strb.w	r3, [r7, #1103]	@ 0x44f
  {
 8001304:	e4ce      	b.n	8000ca4 <main+0x150>
 8001306:	bf00      	nop
 8001308:	080181dc 	.word	0x080181dc
 800130c:	24000000 	.word	0x24000000
 8001310:	4c64e1c0 	.word	0x4c64e1c0
 8001314:	42c80000 	.word	0x42c80000
 8001318:	080181ec 	.word	0x080181ec
 800131c:	08018204 	.word	0x08018204
 8001320:	08018200 	.word	0x08018200

08001324 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b09c      	sub	sp, #112	@ 0x70
 8001328:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132e:	224c      	movs	r2, #76	@ 0x4c
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f014 ff99 	bl	801626a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2220      	movs	r2, #32
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f014 ff93 	bl	801626a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001344:	2002      	movs	r0, #2
 8001346:	f004 fbc9 	bl	8005adc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
 800134e:	4b32      	ldr	r3, [pc, #200]	@ (8001418 <SystemClock_Config+0xf4>)
 8001350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001352:	4a31      	ldr	r2, [pc, #196]	@ (8001418 <SystemClock_Config+0xf4>)
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800135a:	4b2f      	ldr	r3, [pc, #188]	@ (8001418 <SystemClock_Config+0xf4>)
 800135c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	4b2d      	ldr	r3, [pc, #180]	@ (800141c <SystemClock_Config+0xf8>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800136c:	4a2b      	ldr	r2, [pc, #172]	@ (800141c <SystemClock_Config+0xf8>)
 800136e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b29      	ldr	r3, [pc, #164]	@ (800141c <SystemClock_Config+0xf8>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001380:	bf00      	nop
 8001382:	4b26      	ldr	r3, [pc, #152]	@ (800141c <SystemClock_Config+0xf8>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800138a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800138e:	d1f8      	bne.n	8001382 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001390:	2321      	movs	r3, #33	@ 0x21
 8001392:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001394:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001398:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800139a:	2301      	movs	r3, #1
 800139c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139e:	2302      	movs	r3, #2
 80013a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a2:	2302      	movs	r3, #2
 80013a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80013a6:	2305      	movs	r3, #5
 80013a8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 80013aa:	2360      	movs	r3, #96	@ 0x60
 80013ac:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013ae:	2302      	movs	r3, #2
 80013b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80013ba:	2308      	movs	r3, #8
 80013bc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013be:	2300      	movs	r3, #0
 80013c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 fbd0 	bl	8005b70 <HAL_RCC_OscConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80013d6:	f000 fca9 	bl	8001d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013da:	233f      	movs	r3, #63	@ 0x3f
 80013dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013de:	2303      	movs	r3, #3
 80013e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013e6:	2308      	movs	r3, #8
 80013e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013f6:	2340      	movs	r3, #64	@ 0x40
 80013f8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2102      	movs	r1, #2
 80013fe:	4618      	mov	r0, r3
 8001400:	f005 f810 	bl	8006424 <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800140a:	f000 fc8f 	bl	8001d2c <Error_Handler>
  }
}
 800140e:	bf00      	nop
 8001410:	3770      	adds	r7, #112	@ 0x70
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	58000400 	.word	0x58000400
 800141c:	58024800 	.word	0x58024800

08001420 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b0b0      	sub	sp, #192	@ 0xc0
 8001424:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001426:	463b      	mov	r3, r7
 8001428:	22c0      	movs	r2, #192	@ 0xc0
 800142a:	2100      	movs	r1, #0
 800142c:	4618      	mov	r0, r3
 800142e:	f014 ff1c 	bl	801626a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
 8001432:	4a15      	ldr	r2, [pc, #84]	@ (8001488 <PeriphCommonClock_Config+0x68>)
 8001434:	f04f 0300 	mov.w	r3, #0
 8001438:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_USART2;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800143c:	2302      	movs	r3, #2
 800143e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001440:	230c      	movs	r3, #12
 8001442:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001444:	2302      	movs	r3, #2
 8001446:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001448:	2302      	movs	r3, #2
 800144a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800144c:	2302      	movs	r3, #2
 800144e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001450:	23c0      	movs	r3, #192	@ 0xc0
 8001452:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001454:	2320      	movs	r3, #32
 8001456:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800145c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001460:	653b      	str	r3, [r7, #80]	@ 0x50
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8001462:	2301      	movs	r3, #1
 8001464:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800146c:	463b      	mov	r3, r7
 800146e:	4618      	mov	r0, r3
 8001470:	f005 fb64 	bl	8006b3c <HAL_RCCEx_PeriphCLKConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 800147a:	f000 fc57 	bl	8001d2c <Error_Handler>
  }
}
 800147e:	bf00      	nop
 8001480:	37c0      	adds	r7, #192	@ 0xc0
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	00090002 	.word	0x00090002

0800148c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	@ 0x28
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
 80014ac:	615a      	str	r2, [r3, #20]
 80014ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014b0:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <MX_ADC1_Init+0xec>)
 80014b2:	4a32      	ldr	r2, [pc, #200]	@ (800157c <MX_ADC1_Init+0xf0>)
 80014b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80014b6:	4b30      	ldr	r3, [pc, #192]	@ (8001578 <MX_ADC1_Init+0xec>)
 80014b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80014bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014be:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <MX_ADC1_Init+0xec>)
 80014c0:	2208      	movs	r2, #8
 80014c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001578 <MX_ADC1_Init+0xec>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001578 <MX_ADC1_Init+0xec>)
 80014cc:	2204      	movs	r2, #4
 80014ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014d0:	4b29      	ldr	r3, [pc, #164]	@ (8001578 <MX_ADC1_Init+0xec>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014d6:	4b28      	ldr	r3, [pc, #160]	@ (8001578 <MX_ADC1_Init+0xec>)
 80014d8:	2200      	movs	r2, #0
 80014da:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80014dc:	4b26      	ldr	r3, [pc, #152]	@ (8001578 <MX_ADC1_Init+0xec>)
 80014de:	2201      	movs	r2, #1
 80014e0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014e2:	4b25      	ldr	r3, [pc, #148]	@ (8001578 <MX_ADC1_Init+0xec>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014e8:	4b23      	ldr	r3, [pc, #140]	@ (8001578 <MX_ADC1_Init+0xec>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014ee:	4b22      	ldr	r3, [pc, #136]	@ (8001578 <MX_ADC1_Init+0xec>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80014f4:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <MX_ADC1_Init+0xec>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <MX_ADC1_Init+0xec>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001500:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <MX_ADC1_Init+0xec>)
 8001502:	2200      	movs	r2, #0
 8001504:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001506:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <MX_ADC1_Init+0xec>)
 8001508:	2200      	movs	r2, #0
 800150a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 800150e:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <MX_ADC1_Init+0xec>)
 8001510:	2201      	movs	r2, #1
 8001512:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001514:	4818      	ldr	r0, [pc, #96]	@ (8001578 <MX_ADC1_Init+0xec>)
 8001516:	f001 fae7 	bl	8002ae8 <HAL_ADC_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001520:	f000 fc04 	bl	8001d2c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001524:	2300      	movs	r3, #0
 8001526:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4619      	mov	r1, r3
 800152e:	4812      	ldr	r0, [pc, #72]	@ (8001578 <MX_ADC1_Init+0xec>)
 8001530:	f002 fbec 	bl	8003d0c <HAL_ADCEx_MultiModeConfigChannel>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800153a:	f000 fbf7 	bl	8001d2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800153e:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <MX_ADC1_Init+0xf4>)
 8001540:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001542:	2306      	movs	r3, #6
 8001544:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800154a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800154e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001550:	2304      	movs	r3, #4
 8001552:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155c:	463b      	mov	r3, r7
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <MX_ADC1_Init+0xec>)
 8001562:	f001 fe2f 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800156c:	f000 fbde 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	@ 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	240002f0 	.word	0x240002f0
 800157c:	40022000 	.word	0x40022000
 8001580:	0c900008 	.word	0x0c900008

08001584 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
 8001598:	615a      	str	r2, [r3, #20]
 800159a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800159c:	4b2b      	ldr	r3, [pc, #172]	@ (800164c <MX_ADC2_Init+0xc8>)
 800159e:	4a2c      	ldr	r2, [pc, #176]	@ (8001650 <MX_ADC2_Init+0xcc>)
 80015a0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80015a2:	4b2a      	ldr	r3, [pc, #168]	@ (800164c <MX_ADC2_Init+0xc8>)
 80015a4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015a8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80015aa:	4b28      	ldr	r3, [pc, #160]	@ (800164c <MX_ADC2_Init+0xc8>)
 80015ac:	2208      	movs	r2, #8
 80015ae:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015b0:	4b26      	ldr	r3, [pc, #152]	@ (800164c <MX_ADC2_Init+0xc8>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015b6:	4b25      	ldr	r3, [pc, #148]	@ (800164c <MX_ADC2_Init+0xc8>)
 80015b8:	2204      	movs	r2, #4
 80015ba:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80015bc:	4b23      	ldr	r3, [pc, #140]	@ (800164c <MX_ADC2_Init+0xc8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80015c2:	4b22      	ldr	r3, [pc, #136]	@ (800164c <MX_ADC2_Init+0xc8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80015c8:	4b20      	ldr	r3, [pc, #128]	@ (800164c <MX_ADC2_Init+0xc8>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80015ce:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <MX_ADC2_Init+0xc8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	@ (800164c <MX_ADC2_Init+0xc8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015da:	4b1c      	ldr	r3, [pc, #112]	@ (800164c <MX_ADC2_Init+0xc8>)
 80015dc:	2200      	movs	r2, #0
 80015de:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80015e0:	4b1a      	ldr	r3, [pc, #104]	@ (800164c <MX_ADC2_Init+0xc8>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015e6:	4b19      	ldr	r3, [pc, #100]	@ (800164c <MX_ADC2_Init+0xc8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80015ec:	4b17      	ldr	r3, [pc, #92]	@ (800164c <MX_ADC2_Init+0xc8>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80015f2:	4b16      	ldr	r3, [pc, #88]	@ (800164c <MX_ADC2_Init+0xc8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Oversampling.Ratio = 1;
 80015fa:	4b14      	ldr	r3, [pc, #80]	@ (800164c <MX_ADC2_Init+0xc8>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001600:	4812      	ldr	r0, [pc, #72]	@ (800164c <MX_ADC2_Init+0xc8>)
 8001602:	f001 fa71 	bl	8002ae8 <HAL_ADC_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 800160c:	f000 fb8e 	bl	8001d2c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_18;
 8001610:	4b10      	ldr	r3, [pc, #64]	@ (8001654 <MX_ADC2_Init+0xd0>)
 8001612:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001614:	2306      	movs	r3, #6
 8001616:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800161c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001620:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001622:	2304      	movs	r3, #4
 8001624:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	@ (800164c <MX_ADC2_Init+0xc8>)
 8001634:	f001 fdc6 	bl	80031c4 <HAL_ADC_ConfigChannel>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 800163e:	f000 fb75 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	3720      	adds	r7, #32
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	24000354 	.word	0x24000354
 8001650:	40022100 	.word	0x40022100
 8001654:	4b840000 	.word	0x4b840000

08001658 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800165c:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <MX_SDMMC1_SD_Init+0x40>)
 800165e:	4a0f      	ldr	r2, [pc, #60]	@ (800169c <MX_SDMMC1_SD_Init+0x44>)
 8001660:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001662:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <MX_SDMMC1_SD_Init+0x40>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001668:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <MX_SDMMC1_SD_Init+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800166e:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <MX_SDMMC1_SD_Init+0x40>)
 8001670:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001674:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001676:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <MX_SDMMC1_SD_Init+0x40>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 8;
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <MX_SDMMC1_SD_Init+0x40>)
 800167e:	2208      	movs	r2, #8
 8001680:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_SDMMC1_SD_Init+0x40>)
 8001684:	f007 ff58 	bl	8009538 <HAL_SD_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 800168e:	f000 fb4d 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	240003b8 	.word	0x240003b8
 800169c:	52007000 	.word	0x52007000

080016a0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80016a4:	4b27      	ldr	r3, [pc, #156]	@ (8001744 <MX_SPI4_Init+0xa4>)
 80016a6:	4a28      	ldr	r2, [pc, #160]	@ (8001748 <MX_SPI4_Init+0xa8>)
 80016a8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80016aa:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <MX_SPI4_Init+0xa4>)
 80016ac:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80016b0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80016b2:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <MX_SPI4_Init+0xa4>)
 80016b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016b8:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ba:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <MX_SPI4_Init+0xa4>)
 80016bc:	2207      	movs	r2, #7
 80016be:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c0:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <MX_SPI4_Init+0xa4>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001744 <MX_SPI4_Init+0xa4>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <MX_SPI4_Init+0xa4>)
 80016ce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80016d2:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <MX_SPI4_Init+0xa4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <MX_SPI4_Init+0xa4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <MX_SPI4_Init+0xa4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e6:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <MX_SPI4_Init+0xa4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80016ec:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <MX_SPI4_Init+0xa4>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016f2:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <MX_SPI4_Init+0xa4>)
 80016f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <MX_SPI4_Init+0xa4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001700:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <MX_SPI4_Init+0xa4>)
 8001702:	2200      	movs	r2, #0
 8001704:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001706:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <MX_SPI4_Init+0xa4>)
 8001708:	2200      	movs	r2, #0
 800170a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800170c:	4b0d      	ldr	r3, [pc, #52]	@ (8001744 <MX_SPI4_Init+0xa4>)
 800170e:	2200      	movs	r2, #0
 8001710:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001712:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <MX_SPI4_Init+0xa4>)
 8001714:	2200      	movs	r2, #0
 8001716:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001718:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <MX_SPI4_Init+0xa4>)
 800171a:	2200      	movs	r2, #0
 800171c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <MX_SPI4_Init+0xa4>)
 8001720:	2200      	movs	r2, #0
 8001722:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001724:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <MX_SPI4_Init+0xa4>)
 8001726:	2200      	movs	r2, #0
 8001728:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <MX_SPI4_Init+0xa4>)
 800172c:	2200      	movs	r2, #0
 800172e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	@ (8001744 <MX_SPI4_Init+0xa4>)
 8001732:	f009 fab3 	bl	800ac9c <HAL_SPI_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 800173c:	f000 faf6 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	24000434 	.word	0x24000434
 8001748:	40013400 	.word	0x40013400

0800174c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001752:	f107 0310 	add.w	r3, r7, #16
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800176a:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <MX_TIM2_Init+0x98>)
 800176c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001770:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8001772:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <MX_TIM2_Init+0x98>)
 8001774:	2277      	movs	r2, #119	@ 0x77
 8001776:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001778:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <MX_TIM2_Init+0x98>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <MX_TIM2_Init+0x98>)
 8001780:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001784:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001786:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <MX_TIM2_Init+0x98>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178c:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <MX_TIM2_Init+0x98>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001792:	4814      	ldr	r0, [pc, #80]	@ (80017e4 <MX_TIM2_Init+0x98>)
 8001794:	f009 fe7d 	bl	800b492 <HAL_TIM_Base_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800179e:	f000 fac5 	bl	8001d2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	4619      	mov	r1, r3
 80017ae:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <MX_TIM2_Init+0x98>)
 80017b0:	f00a f846 	bl	800b840 <HAL_TIM_ConfigClockSource>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017ba:	f000 fab7 	bl	8001d2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	4619      	mov	r1, r3
 80017ca:	4806      	ldr	r0, [pc, #24]	@ (80017e4 <MX_TIM2_Init+0x98>)
 80017cc:	f00a fa96 	bl	800bcfc <HAL_TIMEx_MasterConfigSynchronization>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017d6:	f000 faa9 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	240004bc 	.word	0x240004bc

080017e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017ec:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <MX_USART2_UART_Init+0x90>)
 80017ee:	4a23      	ldr	r2, [pc, #140]	@ (800187c <MX_USART2_UART_Init+0x94>)
 80017f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017f2:	4b21      	ldr	r3, [pc, #132]	@ (8001878 <MX_USART2_UART_Init+0x90>)
 80017f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80017f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001878 <MX_USART2_UART_Init+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001800:	4b1d      	ldr	r3, [pc, #116]	@ (8001878 <MX_USART2_UART_Init+0x90>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001806:	4b1c      	ldr	r3, [pc, #112]	@ (8001878 <MX_USART2_UART_Init+0x90>)
 8001808:	2200      	movs	r2, #0
 800180a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 800180c:	4b1a      	ldr	r3, [pc, #104]	@ (8001878 <MX_USART2_UART_Init+0x90>)
 800180e:	2208      	movs	r2, #8
 8001810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001812:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <MX_USART2_UART_Init+0x90>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001818:	4b17      	ldr	r3, [pc, #92]	@ (8001878 <MX_USART2_UART_Init+0x90>)
 800181a:	2200      	movs	r2, #0
 800181c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800181e:	4b16      	ldr	r3, [pc, #88]	@ (8001878 <MX_USART2_UART_Init+0x90>)
 8001820:	2200      	movs	r2, #0
 8001822:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001824:	4b14      	ldr	r3, [pc, #80]	@ (8001878 <MX_USART2_UART_Init+0x90>)
 8001826:	2200      	movs	r2, #0
 8001828:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800182a:	4b13      	ldr	r3, [pc, #76]	@ (8001878 <MX_USART2_UART_Init+0x90>)
 800182c:	2200      	movs	r2, #0
 800182e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001830:	4811      	ldr	r0, [pc, #68]	@ (8001878 <MX_USART2_UART_Init+0x90>)
 8001832:	f00a fb0f 	bl	800be54 <HAL_HalfDuplex_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800183c:	f000 fa76 	bl	8001d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001840:	2100      	movs	r1, #0
 8001842:	480d      	ldr	r0, [pc, #52]	@ (8001878 <MX_USART2_UART_Init+0x90>)
 8001844:	f00b fbad 	bl	800cfa2 <HAL_UARTEx_SetTxFifoThreshold>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800184e:	f000 fa6d 	bl	8001d2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001852:	2100      	movs	r1, #0
 8001854:	4808      	ldr	r0, [pc, #32]	@ (8001878 <MX_USART2_UART_Init+0x90>)
 8001856:	f00b fbe2 	bl	800d01e <HAL_UARTEx_SetRxFifoThreshold>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001860:	f000 fa64 	bl	8001d2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001864:	4804      	ldr	r0, [pc, #16]	@ (8001878 <MX_USART2_UART_Init+0x90>)
 8001866:	f00b fb63 	bl	800cf30 <HAL_UARTEx_DisableFifoMode>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001870:	f000 fa5c 	bl	8001d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	24000508 	.word	0x24000508
 800187c:	40004400 	.word	0x40004400

08001880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b08a      	sub	sp, #40	@ 0x28
 8001884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001886:	f107 0314 	add.w	r3, r7, #20
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001896:	4b3b      	ldr	r3, [pc, #236]	@ (8001984 <MX_GPIO_Init+0x104>)
 8001898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189c:	4a39      	ldr	r2, [pc, #228]	@ (8001984 <MX_GPIO_Init+0x104>)
 800189e:	f043 0310 	orr.w	r3, r3, #16
 80018a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018a6:	4b37      	ldr	r3, [pc, #220]	@ (8001984 <MX_GPIO_Init+0x104>)
 80018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b4:	4b33      	ldr	r3, [pc, #204]	@ (8001984 <MX_GPIO_Init+0x104>)
 80018b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ba:	4a32      	ldr	r2, [pc, #200]	@ (8001984 <MX_GPIO_Init+0x104>)
 80018bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001984 <MX_GPIO_Init+0x104>)
 80018c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <MX_GPIO_Init+0x104>)
 80018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d8:	4a2a      	ldr	r2, [pc, #168]	@ (8001984 <MX_GPIO_Init+0x104>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e2:	4b28      	ldr	r3, [pc, #160]	@ (8001984 <MX_GPIO_Init+0x104>)
 80018e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f0:	4b24      	ldr	r3, [pc, #144]	@ (8001984 <MX_GPIO_Init+0x104>)
 80018f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f6:	4a23      	ldr	r2, [pc, #140]	@ (8001984 <MX_GPIO_Init+0x104>)
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001900:	4b20      	ldr	r3, [pc, #128]	@ (8001984 <MX_GPIO_Init+0x104>)
 8001902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800190e:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <MX_GPIO_Init+0x104>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001914:	4a1b      	ldr	r2, [pc, #108]	@ (8001984 <MX_GPIO_Init+0x104>)
 8001916:	f043 0308 	orr.w	r3, r3, #8
 800191a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800191e:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <MX_GPIO_Init+0x104>)
 8001920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	603b      	str	r3, [r7, #0]
 800192a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|LCD_CS_Pin, GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	f640 0108 	movw	r1, #2056	@ 0x808
 8001932:	4815      	ldr	r0, [pc, #84]	@ (8001988 <MX_GPIO_Init+0x108>)
 8001934:	f002 fe18 	bl	8004568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_LED_Pin|LCD_WR_RS_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 4124 	mov.w	r1, #41984	@ 0xa400
 800193e:	4812      	ldr	r0, [pc, #72]	@ (8001988 <MX_GPIO_Init+0x108>)
 8001940:	f002 fe12 	bl	8004568 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 LCD_LED_Pin LCD_CS_Pin LCD_WR_RS_Pin
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|LCD_LED_Pin|LCD_CS_Pin|LCD_WR_RS_Pin
 8001944:	f64a 4308 	movw	r3, #44040	@ 0xac08
 8001948:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	480a      	ldr	r0, [pc, #40]	@ (8001988 <MX_GPIO_Init+0x108>)
 800195e:	f002 fc3b 	bl	80041d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001962:	2302      	movs	r3, #2
 8001964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4805      	ldr	r0, [pc, #20]	@ (800198c <MX_GPIO_Init+0x10c>)
 8001976:	f002 fc2f 	bl	80041d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	@ 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	58024400 	.word	0x58024400
 8001988:	58021000 	.word	0x58021000
 800198c:	58020000 	.word	0x58020000

08001990 <HAL_TIM_PeriodElapsedCallback>:
{
    return __HAL_TIM_GET_COUNTER(&htim2);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2)
    {
        HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
    }
    */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <transmitToTracker>:

void transmitToTracker(float rate1, float rate2, float coinc_rate) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b092      	sub	sp, #72	@ 0x48
 80019a8:	af04      	add	r7, sp, #16
 80019aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80019ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80019b2:	ed87 1a01 	vstr	s2, [r7, #4]
	char msg[40];
	sprintf(msg, "%.0f,%.0f,%.0f", rate1, rate2, coinc_rate);
 80019b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ba:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80019be:	edd7 7a02 	vldr	s15, [r7, #8]
 80019c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019c6:	edd7 6a01 	vldr	s13, [r7, #4]
 80019ca:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80019ce:	f107 0010 	add.w	r0, r7, #16
 80019d2:	ed8d 6b02 	vstr	d6, [sp, #8]
 80019d6:	ed8d 7b00 	vstr	d7, [sp]
 80019da:	ec53 2b15 	vmov	r2, r3, d5
 80019de:	490a      	ldr	r1, [pc, #40]	@ (8001a08 <transmitToTracker+0x64>)
 80019e0:	f014 fbde 	bl	80161a0 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80019e4:	f107 0310 	add.w	r3, r7, #16
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7fe fcc9 	bl	8000380 <strlen>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	f107 0110 	add.w	r1, r7, #16
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019fa:	4804      	ldr	r0, [pc, #16]	@ (8001a0c <transmitToTracker+0x68>)
 80019fc:	f00a fa82 	bl	800bf04 <HAL_UART_Transmit>
}
 8001a00:	bf00      	nop
 8001a02:	3738      	adds	r7, #56	@ 0x38
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	08018210 	.word	0x08018210
 8001a0c:	24000508 	.word	0x24000508

08001a10 <logToSD>:

void logToSD(char* data, uint8_t datalen) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	f5ad 5d05 	sub.w	sp, sp, #8512	@ 0x2140
 8001a16:	b08c      	sub	sp, #48	@ 0x30
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001a1e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a22:	6018      	str	r0, [r3, #0]
 8001a24:	460a      	mov	r2, r1
 8001a26:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001a2a:	f2a3 136d 	subw	r3, r3, #365	@ 0x16d
 8001a2e:	701a      	strb	r2, [r3, #0]
    FRESULT FR_Status;
    UINT WWC; // Write Word Counter
    uint8_t buflen;

    // SD Karte mounten
    FR_Status = f_mount(&FatFs, SDPath, 1);
 8001a30:	4b59      	ldr	r3, [pc, #356]	@ (8001b98 <logToSD+0x188>)
 8001a32:	f503 5305 	add.w	r3, r3, #8512	@ 0x2140
 8001a36:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001a3a:	443b      	add	r3, r7
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4957      	ldr	r1, [pc, #348]	@ (8001b9c <logToSD+0x18c>)
 8001a40:	4618      	mov	r0, r3
 8001a42:	f012 f8f5 	bl	8013c30 <f_mount>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f242 126f 	movw	r2, #8559	@ 0x216f
 8001a4c:	443a      	add	r2, r7
 8001a4e:	7013      	strb	r3, [r2, #0]
    if (FR_Status == FR_OK)
 8001a50:	f242 136f 	movw	r3, #8559	@ 0x216f
 8001a54:	443b      	add	r3, r7
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d17b      	bne.n	8001b54 <logToSD+0x144>
    {
        // Datei zum Anhängen öffnen (erstellt, falls nicht vorhanden)
        FR_Status = f_open(&Fil, log_filename, FA_WRITE | FA_OPEN_ALWAYS);
 8001a5c:	4b50      	ldr	r3, [pc, #320]	@ (8001ba0 <logToSD+0x190>)
 8001a5e:	f503 5305 	add.w	r3, r3, #8512	@ 0x2140
 8001a62:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001a66:	443b      	add	r3, r7
 8001a68:	2212      	movs	r2, #18
 8001a6a:	494e      	ldr	r1, [pc, #312]	@ (8001ba4 <logToSD+0x194>)
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f012 f925 	bl	8013cbc <f_open>
 8001a72:	4603      	mov	r3, r0
 8001a74:	f242 126f 	movw	r2, #8559	@ 0x216f
 8001a78:	443a      	add	r2, r7
 8001a7a:	7013      	strb	r3, [r2, #0]
        if(FR_Status == FR_OK) {
 8001a7c:	f242 136f 	movw	r3, #8559	@ 0x216f
 8001a80:	443b      	add	r3, r7
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d148      	bne.n	8001b1a <logToSD+0x10a>
            // Cursor ans Ende der Datei setzen
            f_lseek(&Fil, f_size(&Fil));
 8001a88:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001a8c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	4b43      	ldr	r3, [pc, #268]	@ (8001ba0 <logToSD+0x190>)
 8001a94:	f503 5305 	add.w	r3, r3, #8512	@ 0x2140
 8001a98:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001a9c:	443b      	add	r3, r7
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f012 fd0f 	bl	80144c4 <f_lseek>
            // Daten schreiben
            f_write(&Fil, data, datalen, &WWC);
 8001aa6:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001aaa:	f2a3 136d 	subw	r3, r3, #365	@ 0x16d
 8001aae:	781a      	ldrb	r2, [r3, #0]
 8001ab0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba8 <logToSD+0x198>)
 8001ab2:	f503 5305 	add.w	r3, r3, #8512	@ 0x2140
 8001ab6:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001aba:	443b      	add	r3, r7
 8001abc:	f507 71b8 	add.w	r1, r7, #368	@ 0x170
 8001ac0:	f5a1 71b6 	sub.w	r1, r1, #364	@ 0x16c
 8001ac4:	4836      	ldr	r0, [pc, #216]	@ (8001ba0 <logToSD+0x190>)
 8001ac6:	f500 5005 	add.w	r0, r0, #8512	@ 0x2140
 8001aca:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 8001ace:	4438      	add	r0, r7
 8001ad0:	6809      	ldr	r1, [r1, #0]
 8001ad2:	f012 fabb 	bl	801404c <f_write>
            // Datei schließen
            f_close(&Fil);
 8001ad6:	4b32      	ldr	r3, [pc, #200]	@ (8001ba0 <logToSD+0x190>)
 8001ad8:	f503 5305 	add.w	r3, r3, #8512	@ 0x2140
 8001adc:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8001ae0:	443b      	add	r3, r7
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f012 fcc4 	bl	8014470 <f_close>
            buflen = sprintf(TxBuffer, "Data written to SD\r\n");
 8001ae8:	f242 0374 	movw	r3, #8308	@ 0x2074
 8001aec:	443b      	add	r3, r7
 8001aee:	492f      	ldr	r1, [pc, #188]	@ (8001bac <logToSD+0x19c>)
 8001af0:	4618      	mov	r0, r3
 8001af2:	f014 fb55 	bl	80161a0 <siprintf>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f242 126e 	movw	r2, #8558	@ 0x216e
 8001afc:	443a      	add	r2, r7
 8001afe:	7013      	strb	r3, [r2, #0]
            CDC_Transmit_FS((uint8_t*)TxBuffer, buflen);
 8001b00:	f242 136e 	movw	r3, #8558	@ 0x216e
 8001b04:	443b      	add	r3, r7
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	f242 0374 	movw	r3, #8308	@ 0x2074
 8001b0e:	443b      	add	r3, r7
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f013 f916 	bl	8014d44 <CDC_Transmit_FS>
        }
    } else {
        buflen = sprintf(TxBuffer, "Error! Mounting SD card failed, Error Code: (%i)\r\n", FR_Status);
        CDC_Transmit_FS((uint8_t*)TxBuffer, buflen);
    }
}
 8001b18:	e038      	b.n	8001b8c <logToSD+0x17c>
            buflen = sprintf(TxBuffer, "Error! Opening log.txt failed, Error Code: (%i)\r\n", FR_Status);
 8001b1a:	f242 136f 	movw	r3, #8559	@ 0x216f
 8001b1e:	443b      	add	r3, r7
 8001b20:	781a      	ldrb	r2, [r3, #0]
 8001b22:	f242 0374 	movw	r3, #8308	@ 0x2074
 8001b26:	443b      	add	r3, r7
 8001b28:	4921      	ldr	r1, [pc, #132]	@ (8001bb0 <logToSD+0x1a0>)
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f014 fb38 	bl	80161a0 <siprintf>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f242 126e 	movw	r2, #8558	@ 0x216e
 8001b36:	443a      	add	r2, r7
 8001b38:	7013      	strb	r3, [r2, #0]
            CDC_Transmit_FS((uint8_t*)TxBuffer, buflen);
 8001b3a:	f242 136e 	movw	r3, #8558	@ 0x216e
 8001b3e:	443b      	add	r3, r7
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	f242 0374 	movw	r3, #8308	@ 0x2074
 8001b48:	443b      	add	r3, r7
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f013 f8f9 	bl	8014d44 <CDC_Transmit_FS>
}
 8001b52:	e01b      	b.n	8001b8c <logToSD+0x17c>
        buflen = sprintf(TxBuffer, "Error! Mounting SD card failed, Error Code: (%i)\r\n", FR_Status);
 8001b54:	f242 136f 	movw	r3, #8559	@ 0x216f
 8001b58:	443b      	add	r3, r7
 8001b5a:	781a      	ldrb	r2, [r3, #0]
 8001b5c:	f242 0374 	movw	r3, #8308	@ 0x2074
 8001b60:	443b      	add	r3, r7
 8001b62:	4914      	ldr	r1, [pc, #80]	@ (8001bb4 <logToSD+0x1a4>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f014 fb1b 	bl	80161a0 <siprintf>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f242 126e 	movw	r2, #8558	@ 0x216e
 8001b70:	443a      	add	r2, r7
 8001b72:	7013      	strb	r3, [r2, #0]
        CDC_Transmit_FS((uint8_t*)TxBuffer, buflen);
 8001b74:	f242 136e 	movw	r3, #8558	@ 0x216e
 8001b78:	443b      	add	r3, r7
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	f242 0374 	movw	r3, #8308	@ 0x2074
 8001b82:	443b      	add	r3, r7
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f013 f8dc 	bl	8014d44 <CDC_Transmit_FS>
}
 8001b8c:	bf00      	nop
 8001b8e:	f507 5705 	add.w	r7, r7, #8512	@ 0x2140
 8001b92:	3730      	adds	r7, #48	@ 0x30
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	ffffeecc 	.word	0xffffeecc
 8001b9c:	240005d0 	.word	0x240005d0
 8001ba0:	ffffde9c 	.word	0xffffde9c
 8001ba4:	2400059c 	.word	0x2400059c
 8001ba8:	ffffde98 	.word	0xffffde98
 8001bac:	08018220 	.word	0x08018220
 8001bb0:	08018238 	.word	0x08018238
 8001bb4:	0801826c 	.word	0x0801826c

08001bb8 <fileExists>:

int fileExists(char* filename) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	f5ad 5d8b 	sub.w	sp, sp, #4448	@ 0x1160
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001bc4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001bc8:	6018      	str	r0, [r3, #0]
	FATFS FatFs;
	FRESULT FR_Status;

	// mount sd card
	FR_Status = f_mount(&FatFs, SDPath, 1);
 8001bca:	4b1e      	ldr	r3, [pc, #120]	@ (8001c44 <fileExists+0x8c>)
 8001bcc:	f503 538b 	add.w	r3, r3, #4448	@ 0x1160
 8001bd0:	443b      	add	r3, r7
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	491c      	ldr	r1, [pc, #112]	@ (8001c48 <fileExists+0x90>)
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f012 f82a 	bl	8013c30 <f_mount>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	f241 125f 	movw	r2, #4447	@ 0x115f
 8001be2:	443a      	add	r2, r7
 8001be4:	7013      	strb	r3, [r2, #0]
	if (FR_Status == FR_OK) {
 8001be6:	f241 135f 	movw	r3, #4447	@ 0x115f
 8001bea:	443b      	add	r3, r7
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d122      	bne.n	8001c38 <fileExists+0x80>
		FILINFO fno;
		FRESULT res;

		res = f_stat(filename, &fno);
 8001bf2:	4b16      	ldr	r3, [pc, #88]	@ (8001c4c <fileExists+0x94>)
 8001bf4:	f503 538b 	add.w	r3, r3, #4448	@ 0x1160
 8001bf8:	443b      	add	r3, r7
 8001bfa:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8001bfe:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c02:	4619      	mov	r1, r3
 8001c04:	6810      	ldr	r0, [r2, #0]
 8001c06:	f012 fe81 	bl	801490c <f_stat>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	f241 125e 	movw	r2, #4446	@ 0x115e
 8001c10:	443a      	add	r2, r7
 8001c12:	7013      	strb	r3, [r2, #0]
		if (res == FR_OK) {
 8001c14:	f241 135e 	movw	r3, #4446	@ 0x115e
 8001c18:	443b      	add	r3, r7
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <fileExists+0x6c>
			return 1;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e00a      	b.n	8001c3a <fileExists+0x82>
		} else if (res == FR_NO_FILE) {
 8001c24:	f241 135e 	movw	r3, #4446	@ 0x115e
 8001c28:	443b      	add	r3, r7
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d101      	bne.n	8001c34 <fileExists+0x7c>
			return 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e002      	b.n	8001c3a <fileExists+0x82>
		} else {
			return 2;
 8001c34:	2302      	movs	r3, #2
 8001c36:	e000      	b.n	8001c3a <fileExists+0x82>
		}
	}
	return 0;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f507 578b 	add.w	r7, r7, #4448	@ 0x1160
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	ffffefc4 	.word	0xffffefc4
 8001c48:	240005d0 	.word	0x240005d0
 8001c4c:	ffffeeac 	.word	0xffffeeac

08001c50 <findNewFilename>:

void findNewFilename() {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	@ 0x30
 8001c54:	af00      	add	r7, sp, #0
	sprintf(log_filename, "log_%lu.txt", file_counter);
 8001c56:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <findNewFilename+0x70>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	4919      	ldr	r1, [pc, #100]	@ (8001cc4 <findNewFilename+0x74>)
 8001c5e:	481a      	ldr	r0, [pc, #104]	@ (8001cc8 <findNewFilename+0x78>)
 8001c60:	f014 fa9e 	bl	80161a0 <siprintf>
	while ((fileExists(log_filename) == 1) && (file_counter < 100000)) {
 8001c64:	e00b      	b.n	8001c7e <findNewFilename+0x2e>
		file_counter++;
 8001c66:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <findNewFilename+0x70>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4a14      	ldr	r2, [pc, #80]	@ (8001cc0 <findNewFilename+0x70>)
 8001c6e:	6013      	str	r3, [r2, #0]
		sprintf(log_filename, "log_%lu.txt", file_counter);
 8001c70:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <findNewFilename+0x70>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4913      	ldr	r1, [pc, #76]	@ (8001cc4 <findNewFilename+0x74>)
 8001c78:	4813      	ldr	r0, [pc, #76]	@ (8001cc8 <findNewFilename+0x78>)
 8001c7a:	f014 fa91 	bl	80161a0 <siprintf>
	while ((fileExists(log_filename) == 1) && (file_counter < 100000)) {
 8001c7e:	4812      	ldr	r0, [pc, #72]	@ (8001cc8 <findNewFilename+0x78>)
 8001c80:	f7ff ff9a 	bl	8001bb8 <fileExists>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d104      	bne.n	8001c94 <findNewFilename+0x44>
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <findNewFilename+0x70>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001ccc <findNewFilename+0x7c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d9e8      	bls.n	8001c66 <findNewFilename+0x16>
	}

	char usbbuf[40];
	uint8_t buflen = sprintf(usbbuf, "%s\n", log_filename);
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <findNewFilename+0x78>)
 8001c98:	490d      	ldr	r1, [pc, #52]	@ (8001cd0 <findNewFilename+0x80>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f014 fa80 	bl	80161a0 <siprintf>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    CDC_Transmit_FS((uint8_t*)usbbuf, buflen);
 8001ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f013 f847 	bl	8014d44 <CDC_Transmit_FS>
}
 8001cb6:	bf00      	nop
 8001cb8:	3730      	adds	r7, #48	@ 0x30
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	240005bc 	.word	0x240005bc
 8001cc4:	080182a0 	.word	0x080182a0
 8001cc8:	2400059c 	.word	0x2400059c
 8001ccc:	0001869f 	.word	0x0001869f
 8001cd0:	080182ac 	.word	0x080182ac

08001cd4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001cda:	463b      	mov	r3, r7
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001ce6:	f002 f9ff 	bl	80040e8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001cea:	2301      	movs	r3, #1
 8001cec:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001cf6:	231f      	movs	r3, #31
 8001cf8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001cfa:	2387      	movs	r3, #135	@ 0x87
 8001cfc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001d02:	2300      	movs	r3, #0
 8001d04:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001d06:	2301      	movs	r3, #1
 8001d08:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001d16:	463b      	mov	r3, r7
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 fa1d 	bl	8004158 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001d1e:	2004      	movs	r0, #4
 8001d20:	f002 f9fa 	bl	8004118 <HAL_MPU_Enable>

}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d30:	b672      	cpsid	i
}
 8001d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <Error_Handler+0x8>

08001d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d68 <HAL_MspInit+0x30>)
 8001d40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d44:	4a08      	ldr	r2, [pc, #32]	@ (8001d68 <HAL_MspInit+0x30>)
 8001d46:	f043 0302 	orr.w	r3, r3, #2
 8001d4a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d4e:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <HAL_MspInit+0x30>)
 8001d50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	58024400 	.word	0x58024400

08001d6c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	@ 0x30
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 031c 	add.w	r3, r7, #28
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a39      	ldr	r2, [pc, #228]	@ (8001e70 <HAL_ADC_MspInit+0x104>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d133      	bne.n	8001df6 <HAL_ADC_MspInit+0x8a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001d8e:	4b39      	ldr	r3, [pc, #228]	@ (8001e74 <HAL_ADC_MspInit+0x108>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	3301      	adds	r3, #1
 8001d94:	4a37      	ldr	r2, [pc, #220]	@ (8001e74 <HAL_ADC_MspInit+0x108>)
 8001d96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001d98:	4b36      	ldr	r3, [pc, #216]	@ (8001e74 <HAL_ADC_MspInit+0x108>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d10e      	bne.n	8001dbe <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001da0:	4b35      	ldr	r3, [pc, #212]	@ (8001e78 <HAL_ADC_MspInit+0x10c>)
 8001da2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001da6:	4a34      	ldr	r2, [pc, #208]	@ (8001e78 <HAL_ADC_MspInit+0x10c>)
 8001da8:	f043 0320 	orr.w	r3, r3, #32
 8001dac:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001db0:	4b31      	ldr	r3, [pc, #196]	@ (8001e78 <HAL_ADC_MspInit+0x10c>)
 8001db2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	61bb      	str	r3, [r7, #24]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	4b2e      	ldr	r3, [pc, #184]	@ (8001e78 <HAL_ADC_MspInit+0x10c>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dc4:	4a2c      	ldr	r2, [pc, #176]	@ (8001e78 <HAL_ADC_MspInit+0x10c>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dce:	4b2a      	ldr	r3, [pc, #168]	@ (8001e78 <HAL_ADC_MspInit+0x10c>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ddc:	2340      	movs	r3, #64	@ 0x40
 8001dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001de0:	2303      	movs	r3, #3
 8001de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 031c 	add.w	r3, r7, #28
 8001dec:	4619      	mov	r1, r3
 8001dee:	4823      	ldr	r0, [pc, #140]	@ (8001e7c <HAL_ADC_MspInit+0x110>)
 8001df0:	f002 f9f2 	bl	80041d8 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001df4:	e037      	b.n	8001e66 <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a21      	ldr	r2, [pc, #132]	@ (8001e80 <HAL_ADC_MspInit+0x114>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d132      	bne.n	8001e66 <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001e00:	4b1c      	ldr	r3, [pc, #112]	@ (8001e74 <HAL_ADC_MspInit+0x108>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	3301      	adds	r3, #1
 8001e06:	4a1b      	ldr	r2, [pc, #108]	@ (8001e74 <HAL_ADC_MspInit+0x108>)
 8001e08:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <HAL_ADC_MspInit+0x108>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d10e      	bne.n	8001e30 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001e12:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_ADC_MspInit+0x10c>)
 8001e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e18:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <HAL_ADC_MspInit+0x10c>)
 8001e1a:	f043 0320 	orr.w	r3, r3, #32
 8001e1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001e22:	4b15      	ldr	r3, [pc, #84]	@ (8001e78 <HAL_ADC_MspInit+0x10c>)
 8001e24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e30:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_ADC_MspInit+0x10c>)
 8001e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e36:	4a10      	ldr	r2, [pc, #64]	@ (8001e78 <HAL_ADC_MspInit+0x10c>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e40:	4b0d      	ldr	r3, [pc, #52]	@ (8001e78 <HAL_ADC_MspInit+0x10c>)
 8001e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e4e:	2310      	movs	r3, #16
 8001e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e52:	2303      	movs	r3, #3
 8001e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4806      	ldr	r0, [pc, #24]	@ (8001e7c <HAL_ADC_MspInit+0x110>)
 8001e62:	f002 f9b9 	bl	80041d8 <HAL_GPIO_Init>
}
 8001e66:	bf00      	nop
 8001e68:	3730      	adds	r7, #48	@ 0x30
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40022000 	.word	0x40022000
 8001e74:	240005c0 	.word	0x240005c0
 8001e78:	58024400 	.word	0x58024400
 8001e7c:	58020000 	.word	0x58020000
 8001e80:	40022100 	.word	0x40022100

08001e84 <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	@ 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f4c <HAL_SD_MspInit+0xc8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d14d      	bne.n	8001f42 <HAL_SD_MspInit+0xbe>
  {
    /* USER CODE BEGIN SDMMC1_MspInit 0 */

    /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f50 <HAL_SD_MspInit+0xcc>)
 8001ea8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001eac:	4a28      	ldr	r2, [pc, #160]	@ (8001f50 <HAL_SD_MspInit+0xcc>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb2:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001eb6:	4b26      	ldr	r3, [pc, #152]	@ (8001f50 <HAL_SD_MspInit+0xcc>)
 8001eb8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec4:	4b22      	ldr	r3, [pc, #136]	@ (8001f50 <HAL_SD_MspInit+0xcc>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eca:	4a21      	ldr	r2, [pc, #132]	@ (8001f50 <HAL_SD_MspInit+0xcc>)
 8001ecc:	f043 0304 	orr.w	r3, r3, #4
 8001ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f50 <HAL_SD_MspInit+0xcc>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f50 <HAL_SD_MspInit+0xcc>)
 8001ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee8:	4a19      	ldr	r2, [pc, #100]	@ (8001f50 <HAL_SD_MspInit+0xcc>)
 8001eea:	f043 0308 	orr.w	r3, r3, #8
 8001eee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ef2:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <HAL_SD_MspInit+0xcc>)
 8001ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001f00:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001f04:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001f12:	230c      	movs	r3, #12
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	480d      	ldr	r0, [pc, #52]	@ (8001f54 <HAL_SD_MspInit+0xd0>)
 8001f1e:	f002 f95b 	bl	80041d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f22:	2304      	movs	r3, #4
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001f32:	230c      	movs	r3, #12
 8001f34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4806      	ldr	r0, [pc, #24]	@ (8001f58 <HAL_SD_MspInit+0xd4>)
 8001f3e:	f002 f94b 	bl	80041d8 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8001f42:	bf00      	nop
 8001f44:	3728      	adds	r7, #40	@ 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	52007000 	.word	0x52007000
 8001f50:	58024400 	.word	0x58024400
 8001f54:	58020800 	.word	0x58020800
 8001f58:	58020c00 	.word	0x58020c00

08001f5c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b0ba      	sub	sp, #232	@ 0xe8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	22c0      	movs	r2, #192	@ 0xc0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f014 f974 	bl	801626a <memset>
  if(hspi->Instance==SPI4)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a27      	ldr	r2, [pc, #156]	@ (8002024 <HAL_SPI_MspInit+0xc8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d146      	bne.n	800201a <HAL_SPI_MspInit+0xbe>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001f8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSE;
 8001f98:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001f9c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f004 fdca 	bl	8006b3c <HAL_RCCEx_PeriphCLKConfig>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001fae:	f7ff febd 	bl	8001d2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002028 <HAL_SPI_MspInit+0xcc>)
 8001fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8002028 <HAL_SPI_MspInit+0xcc>)
 8001fba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fbe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001fc2:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <HAL_SPI_MspInit+0xcc>)
 8001fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fd0:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <HAL_SPI_MspInit+0xcc>)
 8001fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd6:	4a14      	ldr	r2, [pc, #80]	@ (8002028 <HAL_SPI_MspInit+0xcc>)
 8001fd8:	f043 0310 	orr.w	r3, r3, #16
 8001fdc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fe0:	4b11      	ldr	r3, [pc, #68]	@ (8002028 <HAL_SPI_MspInit+0xcc>)
 8001fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	60bb      	str	r3, [r7, #8]
 8001fec:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001fee:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002008:	2305      	movs	r3, #5
 800200a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800200e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002012:	4619      	mov	r1, r3
 8002014:	4805      	ldr	r0, [pc, #20]	@ (800202c <HAL_SPI_MspInit+0xd0>)
 8002016:	f002 f8df 	bl	80041d8 <HAL_GPIO_Init>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 800201a:	bf00      	nop
 800201c:	37e8      	adds	r7, #232	@ 0xe8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40013400 	.word	0x40013400
 8002028:	58024400 	.word	0x58024400
 800202c:	58021000 	.word	0x58021000

08002030 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002040:	d116      	bne.n	8002070 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002042:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <HAL_TIM_Base_MspInit+0x48>)
 8002044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002048:	4a0b      	ldr	r2, [pc, #44]	@ (8002078 <HAL_TIM_Base_MspInit+0x48>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002052:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <HAL_TIM_Base_MspInit+0x48>)
 8002054:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2100      	movs	r1, #0
 8002064:	201c      	movs	r0, #28
 8002066:	f002 f80a 	bl	800407e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800206a:	201c      	movs	r0, #28
 800206c:	f002 f821 	bl	80040b2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002070:	bf00      	nop
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	58024400 	.word	0x58024400

0800207c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	@ 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a1a      	ldr	r2, [pc, #104]	@ (8002104 <HAL_UART_MspInit+0x88>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d12d      	bne.n	80020fa <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800209e:	4b1a      	ldr	r3, [pc, #104]	@ (8002108 <HAL_UART_MspInit+0x8c>)
 80020a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020a4:	4a18      	ldr	r2, [pc, #96]	@ (8002108 <HAL_UART_MspInit+0x8c>)
 80020a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020aa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020ae:	4b16      	ldr	r3, [pc, #88]	@ (8002108 <HAL_UART_MspInit+0x8c>)
 80020b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b8:	613b      	str	r3, [r7, #16]
 80020ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020bc:	4b12      	ldr	r3, [pc, #72]	@ (8002108 <HAL_UART_MspInit+0x8c>)
 80020be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c2:	4a11      	ldr	r2, [pc, #68]	@ (8002108 <HAL_UART_MspInit+0x8c>)
 80020c4:	f043 0308 	orr.w	r3, r3, #8
 80020c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002108 <HAL_UART_MspInit+0x8c>)
 80020ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80020da:	2320      	movs	r3, #32
 80020dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020de:	2312      	movs	r3, #18
 80020e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020ea:	2307      	movs	r3, #7
 80020ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	4619      	mov	r1, r3
 80020f4:	4805      	ldr	r0, [pc, #20]	@ (800210c <HAL_UART_MspInit+0x90>)
 80020f6:	f002 f86f 	bl	80041d8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80020fa:	bf00      	nop
 80020fc:	3728      	adds	r7, #40	@ 0x28
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40004400 	.word	0x40004400
 8002108:	58024400 	.word	0x58024400
 800210c:	58020c00 	.word	0x58020c00

08002110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <NMI_Handler+0x4>

08002118 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800211c:	bf00      	nop
 800211e:	e7fd      	b.n	800211c <HardFault_Handler+0x4>

08002120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002124:	bf00      	nop
 8002126:	e7fd      	b.n	8002124 <MemManage_Handler+0x4>

08002128 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <BusFault_Handler+0x4>

08002130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002134:	bf00      	nop
 8002136:	e7fd      	b.n	8002134 <UsageFault_Handler+0x4>

08002138 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002166:	f000 fa33 	bl	80025d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002174:	4802      	ldr	r0, [pc, #8]	@ (8002180 <TIM2_IRQHandler+0x10>)
 8002176:	f009 fa5b 	bl	800b630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	240004bc 	.word	0x240004bc

08002184 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002188:	4802      	ldr	r0, [pc, #8]	@ (8002194 <OTG_FS_IRQHandler+0x10>)
 800218a:	f002 fb47 	bl	800481c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	24001ce8 	.word	0x24001ce8

08002198 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return 1;
 800219c:	2301      	movs	r3, #1
}
 800219e:	4618      	mov	r0, r3
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_kill>:

int _kill(int pid, int sig)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021b2:	f014 f8bd 	bl	8016330 <__errno>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2216      	movs	r2, #22
 80021ba:	601a      	str	r2, [r3, #0]
  return -1;
 80021bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <_exit>:

void _exit (int status)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ffe7 	bl	80021a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021da:	bf00      	nop
 80021dc:	e7fd      	b.n	80021da <_exit+0x12>

080021de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e00a      	b.n	8002206 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80021f0:	f3af 8000 	nop.w
 80021f4:	4601      	mov	r1, r0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	60ba      	str	r2, [r7, #8]
 80021fc:	b2ca      	uxtb	r2, r1
 80021fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	3301      	adds	r3, #1
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	429a      	cmp	r2, r3
 800220c:	dbf0      	blt.n	80021f0 <_read+0x12>
  }

  return len;
 800220e:	687b      	ldr	r3, [r7, #4]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	e009      	b.n	800223e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1c5a      	adds	r2, r3, #1
 800222e:	60ba      	str	r2, [r7, #8]
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	3301      	adds	r3, #1
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	429a      	cmp	r2, r3
 8002244:	dbf1      	blt.n	800222a <_write+0x12>
  }
  return len;
 8002246:	687b      	ldr	r3, [r7, #4]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <_close>:

int _close(int file)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002258:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002278:	605a      	str	r2, [r3, #4]
  return 0;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_isatty>:

int _isatty(int file)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002290:	2301      	movs	r3, #1
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	60f8      	str	r0, [r7, #12]
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022c0:	4a14      	ldr	r2, [pc, #80]	@ (8002314 <_sbrk+0x5c>)
 80022c2:	4b15      	ldr	r3, [pc, #84]	@ (8002318 <_sbrk+0x60>)
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022cc:	4b13      	ldr	r3, [pc, #76]	@ (800231c <_sbrk+0x64>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d102      	bne.n	80022da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022d4:	4b11      	ldr	r3, [pc, #68]	@ (800231c <_sbrk+0x64>)
 80022d6:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <_sbrk+0x68>)
 80022d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022da:	4b10      	ldr	r3, [pc, #64]	@ (800231c <_sbrk+0x64>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d207      	bcs.n	80022f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022e8:	f014 f822 	bl	8016330 <__errno>
 80022ec:	4603      	mov	r3, r0
 80022ee:	220c      	movs	r2, #12
 80022f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80022f6:	e009      	b.n	800230c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022f8:	4b08      	ldr	r3, [pc, #32]	@ (800231c <_sbrk+0x64>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022fe:	4b07      	ldr	r3, [pc, #28]	@ (800231c <_sbrk+0x64>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4413      	add	r3, r2
 8002306:	4a05      	ldr	r2, [pc, #20]	@ (800231c <_sbrk+0x64>)
 8002308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800230a:	68fb      	ldr	r3, [r7, #12]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	24080000 	.word	0x24080000
 8002318:	00000400 	.word	0x00000400
 800231c:	240005c4 	.word	0x240005c4
 8002320:	24002538 	.word	0x24002538

08002324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002328:	4b43      	ldr	r3, [pc, #268]	@ (8002438 <SystemInit+0x114>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232e:	4a42      	ldr	r2, [pc, #264]	@ (8002438 <SystemInit+0x114>)
 8002330:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002334:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002338:	4b40      	ldr	r3, [pc, #256]	@ (800243c <SystemInit+0x118>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	2b06      	cmp	r3, #6
 8002342:	d807      	bhi.n	8002354 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002344:	4b3d      	ldr	r3, [pc, #244]	@ (800243c <SystemInit+0x118>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 030f 	bic.w	r3, r3, #15
 800234c:	4a3b      	ldr	r2, [pc, #236]	@ (800243c <SystemInit+0x118>)
 800234e:	f043 0307 	orr.w	r3, r3, #7
 8002352:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002354:	4b3a      	ldr	r3, [pc, #232]	@ (8002440 <SystemInit+0x11c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a39      	ldr	r2, [pc, #228]	@ (8002440 <SystemInit+0x11c>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002360:	4b37      	ldr	r3, [pc, #220]	@ (8002440 <SystemInit+0x11c>)
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002366:	4b36      	ldr	r3, [pc, #216]	@ (8002440 <SystemInit+0x11c>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4935      	ldr	r1, [pc, #212]	@ (8002440 <SystemInit+0x11c>)
 800236c:	4b35      	ldr	r3, [pc, #212]	@ (8002444 <SystemInit+0x120>)
 800236e:	4013      	ands	r3, r2
 8002370:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002372:	4b32      	ldr	r3, [pc, #200]	@ (800243c <SystemInit+0x118>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d007      	beq.n	800238e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800237e:	4b2f      	ldr	r3, [pc, #188]	@ (800243c <SystemInit+0x118>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 030f 	bic.w	r3, r3, #15
 8002386:	4a2d      	ldr	r2, [pc, #180]	@ (800243c <SystemInit+0x118>)
 8002388:	f043 0307 	orr.w	r3, r3, #7
 800238c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800238e:	4b2c      	ldr	r3, [pc, #176]	@ (8002440 <SystemInit+0x11c>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002394:	4b2a      	ldr	r3, [pc, #168]	@ (8002440 <SystemInit+0x11c>)
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800239a:	4b29      	ldr	r3, [pc, #164]	@ (8002440 <SystemInit+0x11c>)
 800239c:	2200      	movs	r2, #0
 800239e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80023a0:	4b27      	ldr	r3, [pc, #156]	@ (8002440 <SystemInit+0x11c>)
 80023a2:	4a29      	ldr	r2, [pc, #164]	@ (8002448 <SystemInit+0x124>)
 80023a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80023a6:	4b26      	ldr	r3, [pc, #152]	@ (8002440 <SystemInit+0x11c>)
 80023a8:	4a28      	ldr	r2, [pc, #160]	@ (800244c <SystemInit+0x128>)
 80023aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80023ac:	4b24      	ldr	r3, [pc, #144]	@ (8002440 <SystemInit+0x11c>)
 80023ae:	4a28      	ldr	r2, [pc, #160]	@ (8002450 <SystemInit+0x12c>)
 80023b0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80023b2:	4b23      	ldr	r3, [pc, #140]	@ (8002440 <SystemInit+0x11c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80023b8:	4b21      	ldr	r3, [pc, #132]	@ (8002440 <SystemInit+0x11c>)
 80023ba:	4a25      	ldr	r2, [pc, #148]	@ (8002450 <SystemInit+0x12c>)
 80023bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80023be:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <SystemInit+0x11c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80023c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002440 <SystemInit+0x11c>)
 80023c6:	4a22      	ldr	r2, [pc, #136]	@ (8002450 <SystemInit+0x12c>)
 80023c8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80023ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002440 <SystemInit+0x11c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002440 <SystemInit+0x11c>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002440 <SystemInit+0x11c>)
 80023d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80023dc:	4b18      	ldr	r3, [pc, #96]	@ (8002440 <SystemInit+0x11c>)
 80023de:	2200      	movs	r2, #0
 80023e0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80023e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002454 <SystemInit+0x130>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002458 <SystemInit+0x134>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023ee:	d202      	bcs.n	80023f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80023f0:	4b1a      	ldr	r3, [pc, #104]	@ (800245c <SystemInit+0x138>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80023f6:	4b12      	ldr	r3, [pc, #72]	@ (8002440 <SystemInit+0x11c>)
 80023f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80023fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d113      	bne.n	800242c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002404:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <SystemInit+0x11c>)
 8002406:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800240a:	4a0d      	ldr	r2, [pc, #52]	@ (8002440 <SystemInit+0x11c>)
 800240c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002410:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002414:	4b12      	ldr	r3, [pc, #72]	@ (8002460 <SystemInit+0x13c>)
 8002416:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800241a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800241c:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <SystemInit+0x11c>)
 800241e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002422:	4a07      	ldr	r2, [pc, #28]	@ (8002440 <SystemInit+0x11c>)
 8002424:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002428:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00
 800243c:	52002000 	.word	0x52002000
 8002440:	58024400 	.word	0x58024400
 8002444:	eaf6ed7f 	.word	0xeaf6ed7f
 8002448:	02020200 	.word	0x02020200
 800244c:	01ff0000 	.word	0x01ff0000
 8002450:	01010280 	.word	0x01010280
 8002454:	5c001000 	.word	0x5c001000
 8002458:	ffff0000 	.word	0xffff0000
 800245c:	51008108 	.word	0x51008108
 8002460:	52004000 	.word	0x52004000

08002464 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002468:	4b09      	ldr	r3, [pc, #36]	@ (8002490 <ExitRun0Mode+0x2c>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4a08      	ldr	r2, [pc, #32]	@ (8002490 <ExitRun0Mode+0x2c>)
 800246e:	f043 0302 	orr.w	r3, r3, #2
 8002472:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002474:	bf00      	nop
 8002476:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <ExitRun0Mode+0x2c>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f9      	beq.n	8002476 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002482:	bf00      	nop
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	58024800 	.word	0x58024800

08002494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002494:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80024d0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002498:	f7ff ffe4 	bl	8002464 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800249c:	f7ff ff42 	bl	8002324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a0:	480c      	ldr	r0, [pc, #48]	@ (80024d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024a2:	490d      	ldr	r1, [pc, #52]	@ (80024d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024a4:	4a0d      	ldr	r2, [pc, #52]	@ (80024dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024a8:	e002      	b.n	80024b0 <LoopCopyDataInit>

080024aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ae:	3304      	adds	r3, #4

080024b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b4:	d3f9      	bcc.n	80024aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024b6:	4a0a      	ldr	r2, [pc, #40]	@ (80024e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024b8:	4c0a      	ldr	r4, [pc, #40]	@ (80024e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024bc:	e001      	b.n	80024c2 <LoopFillZerobss>

080024be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c0:	3204      	adds	r2, #4

080024c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c4:	d3fb      	bcc.n	80024be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024c6:	f013 ff39 	bl	801633c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ca:	f7fe fb43 	bl	8000b54 <main>
  bx  lr
 80024ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024d0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80024d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80024d8:	240002d4 	.word	0x240002d4
  ldr r2, =_sidata
 80024dc:	0801969c 	.word	0x0801969c
  ldr r2, =_sbss
 80024e0:	240002d4 	.word	0x240002d4
  ldr r4, =_ebss
 80024e4:	24002538 	.word	0x24002538

080024e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e8:	e7fe      	b.n	80024e8 <ADC3_IRQHandler>
	...

080024ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f2:	2003      	movs	r0, #3
 80024f4:	f001 fdb8 	bl	8004068 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024f8:	f004 f94a 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <HAL_Init+0x68>)
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	4913      	ldr	r1, [pc, #76]	@ (8002558 <HAL_Init+0x6c>)
 800250a:	5ccb      	ldrb	r3, [r1, r3]
 800250c:	f003 031f 	and.w	r3, r3, #31
 8002510:	fa22 f303 	lsr.w	r3, r2, r3
 8002514:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002516:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <HAL_Init+0x68>)
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	4a0e      	ldr	r2, [pc, #56]	@ (8002558 <HAL_Init+0x6c>)
 8002520:	5cd3      	ldrb	r3, [r2, r3]
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
 800252c:	4a0b      	ldr	r2, [pc, #44]	@ (800255c <HAL_Init+0x70>)
 800252e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002530:	4a0b      	ldr	r2, [pc, #44]	@ (8002560 <HAL_Init+0x74>)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002536:	200f      	movs	r0, #15
 8002538:	f000 f814 	bl	8002564 <HAL_InitTick>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e002      	b.n	800254c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002546:	f7ff fbf7 	bl	8001d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	58024400 	.word	0x58024400
 8002558:	08018e88 	.word	0x08018e88
 800255c:	2400000c 	.word	0x2400000c
 8002560:	24000008 	.word	0x24000008

08002564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800256c:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <HAL_InitTick+0x60>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d101      	bne.n	8002578 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e021      	b.n	80025bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002578:	4b13      	ldr	r3, [pc, #76]	@ (80025c8 <HAL_InitTick+0x64>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <HAL_InitTick+0x60>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002586:	fbb3 f3f1 	udiv	r3, r3, r1
 800258a:	fbb2 f3f3 	udiv	r3, r2, r3
 800258e:	4618      	mov	r0, r3
 8002590:	f001 fd9d 	bl	80040ce <HAL_SYSTICK_Config>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e00e      	b.n	80025bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b0f      	cmp	r3, #15
 80025a2:	d80a      	bhi.n	80025ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a4:	2200      	movs	r2, #0
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80025ac:	f001 fd67 	bl	800407e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b0:	4a06      	ldr	r2, [pc, #24]	@ (80025cc <HAL_InitTick+0x68>)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e000      	b.n	80025bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	24000014 	.word	0x24000014
 80025c8:	24000008 	.word	0x24000008
 80025cc:	24000010 	.word	0x24000010

080025d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025d4:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_IncTick+0x20>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	461a      	mov	r2, r3
 80025da:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_IncTick+0x24>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	4a04      	ldr	r2, [pc, #16]	@ (80025f4 <HAL_IncTick+0x24>)
 80025e2:	6013      	str	r3, [r2, #0]
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	24000014 	.word	0x24000014
 80025f4:	240005c8 	.word	0x240005c8

080025f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return uwTick;
 80025fc:	4b03      	ldr	r3, [pc, #12]	@ (800260c <HAL_GetTick+0x14>)
 80025fe:	681b      	ldr	r3, [r3, #0]
}
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	240005c8 	.word	0x240005c8

08002610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002618:	f7ff ffee 	bl	80025f8 <HAL_GetTick>
 800261c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002628:	d005      	beq.n	8002636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800262a:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <HAL_Delay+0x44>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4413      	add	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002636:	bf00      	nop
 8002638:	f7ff ffde 	bl	80025f8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	429a      	cmp	r2, r3
 8002646:	d8f7      	bhi.n	8002638 <HAL_Delay+0x28>
  {
  }
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	24000014 	.word	0x24000014

08002658 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800265c:	4b03      	ldr	r3, [pc, #12]	@ (800266c <HAL_GetREVID+0x14>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	0c1b      	lsrs	r3, r3, #16
}
 8002662:	4618      	mov	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	5c001000 	.word	0x5c001000

08002670 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	431a      	orrs	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	609a      	str	r2, [r3, #8]
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	609a      	str	r2, [r3, #8]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <LL_ADC_SetChannelPreselection+0x24>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	0e9b      	lsrs	r3, r3, #26
 80026f0:	f003 031f 	and.w	r3, r3, #31
 80026f4:	2201      	movs	r2, #1
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	e015      	b.n	8002728 <LL_ADC_SetChannelPreselection+0x50>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8002712:	2320      	movs	r3, #32
 8002714:	e003      	b.n	800271e <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	fab3 f383 	clz	r3, r3
 800271c:	b2db      	uxtb	r3, r3
 800271e:	f003 031f 	and.w	r3, r3, #31
 8002722:	2201      	movs	r2, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	69d2      	ldr	r2, [r2, #28]
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8002732:	bf00      	nop
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr

0800273e <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800273e:	b480      	push	{r7}
 8002740:	b087      	sub	sp, #28
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	3360      	adds	r3, #96	@ 0x60
 8002750:	461a      	mov	r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	4413      	add	r3, r2
 8002758:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	430b      	orrs	r3, r1
 800276c:	431a      	orrs	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002772:	bf00      	nop
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f003 031f 	and.w	r3, r3, #31
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	fa01 f303 	lsl.w	r3, r1, r3
 800279e:	431a      	orrs	r2, r3
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	611a      	str	r2, [r3, #16]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b087      	sub	sp, #28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3360      	adds	r3, #96	@ 0x60
 80027c0:	461a      	mov	r2, r3
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	601a      	str	r2, [r3, #0]
  }
}
 80027da:	bf00      	nop
 80027dc:	371c      	adds	r7, #28
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	3330      	adds	r3, #48	@ 0x30
 800281c:	461a      	mov	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	4413      	add	r3, r2
 800282a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	211f      	movs	r1, #31
 8002838:	fa01 f303 	lsl.w	r3, r1, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	401a      	ands	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	0e9b      	lsrs	r3, r3, #26
 8002844:	f003 011f 	and.w	r1, r3, #31
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	431a      	orrs	r2, r3
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002858:	bf00      	nop
 800285a:	371c      	adds	r7, #28
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3314      	adds	r3, #20
 8002874:	461a      	mov	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	0e5b      	lsrs	r3, r3, #25
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	4413      	add	r3, r2
 8002882:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	0d1b      	lsrs	r3, r3, #20
 800288c:	f003 031f 	and.w	r3, r3, #31
 8002890:	2107      	movs	r1, #7
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	401a      	ands	r2, r3
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	0d1b      	lsrs	r3, r3, #20
 800289e:	f003 031f 	and.w	r3, r3, #31
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	fa01 f303 	lsl.w	r3, r1, r3
 80028a8:	431a      	orrs	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028d4:	43db      	mvns	r3, r3
 80028d6:	401a      	ands	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0318 	and.w	r3, r3, #24
 80028de:	4908      	ldr	r1, [pc, #32]	@ (8002900 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028e0:	40d9      	lsrs	r1, r3
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	400b      	ands	r3, r1
 80028e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028ea:	431a      	orrs	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	000fffff 	.word	0x000fffff

08002904 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 031f 	and.w	r3, r3, #31
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002930:	4618      	mov	r0, r3
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	4b04      	ldr	r3, [pc, #16]	@ (800295c <LL_ADC_DisableDeepPowerDown+0x20>)
 800294a:	4013      	ands	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6093      	str	r3, [r2, #8]
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr
 800295c:	5fffffc0 	.word	0x5fffffc0

08002960 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002970:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002974:	d101      	bne.n	800297a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002976:	2301      	movs	r3, #1
 8002978:	e000      	b.n	800297c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <LL_ADC_EnableInternalRegulator+0x24>)
 8002996:	4013      	ands	r3, r2
 8002998:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	6fffffc0 	.word	0x6fffffc0

080029b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029c4:	d101      	bne.n	80029ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689a      	ldr	r2, [r3, #8]
 80029e4:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <LL_ADC_Enable+0x24>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	f043 0201 	orr.w	r2, r3, #1
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	7fffffc0 	.word	0x7fffffc0

08002a00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689a      	ldr	r2, [r3, #8]
 8002a0c:	4b05      	ldr	r3, [pc, #20]	@ (8002a24 <LL_ADC_Disable+0x24>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	f043 0202 	orr.w	r2, r3, #2
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	7fffffc0 	.word	0x7fffffc0

08002a28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <LL_ADC_IsEnabled+0x18>
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <LL_ADC_IsEnabled+0x1a>
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d101      	bne.n	8002a66 <LL_ADC_IsDisableOngoing+0x18>
 8002a62:	2301      	movs	r3, #1
 8002a64:	e000      	b.n	8002a68 <LL_ADC_IsDisableOngoing+0x1a>
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <LL_ADC_REG_StartConversion+0x24>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	f043 0204 	orr.w	r2, r3, #4
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	7fffffc0 	.word	0x7fffffc0

08002a9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d101      	bne.n	8002ab4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e000      	b.n	8002ab6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d101      	bne.n	8002ada <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b089      	sub	sp, #36	@ 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e18f      	b.n	8002e22 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d109      	bne.n	8002b24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff f92b 	bl	8001d6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff19 	bl	8002960 <LL_ADC_IsDeepPowerDownEnabled>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d004      	beq.n	8002b3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff feff 	bl	800293c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff ff34 	bl	80029b0 <LL_ADC_IsInternalRegulatorEnabled>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d114      	bne.n	8002b78 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff ff18 	bl	8002988 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b58:	4b87      	ldr	r3, [pc, #540]	@ (8002d78 <HAL_ADC_Init+0x290>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	099b      	lsrs	r3, r3, #6
 8002b5e:	4a87      	ldr	r2, [pc, #540]	@ (8002d7c <HAL_ADC_Init+0x294>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	099b      	lsrs	r3, r3, #6
 8002b66:	3301      	adds	r3, #1
 8002b68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b6a:	e002      	b.n	8002b72 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f9      	bne.n	8002b6c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff17 	bl	80029b0 <LL_ADC_IsInternalRegulatorEnabled>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10d      	bne.n	8002ba4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b8c:	f043 0210 	orr.w	r2, r3, #16
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff77 	bl	8002a9c <LL_ADC_REG_IsConversionOngoing>
 8002bae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f040 8129 	bne.w	8002e10 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f040 8125 	bne.w	8002e10 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002bce:	f043 0202 	orr.w	r2, r3, #2
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff ff24 	bl	8002a28 <LL_ADC_IsEnabled>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d136      	bne.n	8002c54 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a65      	ldr	r2, [pc, #404]	@ (8002d80 <HAL_ADC_Init+0x298>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d004      	beq.n	8002bfa <HAL_ADC_Init+0x112>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a63      	ldr	r2, [pc, #396]	@ (8002d84 <HAL_ADC_Init+0x29c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d10e      	bne.n	8002c18 <HAL_ADC_Init+0x130>
 8002bfa:	4861      	ldr	r0, [pc, #388]	@ (8002d80 <HAL_ADC_Init+0x298>)
 8002bfc:	f7ff ff14 	bl	8002a28 <LL_ADC_IsEnabled>
 8002c00:	4604      	mov	r4, r0
 8002c02:	4860      	ldr	r0, [pc, #384]	@ (8002d84 <HAL_ADC_Init+0x29c>)
 8002c04:	f7ff ff10 	bl	8002a28 <LL_ADC_IsEnabled>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	4323      	orrs	r3, r4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	bf0c      	ite	eq
 8002c10:	2301      	moveq	r3, #1
 8002c12:	2300      	movne	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e008      	b.n	8002c2a <HAL_ADC_Init+0x142>
 8002c18:	485b      	ldr	r0, [pc, #364]	@ (8002d88 <HAL_ADC_Init+0x2a0>)
 8002c1a:	f7ff ff05 	bl	8002a28 <LL_ADC_IsEnabled>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf0c      	ite	eq
 8002c24:	2301      	moveq	r3, #1
 8002c26:	2300      	movne	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d012      	beq.n	8002c54 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a53      	ldr	r2, [pc, #332]	@ (8002d80 <HAL_ADC_Init+0x298>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d004      	beq.n	8002c42 <HAL_ADC_Init+0x15a>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a51      	ldr	r2, [pc, #324]	@ (8002d84 <HAL_ADC_Init+0x29c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_Init+0x15e>
 8002c42:	4a52      	ldr	r2, [pc, #328]	@ (8002d8c <HAL_ADC_Init+0x2a4>)
 8002c44:	e000      	b.n	8002c48 <HAL_ADC_Init+0x160>
 8002c46:	4a52      	ldr	r2, [pc, #328]	@ (8002d90 <HAL_ADC_Init+0x2a8>)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4610      	mov	r0, r2
 8002c50:	f7ff fd0e 	bl	8002670 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002c54:	f7ff fd00 	bl	8002658 <HAL_GetREVID>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d914      	bls.n	8002c8c <HAL_ADC_Init+0x1a4>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d110      	bne.n	8002c8c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	7d5b      	ldrb	r3, [r3, #21]
 8002c6e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c74:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002c7a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7f1b      	ldrb	r3, [r3, #28]
 8002c80:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002c82:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c84:	f043 030c 	orr.w	r3, r3, #12
 8002c88:	61bb      	str	r3, [r7, #24]
 8002c8a:	e00d      	b.n	8002ca8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	7d5b      	ldrb	r3, [r3, #21]
 8002c90:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002c96:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002c9c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	7f1b      	ldrb	r3, [r3, #28]
 8002ca2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7f1b      	ldrb	r3, [r3, #28]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d106      	bne.n	8002cbe <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	045b      	lsls	r3, r3, #17
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cca:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d94 <HAL_ADC_Init+0x2ac>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	69b9      	ldr	r1, [r7, #24]
 8002cea:	430b      	orrs	r3, r1
 8002cec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff fed2 	bl	8002a9c <LL_ADC_REG_IsConversionOngoing>
 8002cf8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff fedf 	bl	8002ac2 <LL_ADC_INJ_IsConversionOngoing>
 8002d04:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d15f      	bne.n	8002dcc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d15c      	bne.n	8002dcc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7d1b      	ldrb	r3, [r3, #20]
 8002d16:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68da      	ldr	r2, [r3, #12]
 8002d26:	4b1c      	ldr	r3, [pc, #112]	@ (8002d98 <HAL_ADC_Init+0x2b0>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	69b9      	ldr	r1, [r7, #24]
 8002d30:	430b      	orrs	r3, r1
 8002d32:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d130      	bne.n	8002da0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	691a      	ldr	r2, [r3, #16]
 8002d4a:	4b14      	ldr	r3, [pc, #80]	@ (8002d9c <HAL_ADC_Init+0x2b4>)
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d52:	3a01      	subs	r2, #1
 8002d54:	0411      	lsls	r1, r2, #16
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d5a:	4311      	orrs	r1, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002d60:	4311      	orrs	r1, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d66:	430a      	orrs	r2, r1
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	611a      	str	r2, [r3, #16]
 8002d74:	e01c      	b.n	8002db0 <HAL_ADC_Init+0x2c8>
 8002d76:	bf00      	nop
 8002d78:	24000008 	.word	0x24000008
 8002d7c:	053e2d63 	.word	0x053e2d63
 8002d80:	40022000 	.word	0x40022000
 8002d84:	40022100 	.word	0x40022100
 8002d88:	58026000 	.word	0x58026000
 8002d8c:	40022300 	.word	0x40022300
 8002d90:	58026300 	.word	0x58026300
 8002d94:	fff0c003 	.word	0xfff0c003
 8002d98:	ffffbffc 	.word	0xffffbffc
 8002d9c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f022 0201 	bic.w	r2, r2, #1
 8002dae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fdd6 	bl	8003978 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d10c      	bne.n	8002dee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	f023 010f 	bic.w	r1, r3, #15
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	1e5a      	subs	r2, r3, #1
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30
 8002dec:	e007      	b.n	8002dfe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 020f 	bic.w	r2, r2, #15
 8002dfc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e02:	f023 0303 	bic.w	r3, r3, #3
 8002e06:	f043 0201 	orr.w	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e0e:	e007      	b.n	8002e20 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e14:	f043 0210 	orr.w	r2, r3, #16
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002e20:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3724      	adds	r7, #36	@ 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd90      	pop	{r4, r7, pc}
 8002e2a:	bf00      	nop

08002e2c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a5c      	ldr	r2, [pc, #368]	@ (8002fac <HAL_ADC_Start+0x180>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <HAL_ADC_Start+0x1c>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a5b      	ldr	r2, [pc, #364]	@ (8002fb0 <HAL_ADC_Start+0x184>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d101      	bne.n	8002e4c <HAL_ADC_Start+0x20>
 8002e48:	4b5a      	ldr	r3, [pc, #360]	@ (8002fb4 <HAL_ADC_Start+0x188>)
 8002e4a:	e000      	b.n	8002e4e <HAL_ADC_Start+0x22>
 8002e4c:	4b5a      	ldr	r3, [pc, #360]	@ (8002fb8 <HAL_ADC_Start+0x18c>)
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fd58 	bl	8002904 <LL_ADC_GetMultimode>
 8002e54:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fe1e 	bl	8002a9c <LL_ADC_REG_IsConversionOngoing>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f040 809a 	bne.w	8002f9c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d101      	bne.n	8002e76 <HAL_ADC_Start+0x4a>
 8002e72:	2302      	movs	r3, #2
 8002e74:	e095      	b.n	8002fa2 <HAL_ADC_Start+0x176>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fc90 	bl	80037a4 <ADC_Enable>
 8002e84:	4603      	mov	r3, r0
 8002e86:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f040 8081 	bne.w	8002f92 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002e94:	4b49      	ldr	r3, [pc, #292]	@ (8002fbc <HAL_ADC_Start+0x190>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a42      	ldr	r2, [pc, #264]	@ (8002fb0 <HAL_ADC_Start+0x184>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d002      	beq.n	8002eb0 <HAL_ADC_Start+0x84>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	e000      	b.n	8002eb2 <HAL_ADC_Start+0x86>
 8002eb0:	4b3e      	ldr	r3, [pc, #248]	@ (8002fac <HAL_ADC_Start+0x180>)
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d002      	beq.n	8002ec0 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d105      	bne.n	8002ecc <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed8:	d106      	bne.n	8002ee8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	f023 0206 	bic.w	r2, r3, #6
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ee6:	e002      	b.n	8002eee <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	221c      	movs	r2, #28
 8002ef4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a2b      	ldr	r2, [pc, #172]	@ (8002fb0 <HAL_ADC_Start+0x184>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d002      	beq.n	8002f0e <HAL_ADC_Start+0xe2>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	e000      	b.n	8002f10 <HAL_ADC_Start+0xe4>
 8002f0e:	4b27      	ldr	r3, [pc, #156]	@ (8002fac <HAL_ADC_Start+0x180>)
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d008      	beq.n	8002f2a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d005      	beq.n	8002f2a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	d002      	beq.n	8002f2a <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2b09      	cmp	r3, #9
 8002f28:	d114      	bne.n	8002f54 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d007      	beq.n	8002f48 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f40:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fd91 	bl	8002a74 <LL_ADC_REG_StartConversion>
 8002f52:	e025      	b.n	8002fa0 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f58:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a12      	ldr	r2, [pc, #72]	@ (8002fb0 <HAL_ADC_Start+0x184>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d002      	beq.n	8002f70 <HAL_ADC_Start+0x144>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	e000      	b.n	8002f72 <HAL_ADC_Start+0x146>
 8002f70:	4b0e      	ldr	r3, [pc, #56]	@ (8002fac <HAL_ADC_Start+0x180>)
 8002f72:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00f      	beq.n	8002fa0 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f88:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f90:	e006      	b.n	8002fa0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002f9a:	e001      	b.n	8002fa0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40022000 	.word	0x40022000
 8002fb0:	40022100 	.word	0x40022100
 8002fb4:	40022300 	.word	0x40022300
 8002fb8:	58026300 	.word	0x58026300
 8002fbc:	fffff0fe 	.word	0xfffff0fe

08002fc0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a72      	ldr	r2, [pc, #456]	@ (8003198 <HAL_ADC_PollForConversion+0x1d8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_ADC_PollForConversion+0x1e>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a70      	ldr	r2, [pc, #448]	@ (800319c <HAL_ADC_PollForConversion+0x1dc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_PollForConversion+0x22>
 8002fde:	4b70      	ldr	r3, [pc, #448]	@ (80031a0 <HAL_ADC_PollForConversion+0x1e0>)
 8002fe0:	e000      	b.n	8002fe4 <HAL_ADC_PollForConversion+0x24>
 8002fe2:	4b70      	ldr	r3, [pc, #448]	@ (80031a4 <HAL_ADC_PollForConversion+0x1e4>)
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7ff fc8d 	bl	8002904 <LL_ADC_GetMultimode>
 8002fea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d102      	bne.n	8002ffa <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002ff4:	2308      	movs	r3, #8
 8002ff6:	61fb      	str	r3, [r7, #28]
 8002ff8:	e037      	b.n	800306a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b05      	cmp	r3, #5
 8003004:	d002      	beq.n	800300c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b09      	cmp	r3, #9
 800300a:	d111      	bne.n	8003030 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800301e:	f043 0220 	orr.w	r2, r3, #32
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0b1      	b.n	800318e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800302a:	2304      	movs	r3, #4
 800302c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800302e:	e01c      	b.n	800306a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a58      	ldr	r2, [pc, #352]	@ (8003198 <HAL_ADC_PollForConversion+0x1d8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d004      	beq.n	8003044 <HAL_ADC_PollForConversion+0x84>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a57      	ldr	r2, [pc, #348]	@ (800319c <HAL_ADC_PollForConversion+0x1dc>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d101      	bne.n	8003048 <HAL_ADC_PollForConversion+0x88>
 8003044:	4b56      	ldr	r3, [pc, #344]	@ (80031a0 <HAL_ADC_PollForConversion+0x1e0>)
 8003046:	e000      	b.n	800304a <HAL_ADC_PollForConversion+0x8a>
 8003048:	4b56      	ldr	r3, [pc, #344]	@ (80031a4 <HAL_ADC_PollForConversion+0x1e4>)
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fc68 	bl	8002920 <LL_ADC_GetMultiDMATransfer>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800305a:	f043 0220 	orr.w	r2, r3, #32
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e093      	b.n	800318e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003066:	2304      	movs	r3, #4
 8003068:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800306a:	f7ff fac5 	bl	80025f8 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003070:	e021      	b.n	80030b6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003078:	d01d      	beq.n	80030b6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800307a:	f7ff fabd 	bl	80025f8 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <HAL_ADC_PollForConversion+0xd0>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d112      	bne.n	80030b6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	4013      	ands	r3, r2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10b      	bne.n	80030b6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030a2:	f043 0204 	orr.w	r2, r3, #4
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e06b      	b.n	800318e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0d6      	beq.n	8003072 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fb86 	bl	80027e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d01c      	beq.n	800311a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	7d5b      	ldrb	r3, [r3, #21]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d118      	bne.n	800311a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b08      	cmp	r3, #8
 80030f4:	d111      	bne.n	800311a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003106:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d105      	bne.n	800311a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1f      	ldr	r2, [pc, #124]	@ (800319c <HAL_ADC_PollForConversion+0x1dc>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d002      	beq.n	800312a <HAL_ADC_PollForConversion+0x16a>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	e000      	b.n	800312c <HAL_ADC_PollForConversion+0x16c>
 800312a:	4b1b      	ldr	r3, [pc, #108]	@ (8003198 <HAL_ADC_PollForConversion+0x1d8>)
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	4293      	cmp	r3, r2
 8003132:	d008      	beq.n	8003146 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	2b05      	cmp	r3, #5
 800313e:	d002      	beq.n	8003146 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b09      	cmp	r3, #9
 8003144:	d104      	bne.n	8003150 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	e00c      	b.n	800316a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a11      	ldr	r2, [pc, #68]	@ (800319c <HAL_ADC_PollForConversion+0x1dc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d002      	beq.n	8003160 <HAL_ADC_PollForConversion+0x1a0>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	e000      	b.n	8003162 <HAL_ADC_PollForConversion+0x1a2>
 8003160:	4b0d      	ldr	r3, [pc, #52]	@ (8003198 <HAL_ADC_PollForConversion+0x1d8>)
 8003162:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	2b08      	cmp	r3, #8
 800316e:	d104      	bne.n	800317a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2208      	movs	r2, #8
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e008      	b.n	800318c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d103      	bne.n	800318c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	220c      	movs	r2, #12
 800318a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40022000 	.word	0x40022000
 800319c:	40022100 	.word	0x40022100
 80031a0:	40022300 	.word	0x40022300
 80031a4:	58026300 	.word	0x58026300

080031a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b08d      	sub	sp, #52	@ 0x34
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	4a65      	ldr	r2, [pc, #404]	@ (8003374 <HAL_ADC_ConfigChannel+0x1b0>)
 80031de:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x2a>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e2c7      	b.n	800377e <HAL_ADC_ConfigChannel+0x5ba>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fc4e 	bl	8002a9c <LL_ADC_REG_IsConversionOngoing>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 82ac 	bne.w	8003760 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	db2c      	blt.n	800326a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003218:	2b00      	cmp	r3, #0
 800321a:	d108      	bne.n	800322e <HAL_ADC_ConfigChannel+0x6a>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	2201      	movs	r2, #1
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	e016      	b.n	800325c <HAL_ADC_ConfigChannel+0x98>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	fa93 f3a3 	rbit	r3, r3
 800323a:	613b      	str	r3, [r7, #16]
  return result;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8003246:	2320      	movs	r3, #32
 8003248:	e003      	b.n	8003252 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	fab3 f383 	clz	r3, r3
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f003 031f 	and.w	r3, r3, #31
 8003256:	2201      	movs	r2, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6812      	ldr	r2, [r2, #0]
 8003260:	69d1      	ldr	r1, [r2, #28]
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6812      	ldr	r2, [r2, #0]
 8003266:	430b      	orrs	r3, r1
 8003268:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	f7ff fac8 	bl	800280c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fc0b 	bl	8002a9c <LL_ADC_REG_IsConversionOngoing>
 8003286:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fc18 	bl	8002ac2 <LL_ADC_INJ_IsConversionOngoing>
 8003292:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003296:	2b00      	cmp	r3, #0
 8003298:	f040 80b8 	bne.w	800340c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f040 80b4 	bne.w	800340c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	6819      	ldr	r1, [r3, #0]
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	461a      	mov	r2, r3
 80032b2:	f7ff fad7 	bl	8002864 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80032b6:	4b30      	ldr	r3, [pc, #192]	@ (8003378 <HAL_ADC_ConfigChannel+0x1b4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80032be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032c2:	d10b      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x118>
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	695a      	ldr	r2, [r3, #20]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	089b      	lsrs	r3, r3, #2
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	e01d      	b.n	8003318 <HAL_ADC_ConfigChannel+0x154>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10b      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x13e>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	089b      	lsrs	r3, r3, #2
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	e00a      	b.n	8003318 <HAL_ADC_ConfigChannel+0x154>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695a      	ldr	r2, [r3, #20]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	089b      	lsrs	r3, r3, #2
 800330e:	f003 0304 	and.w	r3, r3, #4
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	2b04      	cmp	r3, #4
 8003320:	d02c      	beq.n	800337c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6919      	ldr	r1, [r3, #16]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	f7ff fa05 	bl	800273e <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6818      	ldr	r0, [r3, #0]
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	6919      	ldr	r1, [r3, #16]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	7e5b      	ldrb	r3, [r3, #25]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d102      	bne.n	800334a <HAL_ADC_ConfigChannel+0x186>
 8003344:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003348:	e000      	b.n	800334c <HAL_ADC_ConfigChannel+0x188>
 800334a:	2300      	movs	r3, #0
 800334c:	461a      	mov	r2, r3
 800334e:	f7ff fa2f 	bl	80027b0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6919      	ldr	r1, [r3, #16]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	7e1b      	ldrb	r3, [r3, #24]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d102      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x1a4>
 8003362:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003366:	e000      	b.n	800336a <HAL_ADC_ConfigChannel+0x1a6>
 8003368:	2300      	movs	r3, #0
 800336a:	461a      	mov	r2, r3
 800336c:	f7ff fa07 	bl	800277e <LL_ADC_SetDataRightShift>
 8003370:	e04c      	b.n	800340c <HAL_ADC_ConfigChannel+0x248>
 8003372:	bf00      	nop
 8003374:	47ff0000 	.word	0x47ff0000
 8003378:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003382:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	069b      	lsls	r3, r3, #26
 800338c:	429a      	cmp	r2, r3
 800338e:	d107      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800339e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	069b      	lsls	r3, r3, #26
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d107      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80033c2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	069b      	lsls	r3, r3, #26
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d107      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80033e6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	069b      	lsls	r3, r3, #26
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d107      	bne.n	800340c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800340a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7ff fb09 	bl	8002a28 <LL_ADC_IsEnabled>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	f040 81aa 	bne.w	8003772 <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6818      	ldr	r0, [r3, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	461a      	mov	r2, r3
 800342c:	f7ff fa46 	bl	80028bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a87      	ldr	r2, [pc, #540]	@ (8003654 <HAL_ADC_ConfigChannel+0x490>)
 8003436:	4293      	cmp	r3, r2
 8003438:	f040 809a 	bne.w	8003570 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4984      	ldr	r1, [pc, #528]	@ (8003658 <HAL_ADC_ConfigChannel+0x494>)
 8003446:	428b      	cmp	r3, r1
 8003448:	d147      	bne.n	80034da <HAL_ADC_ConfigChannel+0x316>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4983      	ldr	r1, [pc, #524]	@ (800365c <HAL_ADC_ConfigChannel+0x498>)
 8003450:	428b      	cmp	r3, r1
 8003452:	d040      	beq.n	80034d6 <HAL_ADC_ConfigChannel+0x312>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4981      	ldr	r1, [pc, #516]	@ (8003660 <HAL_ADC_ConfigChannel+0x49c>)
 800345a:	428b      	cmp	r3, r1
 800345c:	d039      	beq.n	80034d2 <HAL_ADC_ConfigChannel+0x30e>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4980      	ldr	r1, [pc, #512]	@ (8003664 <HAL_ADC_ConfigChannel+0x4a0>)
 8003464:	428b      	cmp	r3, r1
 8003466:	d032      	beq.n	80034ce <HAL_ADC_ConfigChannel+0x30a>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	497e      	ldr	r1, [pc, #504]	@ (8003668 <HAL_ADC_ConfigChannel+0x4a4>)
 800346e:	428b      	cmp	r3, r1
 8003470:	d02b      	beq.n	80034ca <HAL_ADC_ConfigChannel+0x306>
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	497d      	ldr	r1, [pc, #500]	@ (800366c <HAL_ADC_ConfigChannel+0x4a8>)
 8003478:	428b      	cmp	r3, r1
 800347a:	d024      	beq.n	80034c6 <HAL_ADC_ConfigChannel+0x302>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	497b      	ldr	r1, [pc, #492]	@ (8003670 <HAL_ADC_ConfigChannel+0x4ac>)
 8003482:	428b      	cmp	r3, r1
 8003484:	d01d      	beq.n	80034c2 <HAL_ADC_ConfigChannel+0x2fe>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	497a      	ldr	r1, [pc, #488]	@ (8003674 <HAL_ADC_ConfigChannel+0x4b0>)
 800348c:	428b      	cmp	r3, r1
 800348e:	d016      	beq.n	80034be <HAL_ADC_ConfigChannel+0x2fa>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4978      	ldr	r1, [pc, #480]	@ (8003678 <HAL_ADC_ConfigChannel+0x4b4>)
 8003496:	428b      	cmp	r3, r1
 8003498:	d00f      	beq.n	80034ba <HAL_ADC_ConfigChannel+0x2f6>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4977      	ldr	r1, [pc, #476]	@ (800367c <HAL_ADC_ConfigChannel+0x4b8>)
 80034a0:	428b      	cmp	r3, r1
 80034a2:	d008      	beq.n	80034b6 <HAL_ADC_ConfigChannel+0x2f2>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4975      	ldr	r1, [pc, #468]	@ (8003680 <HAL_ADC_ConfigChannel+0x4bc>)
 80034aa:	428b      	cmp	r3, r1
 80034ac:	d101      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x2ee>
 80034ae:	4b75      	ldr	r3, [pc, #468]	@ (8003684 <HAL_ADC_ConfigChannel+0x4c0>)
 80034b0:	e05a      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 80034b2:	2300      	movs	r3, #0
 80034b4:	e058      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 80034b6:	4b74      	ldr	r3, [pc, #464]	@ (8003688 <HAL_ADC_ConfigChannel+0x4c4>)
 80034b8:	e056      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 80034ba:	4b74      	ldr	r3, [pc, #464]	@ (800368c <HAL_ADC_ConfigChannel+0x4c8>)
 80034bc:	e054      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 80034be:	4b6e      	ldr	r3, [pc, #440]	@ (8003678 <HAL_ADC_ConfigChannel+0x4b4>)
 80034c0:	e052      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 80034c2:	4b6c      	ldr	r3, [pc, #432]	@ (8003674 <HAL_ADC_ConfigChannel+0x4b0>)
 80034c4:	e050      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 80034c6:	4b72      	ldr	r3, [pc, #456]	@ (8003690 <HAL_ADC_ConfigChannel+0x4cc>)
 80034c8:	e04e      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 80034ca:	4b72      	ldr	r3, [pc, #456]	@ (8003694 <HAL_ADC_ConfigChannel+0x4d0>)
 80034cc:	e04c      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 80034ce:	4b72      	ldr	r3, [pc, #456]	@ (8003698 <HAL_ADC_ConfigChannel+0x4d4>)
 80034d0:	e04a      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 80034d2:	4b72      	ldr	r3, [pc, #456]	@ (800369c <HAL_ADC_ConfigChannel+0x4d8>)
 80034d4:	e048      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e046      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4970      	ldr	r1, [pc, #448]	@ (80036a0 <HAL_ADC_ConfigChannel+0x4dc>)
 80034e0:	428b      	cmp	r3, r1
 80034e2:	d140      	bne.n	8003566 <HAL_ADC_ConfigChannel+0x3a2>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	495c      	ldr	r1, [pc, #368]	@ (800365c <HAL_ADC_ConfigChannel+0x498>)
 80034ea:	428b      	cmp	r3, r1
 80034ec:	d039      	beq.n	8003562 <HAL_ADC_ConfigChannel+0x39e>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	495b      	ldr	r1, [pc, #364]	@ (8003660 <HAL_ADC_ConfigChannel+0x49c>)
 80034f4:	428b      	cmp	r3, r1
 80034f6:	d032      	beq.n	800355e <HAL_ADC_ConfigChannel+0x39a>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4959      	ldr	r1, [pc, #356]	@ (8003664 <HAL_ADC_ConfigChannel+0x4a0>)
 80034fe:	428b      	cmp	r3, r1
 8003500:	d02b      	beq.n	800355a <HAL_ADC_ConfigChannel+0x396>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4958      	ldr	r1, [pc, #352]	@ (8003668 <HAL_ADC_ConfigChannel+0x4a4>)
 8003508:	428b      	cmp	r3, r1
 800350a:	d024      	beq.n	8003556 <HAL_ADC_ConfigChannel+0x392>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4956      	ldr	r1, [pc, #344]	@ (800366c <HAL_ADC_ConfigChannel+0x4a8>)
 8003512:	428b      	cmp	r3, r1
 8003514:	d01d      	beq.n	8003552 <HAL_ADC_ConfigChannel+0x38e>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4955      	ldr	r1, [pc, #340]	@ (8003670 <HAL_ADC_ConfigChannel+0x4ac>)
 800351c:	428b      	cmp	r3, r1
 800351e:	d016      	beq.n	800354e <HAL_ADC_ConfigChannel+0x38a>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4953      	ldr	r1, [pc, #332]	@ (8003674 <HAL_ADC_ConfigChannel+0x4b0>)
 8003526:	428b      	cmp	r3, r1
 8003528:	d00f      	beq.n	800354a <HAL_ADC_ConfigChannel+0x386>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4952      	ldr	r1, [pc, #328]	@ (8003678 <HAL_ADC_ConfigChannel+0x4b4>)
 8003530:	428b      	cmp	r3, r1
 8003532:	d008      	beq.n	8003546 <HAL_ADC_ConfigChannel+0x382>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4951      	ldr	r1, [pc, #324]	@ (8003680 <HAL_ADC_ConfigChannel+0x4bc>)
 800353a:	428b      	cmp	r3, r1
 800353c:	d101      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x37e>
 800353e:	4b51      	ldr	r3, [pc, #324]	@ (8003684 <HAL_ADC_ConfigChannel+0x4c0>)
 8003540:	e012      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 8003542:	2300      	movs	r3, #0
 8003544:	e010      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 8003546:	4b51      	ldr	r3, [pc, #324]	@ (800368c <HAL_ADC_ConfigChannel+0x4c8>)
 8003548:	e00e      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 800354a:	4b4b      	ldr	r3, [pc, #300]	@ (8003678 <HAL_ADC_ConfigChannel+0x4b4>)
 800354c:	e00c      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 800354e:	4b49      	ldr	r3, [pc, #292]	@ (8003674 <HAL_ADC_ConfigChannel+0x4b0>)
 8003550:	e00a      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 8003552:	4b4f      	ldr	r3, [pc, #316]	@ (8003690 <HAL_ADC_ConfigChannel+0x4cc>)
 8003554:	e008      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 8003556:	4b4f      	ldr	r3, [pc, #316]	@ (8003694 <HAL_ADC_ConfigChannel+0x4d0>)
 8003558:	e006      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 800355a:	4b4f      	ldr	r3, [pc, #316]	@ (8003698 <HAL_ADC_ConfigChannel+0x4d4>)
 800355c:	e004      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 800355e:	4b4f      	ldr	r3, [pc, #316]	@ (800369c <HAL_ADC_ConfigChannel+0x4d8>)
 8003560:	e002      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_ADC_ConfigChannel+0x3a4>
 8003566:	2300      	movs	r3, #0
 8003568:	4619      	mov	r1, r3
 800356a:	4610      	mov	r0, r2
 800356c:	f7ff f8b4 	bl	80026d8 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f280 80fc 	bge.w	8003772 <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a36      	ldr	r2, [pc, #216]	@ (8003658 <HAL_ADC_ConfigChannel+0x494>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d004      	beq.n	800358e <HAL_ADC_ConfigChannel+0x3ca>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a45      	ldr	r2, [pc, #276]	@ (80036a0 <HAL_ADC_ConfigChannel+0x4dc>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d101      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x3ce>
 800358e:	4b45      	ldr	r3, [pc, #276]	@ (80036a4 <HAL_ADC_ConfigChannel+0x4e0>)
 8003590:	e000      	b.n	8003594 <HAL_ADC_ConfigChannel+0x3d0>
 8003592:	4b45      	ldr	r3, [pc, #276]	@ (80036a8 <HAL_ADC_ConfigChannel+0x4e4>)
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff f891 	bl	80026bc <LL_ADC_GetCommonPathInternalCh>
 800359a:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003658 <HAL_ADC_ConfigChannel+0x494>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d004      	beq.n	80035b0 <HAL_ADC_ConfigChannel+0x3ec>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a3d      	ldr	r2, [pc, #244]	@ (80036a0 <HAL_ADC_ConfigChannel+0x4dc>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d10e      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x40a>
 80035b0:	4829      	ldr	r0, [pc, #164]	@ (8003658 <HAL_ADC_ConfigChannel+0x494>)
 80035b2:	f7ff fa39 	bl	8002a28 <LL_ADC_IsEnabled>
 80035b6:	4604      	mov	r4, r0
 80035b8:	4839      	ldr	r0, [pc, #228]	@ (80036a0 <HAL_ADC_ConfigChannel+0x4dc>)
 80035ba:	f7ff fa35 	bl	8002a28 <LL_ADC_IsEnabled>
 80035be:	4603      	mov	r3, r0
 80035c0:	4323      	orrs	r3, r4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	e008      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x41c>
 80035ce:	4837      	ldr	r0, [pc, #220]	@ (80036ac <HAL_ADC_ConfigChannel+0x4e8>)
 80035d0:	f7ff fa2a 	bl	8002a28 <LL_ADC_IsEnabled>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	bf0c      	ite	eq
 80035da:	2301      	moveq	r3, #1
 80035dc:	2300      	movne	r3, #0
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80b3 	beq.w	800374c <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a31      	ldr	r2, [pc, #196]	@ (80036b0 <HAL_ADC_ConfigChannel+0x4ec>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d165      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x4f8>
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d160      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a2b      	ldr	r2, [pc, #172]	@ (80036ac <HAL_ADC_ConfigChannel+0x4e8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	f040 80b6 	bne.w	8003772 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a13      	ldr	r2, [pc, #76]	@ (8003658 <HAL_ADC_ConfigChannel+0x494>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d004      	beq.n	800361a <HAL_ADC_ConfigChannel+0x456>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a22      	ldr	r2, [pc, #136]	@ (80036a0 <HAL_ADC_ConfigChannel+0x4dc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <HAL_ADC_ConfigChannel+0x45a>
 800361a:	4a22      	ldr	r2, [pc, #136]	@ (80036a4 <HAL_ADC_ConfigChannel+0x4e0>)
 800361c:	e000      	b.n	8003620 <HAL_ADC_ConfigChannel+0x45c>
 800361e:	4a22      	ldr	r2, [pc, #136]	@ (80036a8 <HAL_ADC_ConfigChannel+0x4e4>)
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f7ff f834 	bl	8002696 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800362e:	4b21      	ldr	r3, [pc, #132]	@ (80036b4 <HAL_ADC_ConfigChannel+0x4f0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	099b      	lsrs	r3, r3, #6
 8003634:	4a20      	ldr	r2, [pc, #128]	@ (80036b8 <HAL_ADC_ConfigChannel+0x4f4>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	099b      	lsrs	r3, r3, #6
 800363c:	3301      	adds	r3, #1
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003642:	e002      	b.n	800364a <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3b01      	subs	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f9      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003650:	e08f      	b.n	8003772 <HAL_ADC_ConfigChannel+0x5ae>
 8003652:	bf00      	nop
 8003654:	47ff0000 	.word	0x47ff0000
 8003658:	40022000 	.word	0x40022000
 800365c:	04300002 	.word	0x04300002
 8003660:	08600004 	.word	0x08600004
 8003664:	0c900008 	.word	0x0c900008
 8003668:	10c00010 	.word	0x10c00010
 800366c:	14f00020 	.word	0x14f00020
 8003670:	2a000400 	.word	0x2a000400
 8003674:	2e300800 	.word	0x2e300800
 8003678:	32601000 	.word	0x32601000
 800367c:	43210000 	.word	0x43210000
 8003680:	4b840000 	.word	0x4b840000
 8003684:	4fb80000 	.word	0x4fb80000
 8003688:	47520000 	.word	0x47520000
 800368c:	36902000 	.word	0x36902000
 8003690:	25b00200 	.word	0x25b00200
 8003694:	21800100 	.word	0x21800100
 8003698:	1d500080 	.word	0x1d500080
 800369c:	19200040 	.word	0x19200040
 80036a0:	40022100 	.word	0x40022100
 80036a4:	40022300 	.word	0x40022300
 80036a8:	58026300 	.word	0x58026300
 80036ac:	58026000 	.word	0x58026000
 80036b0:	cb840000 	.word	0xcb840000
 80036b4:	24000008 	.word	0x24000008
 80036b8:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a31      	ldr	r2, [pc, #196]	@ (8003788 <HAL_ADC_ConfigChannel+0x5c4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d11e      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x540>
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d119      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a2d      	ldr	r2, [pc, #180]	@ (800378c <HAL_ADC_ConfigChannel+0x5c8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d14b      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a2c      	ldr	r2, [pc, #176]	@ (8003790 <HAL_ADC_ConfigChannel+0x5cc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d004      	beq.n	80036ee <HAL_ADC_ConfigChannel+0x52a>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003794 <HAL_ADC_ConfigChannel+0x5d0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d101      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x52e>
 80036ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003798 <HAL_ADC_ConfigChannel+0x5d4>)
 80036f0:	e000      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x530>
 80036f2:	4a2a      	ldr	r2, [pc, #168]	@ (800379c <HAL_ADC_ConfigChannel+0x5d8>)
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036fa:	4619      	mov	r1, r3
 80036fc:	4610      	mov	r0, r2
 80036fe:	f7fe ffca 	bl	8002696 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003702:	e036      	b.n	8003772 <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a25      	ldr	r2, [pc, #148]	@ (80037a0 <HAL_ADC_ConfigChannel+0x5dc>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d131      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x5ae>
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d12c      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a1b      	ldr	r2, [pc, #108]	@ (800378c <HAL_ADC_ConfigChannel+0x5c8>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d127      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a1a      	ldr	r2, [pc, #104]	@ (8003790 <HAL_ADC_ConfigChannel+0x5cc>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <HAL_ADC_ConfigChannel+0x572>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a18      	ldr	r2, [pc, #96]	@ (8003794 <HAL_ADC_ConfigChannel+0x5d0>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d101      	bne.n	800373a <HAL_ADC_ConfigChannel+0x576>
 8003736:	4a18      	ldr	r2, [pc, #96]	@ (8003798 <HAL_ADC_ConfigChannel+0x5d4>)
 8003738:	e000      	b.n	800373c <HAL_ADC_ConfigChannel+0x578>
 800373a:	4a18      	ldr	r2, [pc, #96]	@ (800379c <HAL_ADC_ConfigChannel+0x5d8>)
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003742:	4619      	mov	r1, r3
 8003744:	4610      	mov	r0, r2
 8003746:	f7fe ffa6 	bl	8002696 <LL_ADC_SetCommonPathInternalCh>
 800374a:	e012      	b.n	8003772 <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003750:	f043 0220 	orr.w	r2, r3, #32
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800375e:	e008      	b.n	8003772 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003764:	f043 0220 	orr.w	r2, r3, #32
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800377a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800377e:	4618      	mov	r0, r3
 8003780:	3734      	adds	r7, #52	@ 0x34
 8003782:	46bd      	mov	sp, r7
 8003784:	bd90      	pop	{r4, r7, pc}
 8003786:	bf00      	nop
 8003788:	c7520000 	.word	0xc7520000
 800378c:	58026000 	.word	0x58026000
 8003790:	40022000 	.word	0x40022000
 8003794:	40022100 	.word	0x40022100
 8003798:	40022300 	.word	0x40022300
 800379c:	58026300 	.word	0x58026300
 80037a0:	cfb80000 	.word	0xcfb80000

080037a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff f939 	bl	8002a28 <LL_ADC_IsEnabled>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d16e      	bne.n	800389a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	4b38      	ldr	r3, [pc, #224]	@ (80038a4 <ADC_Enable+0x100>)
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00d      	beq.n	80037e6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ce:	f043 0210 	orr.w	r2, r3, #16
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037da:	f043 0201 	orr.w	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e05a      	b.n	800389c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff f8f4 	bl	80029d8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80037f0:	f7fe ff02 	bl	80025f8 <HAL_GetTick>
 80037f4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a2b      	ldr	r2, [pc, #172]	@ (80038a8 <ADC_Enable+0x104>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <ADC_Enable+0x66>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a29      	ldr	r2, [pc, #164]	@ (80038ac <ADC_Enable+0x108>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d101      	bne.n	800380e <ADC_Enable+0x6a>
 800380a:	4b29      	ldr	r3, [pc, #164]	@ (80038b0 <ADC_Enable+0x10c>)
 800380c:	e000      	b.n	8003810 <ADC_Enable+0x6c>
 800380e:	4b29      	ldr	r3, [pc, #164]	@ (80038b4 <ADC_Enable+0x110>)
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff f877 	bl	8002904 <LL_ADC_GetMultimode>
 8003816:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a23      	ldr	r2, [pc, #140]	@ (80038ac <ADC_Enable+0x108>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d002      	beq.n	8003828 <ADC_Enable+0x84>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	e000      	b.n	800382a <ADC_Enable+0x86>
 8003828:	4b1f      	ldr	r3, [pc, #124]	@ (80038a8 <ADC_Enable+0x104>)
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	4293      	cmp	r3, r2
 8003830:	d02c      	beq.n	800388c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d130      	bne.n	800389a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003838:	e028      	b.n	800388c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff f8f2 	bl	8002a28 <LL_ADC_IsEnabled>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d104      	bne.n	8003854 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff f8c2 	bl	80029d8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003854:	f7fe fed0 	bl	80025f8 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d914      	bls.n	800388c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b01      	cmp	r3, #1
 800386e:	d00d      	beq.n	800388c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003874:	f043 0210 	orr.w	r2, r3, #16
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003880:	f043 0201 	orr.w	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e007      	b.n	800389c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b01      	cmp	r3, #1
 8003898:	d1cf      	bne.n	800383a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	8000003f 	.word	0x8000003f
 80038a8:	40022000 	.word	0x40022000
 80038ac:	40022100 	.word	0x40022100
 80038b0:	40022300 	.word	0x40022300
 80038b4:	58026300 	.word	0x58026300

080038b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff f8c2 	bl	8002a4e <LL_ADC_IsDisableOngoing>
 80038ca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff f8a9 	bl	8002a28 <LL_ADC_IsEnabled>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d047      	beq.n	800396c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d144      	bne.n	800396c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 030d 	and.w	r3, r3, #13
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d10c      	bne.n	800390a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff f883 	bl	8002a00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2203      	movs	r2, #3
 8003900:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003902:	f7fe fe79 	bl	80025f8 <HAL_GetTick>
 8003906:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003908:	e029      	b.n	800395e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390e:	f043 0210 	orr.w	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391a:	f043 0201 	orr.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e023      	b.n	800396e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003926:	f7fe fe67 	bl	80025f8 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d914      	bls.n	800395e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00d      	beq.n	800395e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003946:	f043 0210 	orr.w	r2, r3, #16
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003952:	f043 0201 	orr.w	r2, r3, #1
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e007      	b.n	800396e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1dc      	bne.n	8003926 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3710      	adds	r7, #16
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
	...

08003978 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a7a      	ldr	r2, [pc, #488]	@ (8003b70 <ADC_ConfigureBoostMode+0x1f8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <ADC_ConfigureBoostMode+0x1c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a79      	ldr	r2, [pc, #484]	@ (8003b74 <ADC_ConfigureBoostMode+0x1fc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d109      	bne.n	80039a8 <ADC_ConfigureBoostMode+0x30>
 8003994:	4b78      	ldr	r3, [pc, #480]	@ (8003b78 <ADC_ConfigureBoostMode+0x200>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf14      	ite	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	2300      	moveq	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e008      	b.n	80039ba <ADC_ConfigureBoostMode+0x42>
 80039a8:	4b74      	ldr	r3, [pc, #464]	@ (8003b7c <ADC_ConfigureBoostMode+0x204>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01c      	beq.n	80039f8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80039be:	f003 f861 	bl	8006a84 <HAL_RCC_GetHCLKFreq>
 80039c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039cc:	d010      	beq.n	80039f0 <ADC_ConfigureBoostMode+0x78>
 80039ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039d2:	d873      	bhi.n	8003abc <ADC_ConfigureBoostMode+0x144>
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d8:	d002      	beq.n	80039e0 <ADC_ConfigureBoostMode+0x68>
 80039da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039de:	d16d      	bne.n	8003abc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	0c1b      	lsrs	r3, r3, #16
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ec:	60fb      	str	r3, [r7, #12]
        break;
 80039ee:	e068      	b.n	8003ac2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	089b      	lsrs	r3, r3, #2
 80039f4:	60fb      	str	r3, [r7, #12]
        break;
 80039f6:	e064      	b.n	8003ac2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80039f8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80039fc:	f04f 0100 	mov.w	r1, #0
 8003a00:	f004 faa6 	bl	8007f50 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a04:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003a0e:	d051      	beq.n	8003ab4 <ADC_ConfigureBoostMode+0x13c>
 8003a10:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003a14:	d854      	bhi.n	8003ac0 <ADC_ConfigureBoostMode+0x148>
 8003a16:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003a1a:	d047      	beq.n	8003aac <ADC_ConfigureBoostMode+0x134>
 8003a1c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003a20:	d84e      	bhi.n	8003ac0 <ADC_ConfigureBoostMode+0x148>
 8003a22:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003a26:	d03d      	beq.n	8003aa4 <ADC_ConfigureBoostMode+0x12c>
 8003a28:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003a2c:	d848      	bhi.n	8003ac0 <ADC_ConfigureBoostMode+0x148>
 8003a2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a32:	d033      	beq.n	8003a9c <ADC_ConfigureBoostMode+0x124>
 8003a34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a38:	d842      	bhi.n	8003ac0 <ADC_ConfigureBoostMode+0x148>
 8003a3a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003a3e:	d029      	beq.n	8003a94 <ADC_ConfigureBoostMode+0x11c>
 8003a40:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003a44:	d83c      	bhi.n	8003ac0 <ADC_ConfigureBoostMode+0x148>
 8003a46:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003a4a:	d01a      	beq.n	8003a82 <ADC_ConfigureBoostMode+0x10a>
 8003a4c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003a50:	d836      	bhi.n	8003ac0 <ADC_ConfigureBoostMode+0x148>
 8003a52:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003a56:	d014      	beq.n	8003a82 <ADC_ConfigureBoostMode+0x10a>
 8003a58:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003a5c:	d830      	bhi.n	8003ac0 <ADC_ConfigureBoostMode+0x148>
 8003a5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a62:	d00e      	beq.n	8003a82 <ADC_ConfigureBoostMode+0x10a>
 8003a64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a68:	d82a      	bhi.n	8003ac0 <ADC_ConfigureBoostMode+0x148>
 8003a6a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a6e:	d008      	beq.n	8003a82 <ADC_ConfigureBoostMode+0x10a>
 8003a70:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003a74:	d824      	bhi.n	8003ac0 <ADC_ConfigureBoostMode+0x148>
 8003a76:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a7a:	d002      	beq.n	8003a82 <ADC_ConfigureBoostMode+0x10a>
 8003a7c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a80:	d11e      	bne.n	8003ac0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	0c9b      	lsrs	r3, r3, #18
 8003a88:	005b      	lsls	r3, r3, #1
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a90:	60fb      	str	r3, [r7, #12]
        break;
 8003a92:	e016      	b.n	8003ac2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	60fb      	str	r3, [r7, #12]
        break;
 8003a9a:	e012      	b.n	8003ac2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	60fb      	str	r3, [r7, #12]
        break;
 8003aa2:	e00e      	b.n	8003ac2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	099b      	lsrs	r3, r3, #6
 8003aa8:	60fb      	str	r3, [r7, #12]
        break;
 8003aaa:	e00a      	b.n	8003ac2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	09db      	lsrs	r3, r3, #7
 8003ab0:	60fb      	str	r3, [r7, #12]
        break;
 8003ab2:	e006      	b.n	8003ac2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	0a1b      	lsrs	r3, r3, #8
 8003ab8:	60fb      	str	r3, [r7, #12]
        break;
 8003aba:	e002      	b.n	8003ac2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003abc:	bf00      	nop
 8003abe:	e000      	b.n	8003ac2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003ac0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003ac2:	f7fe fdc9 	bl	8002658 <HAL_GetREVID>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d815      	bhi.n	8003afc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8003b80 <ADC_ConfigureBoostMode+0x208>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d908      	bls.n	8003aea <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ae6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003ae8:	e03e      	b.n	8003b68 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689a      	ldr	r2, [r3, #8]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003af8:	609a      	str	r2, [r3, #8]
}
 8003afa:	e035      	b.n	8003b68 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	085b      	lsrs	r3, r3, #1
 8003b00:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4a1f      	ldr	r2, [pc, #124]	@ (8003b84 <ADC_ConfigureBoostMode+0x20c>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d808      	bhi.n	8003b1c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003b18:	609a      	str	r2, [r3, #8]
}
 8003b1a:	e025      	b.n	8003b68 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b88 <ADC_ConfigureBoostMode+0x210>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d80a      	bhi.n	8003b3a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b36:	609a      	str	r2, [r3, #8]
}
 8003b38:	e016      	b.n	8003b68 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4a13      	ldr	r2, [pc, #76]	@ (8003b8c <ADC_ConfigureBoostMode+0x214>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d80a      	bhi.n	8003b58 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b54:	609a      	str	r2, [r3, #8]
}
 8003b56:	e007      	b.n	8003b68 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003b66:	609a      	str	r2, [r3, #8]
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40022000 	.word	0x40022000
 8003b74:	40022100 	.word	0x40022100
 8003b78:	40022300 	.word	0x40022300
 8003b7c:	58026300 	.word	0x58026300
 8003b80:	01312d00 	.word	0x01312d00
 8003b84:	005f5e10 	.word	0x005f5e10
 8003b88:	00bebc20 	.word	0x00bebc20
 8003b8c:	017d7840 	.word	0x017d7840

08003b90 <LL_ADC_IsEnabled>:
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <LL_ADC_IsEnabled+0x18>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <LL_ADC_IsEnabled+0x1a>
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <LL_ADC_StartCalibration>:
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <LL_ADC_StartCalibration+0x38>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	609a      	str	r2, [r3, #8]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	3ffeffc0 	.word	0x3ffeffc0

08003bf4 <LL_ADC_IsCalibrationOnGoing>:
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c08:	d101      	bne.n	8003c0e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <LL_ADC_REG_IsConversionOngoing>:
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d101      	bne.n	8003c34 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_ADCEx_Calibration_Start+0x1e>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e04c      	b.n	8003cfc <HAL_ADCEx_Calibration_Start+0xb8>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff fe24 	bl	80038b8 <ADC_Disable>
 8003c70:	4603      	mov	r3, r0
 8003c72:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d135      	bne.n	8003ce6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003c7e:	4b21      	ldr	r3, [pc, #132]	@ (8003d04 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	f043 0202 	orr.w	r2, r3, #2
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68b9      	ldr	r1, [r7, #8]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff ff90 	bl	8003bb8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003c98:	e014      	b.n	8003cc4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	4a19      	ldr	r2, [pc, #100]	@ (8003d08 <HAL_ADCEx_Calibration_Start+0xc4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d30d      	bcc.n	8003cc4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cac:	f023 0312 	bic.w	r3, r3, #18
 8003cb0:	f043 0210 	orr.w	r2, r3, #16
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e01b      	b.n	8003cfc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff ff93 	bl	8003bf4 <LL_ADC_IsCalibrationOnGoing>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e2      	bne.n	8003c9a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd8:	f023 0303 	bic.w	r3, r3, #3
 8003cdc:	f043 0201 	orr.w	r2, r3, #1
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ce4:	e005      	b.n	8003cf2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cea:	f043 0210 	orr.w	r2, r3, #16
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3718      	adds	r7, #24
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	ffffeefd 	.word	0xffffeefd
 8003d08:	25c3f800 	.word	0x25c3f800

08003d0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d0c:	b590      	push	{r4, r7, lr}
 8003d0e:	b09f      	sub	sp, #124	@ 0x7c
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d16:	2300      	movs	r3, #0
 8003d18:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e0be      	b.n	8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d32:	2300      	movs	r3, #0
 8003d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d36:	2300      	movs	r3, #0
 8003d38:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d102      	bne.n	8003d4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d44:	4b5b      	ldr	r3, [pc, #364]	@ (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d46:	60bb      	str	r3, [r7, #8]
 8003d48:	e001      	b.n	8003d4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10b      	bne.n	8003d6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d58:	f043 0220 	orr.w	r2, r3, #32
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e09d      	b.n	8003ea8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff ff54 	bl	8003c1c <LL_ADC_REG_IsConversionOngoing>
 8003d74:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f7ff ff4e 	bl	8003c1c <LL_ADC_REG_IsConversionOngoing>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d17f      	bne.n	8003e86 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d17c      	bne.n	8003e86 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a47      	ldr	r2, [pc, #284]	@ (8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d004      	beq.n	8003da0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a46      	ldr	r2, [pc, #280]	@ (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d101      	bne.n	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003da0:	4b45      	ldr	r3, [pc, #276]	@ (8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003da2:	e000      	b.n	8003da6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003da4:	4b45      	ldr	r3, [pc, #276]	@ (8003ebc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003da6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d039      	beq.n	8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003db0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dc0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a3a      	ldr	r2, [pc, #232]	@ (8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d004      	beq.n	8003dd6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a38      	ldr	r2, [pc, #224]	@ (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d10e      	bne.n	8003df4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003dd6:	4836      	ldr	r0, [pc, #216]	@ (8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003dd8:	f7ff feda 	bl	8003b90 <LL_ADC_IsEnabled>
 8003ddc:	4604      	mov	r4, r0
 8003dde:	4835      	ldr	r0, [pc, #212]	@ (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003de0:	f7ff fed6 	bl	8003b90 <LL_ADC_IsEnabled>
 8003de4:	4603      	mov	r3, r0
 8003de6:	4323      	orrs	r3, r4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf0c      	ite	eq
 8003dec:	2301      	moveq	r3, #1
 8003dee:	2300      	movne	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e008      	b.n	8003e06 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003df4:	4832      	ldr	r0, [pc, #200]	@ (8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003df6:	f7ff fecb 	bl	8003b90 <LL_ADC_IsEnabled>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf0c      	ite	eq
 8003e00:	2301      	moveq	r3, #1
 8003e02:	2300      	movne	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d047      	beq.n	8003e9a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	6811      	ldr	r1, [r2, #0]
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	6892      	ldr	r2, [r2, #8]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e20:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e22:	e03a      	b.n	8003e9a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e2e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1e      	ldr	r2, [pc, #120]	@ (8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d004      	beq.n	8003e44 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d10e      	bne.n	8003e62 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003e44:	481a      	ldr	r0, [pc, #104]	@ (8003eb0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e46:	f7ff fea3 	bl	8003b90 <LL_ADC_IsEnabled>
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	4819      	ldr	r0, [pc, #100]	@ (8003eb4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e4e:	f7ff fe9f 	bl	8003b90 <LL_ADC_IsEnabled>
 8003e52:	4603      	mov	r3, r0
 8003e54:	4323      	orrs	r3, r4
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	bf0c      	ite	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	2300      	movne	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	e008      	b.n	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e62:	4817      	ldr	r0, [pc, #92]	@ (8003ec0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e64:	f7ff fe94 	bl	8003b90 <LL_ADC_IsEnabled>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bf0c      	ite	eq
 8003e6e:	2301      	moveq	r3, #1
 8003e70:	2300      	movne	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d010      	beq.n	8003e9a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ec4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e7e:	4013      	ands	r3, r2
 8003e80:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e82:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e84:	e009      	b.n	8003e9a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8a:	f043 0220 	orr.w	r2, r3, #32
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003e98:	e000      	b.n	8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e9a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ea4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	377c      	adds	r7, #124	@ 0x7c
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd90      	pop	{r4, r7, pc}
 8003eb0:	40022000 	.word	0x40022000
 8003eb4:	40022100 	.word	0x40022100
 8003eb8:	40022300 	.word	0x40022300
 8003ebc:	58026300 	.word	0x58026300
 8003ec0:	58026000 	.word	0x58026000
 8003ec4:	fffff0e0 	.word	0xfffff0e0

08003ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <__NVIC_SetPriorityGrouping+0x40>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ef0:	4b06      	ldr	r3, [pc, #24]	@ (8003f0c <__NVIC_SetPriorityGrouping+0x44>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ef6:	4a04      	ldr	r2, [pc, #16]	@ (8003f08 <__NVIC_SetPriorityGrouping+0x40>)
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	60d3      	str	r3, [r2, #12]
}
 8003efc:	bf00      	nop
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	e000ed00 	.word	0xe000ed00
 8003f0c:	05fa0000 	.word	0x05fa0000

08003f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f14:	4b04      	ldr	r3, [pc, #16]	@ (8003f28 <__NVIC_GetPriorityGrouping+0x18>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	0a1b      	lsrs	r3, r3, #8
 8003f1a:	f003 0307 	and.w	r3, r3, #7
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	e000ed00 	.word	0xe000ed00

08003f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	4603      	mov	r3, r0
 8003f34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	db0b      	blt.n	8003f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f3e:	88fb      	ldrh	r3, [r7, #6]
 8003f40:	f003 021f 	and.w	r2, r3, #31
 8003f44:	4907      	ldr	r1, [pc, #28]	@ (8003f64 <__NVIC_EnableIRQ+0x38>)
 8003f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8003f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	e000e100 	.word	0xe000e100

08003f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	6039      	str	r1, [r7, #0]
 8003f72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	db0a      	blt.n	8003f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	b2da      	uxtb	r2, r3
 8003f80:	490c      	ldr	r1, [pc, #48]	@ (8003fb4 <__NVIC_SetPriority+0x4c>)
 8003f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f86:	0112      	lsls	r2, r2, #4
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f90:	e00a      	b.n	8003fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	4908      	ldr	r1, [pc, #32]	@ (8003fb8 <__NVIC_SetPriority+0x50>)
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	f003 030f 	and.w	r3, r3, #15
 8003f9e:	3b04      	subs	r3, #4
 8003fa0:	0112      	lsls	r2, r2, #4
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	761a      	strb	r2, [r3, #24]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr
 8003fb4:	e000e100 	.word	0xe000e100
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b089      	sub	sp, #36	@ 0x24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	f1c3 0307 	rsb	r3, r3, #7
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	bf28      	it	cs
 8003fda:	2304      	movcs	r3, #4
 8003fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	2b06      	cmp	r3, #6
 8003fe4:	d902      	bls.n	8003fec <NVIC_EncodePriority+0x30>
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3b03      	subs	r3, #3
 8003fea:	e000      	b.n	8003fee <NVIC_EncodePriority+0x32>
 8003fec:	2300      	movs	r3, #0
 8003fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ff0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffa:	43da      	mvns	r2, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	401a      	ands	r2, r3
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004004:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	fa01 f303 	lsl.w	r3, r1, r3
 800400e:	43d9      	mvns	r1, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004014:	4313      	orrs	r3, r2
         );
}
 8004016:	4618      	mov	r0, r3
 8004018:	3724      	adds	r7, #36	@ 0x24
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
	...

08004024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	3b01      	subs	r3, #1
 8004030:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004034:	d301      	bcc.n	800403a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004036:	2301      	movs	r3, #1
 8004038:	e00f      	b.n	800405a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800403a:	4a0a      	ldr	r2, [pc, #40]	@ (8004064 <SysTick_Config+0x40>)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3b01      	subs	r3, #1
 8004040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004042:	210f      	movs	r1, #15
 8004044:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004048:	f7ff ff8e 	bl	8003f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800404c:	4b05      	ldr	r3, [pc, #20]	@ (8004064 <SysTick_Config+0x40>)
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004052:	4b04      	ldr	r3, [pc, #16]	@ (8004064 <SysTick_Config+0x40>)
 8004054:	2207      	movs	r2, #7
 8004056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	e000e010 	.word	0xe000e010

08004068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff ff29 	bl	8003ec8 <__NVIC_SetPriorityGrouping>
}
 8004076:	bf00      	nop
 8004078:	3708      	adds	r7, #8
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b086      	sub	sp, #24
 8004082:	af00      	add	r7, sp, #0
 8004084:	4603      	mov	r3, r0
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
 800408a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800408c:	f7ff ff40 	bl	8003f10 <__NVIC_GetPriorityGrouping>
 8004090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	68b9      	ldr	r1, [r7, #8]
 8004096:	6978      	ldr	r0, [r7, #20]
 8004098:	f7ff ff90 	bl	8003fbc <NVIC_EncodePriority>
 800409c:	4602      	mov	r2, r0
 800409e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040a2:	4611      	mov	r1, r2
 80040a4:	4618      	mov	r0, r3
 80040a6:	f7ff ff5f 	bl	8003f68 <__NVIC_SetPriority>
}
 80040aa:	bf00      	nop
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b082      	sub	sp, #8
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	4603      	mov	r3, r0
 80040ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff ff33 	bl	8003f2c <__NVIC_EnableIRQ>
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b082      	sub	sp, #8
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff ffa4 	bl	8004024 <SysTick_Config>
 80040dc:	4603      	mov	r3, r0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80040ec:	f3bf 8f5f 	dmb	sy
}
 80040f0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80040f2:	4b07      	ldr	r3, [pc, #28]	@ (8004110 <HAL_MPU_Disable+0x28>)
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	4a06      	ldr	r2, [pc, #24]	@ (8004110 <HAL_MPU_Disable+0x28>)
 80040f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040fc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80040fe:	4b05      	ldr	r3, [pc, #20]	@ (8004114 <HAL_MPU_Disable+0x2c>)
 8004100:	2200      	movs	r2, #0
 8004102:	605a      	str	r2, [r3, #4]
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	e000ed00 	.word	0xe000ed00
 8004114:	e000ed90 	.word	0xe000ed90

08004118 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8004120:	4a0b      	ldr	r2, [pc, #44]	@ (8004150 <HAL_MPU_Enable+0x38>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f043 0301 	orr.w	r3, r3, #1
 8004128:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800412a:	4b0a      	ldr	r3, [pc, #40]	@ (8004154 <HAL_MPU_Enable+0x3c>)
 800412c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412e:	4a09      	ldr	r2, [pc, #36]	@ (8004154 <HAL_MPU_Enable+0x3c>)
 8004130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004134:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8004136:	f3bf 8f4f 	dsb	sy
}
 800413a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800413c:	f3bf 8f6f 	isb	sy
}
 8004140:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	e000ed90 	.word	0xe000ed90
 8004154:	e000ed00 	.word	0xe000ed00

08004158 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	785a      	ldrb	r2, [r3, #1]
 8004164:	4b1b      	ldr	r3, [pc, #108]	@ (80041d4 <HAL_MPU_ConfigRegion+0x7c>)
 8004166:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004168:	4b1a      	ldr	r3, [pc, #104]	@ (80041d4 <HAL_MPU_ConfigRegion+0x7c>)
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	4a19      	ldr	r2, [pc, #100]	@ (80041d4 <HAL_MPU_ConfigRegion+0x7c>)
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004174:	4a17      	ldr	r2, [pc, #92]	@ (80041d4 <HAL_MPU_ConfigRegion+0x7c>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	7b1b      	ldrb	r3, [r3, #12]
 8004180:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	7adb      	ldrb	r3, [r3, #11]
 8004186:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004188:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	7a9b      	ldrb	r3, [r3, #10]
 800418e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004190:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7b5b      	ldrb	r3, [r3, #13]
 8004196:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004198:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	7b9b      	ldrb	r3, [r3, #14]
 800419e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80041a0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	7bdb      	ldrb	r3, [r3, #15]
 80041a6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80041a8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	7a5b      	ldrb	r3, [r3, #9]
 80041ae:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80041b0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	7a1b      	ldrb	r3, [r3, #8]
 80041b6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80041b8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	7812      	ldrb	r2, [r2, #0]
 80041be:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80041c0:	4a04      	ldr	r2, [pc, #16]	@ (80041d4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80041c2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80041c4:	6113      	str	r3, [r2, #16]
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	e000ed90 	.word	0xe000ed90

080041d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	@ 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80041e6:	4b89      	ldr	r3, [pc, #548]	@ (800440c <HAL_GPIO_Init+0x234>)
 80041e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041ea:	e194      	b.n	8004516 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	2101      	movs	r1, #1
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	fa01 f303 	lsl.w	r3, r1, r3
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 8186 	beq.w	8004510 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d005      	beq.n	800421c <HAL_GPIO_Init+0x44>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d130      	bne.n	800427e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	2203      	movs	r2, #3
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004252:	2201      	movs	r2, #1
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	f003 0201 	and.w	r2, r3, #1
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4313      	orrs	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b03      	cmp	r3, #3
 8004288:	d017      	beq.n	80042ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	2203      	movs	r2, #3
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43db      	mvns	r3, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4013      	ands	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d123      	bne.n	800430e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	08da      	lsrs	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3208      	adds	r2, #8
 80042ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	220f      	movs	r2, #15
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43db      	mvns	r3, r3
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4013      	ands	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	08da      	lsrs	r2, r3, #3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3208      	adds	r2, #8
 8004308:	69b9      	ldr	r1, [r7, #24]
 800430a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	2203      	movs	r2, #3
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 0203 	and.w	r2, r3, #3
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4313      	orrs	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80e0 	beq.w	8004510 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004350:	4b2f      	ldr	r3, [pc, #188]	@ (8004410 <HAL_GPIO_Init+0x238>)
 8004352:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004356:	4a2e      	ldr	r2, [pc, #184]	@ (8004410 <HAL_GPIO_Init+0x238>)
 8004358:	f043 0302 	orr.w	r3, r3, #2
 800435c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004360:	4b2b      	ldr	r3, [pc, #172]	@ (8004410 <HAL_GPIO_Init+0x238>)
 8004362:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800436e:	4a29      	ldr	r2, [pc, #164]	@ (8004414 <HAL_GPIO_Init+0x23c>)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	3302      	adds	r3, #2
 8004376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	220f      	movs	r2, #15
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4013      	ands	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a20      	ldr	r2, [pc, #128]	@ (8004418 <HAL_GPIO_Init+0x240>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d052      	beq.n	8004440 <HAL_GPIO_Init+0x268>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a1f      	ldr	r2, [pc, #124]	@ (800441c <HAL_GPIO_Init+0x244>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d031      	beq.n	8004406 <HAL_GPIO_Init+0x22e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004420 <HAL_GPIO_Init+0x248>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d02b      	beq.n	8004402 <HAL_GPIO_Init+0x22a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004424 <HAL_GPIO_Init+0x24c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d025      	beq.n	80043fe <HAL_GPIO_Init+0x226>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004428 <HAL_GPIO_Init+0x250>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01f      	beq.n	80043fa <HAL_GPIO_Init+0x222>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a1b      	ldr	r2, [pc, #108]	@ (800442c <HAL_GPIO_Init+0x254>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d019      	beq.n	80043f6 <HAL_GPIO_Init+0x21e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004430 <HAL_GPIO_Init+0x258>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <HAL_GPIO_Init+0x21a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a19      	ldr	r2, [pc, #100]	@ (8004434 <HAL_GPIO_Init+0x25c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00d      	beq.n	80043ee <HAL_GPIO_Init+0x216>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a18      	ldr	r2, [pc, #96]	@ (8004438 <HAL_GPIO_Init+0x260>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d007      	beq.n	80043ea <HAL_GPIO_Init+0x212>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a17      	ldr	r2, [pc, #92]	@ (800443c <HAL_GPIO_Init+0x264>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d101      	bne.n	80043e6 <HAL_GPIO_Init+0x20e>
 80043e2:	2309      	movs	r3, #9
 80043e4:	e02d      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043e6:	230a      	movs	r3, #10
 80043e8:	e02b      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043ea:	2308      	movs	r3, #8
 80043ec:	e029      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043ee:	2307      	movs	r3, #7
 80043f0:	e027      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043f2:	2306      	movs	r3, #6
 80043f4:	e025      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043f6:	2305      	movs	r3, #5
 80043f8:	e023      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043fa:	2304      	movs	r3, #4
 80043fc:	e021      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043fe:	2303      	movs	r3, #3
 8004400:	e01f      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 8004402:	2302      	movs	r3, #2
 8004404:	e01d      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 8004406:	2301      	movs	r3, #1
 8004408:	e01b      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 800440a:	bf00      	nop
 800440c:	58000080 	.word	0x58000080
 8004410:	58024400 	.word	0x58024400
 8004414:	58000400 	.word	0x58000400
 8004418:	58020000 	.word	0x58020000
 800441c:	58020400 	.word	0x58020400
 8004420:	58020800 	.word	0x58020800
 8004424:	58020c00 	.word	0x58020c00
 8004428:	58021000 	.word	0x58021000
 800442c:	58021400 	.word	0x58021400
 8004430:	58021800 	.word	0x58021800
 8004434:	58021c00 	.word	0x58021c00
 8004438:	58022000 	.word	0x58022000
 800443c:	58022400 	.word	0x58022400
 8004440:	2300      	movs	r3, #0
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	f002 0203 	and.w	r2, r2, #3
 8004448:	0092      	lsls	r2, r2, #2
 800444a:	4093      	lsls	r3, r2
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004452:	4938      	ldr	r1, [pc, #224]	@ (8004534 <HAL_GPIO_Init+0x35c>)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	089b      	lsrs	r3, r3, #2
 8004458:	3302      	adds	r3, #2
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004486:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800448e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80044b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4013      	ands	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	43db      	mvns	r3, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4013      	ands	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	3301      	adds	r3, #1
 8004514:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	f47f ae63 	bne.w	80041ec <HAL_GPIO_Init+0x14>
  }
}
 8004526:	bf00      	nop
 8004528:	bf00      	nop
 800452a:	3724      	adds	r7, #36	@ 0x24
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	58000400 	.word	0x58000400

08004538 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	887b      	ldrh	r3, [r7, #2]
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
 8004554:	e001      	b.n	800455a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004556:	2300      	movs	r3, #0
 8004558:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800455a:	7bfb      	ldrb	r3, [r7, #15]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3714      	adds	r7, #20
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	807b      	strh	r3, [r7, #2]
 8004574:	4613      	mov	r3, r2
 8004576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004578:	787b      	ldrb	r3, [r7, #1]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800457e:	887a      	ldrh	r2, [r7, #2]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004584:	e003      	b.n	800458e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004586:	887b      	ldrh	r3, [r7, #2]
 8004588:	041a      	lsls	r2, r3, #16
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	619a      	str	r2, [r3, #24]
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b086      	sub	sp, #24
 800459e:	af02      	add	r7, sp, #8
 80045a0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0fe      	b.n	80047aa <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f010 fd07 	bl	8014fd4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2203      	movs	r2, #3
 80045ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f009 fc9f 	bl	800df16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6818      	ldr	r0, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	7c1a      	ldrb	r2, [r3, #16]
 80045e0:	f88d 2000 	strb.w	r2, [sp]
 80045e4:	3304      	adds	r3, #4
 80045e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045e8:	f009 fb70 	bl	800dccc <USB_CoreInit>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d005      	beq.n	80045fe <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2202      	movs	r2, #2
 80045f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e0d5      	b.n	80047aa <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2100      	movs	r1, #0
 8004604:	4618      	mov	r0, r3
 8004606:	f009 fc97 	bl	800df38 <USB_SetCurrentMode>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0c6      	b.n	80047aa <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800461c:	2300      	movs	r3, #0
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	e04a      	b.n	80046b8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004622:	7bfa      	ldrb	r2, [r7, #15]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	3315      	adds	r3, #21
 8004632:	2201      	movs	r2, #1
 8004634:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004636:	7bfa      	ldrb	r2, [r7, #15]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	4413      	add	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	3314      	adds	r3, #20
 8004646:	7bfa      	ldrb	r2, [r7, #15]
 8004648:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800464a:	7bfa      	ldrb	r2, [r7, #15]
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	b298      	uxth	r0, r3
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	332e      	adds	r3, #46	@ 0x2e
 800465e:	4602      	mov	r2, r0
 8004660:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004662:	7bfa      	ldrb	r2, [r7, #15]
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	4613      	mov	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	3318      	adds	r3, #24
 8004672:	2200      	movs	r2, #0
 8004674:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004676:	7bfa      	ldrb	r2, [r7, #15]
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	440b      	add	r3, r1
 8004684:	331c      	adds	r3, #28
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800468a:	7bfa      	ldrb	r2, [r7, #15]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	00db      	lsls	r3, r3, #3
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	3320      	adds	r3, #32
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800469e:	7bfa      	ldrb	r2, [r7, #15]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	3324      	adds	r3, #36	@ 0x24
 80046ae:	2200      	movs	r2, #0
 80046b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	3301      	adds	r3, #1
 80046b6:	73fb      	strb	r3, [r7, #15]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	791b      	ldrb	r3, [r3, #4]
 80046bc:	7bfa      	ldrb	r2, [r7, #15]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d3af      	bcc.n	8004622 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	73fb      	strb	r3, [r7, #15]
 80046c6:	e044      	b.n	8004752 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046c8:	7bfa      	ldrb	r2, [r7, #15]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	00db      	lsls	r3, r3, #3
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80046da:	2200      	movs	r2, #0
 80046dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046de:	7bfa      	ldrb	r2, [r7, #15]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	4413      	add	r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80046f0:	7bfa      	ldrb	r2, [r7, #15]
 80046f2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046f4:	7bfa      	ldrb	r2, [r7, #15]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004706:	2200      	movs	r2, #0
 8004708:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800470a:	7bfa      	ldrb	r2, [r7, #15]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800471c:	2200      	movs	r2, #0
 800471e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004720:	7bfa      	ldrb	r2, [r7, #15]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004736:	7bfa      	ldrb	r2, [r7, #15]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	3301      	adds	r3, #1
 8004750:	73fb      	strb	r3, [r7, #15]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	791b      	ldrb	r3, [r3, #4]
 8004756:	7bfa      	ldrb	r2, [r7, #15]
 8004758:	429a      	cmp	r2, r3
 800475a:	d3b5      	bcc.n	80046c8 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	7c1a      	ldrb	r2, [r3, #16]
 8004764:	f88d 2000 	strb.w	r2, [sp]
 8004768:	3304      	adds	r3, #4
 800476a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800476c:	f009 fc30 	bl	800dfd0 <USB_DevInit>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2202      	movs	r2, #2
 800477a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e013      	b.n	80047aa <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	7b1b      	ldrb	r3, [r3, #12]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d102      	bne.n	800479e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 f96f 	bl	8005a7c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f00a fc73 	bl	800f08e <USB_DevDisconnect>

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_PCD_Start+0x1c>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e022      	b.n	8004814 <HAL_PCD_Start+0x62>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d009      	beq.n	80047f6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d105      	bne.n	80047f6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ee:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f009 fb7a 	bl	800def4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f00a fc21 	bl	800f04c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800481c:	b590      	push	{r4, r7, lr}
 800481e:	b08d      	sub	sp, #52	@ 0x34
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4618      	mov	r0, r3
 8004834:	f00a fcdf 	bl	800f1f6 <USB_GetMode>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	f040 84b9 	bne.w	80051b2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f00a fc43 	bl	800f0d0 <USB_ReadInterrupts>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 84af 	beq.w	80051b0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	0a1b      	lsrs	r3, r3, #8
 800485c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f00a fc30 	bl	800f0d0 <USB_ReadInterrupts>
 8004870:	4603      	mov	r3, r0
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b02      	cmp	r3, #2
 8004878:	d107      	bne.n	800488a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	695a      	ldr	r2, [r3, #20]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f002 0202 	and.w	r2, r2, #2
 8004888:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4618      	mov	r0, r3
 8004890:	f00a fc1e 	bl	800f0d0 <USB_ReadInterrupts>
 8004894:	4603      	mov	r3, r0
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	2b10      	cmp	r3, #16
 800489c:	d161      	bne.n	8004962 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699a      	ldr	r2, [r3, #24]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0210 	bic.w	r2, r2, #16
 80048ac:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	f003 020f 	and.w	r2, r3, #15
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	4413      	add	r3, r2
 80048ca:	3304      	adds	r3, #4
 80048cc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80048d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048d8:	d124      	bne.n	8004924 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80048e0:	4013      	ands	r3, r2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d035      	beq.n	8004952 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	6a38      	ldr	r0, [r7, #32]
 80048fa:	f00a fa55 	bl	800eda8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	091b      	lsrs	r3, r3, #4
 8004906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800490a:	441a      	add	r2, r3
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	695a      	ldr	r2, [r3, #20]
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	091b      	lsrs	r3, r3, #4
 8004918:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800491c:	441a      	add	r2, r3
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	615a      	str	r2, [r3, #20]
 8004922:	e016      	b.n	8004952 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800492a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800492e:	d110      	bne.n	8004952 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004936:	2208      	movs	r2, #8
 8004938:	4619      	mov	r1, r3
 800493a:	6a38      	ldr	r0, [r7, #32]
 800493c:	f00a fa34 	bl	800eda8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	695a      	ldr	r2, [r3, #20]
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	091b      	lsrs	r3, r3, #4
 8004948:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800494c:	441a      	add	r2, r3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699a      	ldr	r2, [r3, #24]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0210 	orr.w	r2, r2, #16
 8004960:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f00a fbb2 	bl	800f0d0 <USB_ReadInterrupts>
 800496c:	4603      	mov	r3, r0
 800496e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004972:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004976:	f040 80a7 	bne.w	8004ac8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800497a:	2300      	movs	r3, #0
 800497c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f00a fbb7 	bl	800f0f6 <USB_ReadDevAllOutEpInterrupt>
 8004988:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800498a:	e099      	b.n	8004ac0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800498c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 808e 	beq.w	8004ab4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	4611      	mov	r1, r2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f00a fbdb 	bl	800f15e <USB_ReadDevOutEPInterrupt>
 80049a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00c      	beq.n	80049ce <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c0:	461a      	mov	r2, r3
 80049c2:	2301      	movs	r3, #1
 80049c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80049c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fed1 	bl	8005770 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	f003 0308 	and.w	r3, r3, #8
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00c      	beq.n	80049f2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80049d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e4:	461a      	mov	r2, r3
 80049e6:	2308      	movs	r3, #8
 80049e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80049ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 ffa7 	bl	8005940 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d008      	beq.n	8004a0e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80049fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a08:	461a      	mov	r2, r3
 8004a0a:	2310      	movs	r3, #16
 8004a0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d030      	beq.n	8004a7a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a20:	2b80      	cmp	r3, #128	@ 0x80
 8004a22:	d109      	bne.n	8004a38 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a36:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	4413      	add	r3, r2
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	78db      	ldrb	r3, [r3, #3]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d108      	bne.n	8004a68 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	4619      	mov	r1, r3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f010 fbdc 	bl	8015220 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a74:	461a      	mov	r2, r3
 8004a76:	2302      	movs	r3, #2
 8004a78:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a90:	461a      	mov	r2, r3
 8004a92:	2320      	movs	r3, #32
 8004a94:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d009      	beq.n	8004ab4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aac:	461a      	mov	r2, r3
 8004aae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ab2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abc:	085b      	lsrs	r3, r3, #1
 8004abe:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f47f af62 	bne.w	800498c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f00a faff 	bl	800f0d0 <USB_ReadInterrupts>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ad8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004adc:	f040 80db 	bne.w	8004c96 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f00a fb20 	bl	800f12a <USB_ReadDevAllInEpInterrupt>
 8004aea:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004af0:	e0cd      	b.n	8004c8e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80c2 	beq.w	8004c82 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	4611      	mov	r1, r2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f00a fb46 	bl	800f19a <USB_ReadDevInEPInterrupt>
 8004b0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d057      	beq.n	8004bca <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1c:	f003 030f 	and.w	r3, r3, #15
 8004b20:	2201      	movs	r2, #1
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	43db      	mvns	r3, r3
 8004b34:	69f9      	ldr	r1, [r7, #28]
 8004b36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	015a      	lsls	r2, r3, #5
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	799b      	ldrb	r3, [r3, #6]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d132      	bne.n	8004bbe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b58:	6879      	ldr	r1, [r7, #4]
 8004b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	3320      	adds	r3, #32
 8004b68:	6819      	ldr	r1, [r3, #0]
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b6e:	4613      	mov	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4403      	add	r3, r0
 8004b78:	331c      	adds	r3, #28
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4419      	add	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b82:	4613      	mov	r3, r2
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4403      	add	r3, r0
 8004b8c:	3320      	adds	r3, #32
 8004b8e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d113      	bne.n	8004bbe <HAL_PCD_IRQHandler+0x3a2>
 8004b96:	6879      	ldr	r1, [r7, #4]
 8004b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	3324      	adds	r3, #36	@ 0x24
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d108      	bne.n	8004bbe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	2101      	movs	r1, #1
 8004bba:	f00a fb4f 	bl	800f25c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f010 faa6 	bl	8015116 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	015a      	lsls	r2, r3, #5
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	4413      	add	r3, r2
 8004bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004be0:	461a      	mov	r2, r3
 8004be2:	2308      	movs	r3, #8
 8004be4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d008      	beq.n	8004c02 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	2310      	movs	r3, #16
 8004c00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d008      	beq.n	8004c1e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2340      	movs	r3, #64	@ 0x40
 8004c1c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d023      	beq.n	8004c70 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004c28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c2a:	6a38      	ldr	r0, [r7, #32]
 8004c2c:	f009 fb2e 	bl	800e28c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c32:	4613      	mov	r3, r2
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	4413      	add	r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	3310      	adds	r3, #16
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	4413      	add	r3, r2
 8004c40:	3304      	adds	r3, #4
 8004c42:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	78db      	ldrb	r3, [r3, #3]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d108      	bne.n	8004c5e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	4619      	mov	r1, r3
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f010 faf3 	bl	8015244 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fcea 	bl	8005656 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c84:	3301      	adds	r3, #1
 8004c86:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f47f af2e 	bne.w	8004af2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f00a fa18 	bl	800f0d0 <USB_ReadInterrupts>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004caa:	d122      	bne.n	8004cf2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d108      	bne.n	8004cdc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fef5 	bl	8005ac4 <HAL_PCDEx_LPM_Callback>
 8004cda:	e002      	b.n	8004ce2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f010 fa91 	bl	8015204 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	695a      	ldr	r2, [r3, #20]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f00a f9ea 	bl	800f0d0 <USB_ReadInterrupts>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d06:	d112      	bne.n	8004d2e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d102      	bne.n	8004d1e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f010 fa4d 	bl	80151b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695a      	ldr	r2, [r3, #20]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004d2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f00a f9cc 	bl	800f0d0 <USB_ReadInterrupts>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d42:	d121      	bne.n	8004d88 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	695a      	ldr	r2, [r3, #20]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004d52:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d111      	bne.n	8004d82 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6c:	089b      	lsrs	r3, r3, #2
 8004d6e:	f003 020f 	and.w	r2, r3, #15
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004d78:	2101      	movs	r1, #1
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fea2 	bl	8005ac4 <HAL_PCDEx_LPM_Callback>
 8004d80:	e002      	b.n	8004d88 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f010 fa18 	bl	80151b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f00a f99f 	bl	800f0d0 <USB_ReadInterrupts>
 8004d92:	4603      	mov	r3, r0
 8004d94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d9c:	f040 80b7 	bne.w	8004f0e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	69fa      	ldr	r2, [r7, #28]
 8004daa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dae:	f023 0301 	bic.w	r3, r3, #1
 8004db2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2110      	movs	r1, #16
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f009 fa66 	bl	800e28c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dc4:	e046      	b.n	8004e54 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004dd8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ddc:	015a      	lsls	r2, r3, #5
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	4413      	add	r3, r2
 8004de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dea:	0151      	lsls	r1, r2, #5
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	440a      	add	r2, r1
 8004df0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004df4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004df8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e06:	461a      	mov	r2, r3
 8004e08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e0c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e1e:	0151      	lsls	r1, r2, #5
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	440a      	add	r2, r1
 8004e24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e3e:	0151      	lsls	r1, r2, #5
 8004e40:	69fa      	ldr	r2, [r7, #28]
 8004e42:	440a      	add	r2, r1
 8004e44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e48:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e4c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e50:	3301      	adds	r3, #1
 8004e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	791b      	ldrb	r3, [r3, #4]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d3b2      	bcc.n	8004dc6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e6e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004e72:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	7bdb      	ldrb	r3, [r3, #15]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d016      	beq.n	8004eaa <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e8c:	f043 030b 	orr.w	r3, r3, #11
 8004e90:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ea2:	f043 030b 	orr.w	r3, r3, #11
 8004ea6:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ea8:	e015      	b.n	8004ed6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f242 032b 	movw	r3, #8235	@ 0x202b
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	69fa      	ldr	r2, [r7, #28]
 8004ecc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ed0:	f043 030b 	orr.w	r3, r3, #11
 8004ed4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ee4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004ee8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f00a f9af 	bl	800f25c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004f0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f00a f8dc 	bl	800f0d0 <USB_ReadInterrupts>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f22:	d123      	bne.n	8004f6c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f00a f973 	bl	800f214 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f009 fa23 	bl	800e37e <USB_GetDevSpeed>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681c      	ldr	r4, [r3, #0]
 8004f44:	f001 fd9e 	bl	8006a84 <HAL_RCC_GetHCLKFreq>
 8004f48:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f4e:	461a      	mov	r2, r3
 8004f50:	4620      	mov	r0, r4
 8004f52:	f008 ff2d 	bl	800ddb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f010 f905 	bl	8015166 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004f6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f00a f8ad 	bl	800f0d0 <USB_ReadInterrupts>
 8004f76:	4603      	mov	r3, r0
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d10a      	bne.n	8004f96 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f010 f8e2 	bl	801514a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695a      	ldr	r2, [r3, #20]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f002 0208 	and.w	r2, r2, #8
 8004f94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f00a f898 	bl	800f0d0 <USB_ReadInterrupts>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa6:	2b80      	cmp	r3, #128	@ 0x80
 8004fa8:	d123      	bne.n	8004ff2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fba:	e014      	b.n	8004fe6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004fbc:	6879      	ldr	r1, [r7, #4]
 8004fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d105      	bne.n	8004fe0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fb0a 	bl	80055f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	791b      	ldrb	r3, [r3, #4]
 8004fea:	461a      	mov	r2, r3
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d3e4      	bcc.n	8004fbc <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f00a f86a 	bl	800f0d0 <USB_ReadInterrupts>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005002:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005006:	d13c      	bne.n	8005082 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005008:	2301      	movs	r3, #1
 800500a:	627b      	str	r3, [r7, #36]	@ 0x24
 800500c:	e02b      	b.n	8005066 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	015a      	lsls	r2, r3, #5
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	4413      	add	r3, r2
 8005016:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005022:	4613      	mov	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	440b      	add	r3, r1
 800502c:	3318      	adds	r3, #24
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d115      	bne.n	8005060 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005034:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005036:	2b00      	cmp	r3, #0
 8005038:	da12      	bge.n	8005060 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800503e:	4613      	mov	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	3317      	adds	r3, #23
 800504a:	2201      	movs	r2, #1
 800504c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800504e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005050:	b2db      	uxtb	r3, r3
 8005052:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005056:	b2db      	uxtb	r3, r3
 8005058:	4619      	mov	r1, r3
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 faca 	bl	80055f4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005062:	3301      	adds	r3, #1
 8005064:	627b      	str	r3, [r7, #36]	@ 0x24
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	791b      	ldrb	r3, [r3, #4]
 800506a:	461a      	mov	r2, r3
 800506c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506e:	4293      	cmp	r3, r2
 8005070:	d3cd      	bcc.n	800500e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005080:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f00a f822 	bl	800f0d0 <USB_ReadInterrupts>
 800508c:	4603      	mov	r3, r0
 800508e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005092:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005096:	d156      	bne.n	8005146 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005098:	2301      	movs	r3, #1
 800509a:	627b      	str	r3, [r7, #36]	@ 0x24
 800509c:	e045      	b.n	800512a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b2:	4613      	mov	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	4413      	add	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	440b      	add	r3, r1
 80050bc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d12e      	bne.n	8005124 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80050c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	da2b      	bge.n	8005124 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	0c1a      	lsrs	r2, r3, #16
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80050d6:	4053      	eors	r3, r2
 80050d8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d121      	bne.n	8005124 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80050e0:	6879      	ldr	r1, [r7, #4]
 80050e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e4:	4613      	mov	r3, r2
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	4413      	add	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80050f2:	2201      	movs	r2, #1
 80050f4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10a      	bne.n	8005124 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800511c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005120:	6053      	str	r3, [r2, #4]
            break;
 8005122:	e008      	b.n	8005136 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005126:	3301      	adds	r3, #1
 8005128:	627b      	str	r3, [r7, #36]	@ 0x24
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	791b      	ldrb	r3, [r3, #4]
 800512e:	461a      	mov	r2, r3
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	4293      	cmp	r3, r2
 8005134:	d3b3      	bcc.n	800509e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695a      	ldr	r2, [r3, #20]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005144:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f009 ffc0 	bl	800f0d0 <USB_ReadInterrupts>
 8005150:	4603      	mov	r3, r0
 8005152:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800515a:	d10a      	bne.n	8005172 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f010 f883 	bl	8015268 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	695a      	ldr	r2, [r3, #20]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005170:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f009 ffaa 	bl	800f0d0 <USB_ReadInterrupts>
 800517c:	4603      	mov	r3, r0
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b04      	cmp	r3, #4
 8005184:	d115      	bne.n	80051b2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f010 f873 	bl	8015284 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6859      	ldr	r1, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	69ba      	ldr	r2, [r7, #24]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
 80051ae:	e000      	b.n	80051b2 <HAL_PCD_IRQHandler+0x996>
      return;
 80051b0:	bf00      	nop
    }
  }
}
 80051b2:	3734      	adds	r7, #52	@ 0x34
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd90      	pop	{r4, r7, pc}

080051b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d101      	bne.n	80051d2 <HAL_PCD_SetAddress+0x1a>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e012      	b.n	80051f8 <HAL_PCD_SetAddress+0x40>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	78fa      	ldrb	r2, [r7, #3]
 80051de:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	78fa      	ldrb	r2, [r7, #3]
 80051e6:	4611      	mov	r1, r2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f009 ff09 	bl	800f000 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	4608      	mov	r0, r1
 800520a:	4611      	mov	r1, r2
 800520c:	461a      	mov	r2, r3
 800520e:	4603      	mov	r3, r0
 8005210:	70fb      	strb	r3, [r7, #3]
 8005212:	460b      	mov	r3, r1
 8005214:	803b      	strh	r3, [r7, #0]
 8005216:	4613      	mov	r3, r2
 8005218:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800521a:	2300      	movs	r3, #0
 800521c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800521e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005222:	2b00      	cmp	r3, #0
 8005224:	da0f      	bge.n	8005246 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	f003 020f 	and.w	r2, r3, #15
 800522c:	4613      	mov	r3, r2
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	3310      	adds	r3, #16
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	4413      	add	r3, r2
 800523a:	3304      	adds	r3, #4
 800523c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	705a      	strb	r2, [r3, #1]
 8005244:	e00f      	b.n	8005266 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005246:	78fb      	ldrb	r3, [r7, #3]
 8005248:	f003 020f 	and.w	r2, r3, #15
 800524c:	4613      	mov	r3, r2
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4413      	add	r3, r2
 800525c:	3304      	adds	r3, #4
 800525e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005266:	78fb      	ldrb	r3, [r7, #3]
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	b2da      	uxtb	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005272:	883b      	ldrh	r3, [r7, #0]
 8005274:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	78ba      	ldrb	r2, [r7, #2]
 8005280:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	785b      	ldrb	r3, [r3, #1]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d004      	beq.n	8005294 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005294:	78bb      	ldrb	r3, [r7, #2]
 8005296:	2b02      	cmp	r3, #2
 8005298:	d102      	bne.n	80052a0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_PCD_EP_Open+0xae>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e00e      	b.n	80052cc <HAL_PCD_EP_Open+0xcc>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68f9      	ldr	r1, [r7, #12]
 80052bc:	4618      	mov	r0, r3
 80052be:	f009 f883 	bl	800e3c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80052ca:	7afb      	ldrb	r3, [r7, #11]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80052e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	da0f      	bge.n	8005308 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	f003 020f 	and.w	r2, r3, #15
 80052ee:	4613      	mov	r3, r2
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	3310      	adds	r3, #16
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4413      	add	r3, r2
 80052fc:	3304      	adds	r3, #4
 80052fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2201      	movs	r2, #1
 8005304:	705a      	strb	r2, [r3, #1]
 8005306:	e00f      	b.n	8005328 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005308:	78fb      	ldrb	r3, [r7, #3]
 800530a:	f003 020f 	and.w	r2, r3, #15
 800530e:	4613      	mov	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	4413      	add	r3, r2
 800531e:	3304      	adds	r3, #4
 8005320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	b2da      	uxtb	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_PCD_EP_Close+0x6e>
 800533e:	2302      	movs	r3, #2
 8005340:	e00e      	b.n	8005360 <HAL_PCD_EP_Close+0x8c>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	4618      	mov	r0, r3
 8005352:	f009 f8c1 	bl	800e4d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	607a      	str	r2, [r7, #4]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	460b      	mov	r3, r1
 8005376:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005378:	7afb      	ldrb	r3, [r7, #11]
 800537a:	f003 020f 	and.w	r2, r3, #15
 800537e:	4613      	mov	r3, r2
 8005380:	00db      	lsls	r3, r3, #3
 8005382:	4413      	add	r3, r2
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	4413      	add	r3, r2
 800538e:	3304      	adds	r3, #4
 8005390:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2200      	movs	r2, #0
 80053a2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2200      	movs	r2, #0
 80053a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053aa:	7afb      	ldrb	r3, [r7, #11]
 80053ac:	f003 030f 	and.w	r3, r3, #15
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	799b      	ldrb	r3, [r3, #6]
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d102      	bne.n	80053c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	6818      	ldr	r0, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	799b      	ldrb	r3, [r3, #6]
 80053cc:	461a      	mov	r2, r3
 80053ce:	6979      	ldr	r1, [r7, #20]
 80053d0:	f009 f95e 	bl	800e690 <USB_EPStartXfer>

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	460b      	mov	r3, r1
 80053e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80053ea:	78fb      	ldrb	r3, [r7, #3]
 80053ec:	f003 020f 	and.w	r2, r3, #15
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	4613      	mov	r3, r2
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	4413      	add	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	440b      	add	r3, r1
 80053fc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005400:	681b      	ldr	r3, [r3, #0]
}
 8005402:	4618      	mov	r0, r3
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800540e:	b580      	push	{r7, lr}
 8005410:	b086      	sub	sp, #24
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
 800541a:	460b      	mov	r3, r1
 800541c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800541e:	7afb      	ldrb	r3, [r7, #11]
 8005420:	f003 020f 	and.w	r2, r3, #15
 8005424:	4613      	mov	r3, r2
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	4413      	add	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	3310      	adds	r3, #16
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	4413      	add	r3, r2
 8005432:	3304      	adds	r3, #4
 8005434:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	687a      	ldr	r2, [r7, #4]
 800543a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2200      	movs	r2, #0
 8005446:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2201      	movs	r2, #1
 800544c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800544e:	7afb      	ldrb	r3, [r7, #11]
 8005450:	f003 030f 	and.w	r3, r3, #15
 8005454:	b2da      	uxtb	r2, r3
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	799b      	ldrb	r3, [r3, #6]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d102      	bne.n	8005468 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6818      	ldr	r0, [r3, #0]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	799b      	ldrb	r3, [r3, #6]
 8005470:	461a      	mov	r2, r3
 8005472:	6979      	ldr	r1, [r7, #20]
 8005474:	f009 f90c 	bl	800e690 <USB_EPStartXfer>

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	460b      	mov	r3, r1
 800548c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800548e:	78fb      	ldrb	r3, [r7, #3]
 8005490:	f003 030f 	and.w	r3, r3, #15
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	7912      	ldrb	r2, [r2, #4]
 8005498:	4293      	cmp	r3, r2
 800549a:	d901      	bls.n	80054a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e04f      	b.n	8005540 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	da0f      	bge.n	80054c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	f003 020f 	and.w	r2, r3, #15
 80054ae:	4613      	mov	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	4413      	add	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	3310      	adds	r3, #16
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	4413      	add	r3, r2
 80054bc:	3304      	adds	r3, #4
 80054be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2201      	movs	r2, #1
 80054c4:	705a      	strb	r2, [r3, #1]
 80054c6:	e00d      	b.n	80054e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	4613      	mov	r3, r2
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	4413      	add	r3, r2
 80054da:	3304      	adds	r3, #4
 80054dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2201      	movs	r2, #1
 80054e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054ea:	78fb      	ldrb	r3, [r7, #3]
 80054ec:	f003 030f 	and.w	r3, r3, #15
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d101      	bne.n	8005504 <HAL_PCD_EP_SetStall+0x82>
 8005500:	2302      	movs	r3, #2
 8005502:	e01d      	b.n	8005540 <HAL_PCD_EP_SetStall+0xbe>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68f9      	ldr	r1, [r7, #12]
 8005512:	4618      	mov	r0, r3
 8005514:	f009 fca0 	bl	800ee58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	2b00      	cmp	r3, #0
 8005520:	d109      	bne.n	8005536 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6818      	ldr	r0, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	7999      	ldrb	r1, [r3, #6]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005530:	461a      	mov	r2, r3
 8005532:	f009 fe93 	bl	800f25c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3710      	adds	r7, #16
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	7912      	ldrb	r2, [r2, #4]
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e042      	b.n	80055ec <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005566:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800556a:	2b00      	cmp	r3, #0
 800556c:	da0f      	bge.n	800558e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800556e:	78fb      	ldrb	r3, [r7, #3]
 8005570:	f003 020f 	and.w	r2, r3, #15
 8005574:	4613      	mov	r3, r2
 8005576:	00db      	lsls	r3, r3, #3
 8005578:	4413      	add	r3, r2
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	3310      	adds	r3, #16
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	4413      	add	r3, r2
 8005582:	3304      	adds	r3, #4
 8005584:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	705a      	strb	r2, [r3, #1]
 800558c:	e00f      	b.n	80055ae <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800558e:	78fb      	ldrb	r3, [r7, #3]
 8005590:	f003 020f 	and.w	r2, r3, #15
 8005594:	4613      	mov	r3, r2
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	4413      	add	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	4413      	add	r3, r2
 80055a4:	3304      	adds	r3, #4
 80055a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d101      	bne.n	80055ce <HAL_PCD_EP_ClrStall+0x86>
 80055ca:	2302      	movs	r3, #2
 80055cc:	e00e      	b.n	80055ec <HAL_PCD_EP_ClrStall+0xa4>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68f9      	ldr	r1, [r7, #12]
 80055dc:	4618      	mov	r0, r3
 80055de:	f009 fca9 	bl	800ef34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005600:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005604:	2b00      	cmp	r3, #0
 8005606:	da0c      	bge.n	8005622 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005608:	78fb      	ldrb	r3, [r7, #3]
 800560a:	f003 020f 	and.w	r2, r3, #15
 800560e:	4613      	mov	r3, r2
 8005610:	00db      	lsls	r3, r3, #3
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	3310      	adds	r3, #16
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	4413      	add	r3, r2
 800561c:	3304      	adds	r3, #4
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	e00c      	b.n	800563c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	f003 020f 	and.w	r2, r3, #15
 8005628:	4613      	mov	r3, r2
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	4413      	add	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	4413      	add	r3, r2
 8005638:	3304      	adds	r3, #4
 800563a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68f9      	ldr	r1, [r7, #12]
 8005642:	4618      	mov	r0, r3
 8005644:	f009 fac8 	bl	800ebd8 <USB_EPStopXfer>
 8005648:	4603      	mov	r3, r0
 800564a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800564c:	7afb      	ldrb	r3, [r7, #11]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b08a      	sub	sp, #40	@ 0x28
 800565a:	af02      	add	r7, sp, #8
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800566a:	683a      	ldr	r2, [r7, #0]
 800566c:	4613      	mov	r3, r2
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	4413      	add	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	3310      	adds	r3, #16
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	4413      	add	r3, r2
 800567a:	3304      	adds	r3, #4
 800567c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	429a      	cmp	r2, r3
 8005688:	d901      	bls.n	800568e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e06b      	b.n	8005766 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	69fa      	ldr	r2, [r7, #28]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d902      	bls.n	80056aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	3303      	adds	r3, #3
 80056ae:	089b      	lsrs	r3, r3, #2
 80056b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056b2:	e02a      	b.n	800570a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	691a      	ldr	r2, [r3, #16]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	69fa      	ldr	r2, [r7, #28]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d902      	bls.n	80056d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	3303      	adds	r3, #3
 80056d4:	089b      	lsrs	r3, r3, #2
 80056d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	68d9      	ldr	r1, [r3, #12]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	4603      	mov	r3, r0
 80056ec:	6978      	ldr	r0, [r7, #20]
 80056ee:	f009 fb1d 	bl	800ed2c <USB_WritePacket>

    ep->xfer_buff  += len;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	68da      	ldr	r2, [r3, #12]
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	441a      	add	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	695a      	ldr	r2, [r3, #20]
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	441a      	add	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	429a      	cmp	r2, r3
 800571e:	d809      	bhi.n	8005734 <PCD_WriteEmptyTxFifo+0xde>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005728:	429a      	cmp	r2, r3
 800572a:	d203      	bcs.n	8005734 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1bf      	bne.n	80056b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	691a      	ldr	r2, [r3, #16]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	429a      	cmp	r2, r3
 800573e:	d811      	bhi.n	8005764 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	2201      	movs	r2, #1
 8005748:	fa02 f303 	lsl.w	r3, r2, r3
 800574c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005754:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	43db      	mvns	r3, r3
 800575a:	6939      	ldr	r1, [r7, #16]
 800575c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005760:	4013      	ands	r3, r2
 8005762:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3720      	adds	r7, #32
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
	...

08005770 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	333c      	adds	r3, #60	@ 0x3c
 8005788:	3304      	adds	r3, #4
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	69bb      	ldr	r3, [r7, #24]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	799b      	ldrb	r3, [r3, #6]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d17b      	bne.n	800589e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d015      	beq.n	80057dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	4a61      	ldr	r2, [pc, #388]	@ (8005938 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	f240 80b9 	bls.w	800592c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 80b3 	beq.w	800592c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d2:	461a      	mov	r2, r3
 80057d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057d8:	6093      	str	r3, [r2, #8]
 80057da:	e0a7      	b.n	800592c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057f2:	461a      	mov	r2, r3
 80057f4:	2320      	movs	r3, #32
 80057f6:	6093      	str	r3, [r2, #8]
 80057f8:	e098      	b.n	800592c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005800:	2b00      	cmp	r3, #0
 8005802:	f040 8093 	bne.w	800592c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	4a4b      	ldr	r2, [pc, #300]	@ (8005938 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d90f      	bls.n	800582e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005824:	461a      	mov	r2, r3
 8005826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800582a:	6093      	str	r3, [r2, #8]
 800582c:	e07e      	b.n	800592c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	4613      	mov	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	4413      	add	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	4413      	add	r3, r2
 8005840:	3304      	adds	r3, #4
 8005842:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a1a      	ldr	r2, [r3, #32]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	0159      	lsls	r1, r3, #5
 800584c:	69bb      	ldr	r3, [r7, #24]
 800584e:	440b      	add	r3, r1
 8005850:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800585a:	1ad2      	subs	r2, r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d114      	bne.n	8005890 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d109      	bne.n	8005882 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005878:	461a      	mov	r2, r3
 800587a:	2101      	movs	r1, #1
 800587c:	f009 fcee 	bl	800f25c <USB_EP0_OutStart>
 8005880:	e006      	b.n	8005890 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	441a      	add	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	4619      	mov	r1, r3
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f00f fc22 	bl	80150e0 <HAL_PCD_DataOutStageCallback>
 800589c:	e046      	b.n	800592c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	4a26      	ldr	r2, [pc, #152]	@ (800593c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d124      	bne.n	80058f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	015a      	lsls	r2, r3, #5
 80058b4:	69bb      	ldr	r3, [r7, #24]
 80058b6:	4413      	add	r3, r2
 80058b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058bc:	461a      	mov	r2, r3
 80058be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058c2:	6093      	str	r3, [r2, #8]
 80058c4:	e032      	b.n	800592c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058dc:	461a      	mov	r2, r3
 80058de:	2320      	movs	r3, #32
 80058e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	4619      	mov	r1, r3
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f00f fbf9 	bl	80150e0 <HAL_PCD_DataOutStageCallback>
 80058ee:	e01d      	b.n	800592c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d114      	bne.n	8005920 <PCD_EP_OutXfrComplete_int+0x1b0>
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	4613      	mov	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d108      	bne.n	8005920 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005918:	461a      	mov	r2, r3
 800591a:	2100      	movs	r1, #0
 800591c:	f009 fc9e 	bl	800f25c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	b2db      	uxtb	r3, r3
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f00f fbda 	bl	80150e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3720      	adds	r7, #32
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	4f54300a 	.word	0x4f54300a
 800593c:	4f54310a 	.word	0x4f54310a

08005940 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	333c      	adds	r3, #60	@ 0x3c
 8005958:	3304      	adds	r3, #4
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	4413      	add	r3, r2
 8005966:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4a15      	ldr	r2, [pc, #84]	@ (80059c8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d90e      	bls.n	8005994 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800597c:	2b00      	cmp	r3, #0
 800597e:	d009      	beq.n	8005994 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598c:	461a      	mov	r2, r3
 800598e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005992:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f00f fb91 	bl	80150bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4a0a      	ldr	r2, [pc, #40]	@ (80059c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d90c      	bls.n	80059bc <PCD_EP_OutSetupPacket_int+0x7c>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	799b      	ldrb	r3, [r3, #6]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d108      	bne.n	80059bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6818      	ldr	r0, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80059b4:	461a      	mov	r2, r3
 80059b6:	2101      	movs	r1, #1
 80059b8:	f009 fc50 	bl	800f25c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	4f54300a 	.word	0x4f54300a

080059cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	460b      	mov	r3, r1
 80059d6:	70fb      	strb	r3, [r7, #3]
 80059d8:	4613      	mov	r3, r2
 80059da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d107      	bne.n	80059fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80059ea:	883b      	ldrh	r3, [r7, #0]
 80059ec:	0419      	lsls	r1, r3, #16
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	430a      	orrs	r2, r1
 80059f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80059f8:	e028      	b.n	8005a4c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a00:	0c1b      	lsrs	r3, r3, #16
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	4413      	add	r3, r2
 8005a06:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a08:	2300      	movs	r3, #0
 8005a0a:	73fb      	strb	r3, [r7, #15]
 8005a0c:	e00d      	b.n	8005a2a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	7bfb      	ldrb	r3, [r7, #15]
 8005a14:	3340      	adds	r3, #64	@ 0x40
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	0c1b      	lsrs	r3, r3, #16
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	4413      	add	r3, r2
 8005a22:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	3301      	adds	r3, #1
 8005a28:	73fb      	strb	r3, [r7, #15]
 8005a2a:	7bfa      	ldrb	r2, [r7, #15]
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d3ec      	bcc.n	8005a0e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005a34:	883b      	ldrh	r3, [r7, #0]
 8005a36:	0418      	lsls	r0, r3, #16
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6819      	ldr	r1, [r3, #0]
 8005a3c:	78fb      	ldrb	r3, [r7, #3]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	4302      	orrs	r2, r0
 8005a44:	3340      	adds	r3, #64	@ 0x40
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	440b      	add	r3, r1
 8005a4a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3714      	adds	r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr

08005a5a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a5a:	b480      	push	{r7}
 8005a5c:	b083      	sub	sp, #12
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
 8005a62:	460b      	mov	r3, r1
 8005a64:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	887a      	ldrh	r2, [r7, #2]
 8005a6c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005aaa:	4b05      	ldr	r3, [pc, #20]	@ (8005ac0 <HAL_PCDEx_ActivateLPM+0x44>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005ab2:	2300      	movs	r3, #0
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	10000003 	.word	0x10000003

08005ac4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	460b      	mov	r3, r1
 8005ace:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005ae4:	4b19      	ldr	r3, [pc, #100]	@ (8005b4c <HAL_PWREx_ConfigSupply+0x70>)
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d00a      	beq.n	8005b06 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005af0:	4b16      	ldr	r3, [pc, #88]	@ (8005b4c <HAL_PWREx_ConfigSupply+0x70>)
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d001      	beq.n	8005b02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e01f      	b.n	8005b42 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	e01d      	b.n	8005b42 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005b06:	4b11      	ldr	r3, [pc, #68]	@ (8005b4c <HAL_PWREx_ConfigSupply+0x70>)
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f023 0207 	bic.w	r2, r3, #7
 8005b0e:	490f      	ldr	r1, [pc, #60]	@ (8005b4c <HAL_PWREx_ConfigSupply+0x70>)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b16:	f7fc fd6f 	bl	80025f8 <HAL_GetTick>
 8005b1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b1c:	e009      	b.n	8005b32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b1e:	f7fc fd6b 	bl	80025f8 <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b2c:	d901      	bls.n	8005b32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e007      	b.n	8005b42 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b32:	4b06      	ldr	r3, [pc, #24]	@ (8005b4c <HAL_PWREx_ConfigSupply+0x70>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b3e:	d1ee      	bne.n	8005b1e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	58024800 	.word	0x58024800

08005b50 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005b54:	4b05      	ldr	r3, [pc, #20]	@ (8005b6c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	4a04      	ldr	r2, [pc, #16]	@ (8005b6c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005b5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b5e:	60d3      	str	r3, [r2, #12]
}
 8005b60:	bf00      	nop
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	58024800 	.word	0x58024800

08005b70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b08c      	sub	sp, #48	@ 0x30
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d102      	bne.n	8005b84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	f000 bc48 	b.w	8006414 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8088 	beq.w	8005ca2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b92:	4b99      	ldr	r3, [pc, #612]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b9c:	4b96      	ldr	r3, [pc, #600]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba4:	2b10      	cmp	r3, #16
 8005ba6:	d007      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x48>
 8005ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005baa:	2b18      	cmp	r3, #24
 8005bac:	d111      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x62>
 8005bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb0:	f003 0303 	and.w	r3, r3, #3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d10c      	bne.n	8005bd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb8:	4b8f      	ldr	r3, [pc, #572]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d06d      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x130>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d169      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	f000 bc21 	b.w	8006414 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bda:	d106      	bne.n	8005bea <HAL_RCC_OscConfig+0x7a>
 8005bdc:	4b86      	ldr	r3, [pc, #536]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a85      	ldr	r2, [pc, #532]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	e02e      	b.n	8005c48 <HAL_RCC_OscConfig+0xd8>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10c      	bne.n	8005c0c <HAL_RCC_OscConfig+0x9c>
 8005bf2:	4b81      	ldr	r3, [pc, #516]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a80      	ldr	r2, [pc, #512]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005bf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bfc:	6013      	str	r3, [r2, #0]
 8005bfe:	4b7e      	ldr	r3, [pc, #504]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a7d      	ldr	r2, [pc, #500]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005c04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	e01d      	b.n	8005c48 <HAL_RCC_OscConfig+0xd8>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c14:	d10c      	bne.n	8005c30 <HAL_RCC_OscConfig+0xc0>
 8005c16:	4b78      	ldr	r3, [pc, #480]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a77      	ldr	r2, [pc, #476]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005c1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	4b75      	ldr	r3, [pc, #468]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a74      	ldr	r2, [pc, #464]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	e00b      	b.n	8005c48 <HAL_RCC_OscConfig+0xd8>
 8005c30:	4b71      	ldr	r3, [pc, #452]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a70      	ldr	r2, [pc, #448]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005c36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	4b6e      	ldr	r3, [pc, #440]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a6d      	ldr	r2, [pc, #436]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d013      	beq.n	8005c78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c50:	f7fc fcd2 	bl	80025f8 <HAL_GetTick>
 8005c54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c58:	f7fc fcce 	bl	80025f8 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b64      	cmp	r3, #100	@ 0x64
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e3d4      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c6a:	4b63      	ldr	r3, [pc, #396]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0f0      	beq.n	8005c58 <HAL_RCC_OscConfig+0xe8>
 8005c76:	e014      	b.n	8005ca2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c78:	f7fc fcbe 	bl	80025f8 <HAL_GetTick>
 8005c7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c7e:	e008      	b.n	8005c92 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c80:	f7fc fcba 	bl	80025f8 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	2b64      	cmp	r3, #100	@ 0x64
 8005c8c:	d901      	bls.n	8005c92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005c8e:	2303      	movs	r3, #3
 8005c90:	e3c0      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c92:	4b59      	ldr	r3, [pc, #356]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1f0      	bne.n	8005c80 <HAL_RCC_OscConfig+0x110>
 8005c9e:	e000      	b.n	8005ca2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 80ca 	beq.w	8005e44 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cb0:	4b51      	ldr	r3, [pc, #324]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cb8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cba:	4b4f      	ldr	r3, [pc, #316]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <HAL_RCC_OscConfig+0x166>
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	2b18      	cmp	r3, #24
 8005cca:	d156      	bne.n	8005d7a <HAL_RCC_OscConfig+0x20a>
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d151      	bne.n	8005d7a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cd6:	4b48      	ldr	r3, [pc, #288]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0304 	and.w	r3, r3, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d005      	beq.n	8005cee <HAL_RCC_OscConfig+0x17e>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e392      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005cee:	4b42      	ldr	r3, [pc, #264]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f023 0219 	bic.w	r2, r3, #25
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	493f      	ldr	r1, [pc, #252]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d00:	f7fc fc7a 	bl	80025f8 <HAL_GetTick>
 8005d04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d08:	f7fc fc76 	bl	80025f8 <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e37c      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d1a:	4b37      	ldr	r3, [pc, #220]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d0f0      	beq.n	8005d08 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d26:	f7fc fc97 	bl	8002658 <HAL_GetREVID>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d817      	bhi.n	8005d64 <HAL_RCC_OscConfig+0x1f4>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2b40      	cmp	r3, #64	@ 0x40
 8005d3a:	d108      	bne.n	8005d4e <HAL_RCC_OscConfig+0x1de>
 8005d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005d44:	4a2c      	ldr	r2, [pc, #176]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005d46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d4a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d4c:	e07a      	b.n	8005e44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d4e:	4b2a      	ldr	r3, [pc, #168]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	031b      	lsls	r3, r3, #12
 8005d5c:	4926      	ldr	r1, [pc, #152]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d62:	e06f      	b.n	8005e44 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d64:	4b24      	ldr	r3, [pc, #144]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	061b      	lsls	r3, r3, #24
 8005d72:	4921      	ldr	r1, [pc, #132]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d78:	e064      	b.n	8005e44 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d047      	beq.n	8005e12 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d82:	4b1d      	ldr	r3, [pc, #116]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f023 0219 	bic.w	r2, r3, #25
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	491a      	ldr	r1, [pc, #104]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fc fc30 	bl	80025f8 <HAL_GetTick>
 8005d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d9c:	f7fc fc2c 	bl	80025f8 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e332      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dae:	4b12      	ldr	r3, [pc, #72]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dba:	f7fc fc4d 	bl	8002658 <HAL_GetREVID>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d819      	bhi.n	8005dfc <HAL_RCC_OscConfig+0x28c>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2b40      	cmp	r3, #64	@ 0x40
 8005dce:	d108      	bne.n	8005de2 <HAL_RCC_OscConfig+0x272>
 8005dd0:	4b09      	ldr	r3, [pc, #36]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005dd8:	4a07      	ldr	r2, [pc, #28]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dde:	6053      	str	r3, [r2, #4]
 8005de0:	e030      	b.n	8005e44 <HAL_RCC_OscConfig+0x2d4>
 8005de2:	4b05      	ldr	r3, [pc, #20]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	031b      	lsls	r3, r3, #12
 8005df0:	4901      	ldr	r1, [pc, #4]	@ (8005df8 <HAL_RCC_OscConfig+0x288>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	604b      	str	r3, [r1, #4]
 8005df6:	e025      	b.n	8005e44 <HAL_RCC_OscConfig+0x2d4>
 8005df8:	58024400 	.word	0x58024400
 8005dfc:	4b9a      	ldr	r3, [pc, #616]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	061b      	lsls	r3, r3, #24
 8005e0a:	4997      	ldr	r1, [pc, #604]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	604b      	str	r3, [r1, #4]
 8005e10:	e018      	b.n	8005e44 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e12:	4b95      	ldr	r3, [pc, #596]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a94      	ldr	r2, [pc, #592]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005e18:	f023 0301 	bic.w	r3, r3, #1
 8005e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e1e:	f7fc fbeb 	bl	80025f8 <HAL_GetTick>
 8005e22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e24:	e008      	b.n	8005e38 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e26:	f7fc fbe7 	bl	80025f8 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d901      	bls.n	8005e38 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e2ed      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e38:	4b8b      	ldr	r3, [pc, #556]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1f0      	bne.n	8005e26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0310 	and.w	r3, r3, #16
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 80a9 	beq.w	8005fa4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e52:	4b85      	ldr	r3, [pc, #532]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e5a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e5c:	4b82      	ldr	r3, [pc, #520]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e60:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d007      	beq.n	8005e78 <HAL_RCC_OscConfig+0x308>
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	2b18      	cmp	r3, #24
 8005e6c:	d13a      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x374>
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f003 0303 	and.w	r3, r3, #3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d135      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005e78:	4b7b      	ldr	r3, [pc, #492]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d005      	beq.n	8005e90 <HAL_RCC_OscConfig+0x320>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	2b80      	cmp	r3, #128	@ 0x80
 8005e8a:	d001      	beq.n	8005e90 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e2c1      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005e90:	f7fc fbe2 	bl	8002658 <HAL_GetREVID>
 8005e94:	4603      	mov	r3, r0
 8005e96:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d817      	bhi.n	8005ece <HAL_RCC_OscConfig+0x35e>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	2b20      	cmp	r3, #32
 8005ea4:	d108      	bne.n	8005eb8 <HAL_RCC_OscConfig+0x348>
 8005ea6:	4b70      	ldr	r3, [pc, #448]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005eae:	4a6e      	ldr	r2, [pc, #440]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005eb0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005eb4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005eb6:	e075      	b.n	8005fa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005eb8:	4b6b      	ldr	r3, [pc, #428]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	069b      	lsls	r3, r3, #26
 8005ec6:	4968      	ldr	r1, [pc, #416]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ecc:	e06a      	b.n	8005fa4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ece:	4b66      	ldr	r3, [pc, #408]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	061b      	lsls	r3, r3, #24
 8005edc:	4962      	ldr	r1, [pc, #392]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ee2:	e05f      	b.n	8005fa4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d042      	beq.n	8005f72 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005eec:	4b5e      	ldr	r3, [pc, #376]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a5d      	ldr	r2, [pc, #372]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005ef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef8:	f7fc fb7e 	bl	80025f8 <HAL_GetTick>
 8005efc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f00:	f7fc fb7a 	bl	80025f8 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e280      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f12:	4b55      	ldr	r3, [pc, #340]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0f0      	beq.n	8005f00 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f1e:	f7fc fb9b 	bl	8002658 <HAL_GetREVID>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d817      	bhi.n	8005f5c <HAL_RCC_OscConfig+0x3ec>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d108      	bne.n	8005f46 <HAL_RCC_OscConfig+0x3d6>
 8005f34:	4b4c      	ldr	r3, [pc, #304]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005f3c:	4a4a      	ldr	r2, [pc, #296]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005f3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f42:	6053      	str	r3, [r2, #4]
 8005f44:	e02e      	b.n	8005fa4 <HAL_RCC_OscConfig+0x434>
 8005f46:	4b48      	ldr	r3, [pc, #288]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	069b      	lsls	r3, r3, #26
 8005f54:	4944      	ldr	r1, [pc, #272]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	604b      	str	r3, [r1, #4]
 8005f5a:	e023      	b.n	8005fa4 <HAL_RCC_OscConfig+0x434>
 8005f5c:	4b42      	ldr	r3, [pc, #264]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	061b      	lsls	r3, r3, #24
 8005f6a:	493f      	ldr	r1, [pc, #252]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60cb      	str	r3, [r1, #12]
 8005f70:	e018      	b.n	8005fa4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005f72:	4b3d      	ldr	r3, [pc, #244]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a3c      	ldr	r2, [pc, #240]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005f78:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f7e:	f7fc fb3b 	bl	80025f8 <HAL_GetTick>
 8005f82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f84:	e008      	b.n	8005f98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f86:	f7fc fb37 	bl	80025f8 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e23d      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005f98:	4b33      	ldr	r3, [pc, #204]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1f0      	bne.n	8005f86 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d036      	beq.n	800601e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d019      	beq.n	8005fec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005fbe:	f043 0301 	orr.w	r3, r3, #1
 8005fc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc4:	f7fc fb18 	bl	80025f8 <HAL_GetTick>
 8005fc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005fca:	e008      	b.n	8005fde <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fcc:	f7fc fb14 	bl	80025f8 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d901      	bls.n	8005fde <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e21a      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005fde:	4b22      	ldr	r3, [pc, #136]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0f0      	beq.n	8005fcc <HAL_RCC_OscConfig+0x45c>
 8005fea:	e018      	b.n	800601e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005fec:	4b1e      	ldr	r3, [pc, #120]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ff0:	4a1d      	ldr	r2, [pc, #116]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8005ff2:	f023 0301 	bic.w	r3, r3, #1
 8005ff6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff8:	f7fc fafe 	bl	80025f8 <HAL_GetTick>
 8005ffc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006000:	f7fc fafa 	bl	80025f8 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e200      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006012:	4b15      	ldr	r3, [pc, #84]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8006014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006016:	f003 0302 	and.w	r3, r3, #2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f0      	bne.n	8006000 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0320 	and.w	r3, r3, #32
 8006026:	2b00      	cmp	r3, #0
 8006028:	d039      	beq.n	800609e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d01c      	beq.n	800606c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006032:	4b0d      	ldr	r3, [pc, #52]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a0c      	ldr	r2, [pc, #48]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 8006038:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800603c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800603e:	f7fc fadb 	bl	80025f8 <HAL_GetTick>
 8006042:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006044:	e008      	b.n	8006058 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006046:	f7fc fad7 	bl	80025f8 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e1dd      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006058:	4b03      	ldr	r3, [pc, #12]	@ (8006068 <HAL_RCC_OscConfig+0x4f8>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d0f0      	beq.n	8006046 <HAL_RCC_OscConfig+0x4d6>
 8006064:	e01b      	b.n	800609e <HAL_RCC_OscConfig+0x52e>
 8006066:	bf00      	nop
 8006068:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800606c:	4b9b      	ldr	r3, [pc, #620]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a9a      	ldr	r2, [pc, #616]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006072:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006076:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006078:	f7fc fabe 	bl	80025f8 <HAL_GetTick>
 800607c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800607e:	e008      	b.n	8006092 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006080:	f7fc faba 	bl	80025f8 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e1c0      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006092:	4b92      	ldr	r3, [pc, #584]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f0      	bne.n	8006080 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f000 8081 	beq.w	80061ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80060ac:	4b8c      	ldr	r3, [pc, #560]	@ (80062e0 <HAL_RCC_OscConfig+0x770>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a8b      	ldr	r2, [pc, #556]	@ (80062e0 <HAL_RCC_OscConfig+0x770>)
 80060b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060b8:	f7fc fa9e 	bl	80025f8 <HAL_GetTick>
 80060bc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060c0:	f7fc fa9a 	bl	80025f8 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b64      	cmp	r3, #100	@ 0x64
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e1a0      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060d2:	4b83      	ldr	r3, [pc, #524]	@ (80062e0 <HAL_RCC_OscConfig+0x770>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d0f0      	beq.n	80060c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d106      	bne.n	80060f4 <HAL_RCC_OscConfig+0x584>
 80060e6:	4b7d      	ldr	r3, [pc, #500]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80060e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ea:	4a7c      	ldr	r2, [pc, #496]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80060f2:	e02d      	b.n	8006150 <HAL_RCC_OscConfig+0x5e0>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689b      	ldr	r3, [r3, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10c      	bne.n	8006116 <HAL_RCC_OscConfig+0x5a6>
 80060fc:	4b77      	ldr	r3, [pc, #476]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80060fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006100:	4a76      	ldr	r2, [pc, #472]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006102:	f023 0301 	bic.w	r3, r3, #1
 8006106:	6713      	str	r3, [r2, #112]	@ 0x70
 8006108:	4b74      	ldr	r3, [pc, #464]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 800610a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800610c:	4a73      	ldr	r2, [pc, #460]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 800610e:	f023 0304 	bic.w	r3, r3, #4
 8006112:	6713      	str	r3, [r2, #112]	@ 0x70
 8006114:	e01c      	b.n	8006150 <HAL_RCC_OscConfig+0x5e0>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	2b05      	cmp	r3, #5
 800611c:	d10c      	bne.n	8006138 <HAL_RCC_OscConfig+0x5c8>
 800611e:	4b6f      	ldr	r3, [pc, #444]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006122:	4a6e      	ldr	r2, [pc, #440]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006124:	f043 0304 	orr.w	r3, r3, #4
 8006128:	6713      	str	r3, [r2, #112]	@ 0x70
 800612a:	4b6c      	ldr	r3, [pc, #432]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 800612c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800612e:	4a6b      	ldr	r2, [pc, #428]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006130:	f043 0301 	orr.w	r3, r3, #1
 8006134:	6713      	str	r3, [r2, #112]	@ 0x70
 8006136:	e00b      	b.n	8006150 <HAL_RCC_OscConfig+0x5e0>
 8006138:	4b68      	ldr	r3, [pc, #416]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 800613a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800613c:	4a67      	ldr	r2, [pc, #412]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 800613e:	f023 0301 	bic.w	r3, r3, #1
 8006142:	6713      	str	r3, [r2, #112]	@ 0x70
 8006144:	4b65      	ldr	r3, [pc, #404]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006148:	4a64      	ldr	r2, [pc, #400]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 800614a:	f023 0304 	bic.w	r3, r3, #4
 800614e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d015      	beq.n	8006184 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006158:	f7fc fa4e 	bl	80025f8 <HAL_GetTick>
 800615c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800615e:	e00a      	b.n	8006176 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006160:	f7fc fa4a 	bl	80025f8 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800616e:	4293      	cmp	r3, r2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e14e      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006176:	4b59      	ldr	r3, [pc, #356]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0ee      	beq.n	8006160 <HAL_RCC_OscConfig+0x5f0>
 8006182:	e014      	b.n	80061ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006184:	f7fc fa38 	bl	80025f8 <HAL_GetTick>
 8006188:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800618a:	e00a      	b.n	80061a2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800618c:	f7fc fa34 	bl	80025f8 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800619a:	4293      	cmp	r3, r2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e138      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80061a2:	4b4e      	ldr	r3, [pc, #312]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80061a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1ee      	bne.n	800618c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 812d 	beq.w	8006412 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80061b8:	4b48      	ldr	r3, [pc, #288]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061c0:	2b18      	cmp	r3, #24
 80061c2:	f000 80bd 	beq.w	8006340 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	f040 809e 	bne.w	800630c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061d0:	4b42      	ldr	r3, [pc, #264]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a41      	ldr	r2, [pc, #260]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80061d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061dc:	f7fc fa0c 	bl	80025f8 <HAL_GetTick>
 80061e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061e2:	e008      	b.n	80061f6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061e4:	f7fc fa08 	bl	80025f8 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e10e      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80061f6:	4b39      	ldr	r3, [pc, #228]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1f0      	bne.n	80061e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006202:	4b36      	ldr	r3, [pc, #216]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006204:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006206:	4b37      	ldr	r3, [pc, #220]	@ (80062e4 <HAL_RCC_OscConfig+0x774>)
 8006208:	4013      	ands	r3, r2
 800620a:	687a      	ldr	r2, [r7, #4]
 800620c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006212:	0112      	lsls	r2, r2, #4
 8006214:	430a      	orrs	r2, r1
 8006216:	4931      	ldr	r1, [pc, #196]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006218:	4313      	orrs	r3, r2
 800621a:	628b      	str	r3, [r1, #40]	@ 0x28
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006220:	3b01      	subs	r3, #1
 8006222:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800622a:	3b01      	subs	r3, #1
 800622c:	025b      	lsls	r3, r3, #9
 800622e:	b29b      	uxth	r3, r3
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006236:	3b01      	subs	r3, #1
 8006238:	041b      	lsls	r3, r3, #16
 800623a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800623e:	431a      	orrs	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006244:	3b01      	subs	r3, #1
 8006246:	061b      	lsls	r3, r3, #24
 8006248:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800624c:	4923      	ldr	r1, [pc, #140]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 800624e:	4313      	orrs	r3, r2
 8006250:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006252:	4b22      	ldr	r3, [pc, #136]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006256:	4a21      	ldr	r2, [pc, #132]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006258:	f023 0301 	bic.w	r3, r3, #1
 800625c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800625e:	4b1f      	ldr	r3, [pc, #124]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006262:	4b21      	ldr	r3, [pc, #132]	@ (80062e8 <HAL_RCC_OscConfig+0x778>)
 8006264:	4013      	ands	r3, r2
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800626a:	00d2      	lsls	r2, r2, #3
 800626c:	491b      	ldr	r1, [pc, #108]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 800626e:	4313      	orrs	r3, r2
 8006270:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006272:	4b1a      	ldr	r3, [pc, #104]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006276:	f023 020c 	bic.w	r2, r3, #12
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627e:	4917      	ldr	r1, [pc, #92]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006280:	4313      	orrs	r3, r2
 8006282:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006284:	4b15      	ldr	r3, [pc, #84]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006288:	f023 0202 	bic.w	r2, r3, #2
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006290:	4912      	ldr	r1, [pc, #72]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006292:	4313      	orrs	r3, r2
 8006294:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006296:	4b11      	ldr	r3, [pc, #68]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 8006298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629a:	4a10      	ldr	r2, [pc, #64]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 800629c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062a2:	4b0e      	ldr	r3, [pc, #56]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80062a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a6:	4a0d      	ldr	r2, [pc, #52]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80062a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80062ae:	4b0b      	ldr	r3, [pc, #44]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80062b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b2:	4a0a      	ldr	r2, [pc, #40]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80062b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80062ba:	4b08      	ldr	r3, [pc, #32]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80062bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062be:	4a07      	ldr	r2, [pc, #28]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80062c0:	f043 0301 	orr.w	r3, r3, #1
 80062c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062c6:	4b05      	ldr	r3, [pc, #20]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a04      	ldr	r2, [pc, #16]	@ (80062dc <HAL_RCC_OscConfig+0x76c>)
 80062cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d2:	f7fc f991 	bl	80025f8 <HAL_GetTick>
 80062d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062d8:	e011      	b.n	80062fe <HAL_RCC_OscConfig+0x78e>
 80062da:	bf00      	nop
 80062dc:	58024400 	.word	0x58024400
 80062e0:	58024800 	.word	0x58024800
 80062e4:	fffffc0c 	.word	0xfffffc0c
 80062e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ec:	f7fc f984 	bl	80025f8 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e08a      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80062fe:	4b47      	ldr	r3, [pc, #284]	@ (800641c <HAL_RCC_OscConfig+0x8ac>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0f0      	beq.n	80062ec <HAL_RCC_OscConfig+0x77c>
 800630a:	e082      	b.n	8006412 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800630c:	4b43      	ldr	r3, [pc, #268]	@ (800641c <HAL_RCC_OscConfig+0x8ac>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a42      	ldr	r2, [pc, #264]	@ (800641c <HAL_RCC_OscConfig+0x8ac>)
 8006312:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006318:	f7fc f96e 	bl	80025f8 <HAL_GetTick>
 800631c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006320:	f7fc f96a 	bl	80025f8 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e070      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006332:	4b3a      	ldr	r3, [pc, #232]	@ (800641c <HAL_RCC_OscConfig+0x8ac>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f0      	bne.n	8006320 <HAL_RCC_OscConfig+0x7b0>
 800633e:	e068      	b.n	8006412 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006340:	4b36      	ldr	r3, [pc, #216]	@ (800641c <HAL_RCC_OscConfig+0x8ac>)
 8006342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006344:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006346:	4b35      	ldr	r3, [pc, #212]	@ (800641c <HAL_RCC_OscConfig+0x8ac>)
 8006348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800634a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006350:	2b01      	cmp	r3, #1
 8006352:	d031      	beq.n	80063b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f003 0203 	and.w	r2, r3, #3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800635e:	429a      	cmp	r2, r3
 8006360:	d12a      	bne.n	80063b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	091b      	lsrs	r3, r3, #4
 8006366:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800636e:	429a      	cmp	r2, r3
 8006370:	d122      	bne.n	80063b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800637c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800637e:	429a      	cmp	r2, r3
 8006380:	d11a      	bne.n	80063b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	0a5b      	lsrs	r3, r3, #9
 8006386:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800638e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006390:	429a      	cmp	r2, r3
 8006392:	d111      	bne.n	80063b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	0c1b      	lsrs	r3, r3, #16
 8006398:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d108      	bne.n	80063b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	0e1b      	lsrs	r3, r3, #24
 80063aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d001      	beq.n	80063bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	e02b      	b.n	8006414 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80063bc:	4b17      	ldr	r3, [pc, #92]	@ (800641c <HAL_RCC_OscConfig+0x8ac>)
 80063be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c0:	08db      	lsrs	r3, r3, #3
 80063c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d01f      	beq.n	8006412 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80063d2:	4b12      	ldr	r3, [pc, #72]	@ (800641c <HAL_RCC_OscConfig+0x8ac>)
 80063d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d6:	4a11      	ldr	r2, [pc, #68]	@ (800641c <HAL_RCC_OscConfig+0x8ac>)
 80063d8:	f023 0301 	bic.w	r3, r3, #1
 80063dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80063de:	f7fc f90b 	bl	80025f8 <HAL_GetTick>
 80063e2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80063e4:	bf00      	nop
 80063e6:	f7fc f907 	bl	80025f8 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d0f9      	beq.n	80063e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063f2:	4b0a      	ldr	r3, [pc, #40]	@ (800641c <HAL_RCC_OscConfig+0x8ac>)
 80063f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006420 <HAL_RCC_OscConfig+0x8b0>)
 80063f8:	4013      	ands	r3, r2
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80063fe:	00d2      	lsls	r2, r2, #3
 8006400:	4906      	ldr	r1, [pc, #24]	@ (800641c <HAL_RCC_OscConfig+0x8ac>)
 8006402:	4313      	orrs	r3, r2
 8006404:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006406:	4b05      	ldr	r3, [pc, #20]	@ (800641c <HAL_RCC_OscConfig+0x8ac>)
 8006408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640a:	4a04      	ldr	r2, [pc, #16]	@ (800641c <HAL_RCC_OscConfig+0x8ac>)
 800640c:	f043 0301 	orr.w	r3, r3, #1
 8006410:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3730      	adds	r7, #48	@ 0x30
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	58024400 	.word	0x58024400
 8006420:	ffff0007 	.word	0xffff0007

08006424 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e19c      	b.n	8006772 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006438:	4b8a      	ldr	r3, [pc, #552]	@ (8006664 <HAL_RCC_ClockConfig+0x240>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 030f 	and.w	r3, r3, #15
 8006440:	683a      	ldr	r2, [r7, #0]
 8006442:	429a      	cmp	r2, r3
 8006444:	d910      	bls.n	8006468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006446:	4b87      	ldr	r3, [pc, #540]	@ (8006664 <HAL_RCC_ClockConfig+0x240>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f023 020f 	bic.w	r2, r3, #15
 800644e:	4985      	ldr	r1, [pc, #532]	@ (8006664 <HAL_RCC_ClockConfig+0x240>)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	4313      	orrs	r3, r2
 8006454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006456:	4b83      	ldr	r3, [pc, #524]	@ (8006664 <HAL_RCC_ClockConfig+0x240>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	429a      	cmp	r2, r3
 8006462:	d001      	beq.n	8006468 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e184      	b.n	8006772 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d010      	beq.n	8006496 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691a      	ldr	r2, [r3, #16]
 8006478:	4b7b      	ldr	r3, [pc, #492]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006480:	429a      	cmp	r2, r3
 8006482:	d908      	bls.n	8006496 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006484:	4b78      	ldr	r3, [pc, #480]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	4975      	ldr	r1, [pc, #468]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 8006492:	4313      	orrs	r3, r2
 8006494:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d010      	beq.n	80064c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	695a      	ldr	r2, [r3, #20]
 80064a6:	4b70      	ldr	r3, [pc, #448]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d908      	bls.n	80064c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064b2:	4b6d      	ldr	r3, [pc, #436]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 80064b4:	69db      	ldr	r3, [r3, #28]
 80064b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	496a      	ldr	r1, [pc, #424]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d010      	beq.n	80064f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699a      	ldr	r2, [r3, #24]
 80064d4:	4b64      	ldr	r3, [pc, #400]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80064dc:	429a      	cmp	r2, r3
 80064de:	d908      	bls.n	80064f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064e0:	4b61      	ldr	r3, [pc, #388]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	699b      	ldr	r3, [r3, #24]
 80064ec:	495e      	ldr	r1, [pc, #376]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0320 	and.w	r3, r3, #32
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d010      	beq.n	8006520 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69da      	ldr	r2, [r3, #28]
 8006502:	4b59      	ldr	r3, [pc, #356]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 8006504:	6a1b      	ldr	r3, [r3, #32]
 8006506:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800650a:	429a      	cmp	r2, r3
 800650c:	d908      	bls.n	8006520 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800650e:	4b56      	ldr	r3, [pc, #344]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	4953      	ldr	r1, [pc, #332]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 800651c:	4313      	orrs	r3, r2
 800651e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d010      	beq.n	800654e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68da      	ldr	r2, [r3, #12]
 8006530:	4b4d      	ldr	r3, [pc, #308]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	f003 030f 	and.w	r3, r3, #15
 8006538:	429a      	cmp	r2, r3
 800653a:	d908      	bls.n	800654e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800653c:	4b4a      	ldr	r3, [pc, #296]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	f023 020f 	bic.w	r2, r3, #15
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	4947      	ldr	r1, [pc, #284]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 800654a:	4313      	orrs	r3, r2
 800654c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b00      	cmp	r3, #0
 8006558:	d055      	beq.n	8006606 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800655a:	4b43      	ldr	r3, [pc, #268]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	4940      	ldr	r1, [pc, #256]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 8006568:	4313      	orrs	r3, r2
 800656a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	2b02      	cmp	r3, #2
 8006572:	d107      	bne.n	8006584 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006574:	4b3c      	ldr	r3, [pc, #240]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d121      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e0f6      	b.n	8006772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	2b03      	cmp	r3, #3
 800658a:	d107      	bne.n	800659c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800658c:	4b36      	ldr	r3, [pc, #216]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d115      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	e0ea      	b.n	8006772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d107      	bne.n	80065b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065a4:	4b30      	ldr	r3, [pc, #192]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d109      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e0de      	b.n	8006772 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065b4:	4b2c      	ldr	r3, [pc, #176]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d101      	bne.n	80065c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e0d6      	b.n	8006772 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065c4:	4b28      	ldr	r3, [pc, #160]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f023 0207 	bic.w	r2, r3, #7
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	4925      	ldr	r1, [pc, #148]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065d6:	f7fc f80f 	bl	80025f8 <HAL_GetTick>
 80065da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065dc:	e00a      	b.n	80065f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065de:	f7fc f80b 	bl	80025f8 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d901      	bls.n	80065f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e0be      	b.n	8006772 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	429a      	cmp	r2, r3
 8006604:	d1eb      	bne.n	80065de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d010      	beq.n	8006634 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	4b14      	ldr	r3, [pc, #80]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	429a      	cmp	r2, r3
 8006620:	d208      	bcs.n	8006634 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006622:	4b11      	ldr	r3, [pc, #68]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	f023 020f 	bic.w	r2, r3, #15
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	490e      	ldr	r1, [pc, #56]	@ (8006668 <HAL_RCC_ClockConfig+0x244>)
 8006630:	4313      	orrs	r3, r2
 8006632:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006634:	4b0b      	ldr	r3, [pc, #44]	@ (8006664 <HAL_RCC_ClockConfig+0x240>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 030f 	and.w	r3, r3, #15
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	429a      	cmp	r2, r3
 8006640:	d214      	bcs.n	800666c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006642:	4b08      	ldr	r3, [pc, #32]	@ (8006664 <HAL_RCC_ClockConfig+0x240>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f023 020f 	bic.w	r2, r3, #15
 800664a:	4906      	ldr	r1, [pc, #24]	@ (8006664 <HAL_RCC_ClockConfig+0x240>)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	4313      	orrs	r3, r2
 8006650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006652:	4b04      	ldr	r3, [pc, #16]	@ (8006664 <HAL_RCC_ClockConfig+0x240>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	683a      	ldr	r2, [r7, #0]
 800665c:	429a      	cmp	r2, r3
 800665e:	d005      	beq.n	800666c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	e086      	b.n	8006772 <HAL_RCC_ClockConfig+0x34e>
 8006664:	52002000 	.word	0x52002000
 8006668:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0304 	and.w	r3, r3, #4
 8006674:	2b00      	cmp	r3, #0
 8006676:	d010      	beq.n	800669a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691a      	ldr	r2, [r3, #16]
 800667c:	4b3f      	ldr	r3, [pc, #252]	@ (800677c <HAL_RCC_ClockConfig+0x358>)
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006684:	429a      	cmp	r2, r3
 8006686:	d208      	bcs.n	800669a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006688:	4b3c      	ldr	r3, [pc, #240]	@ (800677c <HAL_RCC_ClockConfig+0x358>)
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	4939      	ldr	r1, [pc, #228]	@ (800677c <HAL_RCC_ClockConfig+0x358>)
 8006696:	4313      	orrs	r3, r2
 8006698:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0308 	and.w	r3, r3, #8
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d010      	beq.n	80066c8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	695a      	ldr	r2, [r3, #20]
 80066aa:	4b34      	ldr	r3, [pc, #208]	@ (800677c <HAL_RCC_ClockConfig+0x358>)
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d208      	bcs.n	80066c8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066b6:	4b31      	ldr	r3, [pc, #196]	@ (800677c <HAL_RCC_ClockConfig+0x358>)
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	492e      	ldr	r1, [pc, #184]	@ (800677c <HAL_RCC_ClockConfig+0x358>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0310 	and.w	r3, r3, #16
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d010      	beq.n	80066f6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699a      	ldr	r2, [r3, #24]
 80066d8:	4b28      	ldr	r3, [pc, #160]	@ (800677c <HAL_RCC_ClockConfig+0x358>)
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d208      	bcs.n	80066f6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80066e4:	4b25      	ldr	r3, [pc, #148]	@ (800677c <HAL_RCC_ClockConfig+0x358>)
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	4922      	ldr	r1, [pc, #136]	@ (800677c <HAL_RCC_ClockConfig+0x358>)
 80066f2:	4313      	orrs	r3, r2
 80066f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d010      	beq.n	8006724 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	69da      	ldr	r2, [r3, #28]
 8006706:	4b1d      	ldr	r3, [pc, #116]	@ (800677c <HAL_RCC_ClockConfig+0x358>)
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800670e:	429a      	cmp	r2, r3
 8006710:	d208      	bcs.n	8006724 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006712:	4b1a      	ldr	r3, [pc, #104]	@ (800677c <HAL_RCC_ClockConfig+0x358>)
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	69db      	ldr	r3, [r3, #28]
 800671e:	4917      	ldr	r1, [pc, #92]	@ (800677c <HAL_RCC_ClockConfig+0x358>)
 8006720:	4313      	orrs	r3, r2
 8006722:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006724:	f000 f834 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8006728:	4602      	mov	r2, r0
 800672a:	4b14      	ldr	r3, [pc, #80]	@ (800677c <HAL_RCC_ClockConfig+0x358>)
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	0a1b      	lsrs	r3, r3, #8
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	4912      	ldr	r1, [pc, #72]	@ (8006780 <HAL_RCC_ClockConfig+0x35c>)
 8006736:	5ccb      	ldrb	r3, [r1, r3]
 8006738:	f003 031f 	and.w	r3, r3, #31
 800673c:	fa22 f303 	lsr.w	r3, r2, r3
 8006740:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006742:	4b0e      	ldr	r3, [pc, #56]	@ (800677c <HAL_RCC_ClockConfig+0x358>)
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	f003 030f 	and.w	r3, r3, #15
 800674a:	4a0d      	ldr	r2, [pc, #52]	@ (8006780 <HAL_RCC_ClockConfig+0x35c>)
 800674c:	5cd3      	ldrb	r3, [r2, r3]
 800674e:	f003 031f 	and.w	r3, r3, #31
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	fa22 f303 	lsr.w	r3, r2, r3
 8006758:	4a0a      	ldr	r2, [pc, #40]	@ (8006784 <HAL_RCC_ClockConfig+0x360>)
 800675a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800675c:	4a0a      	ldr	r2, [pc, #40]	@ (8006788 <HAL_RCC_ClockConfig+0x364>)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006762:	4b0a      	ldr	r3, [pc, #40]	@ (800678c <HAL_RCC_ClockConfig+0x368>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f7fb fefc 	bl	8002564 <HAL_InitTick>
 800676c:	4603      	mov	r3, r0
 800676e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006770:	7bfb      	ldrb	r3, [r7, #15]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3718      	adds	r7, #24
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	58024400 	.word	0x58024400
 8006780:	08018e88 	.word	0x08018e88
 8006784:	2400000c 	.word	0x2400000c
 8006788:	24000008 	.word	0x24000008
 800678c:	24000010 	.word	0x24000010

08006790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006790:	b480      	push	{r7}
 8006792:	b089      	sub	sp, #36	@ 0x24
 8006794:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006796:	4bb3      	ldr	r3, [pc, #716]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800679e:	2b18      	cmp	r3, #24
 80067a0:	f200 8155 	bhi.w	8006a4e <HAL_RCC_GetSysClockFreq+0x2be>
 80067a4:	a201      	add	r2, pc, #4	@ (adr r2, 80067ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80067a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067aa:	bf00      	nop
 80067ac:	08006811 	.word	0x08006811
 80067b0:	08006a4f 	.word	0x08006a4f
 80067b4:	08006a4f 	.word	0x08006a4f
 80067b8:	08006a4f 	.word	0x08006a4f
 80067bc:	08006a4f 	.word	0x08006a4f
 80067c0:	08006a4f 	.word	0x08006a4f
 80067c4:	08006a4f 	.word	0x08006a4f
 80067c8:	08006a4f 	.word	0x08006a4f
 80067cc:	08006837 	.word	0x08006837
 80067d0:	08006a4f 	.word	0x08006a4f
 80067d4:	08006a4f 	.word	0x08006a4f
 80067d8:	08006a4f 	.word	0x08006a4f
 80067dc:	08006a4f 	.word	0x08006a4f
 80067e0:	08006a4f 	.word	0x08006a4f
 80067e4:	08006a4f 	.word	0x08006a4f
 80067e8:	08006a4f 	.word	0x08006a4f
 80067ec:	0800683d 	.word	0x0800683d
 80067f0:	08006a4f 	.word	0x08006a4f
 80067f4:	08006a4f 	.word	0x08006a4f
 80067f8:	08006a4f 	.word	0x08006a4f
 80067fc:	08006a4f 	.word	0x08006a4f
 8006800:	08006a4f 	.word	0x08006a4f
 8006804:	08006a4f 	.word	0x08006a4f
 8006808:	08006a4f 	.word	0x08006a4f
 800680c:	08006843 	.word	0x08006843
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006810:	4b94      	ldr	r3, [pc, #592]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0320 	and.w	r3, r3, #32
 8006818:	2b00      	cmp	r3, #0
 800681a:	d009      	beq.n	8006830 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800681c:	4b91      	ldr	r3, [pc, #580]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	08db      	lsrs	r3, r3, #3
 8006822:	f003 0303 	and.w	r3, r3, #3
 8006826:	4a90      	ldr	r2, [pc, #576]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006828:	fa22 f303 	lsr.w	r3, r2, r3
 800682c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800682e:	e111      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006830:	4b8d      	ldr	r3, [pc, #564]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006832:	61bb      	str	r3, [r7, #24]
      break;
 8006834:	e10e      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006836:	4b8d      	ldr	r3, [pc, #564]	@ (8006a6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006838:	61bb      	str	r3, [r7, #24]
      break;
 800683a:	e10b      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800683c:	4b8c      	ldr	r3, [pc, #560]	@ (8006a70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800683e:	61bb      	str	r3, [r7, #24]
      break;
 8006840:	e108      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006842:	4b88      	ldr	r3, [pc, #544]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800684c:	4b85      	ldr	r3, [pc, #532]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800684e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006850:	091b      	lsrs	r3, r3, #4
 8006852:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006856:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006858:	4b82      	ldr	r3, [pc, #520]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800685a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006862:	4b80      	ldr	r3, [pc, #512]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006866:	08db      	lsrs	r3, r3, #3
 8006868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	fb02 f303 	mul.w	r3, r2, r3
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 80e1 	beq.w	8006a48 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	2b02      	cmp	r3, #2
 800688a:	f000 8083 	beq.w	8006994 <HAL_RCC_GetSysClockFreq+0x204>
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b02      	cmp	r3, #2
 8006892:	f200 80a1 	bhi.w	80069d8 <HAL_RCC_GetSysClockFreq+0x248>
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_RCC_GetSysClockFreq+0x114>
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	2b01      	cmp	r3, #1
 80068a0:	d056      	beq.n	8006950 <HAL_RCC_GetSysClockFreq+0x1c0>
 80068a2:	e099      	b.n	80069d8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068a4:	4b6f      	ldr	r3, [pc, #444]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0320 	and.w	r3, r3, #32
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d02d      	beq.n	800690c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068b0:	4b6c      	ldr	r3, [pc, #432]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	08db      	lsrs	r3, r3, #3
 80068b6:	f003 0303 	and.w	r3, r3, #3
 80068ba:	4a6b      	ldr	r2, [pc, #428]	@ (8006a68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068bc:	fa22 f303 	lsr.w	r3, r2, r3
 80068c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	ee07 3a90 	vmov	s15, r3
 80068c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	ee07 3a90 	vmov	s15, r3
 80068d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068da:	4b62      	ldr	r3, [pc, #392]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e2:	ee07 3a90 	vmov	s15, r3
 80068e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80068f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006902:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006906:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800690a:	e087      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	ee07 3a90 	vmov	s15, r3
 8006912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006916:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006a78 <HAL_RCC_GetSysClockFreq+0x2e8>
 800691a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691e:	4b51      	ldr	r3, [pc, #324]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006926:	ee07 3a90 	vmov	s15, r3
 800692a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006932:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800693a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800693e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800694a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800694e:	e065      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	ee07 3a90 	vmov	s15, r3
 8006956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800695a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006a7c <HAL_RCC_GetSysClockFreq+0x2ec>
 800695e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006962:	4b40      	ldr	r3, [pc, #256]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006972:	ed97 6a02 	vldr	s12, [r7, #8]
 8006976:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 800697a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800697e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800698a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006992:	e043      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	ee07 3a90 	vmov	s15, r3
 800699a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006a80 <HAL_RCC_GetSysClockFreq+0x2f0>
 80069a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 80069be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069d6:	e021      	b.n	8006a1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	ee07 3a90 	vmov	s15, r3
 80069de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006a7c <HAL_RCC_GetSysClockFreq+0x2ec>
 80069e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ea:	4b1e      	ldr	r3, [pc, #120]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80069fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006a74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006a1c:	4b11      	ldr	r3, [pc, #68]	@ (8006a64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a20:	0a5b      	lsrs	r3, r3, #9
 8006a22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a26:	3301      	adds	r3, #1
 8006a28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	ee07 3a90 	vmov	s15, r3
 8006a30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a34:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a40:	ee17 3a90 	vmov	r3, s15
 8006a44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006a46:	e005      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	61bb      	str	r3, [r7, #24]
      break;
 8006a4c:	e002      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006a4e:	4b07      	ldr	r3, [pc, #28]	@ (8006a6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a50:	61bb      	str	r3, [r7, #24]
      break;
 8006a52:	bf00      	nop
  }

  return sysclockfreq;
 8006a54:	69bb      	ldr	r3, [r7, #24]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3724      	adds	r7, #36	@ 0x24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	58024400 	.word	0x58024400
 8006a68:	03d09000 	.word	0x03d09000
 8006a6c:	003d0900 	.word	0x003d0900
 8006a70:	017d7840 	.word	0x017d7840
 8006a74:	46000000 	.word	0x46000000
 8006a78:	4c742400 	.word	0x4c742400
 8006a7c:	4a742400 	.word	0x4a742400
 8006a80:	4bbebc20 	.word	0x4bbebc20

08006a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006a8a:	f7ff fe81 	bl	8006790 <HAL_RCC_GetSysClockFreq>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	4b10      	ldr	r3, [pc, #64]	@ (8006ad4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	0a1b      	lsrs	r3, r3, #8
 8006a96:	f003 030f 	and.w	r3, r3, #15
 8006a9a:	490f      	ldr	r1, [pc, #60]	@ (8006ad8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006a9c:	5ccb      	ldrb	r3, [r1, r3]
 8006a9e:	f003 031f 	and.w	r3, r3, #31
 8006aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8006aa6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	f003 030f 	and.w	r3, r3, #15
 8006ab0:	4a09      	ldr	r2, [pc, #36]	@ (8006ad8 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ab2:	5cd3      	ldrb	r3, [r2, r3]
 8006ab4:	f003 031f 	and.w	r3, r3, #31
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	fa22 f303 	lsr.w	r3, r2, r3
 8006abe:	4a07      	ldr	r2, [pc, #28]	@ (8006adc <HAL_RCC_GetHCLKFreq+0x58>)
 8006ac0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006ac2:	4a07      	ldr	r2, [pc, #28]	@ (8006ae0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006ac8:	4b04      	ldr	r3, [pc, #16]	@ (8006adc <HAL_RCC_GetHCLKFreq+0x58>)
 8006aca:	681b      	ldr	r3, [r3, #0]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	58024400 	.word	0x58024400
 8006ad8:	08018e88 	.word	0x08018e88
 8006adc:	2400000c 	.word	0x2400000c
 8006ae0:	24000008 	.word	0x24000008

08006ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006ae8:	f7ff ffcc 	bl	8006a84 <HAL_RCC_GetHCLKFreq>
 8006aec:	4602      	mov	r2, r0
 8006aee:	4b06      	ldr	r3, [pc, #24]	@ (8006b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	091b      	lsrs	r3, r3, #4
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	4904      	ldr	r1, [pc, #16]	@ (8006b0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006afa:	5ccb      	ldrb	r3, [r1, r3]
 8006afc:	f003 031f 	and.w	r3, r3, #31
 8006b00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	58024400 	.word	0x58024400
 8006b0c:	08018e88 	.word	0x08018e88

08006b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006b14:	f7ff ffb6 	bl	8006a84 <HAL_RCC_GetHCLKFreq>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	4b06      	ldr	r3, [pc, #24]	@ (8006b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	0a1b      	lsrs	r3, r3, #8
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	4904      	ldr	r1, [pc, #16]	@ (8006b38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b26:	5ccb      	ldrb	r3, [r1, r3]
 8006b28:	f003 031f 	and.w	r3, r3, #31
 8006b2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	58024400 	.word	0x58024400
 8006b38:	08018e88 	.word	0x08018e88

08006b3c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b40:	b0ca      	sub	sp, #296	@ 0x128
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006b60:	2500      	movs	r5, #0
 8006b62:	ea54 0305 	orrs.w	r3, r4, r5
 8006b66:	d049      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006b6e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b72:	d02f      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006b74:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b78:	d828      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b7e:	d01a      	beq.n	8006bb6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006b80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b84:	d822      	bhi.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b8e:	d007      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006b90:	e01c      	b.n	8006bcc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b92:	4bb8      	ldr	r3, [pc, #736]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b96:	4ab7      	ldr	r2, [pc, #732]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006b9e:	e01a      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	2102      	movs	r1, #2
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f002 fb61 	bl	8009270 <RCCEx_PLL2_Config>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bb4:	e00f      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bba:	3328      	adds	r3, #40	@ 0x28
 8006bbc:	2102      	movs	r1, #2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f002 fc08 	bl	80093d4 <RCCEx_PLL3_Config>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bca:	e004      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bd2:	e000      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10a      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006bde:	4ba5      	ldr	r3, [pc, #660]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006be2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006bec:	4aa1      	ldr	r2, [pc, #644]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bee:	430b      	orrs	r3, r1
 8006bf0:	6513      	str	r3, [r2, #80]	@ 0x50
 8006bf2:	e003      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bf8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c04:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006c08:	f04f 0900 	mov.w	r9, #0
 8006c0c:	ea58 0309 	orrs.w	r3, r8, r9
 8006c10:	d047      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c18:	2b04      	cmp	r3, #4
 8006c1a:	d82a      	bhi.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006c24 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c22:	bf00      	nop
 8006c24:	08006c39 	.word	0x08006c39
 8006c28:	08006c47 	.word	0x08006c47
 8006c2c:	08006c5d 	.word	0x08006c5d
 8006c30:	08006c7b 	.word	0x08006c7b
 8006c34:	08006c7b 	.word	0x08006c7b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c38:	4b8e      	ldr	r3, [pc, #568]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c3c:	4a8d      	ldr	r2, [pc, #564]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c44:	e01a      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f002 fb0e 	bl	8009270 <RCCEx_PLL2_Config>
 8006c54:	4603      	mov	r3, r0
 8006c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c5a:	e00f      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c60:	3328      	adds	r3, #40	@ 0x28
 8006c62:	2100      	movs	r1, #0
 8006c64:	4618      	mov	r0, r3
 8006c66:	f002 fbb5 	bl	80093d4 <RCCEx_PLL3_Config>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c70:	e004      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c78:	e000      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c84:	4b7b      	ldr	r3, [pc, #492]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c88:	f023 0107 	bic.w	r1, r3, #7
 8006c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c92:	4a78      	ldr	r2, [pc, #480]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c94:	430b      	orrs	r3, r1
 8006c96:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c98:	e003      	b.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006caa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006cae:	f04f 0b00 	mov.w	fp, #0
 8006cb2:	ea5a 030b 	orrs.w	r3, sl, fp
 8006cb6:	d04c      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc2:	d030      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006cc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc8:	d829      	bhi.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006cca:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ccc:	d02d      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006cce:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cd0:	d825      	bhi.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006cd2:	2b80      	cmp	r3, #128	@ 0x80
 8006cd4:	d018      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006cd6:	2b80      	cmp	r3, #128	@ 0x80
 8006cd8:	d821      	bhi.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d002      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006cde:	2b40      	cmp	r3, #64	@ 0x40
 8006ce0:	d007      	beq.n	8006cf2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006ce2:	e01c      	b.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce4:	4b63      	ldr	r3, [pc, #396]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce8:	4a62      	ldr	r2, [pc, #392]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006cf0:	e01c      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf6:	3308      	adds	r3, #8
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f002 fab8 	bl	8009270 <RCCEx_PLL2_Config>
 8006d00:	4603      	mov	r3, r0
 8006d02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d06:	e011      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0c:	3328      	adds	r3, #40	@ 0x28
 8006d0e:	2100      	movs	r1, #0
 8006d10:	4618      	mov	r0, r3
 8006d12:	f002 fb5f 	bl	80093d4 <RCCEx_PLL3_Config>
 8006d16:	4603      	mov	r3, r0
 8006d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d1c:	e006      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d24:	e002      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006d26:	bf00      	nop
 8006d28:	e000      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10a      	bne.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006d34:	4b4f      	ldr	r3, [pc, #316]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d38:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d42:	4a4c      	ldr	r2, [pc, #304]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d44:	430b      	orrs	r3, r1
 8006d46:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d48:	e003      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006d5e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006d62:	2300      	movs	r3, #0
 8006d64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006d68:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	d053      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d76:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006d7a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d7e:	d035      	beq.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006d80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006d84:	d82e      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006d86:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006d8a:	d031      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006d8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006d90:	d828      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006d92:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d96:	d01a      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006d98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d9c:	d822      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006da2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006da6:	d007      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006da8:	e01c      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006daa:	4b32      	ldr	r3, [pc, #200]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dae:	4a31      	ldr	r2, [pc, #196]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006db4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006db6:	e01c      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	2100      	movs	r1, #0
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	f002 fa55 	bl	8009270 <RCCEx_PLL2_Config>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006dcc:	e011      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd2:	3328      	adds	r3, #40	@ 0x28
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f002 fafc 	bl	80093d4 <RCCEx_PLL3_Config>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006de2:	e006      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dea:	e002      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006dec:	bf00      	nop
 8006dee:	e000      	b.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006df0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006df2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10b      	bne.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dfe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e0c:	430b      	orrs	r3, r1
 8006e0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e10:	e003      	b.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e22:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006e26:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006e30:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006e34:	460b      	mov	r3, r1
 8006e36:	4313      	orrs	r3, r2
 8006e38:	d056      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e42:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e46:	d038      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006e48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e4c:	d831      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e52:	d034      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006e54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e58:	d82b      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e5e:	d01d      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006e60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e64:	d825      	bhi.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d006      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006e6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e6e:	d00a      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006e70:	e01f      	b.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e72:	bf00      	nop
 8006e74:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e78:	4ba2      	ldr	r3, [pc, #648]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7c:	4aa1      	ldr	r2, [pc, #644]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006e7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e84:	e01c      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f002 f9ee 	bl	8009270 <RCCEx_PLL2_Config>
 8006e94:	4603      	mov	r3, r0
 8006e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006e9a:	e011      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea0:	3328      	adds	r3, #40	@ 0x28
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	f002 fa95 	bl	80093d4 <RCCEx_PLL3_Config>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006eb0:	e006      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006eb8:	e002      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006eba:	bf00      	nop
 8006ebc:	e000      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10b      	bne.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006ec8:	4b8e      	ldr	r3, [pc, #568]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ecc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006ed8:	4a8a      	ldr	r2, [pc, #552]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eda:	430b      	orrs	r3, r1
 8006edc:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ede:	e003      	b.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ee4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006ef4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006efe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006f02:	460b      	mov	r3, r1
 8006f04:	4313      	orrs	r3, r2
 8006f06:	d03a      	beq.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f0e:	2b30      	cmp	r3, #48	@ 0x30
 8006f10:	d01f      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006f12:	2b30      	cmp	r3, #48	@ 0x30
 8006f14:	d819      	bhi.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	d00c      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006f1a:	2b20      	cmp	r3, #32
 8006f1c:	d815      	bhi.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d019      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006f22:	2b10      	cmp	r3, #16
 8006f24:	d111      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f26:	4b77      	ldr	r3, [pc, #476]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2a:	4a76      	ldr	r2, [pc, #472]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006f32:	e011      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f38:	3308      	adds	r3, #8
 8006f3a:	2102      	movs	r1, #2
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f002 f997 	bl	8009270 <RCCEx_PLL2_Config>
 8006f42:	4603      	mov	r3, r0
 8006f44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006f48:	e006      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f50:	e002      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006f52:	bf00      	nop
 8006f54:	e000      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d10a      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f60:	4b68      	ldr	r3, [pc, #416]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f64:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f6e:	4a65      	ldr	r2, [pc, #404]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f70:	430b      	orrs	r3, r1
 8006f72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f74:	e003      	b.n	8006f7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006f8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006f8e:	2300      	movs	r3, #0
 8006f90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006f94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	d051      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006f9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fa4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fa8:	d035      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006faa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fae:	d82e      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006fb0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fb4:	d031      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006fb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fba:	d828      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006fbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fc0:	d01a      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006fc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006fc6:	d822      	bhi.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006fcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006fd0:	d007      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006fd2:	e01c      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd8:	4a4a      	ldr	r2, [pc, #296]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006fe0:	e01c      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	2100      	movs	r1, #0
 8006fea:	4618      	mov	r0, r3
 8006fec:	f002 f940 	bl	8009270 <RCCEx_PLL2_Config>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ff6:	e011      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ffc:	3328      	adds	r3, #40	@ 0x28
 8006ffe:	2100      	movs	r1, #0
 8007000:	4618      	mov	r0, r3
 8007002:	f002 f9e7 	bl	80093d4 <RCCEx_PLL3_Config>
 8007006:	4603      	mov	r3, r0
 8007008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800700c:	e006      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007014:	e002      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007016:	bf00      	nop
 8007018:	e000      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800701a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800701c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007020:	2b00      	cmp	r3, #0
 8007022:	d10a      	bne.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007024:	4b37      	ldr	r3, [pc, #220]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007028:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800702c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007032:	4a34      	ldr	r2, [pc, #208]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007034:	430b      	orrs	r3, r1
 8007036:	6513      	str	r3, [r2, #80]	@ 0x50
 8007038:	e003      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800703a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800703e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800704e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007052:	2300      	movs	r3, #0
 8007054:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007058:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800705c:	460b      	mov	r3, r1
 800705e:	4313      	orrs	r3, r2
 8007060:	d056      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007066:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800706c:	d033      	beq.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800706e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007072:	d82c      	bhi.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007074:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007078:	d02f      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800707a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800707e:	d826      	bhi.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007080:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007084:	d02b      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007086:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800708a:	d820      	bhi.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800708c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007090:	d012      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007092:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007096:	d81a      	bhi.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007098:	2b00      	cmp	r3, #0
 800709a:	d022      	beq.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800709c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a0:	d115      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070a6:	3308      	adds	r3, #8
 80070a8:	2101      	movs	r1, #1
 80070aa:	4618      	mov	r0, r3
 80070ac:	f002 f8e0 	bl	8009270 <RCCEx_PLL2_Config>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80070b6:	e015      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070bc:	3328      	adds	r3, #40	@ 0x28
 80070be:	2101      	movs	r1, #1
 80070c0:	4618      	mov	r0, r3
 80070c2:	f002 f987 	bl	80093d4 <RCCEx_PLL3_Config>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80070cc:	e00a      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070d4:	e006      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070d6:	bf00      	nop
 80070d8:	e004      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070da:	bf00      	nop
 80070dc:	e002      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070de:	bf00      	nop
 80070e0:	e000      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80070e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10d      	bne.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80070ec:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80070f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070fa:	4a02      	ldr	r2, [pc, #8]	@ (8007104 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070fc:	430b      	orrs	r3, r1
 80070fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8007100:	e006      	b.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007102:	bf00      	nop
 8007104:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800710c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800711c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007120:	2300      	movs	r3, #0
 8007122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007126:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800712a:	460b      	mov	r3, r1
 800712c:	4313      	orrs	r3, r2
 800712e:	d055      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007134:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007138:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800713c:	d033      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800713e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007142:	d82c      	bhi.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007148:	d02f      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800714a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800714e:	d826      	bhi.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007150:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007154:	d02b      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007156:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800715a:	d820      	bhi.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800715c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007160:	d012      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007162:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007166:	d81a      	bhi.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007168:	2b00      	cmp	r3, #0
 800716a:	d022      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800716c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007170:	d115      	bne.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007176:	3308      	adds	r3, #8
 8007178:	2101      	movs	r1, #1
 800717a:	4618      	mov	r0, r3
 800717c:	f002 f878 	bl	8009270 <RCCEx_PLL2_Config>
 8007180:	4603      	mov	r3, r0
 8007182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007186:	e015      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718c:	3328      	adds	r3, #40	@ 0x28
 800718e:	2101      	movs	r1, #1
 8007190:	4618      	mov	r0, r3
 8007192:	f002 f91f 	bl	80093d4 <RCCEx_PLL3_Config>
 8007196:	4603      	mov	r3, r0
 8007198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800719c:	e00a      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071a4:	e006      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071a6:	bf00      	nop
 80071a8:	e004      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071aa:	bf00      	nop
 80071ac:	e002      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071ae:	bf00      	nop
 80071b0:	e000      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10b      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80071bc:	4ba3      	ldr	r3, [pc, #652]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071c0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80071c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80071cc:	4a9f      	ldr	r2, [pc, #636]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071ce:	430b      	orrs	r3, r1
 80071d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80071d2:	e003      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80071e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071ec:	2300      	movs	r3, #0
 80071ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80071f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80071f6:	460b      	mov	r3, r1
 80071f8:	4313      	orrs	r3, r2
 80071fa:	d037      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80071fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007202:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007206:	d00e      	beq.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007208:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800720c:	d816      	bhi.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800720e:	2b00      	cmp	r3, #0
 8007210:	d018      	beq.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007212:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007216:	d111      	bne.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007218:	4b8c      	ldr	r3, [pc, #560]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800721a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721c:	4a8b      	ldr	r2, [pc, #556]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800721e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007222:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007224:	e00f      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722a:	3308      	adds	r3, #8
 800722c:	2101      	movs	r1, #1
 800722e:	4618      	mov	r0, r3
 8007230:	f002 f81e 	bl	8009270 <RCCEx_PLL2_Config>
 8007234:	4603      	mov	r3, r0
 8007236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800723a:	e004      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007242:	e000      	b.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007244:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10a      	bne.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800724e:	4b7f      	ldr	r3, [pc, #508]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007252:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800725a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800725c:	4a7b      	ldr	r2, [pc, #492]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800725e:	430b      	orrs	r3, r1
 8007260:	6513      	str	r3, [r2, #80]	@ 0x50
 8007262:	e003      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007268:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800726c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007278:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800727c:	2300      	movs	r3, #0
 800727e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007282:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007286:	460b      	mov	r3, r1
 8007288:	4313      	orrs	r3, r2
 800728a:	d039      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800728c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007292:	2b03      	cmp	r3, #3
 8007294:	d81c      	bhi.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007296:	a201      	add	r2, pc, #4	@ (adr r2, 800729c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729c:	080072d9 	.word	0x080072d9
 80072a0:	080072ad 	.word	0x080072ad
 80072a4:	080072bb 	.word	0x080072bb
 80072a8:	080072d9 	.word	0x080072d9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072ac:	4b67      	ldr	r3, [pc, #412]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b0:	4a66      	ldr	r2, [pc, #408]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80072b8:	e00f      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072be:	3308      	adds	r3, #8
 80072c0:	2102      	movs	r1, #2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f001 ffd4 	bl	8009270 <RCCEx_PLL2_Config>
 80072c8:	4603      	mov	r3, r0
 80072ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80072ce:	e004      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80072d6:	e000      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80072d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10a      	bne.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80072e2:	4b5a      	ldr	r3, [pc, #360]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072e6:	f023 0103 	bic.w	r1, r3, #3
 80072ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072f0:	4a56      	ldr	r2, [pc, #344]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072f2:	430b      	orrs	r3, r1
 80072f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80072f6:	e003      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800730c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007310:	2300      	movs	r3, #0
 8007312:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007316:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800731a:	460b      	mov	r3, r1
 800731c:	4313      	orrs	r3, r2
 800731e:	f000 809f 	beq.w	8007460 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007322:	4b4b      	ldr	r3, [pc, #300]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a4a      	ldr	r2, [pc, #296]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800732c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800732e:	f7fb f963 	bl	80025f8 <HAL_GetTick>
 8007332:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007336:	e00b      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007338:	f7fb f95e 	bl	80025f8 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b64      	cmp	r3, #100	@ 0x64
 8007346:	d903      	bls.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800734e:	e005      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007350:	4b3f      	ldr	r3, [pc, #252]	@ (8007450 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007358:	2b00      	cmp	r3, #0
 800735a:	d0ed      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800735c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007360:	2b00      	cmp	r3, #0
 8007362:	d179      	bne.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007364:	4b39      	ldr	r3, [pc, #228]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007366:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800736c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007370:	4053      	eors	r3, r2
 8007372:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007376:	2b00      	cmp	r3, #0
 8007378:	d015      	beq.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800737a:	4b34      	ldr	r3, [pc, #208]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800737c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800737e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007382:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007386:	4b31      	ldr	r3, [pc, #196]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738a:	4a30      	ldr	r2, [pc, #192]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800738c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007390:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007392:	4b2e      	ldr	r3, [pc, #184]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007396:	4a2d      	ldr	r2, [pc, #180]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800739c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800739e:	4a2b      	ldr	r2, [pc, #172]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073a4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80073ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073b2:	d118      	bne.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b4:	f7fb f920 	bl	80025f8 <HAL_GetTick>
 80073b8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073bc:	e00d      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073be:	f7fb f91b 	bl	80025f8 <HAL_GetTick>
 80073c2:	4602      	mov	r2, r0
 80073c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80073c8:	1ad2      	subs	r2, r2, r3
 80073ca:	f241 3388 	movw	r3, #5000	@ 0x1388
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d903      	bls.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80073d8:	e005      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073da:	4b1c      	ldr	r3, [pc, #112]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073de:	f003 0302 	and.w	r3, r3, #2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d0eb      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80073e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d129      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80073f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073fe:	d10e      	bne.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007400:	4b12      	ldr	r3, [pc, #72]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800740c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007410:	091a      	lsrs	r2, r3, #4
 8007412:	4b10      	ldr	r3, [pc, #64]	@ (8007454 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007414:	4013      	ands	r3, r2
 8007416:	4a0d      	ldr	r2, [pc, #52]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007418:	430b      	orrs	r3, r1
 800741a:	6113      	str	r3, [r2, #16]
 800741c:	e005      	b.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800741e:	4b0b      	ldr	r3, [pc, #44]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	4a0a      	ldr	r2, [pc, #40]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007424:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007428:	6113      	str	r3, [r2, #16]
 800742a:	4b08      	ldr	r3, [pc, #32]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800742c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800742e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007432:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800743a:	4a04      	ldr	r2, [pc, #16]	@ (800744c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800743c:	430b      	orrs	r3, r1
 800743e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007440:	e00e      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007446:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800744a:	e009      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800744c:	58024400 	.word	0x58024400
 8007450:	58024800 	.word	0x58024800
 8007454:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800745c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	f002 0301 	and.w	r3, r2, #1
 800746c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007470:	2300      	movs	r3, #0
 8007472:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007476:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800747a:	460b      	mov	r3, r1
 800747c:	4313      	orrs	r3, r2
 800747e:	f000 8089 	beq.w	8007594 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007486:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007488:	2b28      	cmp	r3, #40	@ 0x28
 800748a:	d86b      	bhi.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800748c:	a201      	add	r2, pc, #4	@ (adr r2, 8007494 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800748e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007492:	bf00      	nop
 8007494:	0800756d 	.word	0x0800756d
 8007498:	08007565 	.word	0x08007565
 800749c:	08007565 	.word	0x08007565
 80074a0:	08007565 	.word	0x08007565
 80074a4:	08007565 	.word	0x08007565
 80074a8:	08007565 	.word	0x08007565
 80074ac:	08007565 	.word	0x08007565
 80074b0:	08007565 	.word	0x08007565
 80074b4:	08007539 	.word	0x08007539
 80074b8:	08007565 	.word	0x08007565
 80074bc:	08007565 	.word	0x08007565
 80074c0:	08007565 	.word	0x08007565
 80074c4:	08007565 	.word	0x08007565
 80074c8:	08007565 	.word	0x08007565
 80074cc:	08007565 	.word	0x08007565
 80074d0:	08007565 	.word	0x08007565
 80074d4:	0800754f 	.word	0x0800754f
 80074d8:	08007565 	.word	0x08007565
 80074dc:	08007565 	.word	0x08007565
 80074e0:	08007565 	.word	0x08007565
 80074e4:	08007565 	.word	0x08007565
 80074e8:	08007565 	.word	0x08007565
 80074ec:	08007565 	.word	0x08007565
 80074f0:	08007565 	.word	0x08007565
 80074f4:	0800756d 	.word	0x0800756d
 80074f8:	08007565 	.word	0x08007565
 80074fc:	08007565 	.word	0x08007565
 8007500:	08007565 	.word	0x08007565
 8007504:	08007565 	.word	0x08007565
 8007508:	08007565 	.word	0x08007565
 800750c:	08007565 	.word	0x08007565
 8007510:	08007565 	.word	0x08007565
 8007514:	0800756d 	.word	0x0800756d
 8007518:	08007565 	.word	0x08007565
 800751c:	08007565 	.word	0x08007565
 8007520:	08007565 	.word	0x08007565
 8007524:	08007565 	.word	0x08007565
 8007528:	08007565 	.word	0x08007565
 800752c:	08007565 	.word	0x08007565
 8007530:	08007565 	.word	0x08007565
 8007534:	0800756d 	.word	0x0800756d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800753c:	3308      	adds	r3, #8
 800753e:	2101      	movs	r1, #1
 8007540:	4618      	mov	r0, r3
 8007542:	f001 fe95 	bl	8009270 <RCCEx_PLL2_Config>
 8007546:	4603      	mov	r3, r0
 8007548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800754c:	e00f      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800754e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007552:	3328      	adds	r3, #40	@ 0x28
 8007554:	2101      	movs	r1, #1
 8007556:	4618      	mov	r0, r3
 8007558:	f001 ff3c 	bl	80093d4 <RCCEx_PLL3_Config>
 800755c:	4603      	mov	r3, r0
 800755e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007562:	e004      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800756a:	e000      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800756c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800756e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10a      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007576:	4bbf      	ldr	r3, [pc, #764]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800757a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800757e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007582:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007584:	4abb      	ldr	r2, [pc, #748]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007586:	430b      	orrs	r3, r1
 8007588:	6553      	str	r3, [r2, #84]	@ 0x54
 800758a:	e003      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007590:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	f002 0302 	and.w	r3, r2, #2
 80075a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075a4:	2300      	movs	r3, #0
 80075a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80075aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80075ae:	460b      	mov	r3, r1
 80075b0:	4313      	orrs	r3, r2
 80075b2:	d041      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80075b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075ba:	2b05      	cmp	r3, #5
 80075bc:	d824      	bhi.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80075be:	a201      	add	r2, pc, #4	@ (adr r2, 80075c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	08007611 	.word	0x08007611
 80075c8:	080075dd 	.word	0x080075dd
 80075cc:	080075f3 	.word	0x080075f3
 80075d0:	08007611 	.word	0x08007611
 80075d4:	08007611 	.word	0x08007611
 80075d8:	08007611 	.word	0x08007611
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80075dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e0:	3308      	adds	r3, #8
 80075e2:	2101      	movs	r1, #1
 80075e4:	4618      	mov	r0, r3
 80075e6:	f001 fe43 	bl	8009270 <RCCEx_PLL2_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80075f0:	e00f      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f6:	3328      	adds	r3, #40	@ 0x28
 80075f8:	2101      	movs	r1, #1
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 feea 	bl	80093d4 <RCCEx_PLL3_Config>
 8007600:	4603      	mov	r3, r0
 8007602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007606:	e004      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800760e:	e000      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10a      	bne.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800761a:	4b96      	ldr	r3, [pc, #600]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800761c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800761e:	f023 0107 	bic.w	r1, r3, #7
 8007622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007626:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007628:	4a92      	ldr	r2, [pc, #584]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800762a:	430b      	orrs	r3, r1
 800762c:	6553      	str	r3, [r2, #84]	@ 0x54
 800762e:	e003      	b.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007630:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007634:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007640:	f002 0304 	and.w	r3, r2, #4
 8007644:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007648:	2300      	movs	r3, #0
 800764a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800764e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007652:	460b      	mov	r3, r1
 8007654:	4313      	orrs	r3, r2
 8007656:	d044      	beq.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007660:	2b05      	cmp	r3, #5
 8007662:	d825      	bhi.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007664:	a201      	add	r2, pc, #4	@ (adr r2, 800766c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766a:	bf00      	nop
 800766c:	080076b9 	.word	0x080076b9
 8007670:	08007685 	.word	0x08007685
 8007674:	0800769b 	.word	0x0800769b
 8007678:	080076b9 	.word	0x080076b9
 800767c:	080076b9 	.word	0x080076b9
 8007680:	080076b9 	.word	0x080076b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007688:	3308      	adds	r3, #8
 800768a:	2101      	movs	r1, #1
 800768c:	4618      	mov	r0, r3
 800768e:	f001 fdef 	bl	8009270 <RCCEx_PLL2_Config>
 8007692:	4603      	mov	r3, r0
 8007694:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007698:	e00f      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800769a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800769e:	3328      	adds	r3, #40	@ 0x28
 80076a0:	2101      	movs	r1, #1
 80076a2:	4618      	mov	r0, r3
 80076a4:	f001 fe96 	bl	80093d4 <RCCEx_PLL3_Config>
 80076a8:	4603      	mov	r3, r0
 80076aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80076ae:	e004      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076b6:	e000      	b.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80076b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10b      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076c2:	4b6c      	ldr	r3, [pc, #432]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076c6:	f023 0107 	bic.w	r1, r3, #7
 80076ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076d2:	4a68      	ldr	r2, [pc, #416]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076d4:	430b      	orrs	r3, r1
 80076d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80076d8:	e003      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80076e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f002 0320 	and.w	r3, r2, #32
 80076ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80076f2:	2300      	movs	r3, #0
 80076f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80076fc:	460b      	mov	r3, r1
 80076fe:	4313      	orrs	r3, r2
 8007700:	d055      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800770a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800770e:	d033      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007710:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007714:	d82c      	bhi.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800771a:	d02f      	beq.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800771c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007720:	d826      	bhi.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007722:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007726:	d02b      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007728:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800772c:	d820      	bhi.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800772e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007732:	d012      	beq.n	800775a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007734:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007738:	d81a      	bhi.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800773a:	2b00      	cmp	r3, #0
 800773c:	d022      	beq.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800773e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007742:	d115      	bne.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007748:	3308      	adds	r3, #8
 800774a:	2100      	movs	r1, #0
 800774c:	4618      	mov	r0, r3
 800774e:	f001 fd8f 	bl	8009270 <RCCEx_PLL2_Config>
 8007752:	4603      	mov	r3, r0
 8007754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007758:	e015      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800775a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775e:	3328      	adds	r3, #40	@ 0x28
 8007760:	2102      	movs	r1, #2
 8007762:	4618      	mov	r0, r3
 8007764:	f001 fe36 	bl	80093d4 <RCCEx_PLL3_Config>
 8007768:	4603      	mov	r3, r0
 800776a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800776e:	e00a      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007776:	e006      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007778:	bf00      	nop
 800777a:	e004      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800777c:	bf00      	nop
 800777e:	e002      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007780:	bf00      	nop
 8007782:	e000      	b.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10b      	bne.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800778e:	4b39      	ldr	r3, [pc, #228]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007792:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800779a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800779e:	4a35      	ldr	r2, [pc, #212]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077a0:	430b      	orrs	r3, r1
 80077a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80077a4:	e003      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80077ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80077be:	2300      	movs	r3, #0
 80077c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80077c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80077c8:	460b      	mov	r3, r1
 80077ca:	4313      	orrs	r3, r2
 80077cc:	d058      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80077ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80077d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80077da:	d033      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80077dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80077e0:	d82c      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80077e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077e6:	d02f      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80077e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077ec:	d826      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80077ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077f2:	d02b      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80077f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077f8:	d820      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80077fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077fe:	d012      	beq.n	8007826 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007800:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007804:	d81a      	bhi.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d022      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800780a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800780e:	d115      	bne.n	800783c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007814:	3308      	adds	r3, #8
 8007816:	2100      	movs	r1, #0
 8007818:	4618      	mov	r0, r3
 800781a:	f001 fd29 	bl	8009270 <RCCEx_PLL2_Config>
 800781e:	4603      	mov	r3, r0
 8007820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007824:	e015      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800782a:	3328      	adds	r3, #40	@ 0x28
 800782c:	2102      	movs	r1, #2
 800782e:	4618      	mov	r0, r3
 8007830:	f001 fdd0 	bl	80093d4 <RCCEx_PLL3_Config>
 8007834:	4603      	mov	r3, r0
 8007836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800783a:	e00a      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800783c:	2301      	movs	r3, #1
 800783e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007842:	e006      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007844:	bf00      	nop
 8007846:	e004      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007848:	bf00      	nop
 800784a:	e002      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800784c:	bf00      	nop
 800784e:	e000      	b.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007850:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007852:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10e      	bne.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800785a:	4b06      	ldr	r3, [pc, #24]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800785c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800785e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007866:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800786a:	4a02      	ldr	r2, [pc, #8]	@ (8007874 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800786c:	430b      	orrs	r3, r1
 800786e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007870:	e006      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007872:	bf00      	nop
 8007874:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007878:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800787c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800788c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007890:	2300      	movs	r3, #0
 8007892:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007896:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800789a:	460b      	mov	r3, r1
 800789c:	4313      	orrs	r3, r2
 800789e:	d055      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80078a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80078ac:	d033      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80078ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80078b2:	d82c      	bhi.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078b8:	d02f      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80078ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078be:	d826      	bhi.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80078c4:	d02b      	beq.n	800791e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80078c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80078ca:	d820      	bhi.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078d0:	d012      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80078d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078d6:	d81a      	bhi.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d022      	beq.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80078dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80078e0:	d115      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e6:	3308      	adds	r3, #8
 80078e8:	2100      	movs	r1, #0
 80078ea:	4618      	mov	r0, r3
 80078ec:	f001 fcc0 	bl	8009270 <RCCEx_PLL2_Config>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80078f6:	e015      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fc:	3328      	adds	r3, #40	@ 0x28
 80078fe:	2102      	movs	r1, #2
 8007900:	4618      	mov	r0, r3
 8007902:	f001 fd67 	bl	80093d4 <RCCEx_PLL3_Config>
 8007906:	4603      	mov	r3, r0
 8007908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800790c:	e00a      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007914:	e006      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007916:	bf00      	nop
 8007918:	e004      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800791a:	bf00      	nop
 800791c:	e002      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800791e:	bf00      	nop
 8007920:	e000      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10b      	bne.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800792c:	4ba1      	ldr	r3, [pc, #644]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800792e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007930:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007938:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800793c:	4a9d      	ldr	r2, [pc, #628]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800793e:	430b      	orrs	r3, r1
 8007940:	6593      	str	r3, [r2, #88]	@ 0x58
 8007942:	e003      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007944:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007948:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800794c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007954:	f002 0308 	and.w	r3, r2, #8
 8007958:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800795c:	2300      	movs	r3, #0
 800795e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007962:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007966:	460b      	mov	r3, r1
 8007968:	4313      	orrs	r3, r2
 800796a:	d01e      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800796c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007974:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007978:	d10c      	bne.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800797a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800797e:	3328      	adds	r3, #40	@ 0x28
 8007980:	2102      	movs	r1, #2
 8007982:	4618      	mov	r0, r3
 8007984:	f001 fd26 	bl	80093d4 <RCCEx_PLL3_Config>
 8007988:	4603      	mov	r3, r0
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007994:	4b87      	ldr	r3, [pc, #540]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007998:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800799c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079a4:	4a83      	ldr	r2, [pc, #524]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079a6:	430b      	orrs	r3, r1
 80079a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b2:	f002 0310 	and.w	r3, r2, #16
 80079b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80079ba:	2300      	movs	r3, #0
 80079bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80079c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80079c4:	460b      	mov	r3, r1
 80079c6:	4313      	orrs	r3, r2
 80079c8:	d01e      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80079ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80079d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079d6:	d10c      	bne.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80079d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079dc:	3328      	adds	r3, #40	@ 0x28
 80079de:	2102      	movs	r1, #2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f001 fcf7 	bl	80093d4 <RCCEx_PLL3_Config>
 80079e6:	4603      	mov	r3, r0
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80079f2:	4b70      	ldr	r3, [pc, #448]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80079fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a02:	4a6c      	ldr	r2, [pc, #432]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a04:	430b      	orrs	r3, r1
 8007a06:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a10:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007a14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a1e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007a22:	460b      	mov	r3, r1
 8007a24:	4313      	orrs	r3, r2
 8007a26:	d03e      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a34:	d022      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007a36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a3a:	d81b      	bhi.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d003      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a44:	d00b      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007a46:	e015      	b.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4c:	3308      	adds	r3, #8
 8007a4e:	2100      	movs	r1, #0
 8007a50:	4618      	mov	r0, r3
 8007a52:	f001 fc0d 	bl	8009270 <RCCEx_PLL2_Config>
 8007a56:	4603      	mov	r3, r0
 8007a58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a5c:	e00f      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a62:	3328      	adds	r3, #40	@ 0x28
 8007a64:	2102      	movs	r1, #2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 fcb4 	bl	80093d4 <RCCEx_PLL3_Config>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a72:	e004      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a7a:	e000      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007a7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10b      	bne.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a86:	4b4b      	ldr	r3, [pc, #300]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a8a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a96:	4a47      	ldr	r2, [pc, #284]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a9c:	e003      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007ab2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ab8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007abc:	460b      	mov	r3, r1
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	d03b      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007aca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ace:	d01f      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007ad0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007ad4:	d818      	bhi.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007ad6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ada:	d003      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007adc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ae0:	d007      	beq.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007ae2:	e011      	b.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ae4:	4b33      	ldr	r3, [pc, #204]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae8:	4a32      	ldr	r2, [pc, #200]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007af0:	e00f      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af6:	3328      	adds	r3, #40	@ 0x28
 8007af8:	2101      	movs	r1, #1
 8007afa:	4618      	mov	r0, r3
 8007afc:	f001 fc6a 	bl	80093d4 <RCCEx_PLL3_Config>
 8007b00:	4603      	mov	r3, r0
 8007b02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b06:	e004      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b0e:	e000      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007b10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10b      	bne.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b1a:	4b26      	ldr	r3, [pc, #152]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b1e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b2a:	4a22      	ldr	r2, [pc, #136]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b2c:	430b      	orrs	r3, r1
 8007b2e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b30:	e003      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b42:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007b46:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b48:	2300      	movs	r3, #0
 8007b4a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007b4c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007b50:	460b      	mov	r3, r1
 8007b52:	4313      	orrs	r3, r2
 8007b54:	d034      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d003      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b64:	d007      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007b66:	e011      	b.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b68:	4b12      	ldr	r3, [pc, #72]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6c:	4a11      	ldr	r2, [pc, #68]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007b74:	e00e      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b7a:	3308      	adds	r3, #8
 8007b7c:	2102      	movs	r1, #2
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f001 fb76 	bl	8009270 <RCCEx_PLL2_Config>
 8007b84:	4603      	mov	r3, r0
 8007b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007b8a:	e003      	b.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10d      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007b9c:	4b05      	ldr	r3, [pc, #20]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ba0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007baa:	4a02      	ldr	r2, [pc, #8]	@ (8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bac:	430b      	orrs	r3, r1
 8007bae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007bb0:	e006      	b.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007bb2:	bf00      	nop
 8007bb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bce:	2300      	movs	r3, #0
 8007bd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007bd2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007bd6:	460b      	mov	r3, r1
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	d00c      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be0:	3328      	adds	r3, #40	@ 0x28
 8007be2:	2102      	movs	r1, #2
 8007be4:	4618      	mov	r0, r3
 8007be6:	f001 fbf5 	bl	80093d4 <RCCEx_PLL3_Config>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007c02:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c04:	2300      	movs	r3, #0
 8007c06:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c08:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	d038      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c1e:	d018      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007c20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c24:	d811      	bhi.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c2a:	d014      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c30:	d80b      	bhi.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d011      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007c36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c3a:	d106      	bne.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c3c:	4bc3      	ldr	r3, [pc, #780]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c40:	4ac2      	ldr	r2, [pc, #776]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007c48:	e008      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c50:	e004      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c52:	bf00      	nop
 8007c54:	e002      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c56:	bf00      	nop
 8007c58:	e000      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10b      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c64:	4bb9      	ldr	r3, [pc, #740]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c68:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c74:	4ab5      	ldr	r2, [pc, #724]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c76:	430b      	orrs	r3, r1
 8007c78:	6553      	str	r3, [r2, #84]	@ 0x54
 8007c7a:	e003      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007c90:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c92:	2300      	movs	r3, #0
 8007c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c96:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007c9a:	460b      	mov	r3, r1
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	d009      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007ca0:	4baa      	ldr	r3, [pc, #680]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ca4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cae:	4aa7      	ldr	r2, [pc, #668]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cb0:	430b      	orrs	r3, r1
 8007cb2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007cc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cc6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	d00a      	beq.n	8007ce6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007cd0:	4b9e      	ldr	r3, [pc, #632]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cdc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007ce0:	4a9a      	ldr	r2, [pc, #616]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ce2:	430b      	orrs	r3, r1
 8007ce4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007cf8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	d009      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d02:	4b92      	ldr	r3, [pc, #584]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d06:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d10:	4a8e      	ldr	r2, [pc, #568]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d12:	430b      	orrs	r3, r1
 8007d14:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d1e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007d22:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d24:	2300      	movs	r3, #0
 8007d26:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d28:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	d00e      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d32:	4b86      	ldr	r3, [pc, #536]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	4a85      	ldr	r2, [pc, #532]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d38:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d3c:	6113      	str	r3, [r2, #16]
 8007d3e:	4b83      	ldr	r3, [pc, #524]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d40:	6919      	ldr	r1, [r3, #16]
 8007d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007d4a:	4a80      	ldr	r2, [pc, #512]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d4c:	430b      	orrs	r3, r1
 8007d4e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d5e:	2300      	movs	r3, #0
 8007d60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d62:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007d66:	460b      	mov	r3, r1
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	d009      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007d6c:	4b77      	ldr	r3, [pc, #476]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d70:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d7a:	4a74      	ldr	r2, [pc, #464]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d7c:	430b      	orrs	r3, r1
 8007d7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d88:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007d8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d8e:	2300      	movs	r3, #0
 8007d90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d92:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007d96:	460b      	mov	r3, r1
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	d00a      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d9c:	4b6b      	ldr	r3, [pc, #428]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007da0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dac:	4a67      	ldr	r2, [pc, #412]	@ (8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dae:	430b      	orrs	r3, r1
 8007db0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dba:	2100      	movs	r1, #0
 8007dbc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dc4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007dc8:	460b      	mov	r3, r1
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	d011      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f001 fa4a 	bl	8009270 <RCCEx_PLL2_Config>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d003      	beq.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	6239      	str	r1, [r7, #32]
 8007dfe:	f003 0302 	and.w	r3, r3, #2
 8007e02:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e04:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	d011      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e12:	3308      	adds	r3, #8
 8007e14:	2101      	movs	r1, #1
 8007e16:	4618      	mov	r0, r3
 8007e18:	f001 fa2a 	bl	8009270 <RCCEx_PLL2_Config>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d003      	beq.n	8007e32 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	61b9      	str	r1, [r7, #24]
 8007e3e:	f003 0304 	and.w	r3, r3, #4
 8007e42:	61fb      	str	r3, [r7, #28]
 8007e44:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	d011      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e52:	3308      	adds	r3, #8
 8007e54:	2102      	movs	r1, #2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f001 fa0a 	bl	8009270 <RCCEx_PLL2_Config>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	6139      	str	r1, [r7, #16]
 8007e7e:	f003 0308 	and.w	r3, r3, #8
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	d011      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e92:	3328      	adds	r3, #40	@ 0x28
 8007e94:	2100      	movs	r1, #0
 8007e96:	4618      	mov	r0, r3
 8007e98:	f001 fa9c 	bl	80093d4 <RCCEx_PLL3_Config>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d003      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eba:	2100      	movs	r1, #0
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	f003 0310 	and.w	r3, r3, #16
 8007ec2:	60fb      	str	r3, [r7, #12]
 8007ec4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	d011      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed2:	3328      	adds	r3, #40	@ 0x28
 8007ed4:	2101      	movs	r1, #1
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f001 fa7c 	bl	80093d4 <RCCEx_PLL3_Config>
 8007edc:	4603      	mov	r3, r0
 8007ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efa:	2100      	movs	r1, #0
 8007efc:	6039      	str	r1, [r7, #0]
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	607b      	str	r3, [r7, #4]
 8007f04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	d011      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f12:	3328      	adds	r3, #40	@ 0x28
 8007f14:	2102      	movs	r1, #2
 8007f16:	4618      	mov	r0, r3
 8007f18:	f001 fa5c 	bl	80093d4 <RCCEx_PLL3_Config>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d003      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007f32:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	e000      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007f3e:	2301      	movs	r3, #1
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007f46:	46bd      	mov	sp, r7
 8007f48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f4c:	58024400 	.word	0x58024400

08007f50 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b090      	sub	sp, #64	@ 0x40
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f5e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8007f62:	430b      	orrs	r3, r1
 8007f64:	f040 8094 	bne.w	8008090 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007f68:	4b9e      	ldr	r3, [pc, #632]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f6c:	f003 0307 	and.w	r3, r3, #7
 8007f70:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8007f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	f200 8087 	bhi.w	8008088 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8007f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8007f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f80:	08007f95 	.word	0x08007f95
 8007f84:	08007fbd 	.word	0x08007fbd
 8007f88:	08007fe5 	.word	0x08007fe5
 8007f8c:	08008081 	.word	0x08008081
 8007f90:	0800800d 	.word	0x0800800d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007f94:	4b93      	ldr	r3, [pc, #588]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fa0:	d108      	bne.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f001 f810 	bl	8008fcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fb0:	f000 bd45 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fb8:	f000 bd41 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007fbc:	4b89      	ldr	r3, [pc, #548]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007fc8:	d108      	bne.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fca:	f107 0318 	add.w	r3, r7, #24
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 fd54 	bl	8008a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fd8:	f000 bd31 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007fe0:	f000 bd2d 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fe4:	4b7f      	ldr	r3, [pc, #508]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ff0:	d108      	bne.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ff2:	f107 030c 	add.w	r3, r7, #12
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 fe94 	bl	8008d24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008000:	f000 bd1d 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008004:	2300      	movs	r3, #0
 8008006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008008:	f000 bd19 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800800c:	4b75      	ldr	r3, [pc, #468]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800800e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008010:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008014:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008016:	4b73      	ldr	r3, [pc, #460]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 0304 	and.w	r3, r3, #4
 800801e:	2b04      	cmp	r3, #4
 8008020:	d10c      	bne.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008024:	2b00      	cmp	r3, #0
 8008026:	d109      	bne.n	800803c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008028:	4b6e      	ldr	r3, [pc, #440]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	08db      	lsrs	r3, r3, #3
 800802e:	f003 0303 	and.w	r3, r3, #3
 8008032:	4a6d      	ldr	r2, [pc, #436]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008034:	fa22 f303 	lsr.w	r3, r2, r3
 8008038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800803a:	e01f      	b.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800803c:	4b69      	ldr	r3, [pc, #420]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008048:	d106      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800804a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800804c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008050:	d102      	bne.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008052:	4b66      	ldr	r3, [pc, #408]	@ (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008056:	e011      	b.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008058:	4b62      	ldr	r3, [pc, #392]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008060:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008064:	d106      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008068:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800806c:	d102      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800806e:	4b60      	ldr	r3, [pc, #384]	@ (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008072:	e003      	b.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008074:	2300      	movs	r3, #0
 8008076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008078:	f000 bce1 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800807c:	f000 bcdf 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008080:	4b5c      	ldr	r3, [pc, #368]	@ (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008084:	f000 bcdb 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008088:	2300      	movs	r3, #0
 800808a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800808c:	f000 bcd7 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008094:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8008098:	430b      	orrs	r3, r1
 800809a:	f040 80ad 	bne.w	80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800809e:	4b51      	ldr	r3, [pc, #324]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080a2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80080a6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80080a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080ae:	d056      	beq.n	800815e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080b6:	f200 8090 	bhi.w	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80080ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80080be:	f000 8088 	beq.w	80081d2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80080c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80080c6:	f200 8088 	bhi.w	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	2b80      	cmp	r3, #128	@ 0x80
 80080ce:	d032      	beq.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80080d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d2:	2b80      	cmp	r3, #128	@ 0x80
 80080d4:	f200 8081 	bhi.w	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80080d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80080de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e0:	2b40      	cmp	r3, #64	@ 0x40
 80080e2:	d014      	beq.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80080e4:	e079      	b.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80080e6:	4b3f      	ldr	r3, [pc, #252]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080f2:	d108      	bne.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 ff67 	bl	8008fcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008102:	f000 bc9c 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008106:	2300      	movs	r3, #0
 8008108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800810a:	f000 bc98 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800810e:	4b35      	ldr	r3, [pc, #212]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008116:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800811a:	d108      	bne.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800811c:	f107 0318 	add.w	r3, r7, #24
 8008120:	4618      	mov	r0, r3
 8008122:	f000 fcab 	bl	8008a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800812a:	f000 bc88 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800812e:	2300      	movs	r3, #0
 8008130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008132:	f000 bc84 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008136:	4b2b      	ldr	r3, [pc, #172]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800813e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008142:	d108      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008144:	f107 030c 	add.w	r3, r7, #12
 8008148:	4618      	mov	r0, r3
 800814a:	f000 fdeb 	bl	8008d24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008152:	f000 bc74 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800815a:	f000 bc70 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800815e:	4b21      	ldr	r3, [pc, #132]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008162:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008166:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008168:	4b1e      	ldr	r3, [pc, #120]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	2b04      	cmp	r3, #4
 8008172:	d10c      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008176:	2b00      	cmp	r3, #0
 8008178:	d109      	bne.n	800818e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800817a:	4b1a      	ldr	r3, [pc, #104]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	08db      	lsrs	r3, r3, #3
 8008180:	f003 0303 	and.w	r3, r3, #3
 8008184:	4a18      	ldr	r2, [pc, #96]	@ (80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008186:	fa22 f303 	lsr.w	r3, r2, r3
 800818a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800818c:	e01f      	b.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800818e:	4b15      	ldr	r3, [pc, #84]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800819a:	d106      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800819c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800819e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80081a2:	d102      	bne.n	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80081a4:	4b11      	ldr	r3, [pc, #68]	@ (80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80081a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081a8:	e011      	b.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80081aa:	4b0e      	ldr	r3, [pc, #56]	@ (80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80081b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081b6:	d106      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80081b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081be:	d102      	bne.n	80081c6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80081c0:	4b0b      	ldr	r3, [pc, #44]	@ (80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80081c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081c4:	e003      	b.n	80081ce <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80081c6:	2300      	movs	r3, #0
 80081c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80081ca:	f000 bc38 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081ce:	f000 bc36 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80081d2:	4b08      	ldr	r3, [pc, #32]	@ (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80081d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081d6:	f000 bc32 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081de:	f000 bc2e 	b.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80081e2:	bf00      	nop
 80081e4:	58024400 	.word	0x58024400
 80081e8:	03d09000 	.word	0x03d09000
 80081ec:	003d0900 	.word	0x003d0900
 80081f0:	017d7840 	.word	0x017d7840
 80081f4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80081f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081fc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8008200:	430b      	orrs	r3, r1
 8008202:	f040 809c 	bne.w	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008206:	4b9e      	ldr	r3, [pc, #632]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800820a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800820e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008212:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008216:	d054      	beq.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800821a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800821e:	f200 808b 	bhi.w	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008224:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008228:	f000 8083 	beq.w	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800822c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800822e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008232:	f200 8081 	bhi.w	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008238:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800823c:	d02f      	beq.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800823e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008240:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008244:	d878      	bhi.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008248:	2b00      	cmp	r3, #0
 800824a:	d004      	beq.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800824c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008252:	d012      	beq.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008254:	e070      	b.n	8008338 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008256:	4b8a      	ldr	r3, [pc, #552]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800825e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008262:	d107      	bne.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008264:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008268:	4618      	mov	r0, r3
 800826a:	f000 feaf 	bl	8008fcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800826e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008272:	e3e4      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008274:	2300      	movs	r3, #0
 8008276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008278:	e3e1      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800827a:	4b81      	ldr	r3, [pc, #516]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008282:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008286:	d107      	bne.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008288:	f107 0318 	add.w	r3, r7, #24
 800828c:	4618      	mov	r0, r3
 800828e:	f000 fbf5 	bl	8008a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008292:	69bb      	ldr	r3, [r7, #24]
 8008294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008296:	e3d2      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800829c:	e3cf      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800829e:	4b78      	ldr	r3, [pc, #480]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082aa:	d107      	bne.n	80082bc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ac:	f107 030c 	add.w	r3, r7, #12
 80082b0:	4618      	mov	r0, r3
 80082b2:	f000 fd37 	bl	8008d24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80082ba:	e3c0      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082c0:	e3bd      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082c2:	4b6f      	ldr	r3, [pc, #444]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80082ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082cc:	4b6c      	ldr	r3, [pc, #432]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d10c      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80082d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d109      	bne.n	80082f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082de:	4b68      	ldr	r3, [pc, #416]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	08db      	lsrs	r3, r3, #3
 80082e4:	f003 0303 	and.w	r3, r3, #3
 80082e8:	4a66      	ldr	r2, [pc, #408]	@ (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80082ea:	fa22 f303 	lsr.w	r3, r2, r3
 80082ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082f0:	e01e      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80082f2:	4b63      	ldr	r3, [pc, #396]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082fe:	d106      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008306:	d102      	bne.n	800830e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008308:	4b5f      	ldr	r3, [pc, #380]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800830a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800830c:	e010      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800830e:	4b5c      	ldr	r3, [pc, #368]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008316:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800831a:	d106      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800831c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800831e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008322:	d102      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008324:	4b59      	ldr	r3, [pc, #356]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008328:	e002      	b.n	8008330 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800832a:	2300      	movs	r3, #0
 800832c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800832e:	e386      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008330:	e385      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008332:	4b57      	ldr	r3, [pc, #348]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008336:	e382      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008338:	2300      	movs	r3, #0
 800833a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800833c:	e37f      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800833e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008342:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8008346:	430b      	orrs	r3, r1
 8008348:	f040 80a7 	bne.w	800849a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800834c:	4b4c      	ldr	r3, [pc, #304]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800834e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008350:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008354:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8008356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008358:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800835c:	d055      	beq.n	800840a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800835e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008360:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008364:	f200 8096 	bhi.w	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800836e:	f000 8084 	beq.w	800847a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008374:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008378:	f200 808c 	bhi.w	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800837c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800837e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008382:	d030      	beq.n	80083e6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008386:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800838a:	f200 8083 	bhi.w	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800838e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008390:	2b00      	cmp	r3, #0
 8008392:	d004      	beq.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008396:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800839a:	d012      	beq.n	80083c2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800839c:	e07a      	b.n	8008494 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800839e:	4b38      	ldr	r3, [pc, #224]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80083aa:	d107      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80083ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 fe0b 	bl	8008fcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80083b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083ba:	e340      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083c0:	e33d      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80083c2:	4b2f      	ldr	r3, [pc, #188]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083ce:	d107      	bne.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083d0:	f107 0318 	add.w	r3, r7, #24
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 fb51 	bl	8008a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80083de:	e32e      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80083e0:	2300      	movs	r3, #0
 80083e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80083e4:	e32b      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80083e6:	4b26      	ldr	r3, [pc, #152]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083f2:	d107      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083f4:	f107 030c 	add.w	r3, r7, #12
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 fc93 	bl	8008d24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008402:	e31c      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008408:	e319      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800840a:	4b1d      	ldr	r3, [pc, #116]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800840c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800840e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008412:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008414:	4b1a      	ldr	r3, [pc, #104]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0304 	and.w	r3, r3, #4
 800841c:	2b04      	cmp	r3, #4
 800841e:	d10c      	bne.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008422:	2b00      	cmp	r3, #0
 8008424:	d109      	bne.n	800843a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008426:	4b16      	ldr	r3, [pc, #88]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	08db      	lsrs	r3, r3, #3
 800842c:	f003 0303 	and.w	r3, r3, #3
 8008430:	4a14      	ldr	r2, [pc, #80]	@ (8008484 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008432:	fa22 f303 	lsr.w	r3, r2, r3
 8008436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008438:	e01e      	b.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800843a:	4b11      	ldr	r3, [pc, #68]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008446:	d106      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800844a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800844e:	d102      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008450:	4b0d      	ldr	r3, [pc, #52]	@ (8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008454:	e010      	b.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008456:	4b0a      	ldr	r3, [pc, #40]	@ (8008480 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800845e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008462:	d106      	bne.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008466:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800846a:	d102      	bne.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800846c:	4b07      	ldr	r3, [pc, #28]	@ (800848c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800846e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008470:	e002      	b.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8008476:	e2e2      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008478:	e2e1      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800847a:	4b05      	ldr	r3, [pc, #20]	@ (8008490 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800847c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800847e:	e2de      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008480:	58024400 	.word	0x58024400
 8008484:	03d09000 	.word	0x03d09000
 8008488:	003d0900 	.word	0x003d0900
 800848c:	017d7840 	.word	0x017d7840
 8008490:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008494:	2300      	movs	r3, #0
 8008496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008498:	e2d1      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800849a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800849e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80084a2:	430b      	orrs	r3, r1
 80084a4:	f040 809c 	bne.w	80085e0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80084a8:	4b93      	ldr	r3, [pc, #588]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084ac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80084b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80084b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084b8:	d054      	beq.n	8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80084ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80084c0:	f200 808b 	bhi.w	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80084c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80084ca:	f000 8083 	beq.w	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80084ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80084d4:	f200 8081 	bhi.w	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80084d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084de:	d02f      	beq.n	8008540 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80084e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084e6:	d878      	bhi.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80084e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d004      	beq.n	80084f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80084ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084f4:	d012      	beq.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80084f6:	e070      	b.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80084f8:	4b7f      	ldr	r3, [pc, #508]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008500:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008504:	d107      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008506:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800850a:	4618      	mov	r0, r3
 800850c:	f000 fd5e 	bl	8008fcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008514:	e293      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800851a:	e290      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800851c:	4b76      	ldr	r3, [pc, #472]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008524:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008528:	d107      	bne.n	800853a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800852a:	f107 0318 	add.w	r3, r7, #24
 800852e:	4618      	mov	r0, r3
 8008530:	f000 faa4 	bl	8008a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008538:	e281      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800853a:	2300      	movs	r3, #0
 800853c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800853e:	e27e      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008540:	4b6d      	ldr	r3, [pc, #436]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008548:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800854c:	d107      	bne.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800854e:	f107 030c 	add.w	r3, r7, #12
 8008552:	4618      	mov	r0, r3
 8008554:	f000 fbe6 	bl	8008d24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800855c:	e26f      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008562:	e26c      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008564:	4b64      	ldr	r3, [pc, #400]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008568:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800856c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800856e:	4b62      	ldr	r3, [pc, #392]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0304 	and.w	r3, r3, #4
 8008576:	2b04      	cmp	r3, #4
 8008578:	d10c      	bne.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800857a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800857c:	2b00      	cmp	r3, #0
 800857e:	d109      	bne.n	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008580:	4b5d      	ldr	r3, [pc, #372]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	08db      	lsrs	r3, r3, #3
 8008586:	f003 0303 	and.w	r3, r3, #3
 800858a:	4a5c      	ldr	r2, [pc, #368]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800858c:	fa22 f303 	lsr.w	r3, r2, r3
 8008590:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008592:	e01e      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008594:	4b58      	ldr	r3, [pc, #352]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800859c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085a0:	d106      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80085a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80085a8:	d102      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80085aa:	4b55      	ldr	r3, [pc, #340]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80085ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085ae:	e010      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085b0:	4b51      	ldr	r3, [pc, #324]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085bc:	d106      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80085be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085c4:	d102      	bne.n	80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80085c6:	4b4f      	ldr	r3, [pc, #316]	@ (8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80085c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085ca:	e002      	b.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80085d0:	e235      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80085d2:	e234      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80085d4:	4b4c      	ldr	r3, [pc, #304]	@ (8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80085d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085d8:	e231      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80085da:	2300      	movs	r3, #0
 80085dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085de:	e22e      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80085e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085e4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80085e8:	430b      	orrs	r3, r1
 80085ea:	f040 808f 	bne.w	800870c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80085ee:	4b42      	ldr	r3, [pc, #264]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80085f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085f2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80085f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80085f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80085fe:	d06b      	beq.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008602:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008606:	d874      	bhi.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800860a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800860e:	d056      	beq.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008612:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008616:	d86c      	bhi.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800861e:	d03b      	beq.n	8008698 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008622:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008626:	d864      	bhi.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800862e:	d021      	beq.n	8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008632:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008636:	d85c      	bhi.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863a:	2b00      	cmp	r3, #0
 800863c:	d004      	beq.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800863e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008644:	d004      	beq.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008646:	e054      	b.n	80086f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008648:	f7fe fa4c 	bl	8006ae4 <HAL_RCC_GetPCLK1Freq>
 800864c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800864e:	e1f6      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008650:	4b29      	ldr	r3, [pc, #164]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008658:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800865c:	d107      	bne.n	800866e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800865e:	f107 0318 	add.w	r3, r7, #24
 8008662:	4618      	mov	r0, r3
 8008664:	f000 fa0a 	bl	8008a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800866c:	e1e7      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800866e:	2300      	movs	r3, #0
 8008670:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008672:	e1e4      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008674:	4b20      	ldr	r3, [pc, #128]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800867c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008680:	d107      	bne.n	8008692 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008682:	f107 030c 	add.w	r3, r7, #12
 8008686:	4618      	mov	r0, r3
 8008688:	f000 fb4c 	bl	8008d24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008690:	e1d5      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008692:	2300      	movs	r3, #0
 8008694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008696:	e1d2      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008698:	4b17      	ldr	r3, [pc, #92]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0304 	and.w	r3, r3, #4
 80086a0:	2b04      	cmp	r3, #4
 80086a2:	d109      	bne.n	80086b8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086a4:	4b14      	ldr	r3, [pc, #80]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	08db      	lsrs	r3, r3, #3
 80086aa:	f003 0303 	and.w	r3, r3, #3
 80086ae:	4a13      	ldr	r2, [pc, #76]	@ (80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80086b0:	fa22 f303 	lsr.w	r3, r2, r3
 80086b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086b6:	e1c2      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086b8:	2300      	movs	r3, #0
 80086ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086bc:	e1bf      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80086be:	4b0e      	ldr	r3, [pc, #56]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ca:	d102      	bne.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80086cc:	4b0c      	ldr	r3, [pc, #48]	@ (8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80086ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086d0:	e1b5      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086d2:	2300      	movs	r3, #0
 80086d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086d6:	e1b2      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80086d8:	4b07      	ldr	r3, [pc, #28]	@ (80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086e4:	d102      	bne.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80086e6:	4b07      	ldr	r3, [pc, #28]	@ (8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80086e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80086ea:	e1a8      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f0:	e1a5      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80086f2:	2300      	movs	r3, #0
 80086f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086f6:	e1a2      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80086f8:	58024400 	.word	0x58024400
 80086fc:	03d09000 	.word	0x03d09000
 8008700:	003d0900 	.word	0x003d0900
 8008704:	017d7840 	.word	0x017d7840
 8008708:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800870c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008710:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8008714:	430b      	orrs	r3, r1
 8008716:	d173      	bne.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008718:	4b9c      	ldr	r3, [pc, #624]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800871a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800871c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008720:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008724:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008728:	d02f      	beq.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800872a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008730:	d863      	bhi.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008734:	2b00      	cmp	r3, #0
 8008736:	d004      	beq.n	8008742 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800873e:	d012      	beq.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008740:	e05b      	b.n	80087fa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008742:	4b92      	ldr	r3, [pc, #584]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800874a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800874e:	d107      	bne.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008750:	f107 0318 	add.w	r3, r7, #24
 8008754:	4618      	mov	r0, r3
 8008756:	f000 f991 	bl	8008a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800875e:	e16e      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008760:	2300      	movs	r3, #0
 8008762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008764:	e16b      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008766:	4b89      	ldr	r3, [pc, #548]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800876e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008772:	d107      	bne.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008774:	f107 030c 	add.w	r3, r7, #12
 8008778:	4618      	mov	r0, r3
 800877a:	f000 fad3 	bl	8008d24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008782:	e15c      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008784:	2300      	movs	r3, #0
 8008786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008788:	e159      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800878a:	4b80      	ldr	r3, [pc, #512]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800878c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800878e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8008792:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008794:	4b7d      	ldr	r3, [pc, #500]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0304 	and.w	r3, r3, #4
 800879c:	2b04      	cmp	r3, #4
 800879e:	d10c      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80087a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d109      	bne.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087a6:	4b79      	ldr	r3, [pc, #484]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	08db      	lsrs	r3, r3, #3
 80087ac:	f003 0303 	and.w	r3, r3, #3
 80087b0:	4a77      	ldr	r2, [pc, #476]	@ (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80087b2:	fa22 f303 	lsr.w	r3, r2, r3
 80087b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087b8:	e01e      	b.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087ba:	4b74      	ldr	r3, [pc, #464]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80087c6:	d106      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80087c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087ce:	d102      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80087d0:	4b70      	ldr	r3, [pc, #448]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80087d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087d4:	e010      	b.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087d6:	4b6d      	ldr	r3, [pc, #436]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087e2:	d106      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80087e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80087ea:	d102      	bne.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80087ec:	4b6a      	ldr	r3, [pc, #424]	@ (8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80087ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087f0:	e002      	b.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80087f6:	e122      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80087f8:	e121      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80087fa:	2300      	movs	r3, #0
 80087fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087fe:	e11e      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008804:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8008808:	430b      	orrs	r3, r1
 800880a:	d133      	bne.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800880c:	4b5f      	ldr	r3, [pc, #380]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800880e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008814:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8008816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008818:	2b00      	cmp	r3, #0
 800881a:	d004      	beq.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800881c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008822:	d012      	beq.n	800884a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8008824:	e023      	b.n	800886e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008826:	4b59      	ldr	r3, [pc, #356]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800882e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008832:	d107      	bne.n	8008844 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008838:	4618      	mov	r0, r3
 800883a:	f000 fbc7 	bl	8008fcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800883e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008842:	e0fc      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008844:	2300      	movs	r3, #0
 8008846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008848:	e0f9      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800884a:	4b50      	ldr	r3, [pc, #320]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008852:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008856:	d107      	bne.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008858:	f107 0318 	add.w	r3, r7, #24
 800885c:	4618      	mov	r0, r3
 800885e:	f000 f90d 	bl	8008a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008862:	6a3b      	ldr	r3, [r7, #32]
 8008864:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008866:	e0ea      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008868:	2300      	movs	r3, #0
 800886a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800886c:	e0e7      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800886e:	2300      	movs	r3, #0
 8008870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008872:	e0e4      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008874:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008878:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800887c:	430b      	orrs	r3, r1
 800887e:	f040 808d 	bne.w	800899c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8008882:	4b42      	ldr	r3, [pc, #264]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008884:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008886:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800888a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800888c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008892:	d06b      	beq.n	800896c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8008894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008896:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800889a:	d874      	bhi.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800889c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088a2:	d056      	beq.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80088a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088aa:	d86c      	bhi.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80088ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ae:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088b2:	d03b      	beq.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80088b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80088ba:	d864      	bhi.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80088bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088c2:	d021      	beq.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80088c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088ca:	d85c      	bhi.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80088cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d004      	beq.n	80088dc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80088d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088d8:	d004      	beq.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80088da:	e054      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80088dc:	f000 f8b8 	bl	8008a50 <HAL_RCCEx_GetD3PCLK1Freq>
 80088e0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80088e2:	e0ac      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80088e4:	4b29      	ldr	r3, [pc, #164]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088f0:	d107      	bne.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088f2:	f107 0318 	add.w	r3, r7, #24
 80088f6:	4618      	mov	r0, r3
 80088f8:	f000 f8c0 	bl	8008a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008900:	e09d      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008902:	2300      	movs	r3, #0
 8008904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008906:	e09a      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008908:	4b20      	ldr	r3, [pc, #128]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008914:	d107      	bne.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008916:	f107 030c 	add.w	r3, r7, #12
 800891a:	4618      	mov	r0, r3
 800891c:	f000 fa02 	bl	8008d24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008924:	e08b      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008926:	2300      	movs	r3, #0
 8008928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800892a:	e088      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800892c:	4b17      	ldr	r3, [pc, #92]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0304 	and.w	r3, r3, #4
 8008934:	2b04      	cmp	r3, #4
 8008936:	d109      	bne.n	800894c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008938:	4b14      	ldr	r3, [pc, #80]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	08db      	lsrs	r3, r3, #3
 800893e:	f003 0303 	and.w	r3, r3, #3
 8008942:	4a13      	ldr	r2, [pc, #76]	@ (8008990 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008944:	fa22 f303 	lsr.w	r3, r2, r3
 8008948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800894a:	e078      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800894c:	2300      	movs	r3, #0
 800894e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008950:	e075      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008952:	4b0e      	ldr	r3, [pc, #56]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800895a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800895e:	d102      	bne.n	8008966 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8008960:	4b0c      	ldr	r3, [pc, #48]	@ (8008994 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008964:	e06b      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008966:	2300      	movs	r3, #0
 8008968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800896a:	e068      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800896c:	4b07      	ldr	r3, [pc, #28]	@ (800898c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008974:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008978:	d102      	bne.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800897a:	4b07      	ldr	r3, [pc, #28]	@ (8008998 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800897c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800897e:	e05e      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008980:	2300      	movs	r3, #0
 8008982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008984:	e05b      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008986:	2300      	movs	r3, #0
 8008988:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800898a:	e058      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800898c:	58024400 	.word	0x58024400
 8008990:	03d09000 	.word	0x03d09000
 8008994:	003d0900 	.word	0x003d0900
 8008998:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800899c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089a0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80089a4:	430b      	orrs	r3, r1
 80089a6:	d148      	bne.n	8008a3a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80089a8:	4b27      	ldr	r3, [pc, #156]	@ (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80089aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80089b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80089b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089b8:	d02a      	beq.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80089ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089c0:	d838      	bhi.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80089c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d004      	beq.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80089c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089ce:	d00d      	beq.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80089d0:	e030      	b.n	8008a34 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80089d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80089de:	d102      	bne.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80089e0:	4b1a      	ldr	r3, [pc, #104]	@ (8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80089e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80089e4:	e02b      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ea:	e028      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80089ec:	4b16      	ldr	r3, [pc, #88]	@ (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089f8:	d107      	bne.n	8008a0a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80089fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089fe:	4618      	mov	r0, r3
 8008a00:	f000 fae4 	bl	8008fcc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a08:	e019      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a0e:	e016      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a10:	4b0d      	ldr	r3, [pc, #52]	@ (8008a48 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a18:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a1c:	d107      	bne.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a1e:	f107 0318 	add.w	r3, r7, #24
 8008a22:	4618      	mov	r0, r3
 8008a24:	f000 f82a 	bl	8008a7c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a2c:	e007      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a32:	e004      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008a34:	2300      	movs	r3, #0
 8008a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a38:	e001      	b.n	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8008a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3740      	adds	r7, #64	@ 0x40
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	58024400 	.word	0x58024400
 8008a4c:	017d7840 	.word	0x017d7840

08008a50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008a54:	f7fe f816 	bl	8006a84 <HAL_RCC_GetHCLKFreq>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	4b06      	ldr	r3, [pc, #24]	@ (8008a74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	091b      	lsrs	r3, r3, #4
 8008a60:	f003 0307 	and.w	r3, r3, #7
 8008a64:	4904      	ldr	r1, [pc, #16]	@ (8008a78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008a66:	5ccb      	ldrb	r3, [r1, r3]
 8008a68:	f003 031f 	and.w	r3, r3, #31
 8008a6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	58024400 	.word	0x58024400
 8008a78:	08018e88 	.word	0x08018e88

08008a7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b089      	sub	sp, #36	@ 0x24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a84:	4ba1      	ldr	r3, [pc, #644]	@ (8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a88:	f003 0303 	and.w	r3, r3, #3
 8008a8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008a8e:	4b9f      	ldr	r3, [pc, #636]	@ (8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a92:	0b1b      	lsrs	r3, r3, #12
 8008a94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008a9a:	4b9c      	ldr	r3, [pc, #624]	@ (8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a9e:	091b      	lsrs	r3, r3, #4
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008aa6:	4b99      	ldr	r3, [pc, #612]	@ (8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aaa:	08db      	lsrs	r3, r3, #3
 8008aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	fb02 f303 	mul.w	r3, r2, r3
 8008ab6:	ee07 3a90 	vmov	s15, r3
 8008aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008abe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 8111 	beq.w	8008cec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008aca:	69bb      	ldr	r3, [r7, #24]
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	f000 8083 	beq.w	8008bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	f200 80a1 	bhi.w	8008c1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d003      	beq.n	8008ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008ae0:	69bb      	ldr	r3, [r7, #24]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d056      	beq.n	8008b94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008ae6:	e099      	b.n	8008c1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ae8:	4b88      	ldr	r3, [pc, #544]	@ (8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f003 0320 	and.w	r3, r3, #32
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d02d      	beq.n	8008b50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008af4:	4b85      	ldr	r3, [pc, #532]	@ (8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	08db      	lsrs	r3, r3, #3
 8008afa:	f003 0303 	and.w	r3, r3, #3
 8008afe:	4a84      	ldr	r2, [pc, #528]	@ (8008d10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008b00:	fa22 f303 	lsr.w	r3, r2, r3
 8008b04:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	ee07 3a90 	vmov	s15, r3
 8008b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	ee07 3a90 	vmov	s15, r3
 8008b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b1e:	4b7b      	ldr	r3, [pc, #492]	@ (8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b26:	ee07 3a90 	vmov	s15, r3
 8008b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008d14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008b4e:	e087      	b.n	8008c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	ee07 3a90 	vmov	s15, r3
 8008b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b62:	4b6a      	ldr	r3, [pc, #424]	@ (8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6a:	ee07 3a90 	vmov	s15, r3
 8008b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008d14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b92:	e065      	b.n	8008c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	ee07 3a90 	vmov	s15, r3
 8008b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ba6:	4b59      	ldr	r3, [pc, #356]	@ (8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bae:	ee07 3a90 	vmov	s15, r3
 8008bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008d14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bd6:	e043      	b.n	8008c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	ee07 3a90 	vmov	s15, r3
 8008bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008d20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bea:	4b48      	ldr	r3, [pc, #288]	@ (8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf2:	ee07 3a90 	vmov	s15, r3
 8008bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8008bfe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008d14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c1a:	e021      	b.n	8008c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	ee07 3a90 	vmov	s15, r3
 8008c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c2e:	4b37      	ldr	r3, [pc, #220]	@ (8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008c42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008d14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008c60:	4b2a      	ldr	r3, [pc, #168]	@ (8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c64:	0a5b      	lsrs	r3, r3, #9
 8008c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c6a:	ee07 3a90 	vmov	s15, r3
 8008c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c86:	ee17 2a90 	vmov	r2, s15
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c92:	0c1b      	lsrs	r3, r3, #16
 8008c94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c98:	ee07 3a90 	vmov	s15, r3
 8008c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ca0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ca4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ca8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008cb4:	ee17 2a90 	vmov	r2, s15
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008cbc:	4b13      	ldr	r3, [pc, #76]	@ (8008d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc0:	0e1b      	lsrs	r3, r3, #24
 8008cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cc6:	ee07 3a90 	vmov	s15, r3
 8008cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ce2:	ee17 2a90 	vmov	r2, s15
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008cea:	e008      	b.n	8008cfe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	609a      	str	r2, [r3, #8]
}
 8008cfe:	bf00      	nop
 8008d00:	3724      	adds	r7, #36	@ 0x24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	58024400 	.word	0x58024400
 8008d10:	03d09000 	.word	0x03d09000
 8008d14:	46000000 	.word	0x46000000
 8008d18:	4c742400 	.word	0x4c742400
 8008d1c:	4a742400 	.word	0x4a742400
 8008d20:	4bbebc20 	.word	0x4bbebc20

08008d24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b089      	sub	sp, #36	@ 0x24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008d2c:	4ba1      	ldr	r3, [pc, #644]	@ (8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d30:	f003 0303 	and.w	r3, r3, #3
 8008d34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008d36:	4b9f      	ldr	r3, [pc, #636]	@ (8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d3a:	0d1b      	lsrs	r3, r3, #20
 8008d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008d40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008d42:	4b9c      	ldr	r3, [pc, #624]	@ (8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d46:	0a1b      	lsrs	r3, r3, #8
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008d4e:	4b99      	ldr	r3, [pc, #612]	@ (8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d52:	08db      	lsrs	r3, r3, #3
 8008d54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	fb02 f303 	mul.w	r3, r2, r3
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f000 8111 	beq.w	8008f94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	2b02      	cmp	r3, #2
 8008d76:	f000 8083 	beq.w	8008e80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	2b02      	cmp	r3, #2
 8008d7e:	f200 80a1 	bhi.w	8008ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d056      	beq.n	8008e3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008d8e:	e099      	b.n	8008ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d90:	4b88      	ldr	r3, [pc, #544]	@ (8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f003 0320 	and.w	r3, r3, #32
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d02d      	beq.n	8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d9c:	4b85      	ldr	r3, [pc, #532]	@ (8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	08db      	lsrs	r3, r3, #3
 8008da2:	f003 0303 	and.w	r3, r3, #3
 8008da6:	4a84      	ldr	r2, [pc, #528]	@ (8008fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008da8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	ee07 3a90 	vmov	s15, r3
 8008db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dc6:	4b7b      	ldr	r3, [pc, #492]	@ (8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dce:	ee07 3a90 	vmov	s15, r3
 8008dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008fbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008df6:	e087      	b.n	8008f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	ee07 3a90 	vmov	s15, r3
 8008dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e0a:	4b6a      	ldr	r3, [pc, #424]	@ (8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e12:	ee07 3a90 	vmov	s15, r3
 8008e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008fbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e3a:	e065      	b.n	8008f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	ee07 3a90 	vmov	s15, r3
 8008e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e4e:	4b59      	ldr	r3, [pc, #356]	@ (8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e56:	ee07 3a90 	vmov	s15, r3
 8008e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008fbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e7e:	e043      	b.n	8008f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	ee07 3a90 	vmov	s15, r3
 8008e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e92:	4b48      	ldr	r3, [pc, #288]	@ (8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e9a:	ee07 3a90 	vmov	s15, r3
 8008e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ea6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008fbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ec2:	e021      	b.n	8008f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	ee07 3a90 	vmov	s15, r3
 8008eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ece:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ed6:	4b37      	ldr	r3, [pc, #220]	@ (8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ede:	ee07 3a90 	vmov	s15, r3
 8008ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008eea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008fbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008f06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008f08:	4b2a      	ldr	r3, [pc, #168]	@ (8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f0c:	0a5b      	lsrs	r3, r3, #9
 8008f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f12:	ee07 3a90 	vmov	s15, r3
 8008f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f22:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f2e:	ee17 2a90 	vmov	r2, s15
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008f36:	4b1f      	ldr	r3, [pc, #124]	@ (8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f3a:	0c1b      	lsrs	r3, r3, #16
 8008f3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f40:	ee07 3a90 	vmov	s15, r3
 8008f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f5c:	ee17 2a90 	vmov	r2, s15
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008f64:	4b13      	ldr	r3, [pc, #76]	@ (8008fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f68:	0e1b      	lsrs	r3, r3, #24
 8008f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f6e:	ee07 3a90 	vmov	s15, r3
 8008f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f8a:	ee17 2a90 	vmov	r2, s15
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008f92:	e008      	b.n	8008fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	609a      	str	r2, [r3, #8]
}
 8008fa6:	bf00      	nop
 8008fa8:	3724      	adds	r7, #36	@ 0x24
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	58024400 	.word	0x58024400
 8008fb8:	03d09000 	.word	0x03d09000
 8008fbc:	46000000 	.word	0x46000000
 8008fc0:	4c742400 	.word	0x4c742400
 8008fc4:	4a742400 	.word	0x4a742400
 8008fc8:	4bbebc20 	.word	0x4bbebc20

08008fcc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b089      	sub	sp, #36	@ 0x24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008fd4:	4ba0      	ldr	r3, [pc, #640]	@ (8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fd8:	f003 0303 	and.w	r3, r3, #3
 8008fdc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008fde:	4b9e      	ldr	r3, [pc, #632]	@ (8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fe2:	091b      	lsrs	r3, r3, #4
 8008fe4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008fe8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008fea:	4b9b      	ldr	r3, [pc, #620]	@ (8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008ff4:	4b98      	ldr	r3, [pc, #608]	@ (8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008ff6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ff8:	08db      	lsrs	r3, r3, #3
 8008ffa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ffe:	693a      	ldr	r2, [r7, #16]
 8009000:	fb02 f303 	mul.w	r3, r2, r3
 8009004:	ee07 3a90 	vmov	s15, r3
 8009008:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	2b00      	cmp	r3, #0
 8009014:	f000 8111 	beq.w	800923a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	2b02      	cmp	r3, #2
 800901c:	f000 8083 	beq.w	8009126 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	2b02      	cmp	r3, #2
 8009024:	f200 80a1 	bhi.w	800916a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d056      	beq.n	80090e2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009034:	e099      	b.n	800916a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009036:	4b88      	ldr	r3, [pc, #544]	@ (8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 0320 	and.w	r3, r3, #32
 800903e:	2b00      	cmp	r3, #0
 8009040:	d02d      	beq.n	800909e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009042:	4b85      	ldr	r3, [pc, #532]	@ (8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	08db      	lsrs	r3, r3, #3
 8009048:	f003 0303 	and.w	r3, r3, #3
 800904c:	4a83      	ldr	r2, [pc, #524]	@ (800925c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800904e:	fa22 f303 	lsr.w	r3, r2, r3
 8009052:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	ee07 3a90 	vmov	s15, r3
 800905a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	ee07 3a90 	vmov	s15, r3
 8009064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800906c:	4b7a      	ldr	r3, [pc, #488]	@ (8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800906e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009074:	ee07 3a90 	vmov	s15, r3
 8009078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800907c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009080:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8009260 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800908c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009098:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800909c:	e087      	b.n	80091ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	ee07 3a90 	vmov	s15, r3
 80090a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090a8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8009264 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80090ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090b0:	4b69      	ldr	r3, [pc, #420]	@ (8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090b8:	ee07 3a90 	vmov	s15, r3
 80090bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80090c4:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8009260 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80090c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80090e0:	e065      	b.n	80091ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	ee07 3a90 	vmov	s15, r3
 80090e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ec:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8009268 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80090f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090f4:	4b58      	ldr	r3, [pc, #352]	@ (8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80090f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090fc:	ee07 3a90 	vmov	s15, r3
 8009100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009104:	ed97 6a03 	vldr	s12, [r7, #12]
 8009108:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8009260 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800910c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009110:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009114:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009118:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800911c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009120:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009124:	e043      	b.n	80091ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	ee07 3a90 	vmov	s15, r3
 800912c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009130:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800926c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009134:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009138:	4b47      	ldr	r3, [pc, #284]	@ (8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800913a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800913c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009140:	ee07 3a90 	vmov	s15, r3
 8009144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009148:	ed97 6a03 	vldr	s12, [r7, #12]
 800914c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8009260 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009150:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009154:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009158:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800915c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009164:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009168:	e021      	b.n	80091ae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	ee07 3a90 	vmov	s15, r3
 8009170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009174:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8009264 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800917c:	4b36      	ldr	r3, [pc, #216]	@ (8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800917e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009184:	ee07 3a90 	vmov	s15, r3
 8009188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800918c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009190:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009260 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009194:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800919c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80091ac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80091ae:	4b2a      	ldr	r3, [pc, #168]	@ (8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091b2:	0a5b      	lsrs	r3, r3, #9
 80091b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091b8:	ee07 3a90 	vmov	s15, r3
 80091bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80091cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091d4:	ee17 2a90 	vmov	r2, s15
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80091dc:	4b1e      	ldr	r3, [pc, #120]	@ (8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80091de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091e0:	0c1b      	lsrs	r3, r3, #16
 80091e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80091fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009202:	ee17 2a90 	vmov	r2, s15
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800920a:	4b13      	ldr	r3, [pc, #76]	@ (8009258 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800920c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800920e:	0e1b      	lsrs	r3, r3, #24
 8009210:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009214:	ee07 3a90 	vmov	s15, r3
 8009218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800921c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009220:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009224:	edd7 6a07 	vldr	s13, [r7, #28]
 8009228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800922c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009230:	ee17 2a90 	vmov	r2, s15
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009238:	e008      	b.n	800924c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2200      	movs	r2, #0
 8009244:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	609a      	str	r2, [r3, #8]
}
 800924c:	bf00      	nop
 800924e:	3724      	adds	r7, #36	@ 0x24
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	58024400 	.word	0x58024400
 800925c:	03d09000 	.word	0x03d09000
 8009260:	46000000 	.word	0x46000000
 8009264:	4c742400 	.word	0x4c742400
 8009268:	4a742400 	.word	0x4a742400
 800926c:	4bbebc20 	.word	0x4bbebc20

08009270 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800927a:	2300      	movs	r3, #0
 800927c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800927e:	4b53      	ldr	r3, [pc, #332]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009282:	f003 0303 	and.w	r3, r3, #3
 8009286:	2b03      	cmp	r3, #3
 8009288:	d101      	bne.n	800928e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e099      	b.n	80093c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800928e:	4b4f      	ldr	r3, [pc, #316]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a4e      	ldr	r2, [pc, #312]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009294:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800929a:	f7f9 f9ad 	bl	80025f8 <HAL_GetTick>
 800929e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80092a0:	e008      	b.n	80092b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80092a2:	f7f9 f9a9 	bl	80025f8 <HAL_GetTick>
 80092a6:	4602      	mov	r2, r0
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	2b02      	cmp	r3, #2
 80092ae:	d901      	bls.n	80092b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	e086      	b.n	80093c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80092b4:	4b45      	ldr	r3, [pc, #276]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d1f0      	bne.n	80092a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80092c0:	4b42      	ldr	r3, [pc, #264]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 80092c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	031b      	lsls	r3, r3, #12
 80092ce:	493f      	ldr	r1, [pc, #252]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 80092d0:	4313      	orrs	r3, r2
 80092d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	3b01      	subs	r3, #1
 80092da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	3b01      	subs	r3, #1
 80092e4:	025b      	lsls	r3, r3, #9
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	431a      	orrs	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	3b01      	subs	r3, #1
 80092f0:	041b      	lsls	r3, r3, #16
 80092f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80092f6:	431a      	orrs	r2, r3
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	3b01      	subs	r3, #1
 80092fe:	061b      	lsls	r3, r3, #24
 8009300:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009304:	4931      	ldr	r1, [pc, #196]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009306:	4313      	orrs	r3, r2
 8009308:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800930a:	4b30      	ldr	r3, [pc, #192]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 800930c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800930e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	492d      	ldr	r1, [pc, #180]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009318:	4313      	orrs	r3, r2
 800931a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800931c:	4b2b      	ldr	r3, [pc, #172]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 800931e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009320:	f023 0220 	bic.w	r2, r3, #32
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	4928      	ldr	r1, [pc, #160]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 800932a:	4313      	orrs	r3, r2
 800932c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800932e:	4b27      	ldr	r3, [pc, #156]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009332:	4a26      	ldr	r2, [pc, #152]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009334:	f023 0310 	bic.w	r3, r3, #16
 8009338:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800933a:	4b24      	ldr	r3, [pc, #144]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 800933c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800933e:	4b24      	ldr	r3, [pc, #144]	@ (80093d0 <RCCEx_PLL2_Config+0x160>)
 8009340:	4013      	ands	r3, r2
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	69d2      	ldr	r2, [r2, #28]
 8009346:	00d2      	lsls	r2, r2, #3
 8009348:	4920      	ldr	r1, [pc, #128]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 800934a:	4313      	orrs	r3, r2
 800934c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800934e:	4b1f      	ldr	r3, [pc, #124]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009352:	4a1e      	ldr	r2, [pc, #120]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009354:	f043 0310 	orr.w	r3, r3, #16
 8009358:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d106      	bne.n	800936e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009360:	4b1a      	ldr	r3, [pc, #104]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009364:	4a19      	ldr	r2, [pc, #100]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009366:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800936a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800936c:	e00f      	b.n	800938e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d106      	bne.n	8009382 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009374:	4b15      	ldr	r3, [pc, #84]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009378:	4a14      	ldr	r2, [pc, #80]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 800937a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800937e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009380:	e005      	b.n	800938e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009382:	4b12      	ldr	r3, [pc, #72]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009386:	4a11      	ldr	r2, [pc, #68]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009388:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800938c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800938e:	4b0f      	ldr	r3, [pc, #60]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a0e      	ldr	r2, [pc, #56]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 8009394:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800939a:	f7f9 f92d 	bl	80025f8 <HAL_GetTick>
 800939e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093a0:	e008      	b.n	80093b4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80093a2:	f7f9 f929 	bl	80025f8 <HAL_GetTick>
 80093a6:	4602      	mov	r2, r0
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	1ad3      	subs	r3, r2, r3
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	d901      	bls.n	80093b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80093b0:	2303      	movs	r3, #3
 80093b2:	e006      	b.n	80093c2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80093b4:	4b05      	ldr	r3, [pc, #20]	@ (80093cc <RCCEx_PLL2_Config+0x15c>)
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0f0      	beq.n	80093a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3710      	adds	r7, #16
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}
 80093ca:	bf00      	nop
 80093cc:	58024400 	.word	0x58024400
 80093d0:	ffff0007 	.word	0xffff0007

080093d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80093de:	2300      	movs	r3, #0
 80093e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80093e2:	4b53      	ldr	r3, [pc, #332]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 80093e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e6:	f003 0303 	and.w	r3, r3, #3
 80093ea:	2b03      	cmp	r3, #3
 80093ec:	d101      	bne.n	80093f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80093ee:	2301      	movs	r3, #1
 80093f0:	e099      	b.n	8009526 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80093f2:	4b4f      	ldr	r3, [pc, #316]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a4e      	ldr	r2, [pc, #312]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 80093f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093fe:	f7f9 f8fb 	bl	80025f8 <HAL_GetTick>
 8009402:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009404:	e008      	b.n	8009418 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009406:	f7f9 f8f7 	bl	80025f8 <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	2b02      	cmp	r3, #2
 8009412:	d901      	bls.n	8009418 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e086      	b.n	8009526 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009418:	4b45      	ldr	r3, [pc, #276]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1f0      	bne.n	8009406 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009424:	4b42      	ldr	r3, [pc, #264]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 8009426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009428:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	051b      	lsls	r3, r3, #20
 8009432:	493f      	ldr	r1, [pc, #252]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 8009434:	4313      	orrs	r3, r2
 8009436:	628b      	str	r3, [r1, #40]	@ 0x28
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	3b01      	subs	r3, #1
 800943e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	3b01      	subs	r3, #1
 8009448:	025b      	lsls	r3, r3, #9
 800944a:	b29b      	uxth	r3, r3
 800944c:	431a      	orrs	r2, r3
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	3b01      	subs	r3, #1
 8009454:	041b      	lsls	r3, r3, #16
 8009456:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800945a:	431a      	orrs	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	3b01      	subs	r3, #1
 8009462:	061b      	lsls	r3, r3, #24
 8009464:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009468:	4931      	ldr	r1, [pc, #196]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 800946a:	4313      	orrs	r3, r2
 800946c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800946e:	4b30      	ldr	r3, [pc, #192]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 8009470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009472:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	695b      	ldr	r3, [r3, #20]
 800947a:	492d      	ldr	r1, [pc, #180]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 800947c:	4313      	orrs	r3, r2
 800947e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009480:	4b2b      	ldr	r3, [pc, #172]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 8009482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009484:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	4928      	ldr	r1, [pc, #160]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 800948e:	4313      	orrs	r3, r2
 8009490:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009492:	4b27      	ldr	r3, [pc, #156]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 8009494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009496:	4a26      	ldr	r2, [pc, #152]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 8009498:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800949c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800949e:	4b24      	ldr	r3, [pc, #144]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 80094a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094a2:	4b24      	ldr	r3, [pc, #144]	@ (8009534 <RCCEx_PLL3_Config+0x160>)
 80094a4:	4013      	ands	r3, r2
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	69d2      	ldr	r2, [r2, #28]
 80094aa:	00d2      	lsls	r2, r2, #3
 80094ac:	4920      	ldr	r1, [pc, #128]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80094b2:	4b1f      	ldr	r3, [pc, #124]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 80094b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b6:	4a1e      	ldr	r2, [pc, #120]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 80094b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d106      	bne.n	80094d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80094c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 80094c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c8:	4a19      	ldr	r2, [pc, #100]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 80094ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80094ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80094d0:	e00f      	b.n	80094f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d106      	bne.n	80094e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80094d8:	4b15      	ldr	r3, [pc, #84]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 80094da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094dc:	4a14      	ldr	r2, [pc, #80]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 80094de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80094e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80094e4:	e005      	b.n	80094f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80094e6:	4b12      	ldr	r3, [pc, #72]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 80094e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ea:	4a11      	ldr	r2, [pc, #68]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 80094ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80094f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80094f2:	4b0f      	ldr	r3, [pc, #60]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a0e      	ldr	r2, [pc, #56]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 80094f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80094fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094fe:	f7f9 f87b 	bl	80025f8 <HAL_GetTick>
 8009502:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009504:	e008      	b.n	8009518 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009506:	f7f9 f877 	bl	80025f8 <HAL_GetTick>
 800950a:	4602      	mov	r2, r0
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	2b02      	cmp	r3, #2
 8009512:	d901      	bls.n	8009518 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	e006      	b.n	8009526 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009518:	4b05      	ldr	r3, [pc, #20]	@ (8009530 <RCCEx_PLL3_Config+0x15c>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009520:	2b00      	cmp	r3, #0
 8009522:	d0f0      	beq.n	8009506 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009524:	7bfb      	ldrb	r3, [r7, #15]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	58024400 	.word	0x58024400
 8009534:	ffff0007 	.word	0xffff0007

08009538 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b08a      	sub	sp, #40	@ 0x28
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e075      	b.n	8009636 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009550:	b2db      	uxtb	r3, r3
 8009552:	2b00      	cmp	r3, #0
 8009554:	d105      	bne.n	8009562 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f7f8 fc91 	bl	8001e84 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2204      	movs	r2, #4
 8009566:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f868 	bl	8009640 <HAL_SD_InitCard>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d001      	beq.n	800957a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009576:	2301      	movs	r3, #1
 8009578:	e05d      	b.n	8009636 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800957a:	f107 0308 	add.w	r3, r7, #8
 800957e:	4619      	mov	r1, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fdb5 	bl	800a0f0 <HAL_SD_GetCardStatus>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e052      	b.n	8009636 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8009590:	7e3b      	ldrb	r3, [r7, #24]
 8009592:	b2db      	uxtb	r3, r3
 8009594:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8009596:	7e7b      	ldrb	r3, [r7, #25]
 8009598:	b2db      	uxtb	r3, r3
 800959a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d10a      	bne.n	80095ba <HAL_SD_Init+0x82>
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d102      	bne.n	80095b0 <HAL_SD_Init+0x78>
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d004      	beq.n	80095ba <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80095b8:	e00b      	b.n	80095d2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d104      	bne.n	80095cc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80095c8:	659a      	str	r2, [r3, #88]	@ 0x58
 80095ca:	e002      	b.n	80095d2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	4619      	mov	r1, r3
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fe73 	bl	800a2c4 <HAL_SD_ConfigWideBusOperation>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e026      	b.n	8009636 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80095e8:	f7f9 f806 	bl	80025f8 <HAL_GetTick>
 80095ec:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80095ee:	e011      	b.n	8009614 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80095f0:	f7f9 f802 	bl	80025f8 <HAL_GetTick>
 80095f4:	4602      	mov	r2, r0
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095fe:	d109      	bne.n	8009614 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009606:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2201      	movs	r2, #1
 800960c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	e010      	b.n	8009636 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 ff67 	bl	800a4e8 <HAL_SD_GetCardState>
 800961a:	4603      	mov	r3, r0
 800961c:	2b04      	cmp	r3, #4
 800961e:	d1e7      	bne.n	80095f0 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3728      	adds	r7, #40	@ 0x28
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
	...

08009640 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009640:	b590      	push	{r4, r7, lr}
 8009642:	b08d      	sub	sp, #52	@ 0x34
 8009644:	af02      	add	r7, sp, #8
 8009646:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009648:	2300      	movs	r3, #0
 800964a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800964c:	2300      	movs	r3, #0
 800964e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009650:	2300      	movs	r3, #0
 8009652:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009654:	2300      	movs	r3, #0
 8009656:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8009658:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800965c:	f04f 0100 	mov.w	r1, #0
 8009660:	f7fe fc76 	bl	8007f50 <HAL_RCCEx_GetPeriphCLKFreq>
 8009664:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8009666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009668:	2b00      	cmp	r3, #0
 800966a:	d109      	bne.n	8009680 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800967a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800967c:	2301      	movs	r3, #1
 800967e:	e070      	b.n	8009762 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8009680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009682:	0a1b      	lsrs	r3, r3, #8
 8009684:	4a39      	ldr	r2, [pc, #228]	@ (800976c <HAL_SD_InitCard+0x12c>)
 8009686:	fba2 2303 	umull	r2, r3, r2, r3
 800968a:	091b      	lsrs	r3, r3, #4
 800968c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681c      	ldr	r4, [r3, #0]
 8009692:	466a      	mov	r2, sp
 8009694:	f107 0318 	add.w	r3, r7, #24
 8009698:	e893 0003 	ldmia.w	r3, {r0, r1}
 800969c:	e882 0003 	stmia.w	r2, {r0, r1}
 80096a0:	f107 030c 	add.w	r3, r7, #12
 80096a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096a6:	4620      	mov	r0, r4
 80096a8:	f003 fd46 	bl	800d138 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4618      	mov	r0, r3
 80096b2:	f003 fd89 	bl	800d1c8 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d005      	beq.n	80096c8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	005b      	lsls	r3, r3, #1
 80096c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 80096c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d007      	beq.n	80096de <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80096ce:	4a28      	ldr	r2, [pc, #160]	@ (8009770 <HAL_SD_InitCard+0x130>)
 80096d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096d6:	3301      	adds	r3, #1
 80096d8:	4618      	mov	r0, r3
 80096da:	f7f8 ff99 	bl	8002610 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fff0 	bl	800a6c4 <SD_PowerON>
 80096e4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80096e6:	6a3b      	ldr	r3, [r7, #32]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00b      	beq.n	8009704 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096f8:	6a3b      	ldr	r3, [r7, #32]
 80096fa:	431a      	orrs	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e02e      	b.n	8009762 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 ff0f 	bl	800a528 <SD_InitCard>
 800970a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800970c:	6a3b      	ldr	r3, [r7, #32]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00b      	beq.n	800972a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2201      	movs	r2, #1
 8009716:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800971e:	6a3b      	ldr	r3, [r7, #32]
 8009720:	431a      	orrs	r2, r3
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e01b      	b.n	8009762 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009732:	4618      	mov	r0, r3
 8009734:	f003 fdde 	bl	800d2f4 <SDMMC_CmdBlockLength>
 8009738:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d00f      	beq.n	8009760 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a0b      	ldr	r2, [pc, #44]	@ (8009774 <HAL_SD_InitCard+0x134>)
 8009746:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	431a      	orrs	r2, r3
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e000      	b.n	8009762 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	372c      	adds	r7, #44	@ 0x2c
 8009766:	46bd      	mov	sp, r7
 8009768:	bd90      	pop	{r4, r7, pc}
 800976a:	bf00      	nop
 800976c:	014f8b59 	.word	0x014f8b59
 8009770:	00012110 	.word	0x00012110
 8009774:	1fe00fff 	.word	0x1fe00fff

08009778 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b092      	sub	sp, #72	@ 0x48
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
 8009784:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009786:	f7f8 ff37 	bl	80025f8 <HAL_GetTick>
 800978a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d107      	bne.n	80097aa <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800979e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e167      	b.n	8009a7a <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	f040 815a 	bne.w	8009a6c <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2200      	movs	r2, #0
 80097bc:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80097be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	441a      	add	r2, r3
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d907      	bls.n	80097dc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097d0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	e14e      	b.n	8009a7a <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2203      	movs	r2, #3
 80097e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2200      	movs	r2, #0
 80097ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d002      	beq.n	80097fa <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 80097f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f6:	025b      	lsls	r3, r3, #9
 80097f8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80097fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80097fe:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	025b      	lsls	r3, r3, #9
 8009804:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009806:	2390      	movs	r3, #144	@ 0x90
 8009808:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800980a:	2302      	movs	r3, #2
 800980c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800980e:	2300      	movs	r3, #0
 8009810:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009812:	2300      	movs	r3, #0
 8009814:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f107 0214 	add.w	r2, r7, #20
 800981e:	4611      	mov	r1, r2
 8009820:	4618      	mov	r0, r3
 8009822:	f003 fd3b 	bl	800d29c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	68da      	ldr	r2, [r3, #12]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009834:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2b01      	cmp	r3, #1
 800983a:	d90a      	bls.n	8009852 <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2202      	movs	r2, #2
 8009840:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009848:	4618      	mov	r0, r3
 800984a:	f003 fd99 	bl	800d380 <SDMMC_CmdReadMultiBlock>
 800984e:	6478      	str	r0, [r7, #68]	@ 0x44
 8009850:	e009      	b.n	8009866 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2201      	movs	r2, #1
 8009856:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800985e:	4618      	mov	r0, r3
 8009860:	f003 fd6b 	bl	800d33a <SDMMC_CmdReadSingleBlock>
 8009864:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009868:	2b00      	cmp	r3, #0
 800986a:	d012      	beq.n	8009892 <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a84      	ldr	r2, [pc, #528]	@ (8009a84 <HAL_SD_ReadBlocks+0x30c>)
 8009872:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800987a:	431a      	orrs	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2200      	movs	r2, #0
 800988c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	e0f3      	b.n	8009a7a <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009896:	e058      	b.n	800994a <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800989e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d033      	beq.n	800990e <HAL_SD_ReadBlocks+0x196>
 80098a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098a8:	2b1f      	cmp	r3, #31
 80098aa:	d930      	bls.n	800990e <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 80098ac:	2300      	movs	r3, #0
 80098ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80098b0:	e027      	b.n	8009902 <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f003 fc68 	bl	800d18c <SDMMC_ReadFIFO>
 80098bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80098be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c0:	b2da      	uxtb	r2, r3
 80098c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80098c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098c8:	3301      	adds	r3, #1
 80098ca:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80098cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ce:	0a1b      	lsrs	r3, r3, #8
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80098d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098d8:	3301      	adds	r3, #1
 80098da:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80098dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098de:	0c1b      	lsrs	r3, r3, #16
 80098e0:	b2da      	uxtb	r2, r3
 80098e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80098e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e8:	3301      	adds	r3, #1
 80098ea:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80098ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ee:	0e1b      	lsrs	r3, r3, #24
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80098f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f8:	3301      	adds	r3, #1
 80098fa:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 80098fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098fe:	3301      	adds	r3, #1
 8009900:	643b      	str	r3, [r7, #64]	@ 0x40
 8009902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009904:	2b07      	cmp	r3, #7
 8009906:	d9d4      	bls.n	80098b2 <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 8009908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800990a:	3b20      	subs	r3, #32
 800990c:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800990e:	f7f8 fe73 	bl	80025f8 <HAL_GetTick>
 8009912:	4602      	mov	r2, r0
 8009914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800991a:	429a      	cmp	r2, r3
 800991c:	d902      	bls.n	8009924 <HAL_SD_ReadBlocks+0x1ac>
 800991e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009920:	2b00      	cmp	r3, #0
 8009922:	d112      	bne.n	800994a <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a56      	ldr	r2, [pc, #344]	@ (8009a84 <HAL_SD_ReadBlocks+0x30c>)
 800992a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009930:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2200      	movs	r2, #0
 8009944:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	e097      	b.n	8009a7a <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009950:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8009954:	2b00      	cmp	r3, #0
 8009956:	d09f      	beq.n	8009898 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68da      	ldr	r2, [r3, #12]
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009966:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800996e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009972:	2b00      	cmp	r3, #0
 8009974:	d022      	beq.n	80099bc <HAL_SD_ReadBlocks+0x244>
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d91f      	bls.n	80099bc <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009980:	2b03      	cmp	r3, #3
 8009982:	d01b      	beq.n	80099bc <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4618      	mov	r0, r3
 800998a:	f003 fd63 	bl	800d454 <SDMMC_CmdStopTransfer>
 800998e:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8009990:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009992:	2b00      	cmp	r3, #0
 8009994:	d012      	beq.n	80099bc <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a3a      	ldr	r2, [pc, #232]	@ (8009a84 <HAL_SD_ReadBlocks+0x30c>)
 800999c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80099a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099a4:	431a      	orrs	r2, r3
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2201      	movs	r2, #1
 80099ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e05e      	b.n	8009a7a <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099c2:	f003 0308 	and.w	r3, r3, #8
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d012      	beq.n	80099f0 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a2d      	ldr	r2, [pc, #180]	@ (8009a84 <HAL_SD_ReadBlocks+0x30c>)
 80099d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099d6:	f043 0208 	orr.w	r2, r3, #8
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2200      	movs	r2, #0
 80099ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	e044      	b.n	8009a7a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d012      	beq.n	8009a24 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a20      	ldr	r2, [pc, #128]	@ (8009a84 <HAL_SD_ReadBlocks+0x30c>)
 8009a04:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a0a:	f043 0202 	orr.w	r2, r3, #2
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009a20:	2301      	movs	r3, #1
 8009a22:	e02a      	b.n	8009a7a <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a2a:	f003 0320 	and.w	r3, r3, #32
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d012      	beq.n	8009a58 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a13      	ldr	r2, [pc, #76]	@ (8009a84 <HAL_SD_ReadBlocks+0x30c>)
 8009a38:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a3e:	f043 0220 	orr.w	r2, r3, #32
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009a54:	2301      	movs	r3, #1
 8009a56:	e010      	b.n	8009a7a <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8009a88 <HAL_SD_ReadBlocks+0x310>)
 8009a5e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	e006      	b.n	8009a7a <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a70:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
  }
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3748      	adds	r7, #72	@ 0x48
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	1fe00fff 	.word	0x1fe00fff
 8009a88:	18000f3a 	.word	0x18000f3a

08009a8c <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b092      	sub	sp, #72	@ 0x48
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009a9a:	f7f8 fdad 	bl	80025f8 <HAL_GetTick>
 8009a9e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d107      	bne.n	8009abe <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ab2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e16b      	b.n	8009d96 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	f040 815e 	bne.w	8009d88 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009ad2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	441a      	add	r2, r3
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d907      	bls.n	8009af0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ae4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e152      	b.n	8009d96 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2203      	movs	r2, #3
 8009af4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	2200      	movs	r2, #0
 8009afe:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d002      	beq.n	8009b0e <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 8009b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0a:	025b      	lsls	r3, r3, #9
 8009b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b12:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	025b      	lsls	r3, r3, #9
 8009b18:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009b1a:	2390      	movs	r3, #144	@ 0x90
 8009b1c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009b26:	2300      	movs	r3, #0
 8009b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f107 0218 	add.w	r2, r7, #24
 8009b32:	4611      	mov	r1, r2
 8009b34:	4618      	mov	r0, r3
 8009b36:	f003 fbb1 	bl	800d29c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68da      	ldr	r2, [r3, #12]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b48:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d90a      	bls.n	8009b66 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2220      	movs	r2, #32
 8009b54:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f003 fc55 	bl	800d40c <SDMMC_CmdWriteMultiBlock>
 8009b62:	6478      	str	r0, [r7, #68]	@ 0x44
 8009b64:	e009      	b.n	8009b7a <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2210      	movs	r2, #16
 8009b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009b72:	4618      	mov	r0, r3
 8009b74:	f003 fc27 	bl	800d3c6 <SDMMC_CmdWriteSingleBlock>
 8009b78:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8009b7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d012      	beq.n	8009ba6 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a86      	ldr	r2, [pc, #536]	@ (8009da0 <HAL_SD_WriteBlocks+0x314>)
 8009b86:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b8e:	431a      	orrs	r2, r3
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e0f7      	b.n	8009d96 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8009ba6:	69fb      	ldr	r3, [r7, #28]
 8009ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009baa:	e05c      	b.n	8009c66 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d037      	beq.n	8009c2a <HAL_SD_WriteBlocks+0x19e>
 8009bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bbc:	2b1f      	cmp	r3, #31
 8009bbe:	d934      	bls.n	8009c2a <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009bc4:	e02b      	b.n	8009c1e <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8009bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bce:	3301      	adds	r3, #1
 8009bd0:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 8009bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	021a      	lsls	r2, r3, #8
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009bde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009be0:	3301      	adds	r3, #1
 8009be2:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8009be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	041a      	lsls	r2, r3, #16
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009bf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8009bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	061a      	lsls	r2, r3, #24
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8009c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c04:	3301      	adds	r3, #1
 8009c06:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f107 0214 	add.w	r2, r7, #20
 8009c10:	4611      	mov	r1, r2
 8009c12:	4618      	mov	r0, r3
 8009c14:	f003 fac7 	bl	800d1a6 <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8009c18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c20:	2b07      	cmp	r3, #7
 8009c22:	d9d0      	bls.n	8009bc6 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 8009c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c26:	3b20      	subs	r3, #32
 8009c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009c2a:	f7f8 fce5 	bl	80025f8 <HAL_GetTick>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c32:	1ad3      	subs	r3, r2, r3
 8009c34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d902      	bls.n	8009c40 <HAL_SD_WriteBlocks+0x1b4>
 8009c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d112      	bne.n	8009c66 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a56      	ldr	r2, [pc, #344]	@ (8009da0 <HAL_SD_WriteBlocks+0x314>)
 8009c46:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2201      	movs	r2, #1
 8009c58:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e097      	b.n	8009d96 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c6c:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d09b      	beq.n	8009bac <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	68da      	ldr	r2, [r3, #12]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c82:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d022      	beq.n	8009cd8 <HAL_SD_WriteBlocks+0x24c>
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d91f      	bls.n	8009cd8 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c9c:	2b03      	cmp	r3, #3
 8009c9e:	d01b      	beq.n	8009cd8 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f003 fbd5 	bl	800d454 <SDMMC_CmdStopTransfer>
 8009caa:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 8009cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d012      	beq.n	8009cd8 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	4a3a      	ldr	r2, [pc, #232]	@ (8009da0 <HAL_SD_WriteBlocks+0x314>)
 8009cb8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009cc0:	431a      	orrs	r2, r3
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e05e      	b.n	8009d96 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cde:	f003 0308 	and.w	r3, r3, #8
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d012      	beq.n	8009d0c <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a2d      	ldr	r2, [pc, #180]	@ (8009da0 <HAL_SD_WriteBlocks+0x314>)
 8009cec:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cf2:	f043 0208 	orr.w	r2, r3, #8
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2201      	movs	r2, #1
 8009cfe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2200      	movs	r2, #0
 8009d06:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e044      	b.n	8009d96 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d12:	f003 0302 	and.w	r3, r3, #2
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d012      	beq.n	8009d40 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a20      	ldr	r2, [pc, #128]	@ (8009da0 <HAL_SD_WriteBlocks+0x314>)
 8009d20:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d26:	f043 0202 	orr.w	r2, r3, #2
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e02a      	b.n	8009d96 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d46:	f003 0310 	and.w	r3, r3, #16
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d012      	beq.n	8009d74 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4a13      	ldr	r2, [pc, #76]	@ (8009da0 <HAL_SD_WriteBlocks+0x314>)
 8009d54:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d5a:	f043 0210 	orr.w	r2, r3, #16
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e010      	b.n	8009d96 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	4a0a      	ldr	r2, [pc, #40]	@ (8009da4 <HAL_SD_WriteBlocks+0x318>)
 8009d7a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2201      	movs	r2, #1
 8009d80:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	e006      	b.n	8009d96 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d8c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
  }
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3748      	adds	r7, #72	@ 0x48
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	1fe00fff 	.word	0x1fe00fff
 8009da4:	18000f3a 	.word	0x18000f3a

08009da8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009db6:	0f9b      	lsrs	r3, r3, #30
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dc2:	0e9b      	lsrs	r3, r3, #26
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	f003 030f 	and.w	r3, r3, #15
 8009dca:	b2da      	uxtb	r2, r3
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dd4:	0e1b      	lsrs	r3, r3, #24
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	f003 0303 	and.w	r3, r3, #3
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009de6:	0c1b      	lsrs	r3, r3, #16
 8009de8:	b2da      	uxtb	r2, r3
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009df2:	0a1b      	lsrs	r3, r3, #8
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009dfe:	b2da      	uxtb	r2, r3
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e08:	0d1b      	lsrs	r3, r3, #20
 8009e0a:	b29a      	uxth	r2, r3
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e14:	0c1b      	lsrs	r3, r3, #16
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	f003 030f 	and.w	r3, r3, #15
 8009e1c:	b2da      	uxtb	r2, r3
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e26:	0bdb      	lsrs	r3, r3, #15
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	f003 0301 	and.w	r3, r3, #1
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e38:	0b9b      	lsrs	r3, r3, #14
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	f003 0301 	and.w	r3, r3, #1
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e4a:	0b5b      	lsrs	r3, r3, #13
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	f003 0301 	and.w	r3, r3, #1
 8009e52:	b2da      	uxtb	r2, r3
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e5c:	0b1b      	lsrs	r3, r3, #12
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	f003 0301 	and.w	r3, r3, #1
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d163      	bne.n	8009f40 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e7c:	009a      	lsls	r2, r3, #2
 8009e7e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009e82:	4013      	ands	r3, r2
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8009e88:	0f92      	lsrs	r2, r2, #30
 8009e8a:	431a      	orrs	r2, r3
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e94:	0edb      	lsrs	r3, r3, #27
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	f003 0307 	and.w	r3, r3, #7
 8009e9c:	b2da      	uxtb	r2, r3
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ea6:	0e1b      	lsrs	r3, r3, #24
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	f003 0307 	and.w	r3, r3, #7
 8009eae:	b2da      	uxtb	r2, r3
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009eb8:	0d5b      	lsrs	r3, r3, #21
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	f003 0307 	and.w	r3, r3, #7
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009eca:	0c9b      	lsrs	r3, r3, #18
 8009ecc:	b2db      	uxtb	r3, r3
 8009ece:	f003 0307 	and.w	r3, r3, #7
 8009ed2:	b2da      	uxtb	r2, r3
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009edc:	0bdb      	lsrs	r3, r3, #15
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	f003 0307 	and.w	r3, r3, #7
 8009ee4:	b2da      	uxtb	r2, r3
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	1c5a      	adds	r2, r3, #1
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	7e1b      	ldrb	r3, [r3, #24]
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	f003 0307 	and.w	r3, r3, #7
 8009efe:	3302      	adds	r3, #2
 8009f00:	2201      	movs	r2, #1
 8009f02:	fa02 f303 	lsl.w	r3, r2, r3
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009f0a:	fb03 f202 	mul.w	r2, r3, r2
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	7a1b      	ldrb	r3, [r3, #8]
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	f003 030f 	and.w	r3, r3, #15
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	409a      	lsls	r2, r3
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8009f2c:	0a52      	lsrs	r2, r2, #9
 8009f2e:	fb03 f202 	mul.w	r2, r3, r2
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f3c:	655a      	str	r2, [r3, #84]	@ 0x54
 8009f3e:	e031      	b.n	8009fa4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d11d      	bne.n	8009f84 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f4c:	041b      	lsls	r3, r3, #16
 8009f4e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009f56:	0c1b      	lsrs	r3, r3, #16
 8009f58:	431a      	orrs	r2, r3
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	3301      	adds	r3, #1
 8009f64:	029a      	lsls	r2, r3, #10
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f78:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	655a      	str	r2, [r3, #84]	@ 0x54
 8009f82:	e00f      	b.n	8009fa4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a58      	ldr	r2, [pc, #352]	@ (800a0ec <HAL_SD_GetCardCSD+0x344>)
 8009f8a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f90:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	e09d      	b.n	800a0e0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fa8:	0b9b      	lsrs	r3, r3, #14
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	f003 0301 	and.w	r3, r3, #1
 8009fb0:	b2da      	uxtb	r2, r3
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fba:	09db      	lsrs	r3, r3, #7
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009fcc:	b2db      	uxtb	r3, r3
 8009fce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009fdc:	0fdb      	lsrs	r3, r3, #31
 8009fde:	b2da      	uxtb	r2, r3
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009fe8:	0f5b      	lsrs	r3, r3, #29
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	f003 0303 	and.w	r3, r3, #3
 8009ff0:	b2da      	uxtb	r2, r3
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009ffa:	0e9b      	lsrs	r3, r3, #26
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	f003 0307 	and.w	r3, r3, #7
 800a002:	b2da      	uxtb	r2, r3
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a00c:	0d9b      	lsrs	r3, r3, #22
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	f003 030f 	and.w	r3, r3, #15
 800a014:	b2da      	uxtb	r2, r3
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a01e:	0d5b      	lsrs	r3, r3, #21
 800a020:	b2db      	uxtb	r3, r3
 800a022:	f003 0301 	and.w	r3, r3, #1
 800a026:	b2da      	uxtb	r2, r3
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2200      	movs	r2, #0
 800a032:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a03a:	0c1b      	lsrs	r3, r3, #16
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	b2da      	uxtb	r2, r3
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a04e:	0bdb      	lsrs	r3, r3, #15
 800a050:	b2db      	uxtb	r3, r3
 800a052:	f003 0301 	and.w	r3, r3, #1
 800a056:	b2da      	uxtb	r2, r3
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a062:	0b9b      	lsrs	r3, r3, #14
 800a064:	b2db      	uxtb	r3, r3
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a076:	0b5b      	lsrs	r3, r3, #13
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	b2da      	uxtb	r2, r3
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a08a:	0b1b      	lsrs	r3, r3, #12
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	f003 0301 	and.w	r3, r3, #1
 800a092:	b2da      	uxtb	r2, r3
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a09e:	0a9b      	lsrs	r3, r3, #10
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	f003 0303 	and.w	r3, r3, #3
 800a0a6:	b2da      	uxtb	r2, r3
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a0b2:	0a1b      	lsrs	r3, r3, #8
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	f003 0303 	and.w	r3, r3, #3
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a0c6:	085b      	lsrs	r3, r3, #1
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ea:	4770      	bx	lr
 800a0ec:	1fe00fff 	.word	0x1fe00fff

0800a0f0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b094      	sub	sp, #80	@ 0x50
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d101      	bne.n	800a110 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	e0a7      	b.n	800a260 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800a110:	f107 0308 	add.w	r3, r7, #8
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fb62 	bl	800a7e0 <SD_SendSDStatus>
 800a11c:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a11e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a120:	2b00      	cmp	r3, #0
 800a122:	d011      	beq.n	800a148 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a4f      	ldr	r2, [pc, #316]	@ (800a268 <HAL_SD_GetCardStatus+0x178>)
 800a12a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a130:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a132:	431a      	orrs	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a146:	e070      	b.n	800a22a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	099b      	lsrs	r3, r3, #6
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	f003 0303 	and.w	r3, r3, #3
 800a152:	b2da      	uxtb	r2, r3
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	095b      	lsrs	r3, r3, #5
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	f003 0301 	and.w	r3, r3, #1
 800a162:	b2da      	uxtb	r2, r3
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	0a1b      	lsrs	r3, r3, #8
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a172:	b29a      	uxth	r2, r3
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	0e1b      	lsrs	r3, r3, #24
 800a178:	b29b      	uxth	r3, r3
 800a17a:	4313      	orrs	r3, r2
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	061a      	lsls	r2, r3, #24
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	021b      	lsls	r3, r3, #8
 800a18a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a18e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	0a1b      	lsrs	r3, r3, #8
 800a194:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a198:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	0e1b      	lsrs	r3, r3, #24
 800a19e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	0a1b      	lsrs	r3, r3, #8
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	0d1b      	lsrs	r3, r3, #20
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	f003 030f 	and.w	r3, r3, #15
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	0c1b      	lsrs	r3, r3, #16
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	b29a      	uxth	r2, r3
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	0a9b      	lsrs	r3, r3, #10
 800a1e6:	b2db      	uxtb	r3, r3
 800a1e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a1ec:	b2da      	uxtb	r2, r3
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	0a1b      	lsrs	r3, r3, #8
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	f003 0303 	and.w	r3, r3, #3
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	091b      	lsrs	r3, r3, #4
 800a206:	b2db      	uxtb	r3, r3
 800a208:	f003 030f 	and.w	r3, r3, #15
 800a20c:	b2da      	uxtb	r2, r3
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	b2db      	uxtb	r3, r3
 800a216:	f003 030f 	and.w	r3, r3, #15
 800a21a:	b2da      	uxtb	r2, r3
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800a220:	69bb      	ldr	r3, [r7, #24]
 800a222:	0e1b      	lsrs	r3, r3, #24
 800a224:	b2da      	uxtb	r2, r3
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a232:	4618      	mov	r0, r3
 800a234:	f003 f85e 	bl	800d2f4 <SDMMC_CmdBlockLength>
 800a238:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800a23a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00d      	beq.n	800a25c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a08      	ldr	r2, [pc, #32]	@ (800a268 <HAL_SD_GetCardStatus+0x178>)
 800a246:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a24c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 800a256:	2301      	movs	r3, #1
 800a258:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 800a25c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800a260:	4618      	mov	r0, r3
 800a262:	3750      	adds	r7, #80	@ 0x50
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	1fe00fff 	.word	0x1fe00fff

0800a26c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(const SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b083      	sub	sp, #12
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a2c4:	b590      	push	{r4, r7, lr}
 800a2c6:	b08d      	sub	sp, #52	@ 0x34
 800a2c8:	af02      	add	r7, sp, #8
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2203      	movs	r2, #3
 800a2d8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	d02e      	beq.n	800a342 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a2ea:	d106      	bne.n	800a2fa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	635a      	str	r2, [r3, #52]	@ 0x34
 800a2f8:	e029      	b.n	800a34e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a300:	d10a      	bne.n	800a318 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 fb64 	bl	800a9d0 <SD_WideBus_Enable>
 800a308:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a30e:	6a3b      	ldr	r3, [r7, #32]
 800a310:	431a      	orrs	r2, r3
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	635a      	str	r2, [r3, #52]	@ 0x34
 800a316:	e01a      	b.n	800a34e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d10a      	bne.n	800a334 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 fba1 	bl	800aa66 <SD_WideBus_Disable>
 800a324:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a32a:	6a3b      	ldr	r3, [r7, #32]
 800a32c:	431a      	orrs	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	635a      	str	r2, [r3, #52]	@ 0x34
 800a332:	e00c      	b.n	800a34e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a338:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	635a      	str	r2, [r3, #52]	@ 0x34
 800a340:	e005      	b.n	800a34e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a346:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a352:	2b00      	cmp	r3, #0
 800a354:	d007      	beq.n	800a366 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a5f      	ldr	r2, [pc, #380]	@ (800a4d8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a35c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a364:	e096      	b.n	800a494 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a366:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800a36a:	f04f 0100 	mov.w	r1, #0
 800a36e:	f7fd fdef 	bl	8007f50 <HAL_RCCEx_GetPeriphCLKFreq>
 800a372:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	2b00      	cmp	r3, #0
 800a378:	f000 8083 	beq.w	800a482 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	695a      	ldr	r2, [r3, #20]
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	4950      	ldr	r1, [pc, #320]	@ (800a4dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a39a:	fba1 1303 	umull	r1, r3, r1, r3
 800a39e:	0e1b      	lsrs	r3, r3, #24
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d303      	bcc.n	800a3ac <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	61bb      	str	r3, [r7, #24]
 800a3aa:	e05a      	b.n	800a462 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3b4:	d103      	bne.n	800a3be <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	695b      	ldr	r3, [r3, #20]
 800a3ba:	61bb      	str	r3, [r7, #24]
 800a3bc:	e051      	b.n	800a462 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3c6:	d126      	bne.n	800a416 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d10e      	bne.n	800a3ee <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	4a43      	ldr	r2, [pc, #268]	@ (800a4e0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d906      	bls.n	800a3e6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a3d8:	69fb      	ldr	r3, [r7, #28]
 800a3da:	4a40      	ldr	r2, [pc, #256]	@ (800a4dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a3dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e0:	0e5b      	lsrs	r3, r3, #25
 800a3e2:	61bb      	str	r3, [r7, #24]
 800a3e4:	e03d      	b.n	800a462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	61bb      	str	r3, [r7, #24]
 800a3ec:	e039      	b.n	800a462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	005b      	lsls	r3, r3, #1
 800a3f4:	69fa      	ldr	r2, [r7, #28]
 800a3f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3fa:	4a39      	ldr	r2, [pc, #228]	@ (800a4e0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d906      	bls.n	800a40e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	4a36      	ldr	r2, [pc, #216]	@ (800a4dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a404:	fba2 2303 	umull	r2, r3, r2, r3
 800a408:	0e5b      	lsrs	r3, r3, #25
 800a40a:	61bb      	str	r3, [r7, #24]
 800a40c:	e029      	b.n	800a462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	695b      	ldr	r3, [r3, #20]
 800a412:	61bb      	str	r3, [r7, #24]
 800a414:	e025      	b.n	800a462 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10e      	bne.n	800a43c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800a41e:	69fb      	ldr	r3, [r7, #28]
 800a420:	4a30      	ldr	r2, [pc, #192]	@ (800a4e4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d906      	bls.n	800a434 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	4a2c      	ldr	r2, [pc, #176]	@ (800a4dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a42a:	fba2 2303 	umull	r2, r3, r2, r3
 800a42e:	0e1b      	lsrs	r3, r3, #24
 800a430:	61bb      	str	r3, [r7, #24]
 800a432:	e016      	b.n	800a462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	695b      	ldr	r3, [r3, #20]
 800a438:	61bb      	str	r3, [r7, #24]
 800a43a:	e012      	b.n	800a462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	695b      	ldr	r3, [r3, #20]
 800a440:	005b      	lsls	r3, r3, #1
 800a442:	69fa      	ldr	r2, [r7, #28]
 800a444:	fbb2 f3f3 	udiv	r3, r2, r3
 800a448:	4a26      	ldr	r2, [pc, #152]	@ (800a4e4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d906      	bls.n	800a45c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	4a22      	ldr	r2, [pc, #136]	@ (800a4dc <HAL_SD_ConfigWideBusOperation+0x218>)
 800a452:	fba2 2303 	umull	r2, r3, r2, r3
 800a456:	0e1b      	lsrs	r3, r3, #24
 800a458:	61bb      	str	r3, [r7, #24]
 800a45a:	e002      	b.n	800a462 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681c      	ldr	r4, [r3, #0]
 800a466:	466a      	mov	r2, sp
 800a468:	f107 0314 	add.w	r3, r7, #20
 800a46c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a470:	e882 0003 	stmia.w	r2, {r0, r1}
 800a474:	f107 0308 	add.w	r3, r7, #8
 800a478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a47a:	4620      	mov	r0, r4
 800a47c:	f002 fe5c 	bl	800d138 <SDMMC_Init>
 800a480:	e008      	b.n	800a494 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a486:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a49c:	4618      	mov	r0, r3
 800a49e:	f002 ff29 	bl	800d2f4 <SDMMC_CmdBlockLength>
 800a4a2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00c      	beq.n	800a4c4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a0a      	ldr	r2, [pc, #40]	@ (800a4d8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800a4b0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4b6:	6a3b      	ldr	r3, [r7, #32]
 800a4b8:	431a      	orrs	r2, r3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800a4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	372c      	adds	r7, #44	@ 0x2c
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd90      	pop	{r4, r7, pc}
 800a4d8:	1fe00fff 	.word	0x1fe00fff
 800a4dc:	55e63b89 	.word	0x55e63b89
 800a4e0:	02faf080 	.word	0x02faf080
 800a4e4:	017d7840 	.word	0x017d7840

0800a4e8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a4f4:	f107 030c 	add.w	r3, r7, #12
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fa40 	bl	800a980 <SD_SendStatus>
 800a500:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a502:	697b      	ldr	r3, [r7, #20]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d005      	beq.n	800a514 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	431a      	orrs	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	0a5b      	lsrs	r3, r3, #9
 800a518:	f003 030f 	and.w	r3, r3, #15
 800a51c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a51e:	693b      	ldr	r3, [r7, #16]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b090      	sub	sp, #64	@ 0x40
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800a530:	2300      	movs	r3, #0
 800a532:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800a534:	f7f8 f860 	bl	80025f8 <HAL_GetTick>
 800a538:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4618      	mov	r0, r3
 800a540:	f002 fe53 	bl	800d1ea <SDMMC_GetPowerState>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d102      	bne.n	800a550 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a54a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800a54e:	e0b5      	b.n	800a6bc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a554:	2b03      	cmp	r3, #3
 800a556:	d02e      	beq.n	800a5b6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4618      	mov	r0, r3
 800a55e:	f003 f89e 	bl	800d69e <SDMMC_CmdSendCID>
 800a562:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a564:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a566:	2b00      	cmp	r3, #0
 800a568:	d001      	beq.n	800a56e <SD_InitCard+0x46>
    {
      return errorstate;
 800a56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a56c:	e0a6      	b.n	800a6bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2100      	movs	r1, #0
 800a574:	4618      	mov	r0, r3
 800a576:	f002 fe7e 	bl	800d276 <SDMMC_GetResponse>
 800a57a:	4602      	mov	r2, r0
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2104      	movs	r1, #4
 800a586:	4618      	mov	r0, r3
 800a588:	f002 fe75 	bl	800d276 <SDMMC_GetResponse>
 800a58c:	4602      	mov	r2, r0
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	2108      	movs	r1, #8
 800a598:	4618      	mov	r0, r3
 800a59a:	f002 fe6c 	bl	800d276 <SDMMC_GetResponse>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	210c      	movs	r1, #12
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f002 fe63 	bl	800d276 <SDMMC_GetResponse>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	d01d      	beq.n	800a5fa <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800a5be:	e019      	b.n	800a5f4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f107 020a 	add.w	r2, r7, #10
 800a5c8:	4611      	mov	r1, r2
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f003 f8a6 	bl	800d71c <SDMMC_CmdSetRelAdd>
 800a5d0:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800a5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d001      	beq.n	800a5dc <SD_InitCard+0xb4>
      {
        return errorstate;
 800a5d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5da:	e06f      	b.n	800a6bc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a5dc:	f7f8 f80c 	bl	80025f8 <HAL_GetTick>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	f241 3287 	movw	r2, #4999	@ 0x1387
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d902      	bls.n	800a5f4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800a5ee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a5f2:	e063      	b.n	800a6bc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800a5f4:	897b      	ldrh	r3, [r7, #10]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d0e2      	beq.n	800a5c0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5fe:	2b03      	cmp	r3, #3
 800a600:	d036      	beq.n	800a670 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a602:	897b      	ldrh	r3, [r7, #10]
 800a604:	461a      	mov	r2, r3
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a612:	041b      	lsls	r3, r3, #16
 800a614:	4619      	mov	r1, r3
 800a616:	4610      	mov	r0, r2
 800a618:	f003 f860 	bl	800d6dc <SDMMC_CmdSendCSD>
 800a61c:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800a61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <SD_InitCard+0x100>
    {
      return errorstate;
 800a624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a626:	e049      	b.n	800a6bc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2100      	movs	r1, #0
 800a62e:	4618      	mov	r0, r3
 800a630:	f002 fe21 	bl	800d276 <SDMMC_GetResponse>
 800a634:	4602      	mov	r2, r0
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2104      	movs	r1, #4
 800a640:	4618      	mov	r0, r3
 800a642:	f002 fe18 	bl	800d276 <SDMMC_GetResponse>
 800a646:	4602      	mov	r2, r0
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	2108      	movs	r1, #8
 800a652:	4618      	mov	r0, r3
 800a654:	f002 fe0f 	bl	800d276 <SDMMC_GetResponse>
 800a658:	4602      	mov	r2, r0
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	210c      	movs	r1, #12
 800a664:	4618      	mov	r0, r3
 800a666:	f002 fe06 	bl	800d276 <SDMMC_GetResponse>
 800a66a:	4602      	mov	r2, r0
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2104      	movs	r1, #4
 800a676:	4618      	mov	r0, r3
 800a678:	f002 fdfd 	bl	800d276 <SDMMC_GetResponse>
 800a67c:	4603      	mov	r3, r0
 800a67e:	0d1a      	lsrs	r2, r3, #20
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a684:	f107 030c 	add.w	r3, r7, #12
 800a688:	4619      	mov	r1, r3
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f7ff fb8c 	bl	8009da8 <HAL_SD_GetCardCSD>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d002      	beq.n	800a69c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a696:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a69a:	e00f      	b.n	800a6bc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681a      	ldr	r2, [r3, #0]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a6a4:	041b      	lsls	r3, r3, #16
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	4610      	mov	r0, r2
 800a6aa:	f002 ff0f 	bl	800d4cc <SDMMC_CmdSelDesel>
 800a6ae:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <SD_InitCard+0x192>
  {
    return errorstate;
 800a6b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b8:	e000      	b.n	800a6bc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a6ba:	2300      	movs	r3, #0
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3740      	adds	r7, #64	@ 0x40
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b086      	sub	sp, #24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f002 ff18 	bl	800d512 <SDMMC_CmdGoIdleState>
 800a6e2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <SD_PowerON+0x2a>
  {
    return errorstate;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	e072      	b.n	800a7d4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f002 ff2b 	bl	800d54e <SDMMC_CmdOperCond>
 800a6f8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a700:	d10d      	bne.n	800a71e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4618      	mov	r0, r3
 800a70e:	f002 ff00 	bl	800d512 <SDMMC_CmdGoIdleState>
 800a712:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d004      	beq.n	800a724 <SD_PowerON+0x60>
    {
      return errorstate;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	e05a      	b.n	800a7d4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2201      	movs	r2, #1
 800a722:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d137      	bne.n	800a79c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2100      	movs	r1, #0
 800a732:	4618      	mov	r0, r3
 800a734:	f002 ff2b 	bl	800d58e <SDMMC_CmdAppCommand>
 800a738:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d02d      	beq.n	800a79c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a740:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a744:	e046      	b.n	800a7d4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2100      	movs	r1, #0
 800a74c:	4618      	mov	r0, r3
 800a74e:	f002 ff1e 	bl	800d58e <SDMMC_CmdAppCommand>
 800a752:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d001      	beq.n	800a75e <SD_PowerON+0x9a>
    {
      return errorstate;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	e03a      	b.n	800a7d4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	491e      	ldr	r1, [pc, #120]	@ (800a7dc <SD_PowerON+0x118>)
 800a764:	4618      	mov	r0, r3
 800a766:	f002 ff35 	bl	800d5d4 <SDMMC_CmdAppOperCommand>
 800a76a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d002      	beq.n	800a778 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a772:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800a776:	e02d      	b.n	800a7d4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2100      	movs	r1, #0
 800a77e:	4618      	mov	r0, r3
 800a780:	f002 fd79 	bl	800d276 <SDMMC_GetResponse>
 800a784:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	0fdb      	lsrs	r3, r3, #31
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d101      	bne.n	800a792 <SD_PowerON+0xce>
 800a78e:	2301      	movs	r3, #1
 800a790:	e000      	b.n	800a794 <SD_PowerON+0xd0>
 800a792:	2300      	movs	r3, #0
 800a794:	613b      	str	r3, [r7, #16]

    count++;
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	3301      	adds	r3, #1
 800a79a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d802      	bhi.n	800a7ac <SD_PowerON+0xe8>
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d0cc      	beq.n	800a746 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d902      	bls.n	800a7bc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a7b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a7ba:	e00b      	b.n	800a7d4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d002      	beq.n	800a7d2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3718      	adds	r7, #24
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	c1100000 	.word	0xc1100000

0800a7e0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b08c      	sub	sp, #48	@ 0x30
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a7ea:	f7f7 ff05 	bl	80025f8 <HAL_GetTick>
 800a7ee:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2100      	movs	r1, #0
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f002 fd3b 	bl	800d276 <SDMMC_GetResponse>
 800a800:	4603      	mov	r3, r0
 800a802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a806:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a80a:	d102      	bne.n	800a812 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a80c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a810:	e0b0      	b.n	800a974 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	2140      	movs	r1, #64	@ 0x40
 800a818:	4618      	mov	r0, r3
 800a81a:	f002 fd6b 	bl	800d2f4 <SDMMC_CmdBlockLength>
 800a81e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a820:	6a3b      	ldr	r3, [r7, #32]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d005      	beq.n	800a832 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a82e:	6a3b      	ldr	r3, [r7, #32]
 800a830:	e0a0      	b.n	800a974 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a83a:	041b      	lsls	r3, r3, #16
 800a83c:	4619      	mov	r1, r3
 800a83e:	4610      	mov	r0, r2
 800a840:	f002 fea5 	bl	800d58e <SDMMC_CmdAppCommand>
 800a844:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d005      	beq.n	800a858 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a854:	6a3b      	ldr	r3, [r7, #32]
 800a856:	e08d      	b.n	800a974 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a858:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a85c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800a85e:	2340      	movs	r3, #64	@ 0x40
 800a860:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800a862:	2360      	movs	r3, #96	@ 0x60
 800a864:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a866:	2302      	movs	r3, #2
 800a868:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800a86e:	2301      	movs	r3, #1
 800a870:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f107 0208 	add.w	r2, r7, #8
 800a87a:	4611      	mov	r1, r2
 800a87c:	4618      	mov	r0, r3
 800a87e:	f002 fd0d 	bl	800d29c <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	4618      	mov	r0, r3
 800a888:	f002 ff8d 	bl	800d7a6 <SDMMC_CmdStatusRegister>
 800a88c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a88e:	6a3b      	ldr	r3, [r7, #32]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d02b      	beq.n	800a8ec <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800a89c:	6a3b      	ldr	r3, [r7, #32]
 800a89e:	e069      	b.n	800a974 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d013      	beq.n	800a8d6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8b2:	e00d      	b.n	800a8d0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f002 fc67 	bl	800d18c <SDMMC_ReadFIFO>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c2:	601a      	str	r2, [r3, #0]
        pData++;
 800a8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 800a8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8cc:	3301      	adds	r3, #1
 800a8ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8d2:	2b07      	cmp	r3, #7
 800a8d4:	d9ee      	bls.n	800a8b4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800a8d6:	f7f7 fe8f 	bl	80025f8 <HAL_GetTick>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a8e4:	d102      	bne.n	800a8ec <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a8e6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a8ea:	e043      	b.n	800a974 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8f2:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d0d2      	beq.n	800a8a0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a900:	f003 0308 	and.w	r3, r3, #8
 800a904:	2b00      	cmp	r3, #0
 800a906:	d001      	beq.n	800a90c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a908:	2308      	movs	r3, #8
 800a90a:	e033      	b.n	800a974 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a912:	f003 0302 	and.w	r3, r3, #2
 800a916:	2b00      	cmp	r3, #0
 800a918:	d001      	beq.n	800a91e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a91a:	2302      	movs	r3, #2
 800a91c:	e02a      	b.n	800a974 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a924:	f003 0320 	and.w	r3, r3, #32
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d017      	beq.n	800a95c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800a92c:	2320      	movs	r3, #32
 800a92e:	e021      	b.n	800a974 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4618      	mov	r0, r3
 800a936:	f002 fc29 	bl	800d18c <SDMMC_ReadFIFO>
 800a93a:	4602      	mov	r2, r0
 800a93c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a93e:	601a      	str	r2, [r3, #0]
    pData++;
 800a940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a942:	3304      	adds	r3, #4
 800a944:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800a946:	f7f7 fe57 	bl	80025f8 <HAL_GetTick>
 800a94a:	4602      	mov	r2, r0
 800a94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94e:	1ad3      	subs	r3, r2, r3
 800a950:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a954:	d102      	bne.n	800a95c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a956:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800a95a:	e00b      	b.n	800a974 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a962:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a966:	2b00      	cmp	r3, #0
 800a968:	d1e2      	bne.n	800a930 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a03      	ldr	r2, [pc, #12]	@ (800a97c <SD_SendSDStatus+0x19c>)
 800a970:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3730      	adds	r7, #48	@ 0x30
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	18000f3a 	.word	0x18000f3a

0800a980 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b084      	sub	sp, #16
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d102      	bne.n	800a996 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a990:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a994:	e018      	b.n	800a9c8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a99e:	041b      	lsls	r3, r3, #16
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	4610      	mov	r0, r2
 800a9a4:	f002 fedc 	bl	800d760 <SDMMC_CmdSendStatus>
 800a9a8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	e009      	b.n	800a9c8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2100      	movs	r1, #0
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f002 fc5b 	bl	800d276 <SDMMC_GetResponse>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800a9d8:	2300      	movs	r3, #0
 800a9da:	60fb      	str	r3, [r7, #12]
 800a9dc:	2300      	movs	r3, #0
 800a9de:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f002 fc45 	bl	800d276 <SDMMC_GetResponse>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a9f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a9f6:	d102      	bne.n	800a9fe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a9f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a9fc:	e02f      	b.n	800aa5e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a9fe:	f107 030c 	add.w	r3, r7, #12
 800aa02:	4619      	mov	r1, r3
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f000 f879 	bl	800aafc <SD_FindSCR>
 800aa0a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	e023      	b.n	800aa5e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d01c      	beq.n	800aa5a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa28:	041b      	lsls	r3, r3, #16
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4610      	mov	r0, r2
 800aa2e:	f002 fdae 	bl	800d58e <SDMMC_CmdAppCommand>
 800aa32:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	e00f      	b.n	800aa5e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2102      	movs	r1, #2
 800aa44:	4618      	mov	r0, r3
 800aa46:	f002 fde5 	bl	800d614 <SDMMC_CmdBusWidth>
 800aa4a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d001      	beq.n	800aa56 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	e003      	b.n	800aa5e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aa56:	2300      	movs	r3, #0
 800aa58:	e001      	b.n	800aa5e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa5a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3718      	adds	r7, #24
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b086      	sub	sp, #24
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800aa6e:	2300      	movs	r3, #0
 800aa70:	60fb      	str	r3, [r7, #12]
 800aa72:	2300      	movs	r3, #0
 800aa74:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f002 fbfa 	bl	800d276 <SDMMC_GetResponse>
 800aa82:	4603      	mov	r3, r0
 800aa84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aa8c:	d102      	bne.n	800aa94 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800aa8e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800aa92:	e02f      	b.n	800aaf4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800aa94:	f107 030c 	add.w	r3, r7, #12
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f82e 	bl	800aafc <SD_FindSCR>
 800aaa0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d001      	beq.n	800aaac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	e023      	b.n	800aaf4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d01c      	beq.n	800aaf0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681a      	ldr	r2, [r3, #0]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aabe:	041b      	lsls	r3, r3, #16
 800aac0:	4619      	mov	r1, r3
 800aac2:	4610      	mov	r0, r2
 800aac4:	f002 fd63 	bl	800d58e <SDMMC_CmdAppCommand>
 800aac8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d001      	beq.n	800aad4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	e00f      	b.n	800aaf4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2100      	movs	r1, #0
 800aada:	4618      	mov	r0, r3
 800aadc:	f002 fd9a 	bl	800d614 <SDMMC_CmdBusWidth>
 800aae0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d001      	beq.n	800aaec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	e003      	b.n	800aaf4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800aaec:	2300      	movs	r3, #0
 800aaee:	e001      	b.n	800aaf4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aaf0:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3718      	adds	r7, #24
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b08e      	sub	sp, #56	@ 0x38
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ab06:	f7f7 fd77 	bl	80025f8 <HAL_GetTick>
 800ab0a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ab10:	2300      	movs	r3, #0
 800ab12:	60bb      	str	r3, [r7, #8]
 800ab14:	2300      	movs	r3, #0
 800ab16:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2108      	movs	r1, #8
 800ab22:	4618      	mov	r0, r3
 800ab24:	f002 fbe6 	bl	800d2f4 <SDMMC_CmdBlockLength>
 800ab28:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ab30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab32:	e0ad      	b.n	800ac90 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681a      	ldr	r2, [r3, #0]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab3c:	041b      	lsls	r3, r3, #16
 800ab3e:	4619      	mov	r1, r3
 800ab40:	4610      	mov	r0, r2
 800ab42:	f002 fd24 	bl	800d58e <SDMMC_CmdAppCommand>
 800ab46:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d001      	beq.n	800ab52 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ab4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab50:	e09e      	b.n	800ac90 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ab52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab56:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ab58:	2308      	movs	r3, #8
 800ab5a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ab5c:	2330      	movs	r3, #48	@ 0x30
 800ab5e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ab60:	2302      	movs	r3, #2
 800ab62:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ab68:	2301      	movs	r3, #1
 800ab6a:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f107 0210 	add.w	r2, r7, #16
 800ab74:	4611      	mov	r1, r2
 800ab76:	4618      	mov	r0, r3
 800ab78:	f002 fb90 	bl	800d29c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4618      	mov	r0, r3
 800ab82:	f002 fd6a 	bl	800d65a <SDMMC_CmdSendSCR>
 800ab86:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ab88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d027      	beq.n	800abde <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ab8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab90:	e07e      	b.n	800ac90 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d113      	bne.n	800abc8 <SD_FindSCR+0xcc>
 800aba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d110      	bne.n	800abc8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4618      	mov	r0, r3
 800abac:	f002 faee 	bl	800d18c <SDMMC_ReadFIFO>
 800abb0:	4603      	mov	r3, r0
 800abb2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4618      	mov	r0, r3
 800abba:	f002 fae7 	bl	800d18c <SDMMC_ReadFIFO>
 800abbe:	4603      	mov	r3, r0
 800abc0:	60fb      	str	r3, [r7, #12]
      index++;
 800abc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abc4:	3301      	adds	r3, #1
 800abc6:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800abc8:	f7f7 fd16 	bl	80025f8 <HAL_GetTick>
 800abcc:	4602      	mov	r2, r0
 800abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd0:	1ad3      	subs	r3, r2, r3
 800abd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abd6:	d102      	bne.n	800abde <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800abd8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800abdc:	e058      	b.n	800ac90 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800abe4:	f240 532a 	movw	r3, #1322	@ 0x52a
 800abe8:	4013      	ands	r3, r2
 800abea:	2b00      	cmp	r3, #0
 800abec:	d0d1      	beq.n	800ab92 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abf4:	f003 0308 	and.w	r3, r3, #8
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d005      	beq.n	800ac08 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2208      	movs	r2, #8
 800ac02:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ac04:	2308      	movs	r3, #8
 800ac06:	e043      	b.n	800ac90 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac0e:	f003 0302 	and.w	r3, r3, #2
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d005      	beq.n	800ac22 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2202      	movs	r2, #2
 800ac1c:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac1e:	2302      	movs	r3, #2
 800ac20:	e036      	b.n	800ac90 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac28:	f003 0320 	and.w	r3, r3, #32
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d005      	beq.n	800ac3c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2220      	movs	r2, #32
 800ac36:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ac38:	2320      	movs	r3, #32
 800ac3a:	e029      	b.n	800ac90 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	4a15      	ldr	r2, [pc, #84]	@ (800ac98 <SD_FindSCR+0x19c>)
 800ac42:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	061a      	lsls	r2, r3, #24
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	021b      	lsls	r3, r3, #8
 800ac4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ac50:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	0a1b      	lsrs	r3, r3, #8
 800ac56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800ac5a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	0e1b      	lsrs	r3, r3, #24
 800ac60:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 800ac62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac64:	601a      	str	r2, [r3, #0]
    scr++;
 800ac66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac68:	3304      	adds	r3, #4
 800ac6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	061a      	lsls	r2, r3, #24
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	021b      	lsls	r3, r3, #8
 800ac74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ac78:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	0a1b      	lsrs	r3, r3, #8
 800ac7e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800ac82:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	0e1b      	lsrs	r3, r3, #24
 800ac88:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 800ac8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac8c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3738      	adds	r7, #56	@ 0x38
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	18000f3a 	.word	0x18000f3a

0800ac9c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	e10f      	b.n	800aece <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a87      	ldr	r2, [pc, #540]	@ (800aed8 <HAL_SPI_Init+0x23c>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d00f      	beq.n	800acde <HAL_SPI_Init+0x42>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a86      	ldr	r2, [pc, #536]	@ (800aedc <HAL_SPI_Init+0x240>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d00a      	beq.n	800acde <HAL_SPI_Init+0x42>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a84      	ldr	r2, [pc, #528]	@ (800aee0 <HAL_SPI_Init+0x244>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d005      	beq.n	800acde <HAL_SPI_Init+0x42>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	2b0f      	cmp	r3, #15
 800acd8:	d901      	bls.n	800acde <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e0f7      	b.n	800aece <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 fbbc 	bl	800b45c <SPI_GetPacketSize>
 800ace4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a7b      	ldr	r2, [pc, #492]	@ (800aed8 <HAL_SPI_Init+0x23c>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d00c      	beq.n	800ad0a <HAL_SPI_Init+0x6e>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a79      	ldr	r2, [pc, #484]	@ (800aedc <HAL_SPI_Init+0x240>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d007      	beq.n	800ad0a <HAL_SPI_Init+0x6e>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	4a78      	ldr	r2, [pc, #480]	@ (800aee0 <HAL_SPI_Init+0x244>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d002      	beq.n	800ad0a <HAL_SPI_Init+0x6e>
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2b08      	cmp	r3, #8
 800ad08:	d811      	bhi.n	800ad2e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ad0e:	4a72      	ldr	r2, [pc, #456]	@ (800aed8 <HAL_SPI_Init+0x23c>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d009      	beq.n	800ad28 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a70      	ldr	r2, [pc, #448]	@ (800aedc <HAL_SPI_Init+0x240>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d004      	beq.n	800ad28 <HAL_SPI_Init+0x8c>
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a6f      	ldr	r2, [pc, #444]	@ (800aee0 <HAL_SPI_Init+0x244>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d104      	bne.n	800ad32 <HAL_SPI_Init+0x96>
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2b10      	cmp	r3, #16
 800ad2c:	d901      	bls.n	800ad32 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e0cd      	b.n	800aece <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d106      	bne.n	800ad4c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7f7 f908 	bl	8001f5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2202      	movs	r2, #2
 800ad50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	681a      	ldr	r2, [r3, #0]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f022 0201 	bic.w	r2, r2, #1
 800ad62:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	689b      	ldr	r3, [r3, #8]
 800ad6a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800ad6e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	699b      	ldr	r3, [r3, #24]
 800ad74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ad78:	d119      	bne.n	800adae <HAL_SPI_Init+0x112>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad82:	d103      	bne.n	800ad8c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d008      	beq.n	800ad9e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d10c      	bne.n	800adae <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ad98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad9c:	d107      	bne.n	800adae <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800adac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00f      	beq.n	800adda <HAL_SPI_Init+0x13e>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	2b06      	cmp	r3, #6
 800adc0:	d90b      	bls.n	800adda <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	430a      	orrs	r2, r1
 800add6:	601a      	str	r2, [r3, #0]
 800add8:	e007      	b.n	800adea <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	681a      	ldr	r2, [r3, #0]
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ade8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	69da      	ldr	r2, [r3, #28]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adf2:	431a      	orrs	r2, r3
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	431a      	orrs	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adfc:	ea42 0103 	orr.w	r1, r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	68da      	ldr	r2, [r3, #12]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	430a      	orrs	r2, r1
 800ae0a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae14:	431a      	orrs	r2, r3
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae1a:	431a      	orrs	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	699b      	ldr	r3, [r3, #24]
 800ae20:	431a      	orrs	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	431a      	orrs	r2, r3
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	431a      	orrs	r2, r3
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	431a      	orrs	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	431a      	orrs	r2, r3
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae3e:	431a      	orrs	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	431a      	orrs	r2, r3
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ae4a:	ea42 0103 	orr.w	r1, r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	430a      	orrs	r2, r1
 800ae58:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d113      	bne.n	800ae8a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	689b      	ldr	r3, [r3, #8]
 800ae68:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae74:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	689b      	ldr	r3, [r3, #8]
 800ae7c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ae88:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f022 0201 	bic.w	r2, r2, #1
 800ae98:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00a      	beq.n	800aebc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	430a      	orrs	r2, r1
 800aeba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3710      	adds	r7, #16
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	40013000 	.word	0x40013000
 800aedc:	40003800 	.word	0x40003800
 800aee0:	40003c00 	.word	0x40003c00

0800aee4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af02      	add	r7, sp, #8
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	603b      	str	r3, [r7, #0]
 800aef0:	4613      	mov	r3, r2
 800aef2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	3320      	adds	r3, #32
 800aefa:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aefc:	f7f7 fb7c 	bl	80025f8 <HAL_GetTick>
 800af00:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d001      	beq.n	800af12 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800af0e:	2302      	movs	r3, #2
 800af10:	e1d1      	b.n	800b2b6 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d002      	beq.n	800af1e <HAL_SPI_Transmit+0x3a>
 800af18:	88fb      	ldrh	r3, [r7, #6]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d101      	bne.n	800af22 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	e1c9      	b.n	800b2b6 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d101      	bne.n	800af30 <HAL_SPI_Transmit+0x4c>
 800af2c:	2302      	movs	r3, #2
 800af2e:	e1c2      	b.n	800b2b6 <HAL_SPI_Transmit+0x3d2>
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2203      	movs	r2, #3
 800af3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	88fa      	ldrh	r2, [r7, #6]
 800af52:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	88fa      	ldrh	r2, [r7, #6]
 800af5a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	2200      	movs	r2, #0
 800af62:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2200      	movs	r2, #0
 800af68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2200      	movs	r2, #0
 800af70:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800af88:	d108      	bne.n	800af9c <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	681a      	ldr	r2, [r3, #0]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af98:	601a      	str	r2, [r3, #0]
 800af9a:	e009      	b.n	800afb0 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800afae:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	685a      	ldr	r2, [r3, #4]
 800afb6:	4b96      	ldr	r3, [pc, #600]	@ (800b210 <HAL_SPI_Transmit+0x32c>)
 800afb8:	4013      	ands	r3, r2
 800afba:	88f9      	ldrh	r1, [r7, #6]
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	6812      	ldr	r2, [r2, #0]
 800afc0:	430b      	orrs	r3, r1
 800afc2:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f042 0201 	orr.w	r2, r2, #1
 800afd2:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800afdc:	d107      	bne.n	800afee <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	2b0f      	cmp	r3, #15
 800aff4:	d947      	bls.n	800b086 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800aff6:	e03f      	b.n	800b078 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	695b      	ldr	r3, [r3, #20]
 800affe:	f003 0302 	and.w	r3, r3, #2
 800b002:	2b02      	cmp	r3, #2
 800b004:	d114      	bne.n	800b030 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6812      	ldr	r2, [r2, #0]
 800b010:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b016:	1d1a      	adds	r2, r3, #4
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b022:	b29b      	uxth	r3, r3
 800b024:	3b01      	subs	r3, #1
 800b026:	b29a      	uxth	r2, r3
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b02e:	e023      	b.n	800b078 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b030:	f7f7 fae2 	bl	80025f8 <HAL_GetTick>
 800b034:	4602      	mov	r2, r0
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	683a      	ldr	r2, [r7, #0]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d803      	bhi.n	800b048 <HAL_SPI_Transmit+0x164>
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b046:	d102      	bne.n	800b04e <HAL_SPI_Transmit+0x16a>
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d114      	bne.n	800b078 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f000 f936 	bl	800b2c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b05a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	2201      	movs	r2, #1
 800b068:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2200      	movs	r2, #0
 800b070:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b074:	2303      	movs	r3, #3
 800b076:	e11e      	b.n	800b2b6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b07e:	b29b      	uxth	r3, r3
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1b9      	bne.n	800aff8 <HAL_SPI_Transmit+0x114>
 800b084:	e0f1      	b.n	800b26a <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	68db      	ldr	r3, [r3, #12]
 800b08a:	2b07      	cmp	r3, #7
 800b08c:	f240 80e6 	bls.w	800b25c <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800b090:	e05d      	b.n	800b14e <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	695b      	ldr	r3, [r3, #20]
 800b098:	f003 0302 	and.w	r3, r3, #2
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d132      	bne.n	800b106 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d918      	bls.n	800b0de <HAL_SPI_Transmit+0x1fa>
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d014      	beq.n	800b0de <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	6812      	ldr	r2, [r2, #0]
 800b0be:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0c4:	1d1a      	adds	r2, r3, #4
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	3b02      	subs	r3, #2
 800b0d4:	b29a      	uxth	r2, r3
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b0dc:	e037      	b.n	800b14e <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0e2:	881a      	ldrh	r2, [r3, #0]
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0ec:	1c9a      	adds	r2, r3, #2
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b104:	e023      	b.n	800b14e <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b106:	f7f7 fa77 	bl	80025f8 <HAL_GetTick>
 800b10a:	4602      	mov	r2, r0
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	1ad3      	subs	r3, r2, r3
 800b110:	683a      	ldr	r2, [r7, #0]
 800b112:	429a      	cmp	r2, r3
 800b114:	d803      	bhi.n	800b11e <HAL_SPI_Transmit+0x23a>
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b11c:	d102      	bne.n	800b124 <HAL_SPI_Transmit+0x240>
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d114      	bne.n	800b14e <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f000 f8cb 	bl	800b2c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b130:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2201      	movs	r2, #1
 800b13e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2200      	movs	r2, #0
 800b146:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b14a:	2303      	movs	r3, #3
 800b14c:	e0b3      	b.n	800b2b6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b154:	b29b      	uxth	r3, r3
 800b156:	2b00      	cmp	r3, #0
 800b158:	d19b      	bne.n	800b092 <HAL_SPI_Transmit+0x1ae>
 800b15a:	e086      	b.n	800b26a <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	f003 0302 	and.w	r3, r3, #2
 800b166:	2b02      	cmp	r3, #2
 800b168:	d154      	bne.n	800b214 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b170:	b29b      	uxth	r3, r3
 800b172:	2b03      	cmp	r3, #3
 800b174:	d918      	bls.n	800b1a8 <HAL_SPI_Transmit+0x2c4>
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b17a:	2b40      	cmp	r3, #64	@ 0x40
 800b17c:	d914      	bls.n	800b1a8 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	6812      	ldr	r2, [r2, #0]
 800b188:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b18e:	1d1a      	adds	r2, r3, #4
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	3b04      	subs	r3, #4
 800b19e:	b29a      	uxth	r2, r3
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b1a6:	e059      	b.n	800b25c <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d917      	bls.n	800b1e4 <HAL_SPI_Transmit+0x300>
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d013      	beq.n	800b1e4 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1c0:	881a      	ldrh	r2, [r3, #0]
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1ca:	1c9a      	adds	r2, r3, #2
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	3b02      	subs	r3, #2
 800b1da:	b29a      	uxth	r2, r3
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b1e2:	e03b      	b.n	800b25c <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	3320      	adds	r3, #32
 800b1ee:	7812      	ldrb	r2, [r2, #0]
 800b1f0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1f6:	1c5a      	adds	r2, r3, #1
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b202:	b29b      	uxth	r3, r3
 800b204:	3b01      	subs	r3, #1
 800b206:	b29a      	uxth	r2, r3
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800b20e:	e025      	b.n	800b25c <HAL_SPI_Transmit+0x378>
 800b210:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b214:	f7f7 f9f0 	bl	80025f8 <HAL_GetTick>
 800b218:	4602      	mov	r2, r0
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	1ad3      	subs	r3, r2, r3
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	429a      	cmp	r2, r3
 800b222:	d803      	bhi.n	800b22c <HAL_SPI_Transmit+0x348>
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b22a:	d102      	bne.n	800b232 <HAL_SPI_Transmit+0x34e>
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d114      	bne.n	800b25c <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800b232:	68f8      	ldr	r0, [r7, #12]
 800b234:	f000 f844 	bl	800b2c0 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b23e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800b258:	2303      	movs	r3, #3
 800b25a:	e02c      	b.n	800b2b6 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800b262:	b29b      	uxth	r3, r3
 800b264:	2b00      	cmp	r3, #0
 800b266:	f47f af79 	bne.w	800b15c <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	2200      	movs	r2, #0
 800b272:	2108      	movs	r1, #8
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f000 f8c3 	bl	800b400 <SPI_WaitOnFlagUntilTimeout>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d007      	beq.n	800b290 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b286:	f043 0220 	orr.w	r2, r3, #32
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f000 f815 	bl	800b2c0 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2201      	movs	r2, #1
 800b29a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d001      	beq.n	800b2b4 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e000      	b.n	800b2b6 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
  }
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3718      	adds	r7, #24
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop

0800b2c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b085      	sub	sp, #20
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	695b      	ldr	r3, [r3, #20]
 800b2ce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	699a      	ldr	r2, [r3, #24]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f042 0208 	orr.w	r2, r2, #8
 800b2de:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	699a      	ldr	r2, [r3, #24]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f042 0210 	orr.w	r2, r2, #16
 800b2ee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f022 0201 	bic.w	r2, r2, #1
 800b2fe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	6919      	ldr	r1, [r3, #16]
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	4b3c      	ldr	r3, [pc, #240]	@ (800b3fc <SPI_CloseTransfer+0x13c>)
 800b30c:	400b      	ands	r3, r1
 800b30e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	689a      	ldr	r2, [r3, #8]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b31e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b326:	b2db      	uxtb	r3, r3
 800b328:	2b04      	cmp	r3, #4
 800b32a:	d014      	beq.n	800b356 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	f003 0320 	and.w	r3, r3, #32
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00f      	beq.n	800b356 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b33c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	699a      	ldr	r2, [r3, #24]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f042 0220 	orr.w	r2, r2, #32
 800b354:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	2b03      	cmp	r3, #3
 800b360:	d014      	beq.n	800b38c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d00f      	beq.n	800b38c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b372:	f043 0204 	orr.w	r2, r3, #4
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	699a      	ldr	r2, [r3, #24]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b38a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00f      	beq.n	800b3b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b39c:	f043 0201 	orr.w	r2, r3, #1
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	699a      	ldr	r2, [r3, #24]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b3b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00f      	beq.n	800b3e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b3c6:	f043 0208 	orr.w	r2, r3, #8
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	699a      	ldr	r2, [r3, #24]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b3de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b3f0:	bf00      	nop
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	fffffc90 	.word	0xfffffc90

0800b400 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b084      	sub	sp, #16
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	603b      	str	r3, [r7, #0]
 800b40c:	4613      	mov	r3, r2
 800b40e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b410:	e010      	b.n	800b434 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b412:	f7f7 f8f1 	bl	80025f8 <HAL_GetTick>
 800b416:	4602      	mov	r2, r0
 800b418:	69bb      	ldr	r3, [r7, #24]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	683a      	ldr	r2, [r7, #0]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d803      	bhi.n	800b42a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b428:	d102      	bne.n	800b430 <SPI_WaitOnFlagUntilTimeout+0x30>
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d101      	bne.n	800b434 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b430:	2303      	movs	r3, #3
 800b432:	e00f      	b.n	800b454 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	695a      	ldr	r2, [r3, #20]
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	4013      	ands	r3, r2
 800b43e:	68ba      	ldr	r2, [r7, #8]
 800b440:	429a      	cmp	r2, r3
 800b442:	bf0c      	ite	eq
 800b444:	2301      	moveq	r3, #1
 800b446:	2300      	movne	r3, #0
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	461a      	mov	r2, r3
 800b44c:	79fb      	ldrb	r3, [r7, #7]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d0df      	beq.n	800b412 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b452:	2300      	movs	r3, #0
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b468:	095b      	lsrs	r3, r3, #5
 800b46a:	3301      	adds	r3, #1
 800b46c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	68db      	ldr	r3, [r3, #12]
 800b472:	3301      	adds	r3, #1
 800b474:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b476:	68bb      	ldr	r3, [r7, #8]
 800b478:	3307      	adds	r3, #7
 800b47a:	08db      	lsrs	r3, r3, #3
 800b47c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	fb02 f303 	mul.w	r3, r2, r3
}
 800b486:	4618      	mov	r0, r3
 800b488:	3714      	adds	r7, #20
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr

0800b492 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b082      	sub	sp, #8
 800b496:	af00      	add	r7, sp, #0
 800b498:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d101      	bne.n	800b4a4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	e049      	b.n	800b538 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d106      	bne.n	800b4be <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f7f6 fdb9 	bl	8002030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2202      	movs	r2, #2
 800b4c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	4610      	mov	r0, r2
 800b4d2:	f000 fad5 	bl	800ba80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2201      	movs	r2, #1
 800b4da:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2201      	movs	r2, #1
 800b4f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2201      	movs	r2, #1
 800b502:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2201      	movs	r2, #1
 800b50a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2201      	movs	r2, #1
 800b512:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2201      	movs	r2, #1
 800b51a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2201      	movs	r2, #1
 800b522:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2201      	movs	r2, #1
 800b52a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3708      	adds	r7, #8
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	2b01      	cmp	r3, #1
 800b552:	d001      	beq.n	800b558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	e054      	b.n	800b602 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2202      	movs	r2, #2
 800b55c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	68da      	ldr	r2, [r3, #12]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f042 0201 	orr.w	r2, r2, #1
 800b56e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	4a26      	ldr	r2, [pc, #152]	@ (800b610 <HAL_TIM_Base_Start_IT+0xd0>)
 800b576:	4293      	cmp	r3, r2
 800b578:	d022      	beq.n	800b5c0 <HAL_TIM_Base_Start_IT+0x80>
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b582:	d01d      	beq.n	800b5c0 <HAL_TIM_Base_Start_IT+0x80>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	4a22      	ldr	r2, [pc, #136]	@ (800b614 <HAL_TIM_Base_Start_IT+0xd4>)
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d018      	beq.n	800b5c0 <HAL_TIM_Base_Start_IT+0x80>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	4a21      	ldr	r2, [pc, #132]	@ (800b618 <HAL_TIM_Base_Start_IT+0xd8>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d013      	beq.n	800b5c0 <HAL_TIM_Base_Start_IT+0x80>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4a1f      	ldr	r2, [pc, #124]	@ (800b61c <HAL_TIM_Base_Start_IT+0xdc>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d00e      	beq.n	800b5c0 <HAL_TIM_Base_Start_IT+0x80>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a1e      	ldr	r2, [pc, #120]	@ (800b620 <HAL_TIM_Base_Start_IT+0xe0>)
 800b5a8:	4293      	cmp	r3, r2
 800b5aa:	d009      	beq.n	800b5c0 <HAL_TIM_Base_Start_IT+0x80>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	4a1c      	ldr	r2, [pc, #112]	@ (800b624 <HAL_TIM_Base_Start_IT+0xe4>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d004      	beq.n	800b5c0 <HAL_TIM_Base_Start_IT+0x80>
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4a1b      	ldr	r2, [pc, #108]	@ (800b628 <HAL_TIM_Base_Start_IT+0xe8>)
 800b5bc:	4293      	cmp	r3, r2
 800b5be:	d115      	bne.n	800b5ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	689a      	ldr	r2, [r3, #8]
 800b5c6:	4b19      	ldr	r3, [pc, #100]	@ (800b62c <HAL_TIM_Base_Start_IT+0xec>)
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2b06      	cmp	r3, #6
 800b5d0:	d015      	beq.n	800b5fe <HAL_TIM_Base_Start_IT+0xbe>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5d8:	d011      	beq.n	800b5fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f042 0201 	orr.w	r2, r2, #1
 800b5e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5ea:	e008      	b.n	800b5fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f042 0201 	orr.w	r2, r2, #1
 800b5fa:	601a      	str	r2, [r3, #0]
 800b5fc:	e000      	b.n	800b600 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b600:	2300      	movs	r3, #0
}
 800b602:	4618      	mov	r0, r3
 800b604:	3714      	adds	r7, #20
 800b606:	46bd      	mov	sp, r7
 800b608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	40010000 	.word	0x40010000
 800b614:	40000400 	.word	0x40000400
 800b618:	40000800 	.word	0x40000800
 800b61c:	40000c00 	.word	0x40000c00
 800b620:	40010400 	.word	0x40010400
 800b624:	40001800 	.word	0x40001800
 800b628:	40014000 	.word	0x40014000
 800b62c:	00010007 	.word	0x00010007

0800b630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	f003 0302 	and.w	r3, r3, #2
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d020      	beq.n	800b694 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	f003 0302 	and.w	r3, r3, #2
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d01b      	beq.n	800b694 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f06f 0202 	mvn.w	r2, #2
 800b664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	699b      	ldr	r3, [r3, #24]
 800b672:	f003 0303 	and.w	r3, r3, #3
 800b676:	2b00      	cmp	r3, #0
 800b678:	d003      	beq.n	800b682 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f000 f9e2 	bl	800ba44 <HAL_TIM_IC_CaptureCallback>
 800b680:	e005      	b.n	800b68e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f9d4 	bl	800ba30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f000 f9e5 	bl	800ba58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	f003 0304 	and.w	r3, r3, #4
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d020      	beq.n	800b6e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f003 0304 	and.w	r3, r3, #4
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d01b      	beq.n	800b6e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f06f 0204 	mvn.w	r2, #4
 800b6b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2202      	movs	r2, #2
 800b6b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	699b      	ldr	r3, [r3, #24]
 800b6be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d003      	beq.n	800b6ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 f9bc 	bl	800ba44 <HAL_TIM_IC_CaptureCallback>
 800b6cc:	e005      	b.n	800b6da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f9ae 	bl	800ba30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f9bf 	bl	800ba58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	f003 0308 	and.w	r3, r3, #8
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d020      	beq.n	800b72c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f003 0308 	and.w	r3, r3, #8
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d01b      	beq.n	800b72c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f06f 0208 	mvn.w	r2, #8
 800b6fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2204      	movs	r2, #4
 800b702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	69db      	ldr	r3, [r3, #28]
 800b70a:	f003 0303 	and.w	r3, r3, #3
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d003      	beq.n	800b71a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 f996 	bl	800ba44 <HAL_TIM_IC_CaptureCallback>
 800b718:	e005      	b.n	800b726 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 f988 	bl	800ba30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f999 	bl	800ba58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	f003 0310 	and.w	r3, r3, #16
 800b732:	2b00      	cmp	r3, #0
 800b734:	d020      	beq.n	800b778 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f003 0310 	and.w	r3, r3, #16
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d01b      	beq.n	800b778 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f06f 0210 	mvn.w	r2, #16
 800b748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	2208      	movs	r2, #8
 800b74e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	69db      	ldr	r3, [r3, #28]
 800b756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d003      	beq.n	800b766 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f000 f970 	bl	800ba44 <HAL_TIM_IC_CaptureCallback>
 800b764:	e005      	b.n	800b772 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 f962 	bl	800ba30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 f973 	bl	800ba58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2200      	movs	r2, #0
 800b776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	f003 0301 	and.w	r3, r3, #1
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00c      	beq.n	800b79c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f003 0301 	and.w	r3, r3, #1
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d007      	beq.n	800b79c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f06f 0201 	mvn.w	r2, #1
 800b794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f7f6 f8fa 	bl	8001990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d104      	bne.n	800b7b0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d00c      	beq.n	800b7ca <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d007      	beq.n	800b7ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b7c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b7c4:	6878      	ldr	r0, [r7, #4]
 800b7c6:	f000 fb31 	bl	800be2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00c      	beq.n	800b7ee <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d007      	beq.n	800b7ee <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b7e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fb29 	bl	800be40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00c      	beq.n	800b812 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d007      	beq.n	800b812 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b80a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 f92d 	bl	800ba6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	f003 0320 	and.w	r3, r3, #32
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00c      	beq.n	800b836 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f003 0320 	and.w	r3, r3, #32
 800b822:	2b00      	cmp	r3, #0
 800b824:	d007      	beq.n	800b836 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f06f 0220 	mvn.w	r2, #32
 800b82e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 faf1 	bl	800be18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b836:	bf00      	nop
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
	...

0800b840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b84a:	2300      	movs	r3, #0
 800b84c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b854:	2b01      	cmp	r3, #1
 800b856:	d101      	bne.n	800b85c <HAL_TIM_ConfigClockSource+0x1c>
 800b858:	2302      	movs	r3, #2
 800b85a:	e0dc      	b.n	800ba16 <HAL_TIM_ConfigClockSource+0x1d6>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2202      	movs	r2, #2
 800b868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b874:	68ba      	ldr	r2, [r7, #8]
 800b876:	4b6a      	ldr	r3, [pc, #424]	@ (800ba20 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b878:	4013      	ands	r3, r2
 800b87a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	68ba      	ldr	r2, [r7, #8]
 800b88a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a64      	ldr	r2, [pc, #400]	@ (800ba24 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b892:	4293      	cmp	r3, r2
 800b894:	f000 80a9 	beq.w	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b898:	4a62      	ldr	r2, [pc, #392]	@ (800ba24 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b89a:	4293      	cmp	r3, r2
 800b89c:	f200 80ae 	bhi.w	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b8a0:	4a61      	ldr	r2, [pc, #388]	@ (800ba28 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	f000 80a1 	beq.w	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b8a8:	4a5f      	ldr	r2, [pc, #380]	@ (800ba28 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	f200 80a6 	bhi.w	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b8b0:	4a5e      	ldr	r2, [pc, #376]	@ (800ba2c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	f000 8099 	beq.w	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b8b8:	4a5c      	ldr	r2, [pc, #368]	@ (800ba2c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	f200 809e 	bhi.w	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b8c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b8c4:	f000 8091 	beq.w	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b8c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b8cc:	f200 8096 	bhi.w	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b8d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b8d4:	f000 8089 	beq.w	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b8d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b8dc:	f200 808e 	bhi.w	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b8e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b8e4:	d03e      	beq.n	800b964 <HAL_TIM_ConfigClockSource+0x124>
 800b8e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b8ea:	f200 8087 	bhi.w	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b8ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8f2:	f000 8086 	beq.w	800ba02 <HAL_TIM_ConfigClockSource+0x1c2>
 800b8f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b8fa:	d87f      	bhi.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b8fc:	2b70      	cmp	r3, #112	@ 0x70
 800b8fe:	d01a      	beq.n	800b936 <HAL_TIM_ConfigClockSource+0xf6>
 800b900:	2b70      	cmp	r3, #112	@ 0x70
 800b902:	d87b      	bhi.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b904:	2b60      	cmp	r3, #96	@ 0x60
 800b906:	d050      	beq.n	800b9aa <HAL_TIM_ConfigClockSource+0x16a>
 800b908:	2b60      	cmp	r3, #96	@ 0x60
 800b90a:	d877      	bhi.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b90c:	2b50      	cmp	r3, #80	@ 0x50
 800b90e:	d03c      	beq.n	800b98a <HAL_TIM_ConfigClockSource+0x14a>
 800b910:	2b50      	cmp	r3, #80	@ 0x50
 800b912:	d873      	bhi.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b914:	2b40      	cmp	r3, #64	@ 0x40
 800b916:	d058      	beq.n	800b9ca <HAL_TIM_ConfigClockSource+0x18a>
 800b918:	2b40      	cmp	r3, #64	@ 0x40
 800b91a:	d86f      	bhi.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b91c:	2b30      	cmp	r3, #48	@ 0x30
 800b91e:	d064      	beq.n	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b920:	2b30      	cmp	r3, #48	@ 0x30
 800b922:	d86b      	bhi.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b924:	2b20      	cmp	r3, #32
 800b926:	d060      	beq.n	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b928:	2b20      	cmp	r3, #32
 800b92a:	d867      	bhi.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d05c      	beq.n	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b930:	2b10      	cmp	r3, #16
 800b932:	d05a      	beq.n	800b9ea <HAL_TIM_ConfigClockSource+0x1aa>
 800b934:	e062      	b.n	800b9fc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b946:	f000 f9b9 	bl	800bcbc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	689b      	ldr	r3, [r3, #8]
 800b950:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b958:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	68ba      	ldr	r2, [r7, #8]
 800b960:	609a      	str	r2, [r3, #8]
      break;
 800b962:	e04f      	b.n	800ba04 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b974:	f000 f9a2 	bl	800bcbc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	689a      	ldr	r2, [r3, #8]
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b986:	609a      	str	r2, [r3, #8]
      break;
 800b988:	e03c      	b.n	800ba04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b996:	461a      	mov	r2, r3
 800b998:	f000 f912 	bl	800bbc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2150      	movs	r1, #80	@ 0x50
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 f96c 	bl	800bc80 <TIM_ITRx_SetConfig>
      break;
 800b9a8:	e02c      	b.n	800ba04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b9b6:	461a      	mov	r2, r3
 800b9b8:	f000 f931 	bl	800bc1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2160      	movs	r1, #96	@ 0x60
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f000 f95c 	bl	800bc80 <TIM_ITRx_SetConfig>
      break;
 800b9c8:	e01c      	b.n	800ba04 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	f000 f8f2 	bl	800bbc0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2140      	movs	r1, #64	@ 0x40
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 f94c 	bl	800bc80 <TIM_ITRx_SetConfig>
      break;
 800b9e8:	e00c      	b.n	800ba04 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	4610      	mov	r0, r2
 800b9f6:	f000 f943 	bl	800bc80 <TIM_ITRx_SetConfig>
      break;
 800b9fa:	e003      	b.n	800ba04 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	73fb      	strb	r3, [r7, #15]
      break;
 800ba00:	e000      	b.n	800ba04 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ba02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	ffceff88 	.word	0xffceff88
 800ba24:	00100040 	.word	0x00100040
 800ba28:	00100030 	.word	0x00100030
 800ba2c:	00100020 	.word	0x00100020

0800ba30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba30:	b480      	push	{r7}
 800ba32:	b083      	sub	sp, #12
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba38:	bf00      	nop
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba4c:	bf00      	nop
 800ba4e:	370c      	adds	r7, #12
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba60:	bf00      	nop
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba74:	bf00      	nop
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b085      	sub	sp, #20
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a43      	ldr	r2, [pc, #268]	@ (800bba0 <TIM_Base_SetConfig+0x120>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d013      	beq.n	800bac0 <TIM_Base_SetConfig+0x40>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba9e:	d00f      	beq.n	800bac0 <TIM_Base_SetConfig+0x40>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a40      	ldr	r2, [pc, #256]	@ (800bba4 <TIM_Base_SetConfig+0x124>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d00b      	beq.n	800bac0 <TIM_Base_SetConfig+0x40>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a3f      	ldr	r2, [pc, #252]	@ (800bba8 <TIM_Base_SetConfig+0x128>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d007      	beq.n	800bac0 <TIM_Base_SetConfig+0x40>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	4a3e      	ldr	r2, [pc, #248]	@ (800bbac <TIM_Base_SetConfig+0x12c>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d003      	beq.n	800bac0 <TIM_Base_SetConfig+0x40>
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4a3d      	ldr	r2, [pc, #244]	@ (800bbb0 <TIM_Base_SetConfig+0x130>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d108      	bne.n	800bad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	68fa      	ldr	r2, [r7, #12]
 800bace:	4313      	orrs	r3, r2
 800bad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a32      	ldr	r2, [pc, #200]	@ (800bba0 <TIM_Base_SetConfig+0x120>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d01f      	beq.n	800bb1a <TIM_Base_SetConfig+0x9a>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bae0:	d01b      	beq.n	800bb1a <TIM_Base_SetConfig+0x9a>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a2f      	ldr	r2, [pc, #188]	@ (800bba4 <TIM_Base_SetConfig+0x124>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d017      	beq.n	800bb1a <TIM_Base_SetConfig+0x9a>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a2e      	ldr	r2, [pc, #184]	@ (800bba8 <TIM_Base_SetConfig+0x128>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d013      	beq.n	800bb1a <TIM_Base_SetConfig+0x9a>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a2d      	ldr	r2, [pc, #180]	@ (800bbac <TIM_Base_SetConfig+0x12c>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d00f      	beq.n	800bb1a <TIM_Base_SetConfig+0x9a>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a2c      	ldr	r2, [pc, #176]	@ (800bbb0 <TIM_Base_SetConfig+0x130>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d00b      	beq.n	800bb1a <TIM_Base_SetConfig+0x9a>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a2b      	ldr	r2, [pc, #172]	@ (800bbb4 <TIM_Base_SetConfig+0x134>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d007      	beq.n	800bb1a <TIM_Base_SetConfig+0x9a>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a2a      	ldr	r2, [pc, #168]	@ (800bbb8 <TIM_Base_SetConfig+0x138>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d003      	beq.n	800bb1a <TIM_Base_SetConfig+0x9a>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a29      	ldr	r2, [pc, #164]	@ (800bbbc <TIM_Base_SetConfig+0x13c>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d108      	bne.n	800bb2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	695b      	ldr	r3, [r3, #20]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	689a      	ldr	r2, [r3, #8]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a14      	ldr	r2, [pc, #80]	@ (800bba0 <TIM_Base_SetConfig+0x120>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d00f      	beq.n	800bb72 <TIM_Base_SetConfig+0xf2>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4a16      	ldr	r2, [pc, #88]	@ (800bbb0 <TIM_Base_SetConfig+0x130>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d00b      	beq.n	800bb72 <TIM_Base_SetConfig+0xf2>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a15      	ldr	r2, [pc, #84]	@ (800bbb4 <TIM_Base_SetConfig+0x134>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d007      	beq.n	800bb72 <TIM_Base_SetConfig+0xf2>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a14      	ldr	r2, [pc, #80]	@ (800bbb8 <TIM_Base_SetConfig+0x138>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d003      	beq.n	800bb72 <TIM_Base_SetConfig+0xf2>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4a13      	ldr	r2, [pc, #76]	@ (800bbbc <TIM_Base_SetConfig+0x13c>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d103      	bne.n	800bb7a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	691a      	ldr	r2, [r3, #16]
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f043 0204 	orr.w	r2, r3, #4
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2201      	movs	r2, #1
 800bb8a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	601a      	str	r2, [r3, #0]
}
 800bb92:	bf00      	nop
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	40010000 	.word	0x40010000
 800bba4:	40000400 	.word	0x40000400
 800bba8:	40000800 	.word	0x40000800
 800bbac:	40000c00 	.word	0x40000c00
 800bbb0:	40010400 	.word	0x40010400
 800bbb4:	40014000 	.word	0x40014000
 800bbb8:	40014400 	.word	0x40014400
 800bbbc:	40014800 	.word	0x40014800

0800bbc0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b087      	sub	sp, #28
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6a1b      	ldr	r3, [r3, #32]
 800bbd0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	6a1b      	ldr	r3, [r3, #32]
 800bbd6:	f023 0201 	bic.w	r2, r3, #1
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	699b      	ldr	r3, [r3, #24]
 800bbe2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bbe4:	693b      	ldr	r3, [r7, #16]
 800bbe6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bbea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	011b      	lsls	r3, r3, #4
 800bbf0:	693a      	ldr	r2, [r7, #16]
 800bbf2:	4313      	orrs	r3, r2
 800bbf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	f023 030a 	bic.w	r3, r3, #10
 800bbfc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bbfe:	697a      	ldr	r2, [r7, #20]
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	693a      	ldr	r2, [r7, #16]
 800bc0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	697a      	ldr	r2, [r7, #20]
 800bc10:	621a      	str	r2, [r3, #32]
}
 800bc12:	bf00      	nop
 800bc14:	371c      	adds	r7, #28
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr

0800bc1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bc1e:	b480      	push	{r7}
 800bc20:	b087      	sub	sp, #28
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	60f8      	str	r0, [r7, #12]
 800bc26:	60b9      	str	r1, [r7, #8]
 800bc28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	6a1b      	ldr	r3, [r3, #32]
 800bc2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6a1b      	ldr	r3, [r3, #32]
 800bc34:	f023 0210 	bic.w	r2, r3, #16
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	699b      	ldr	r3, [r3, #24]
 800bc40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bc48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	031b      	lsls	r3, r3, #12
 800bc4e:	693a      	ldr	r2, [r7, #16]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc54:	697b      	ldr	r3, [r7, #20]
 800bc56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bc5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	011b      	lsls	r3, r3, #4
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	693a      	ldr	r2, [r7, #16]
 800bc6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	697a      	ldr	r2, [r7, #20]
 800bc70:	621a      	str	r2, [r3, #32]
}
 800bc72:	bf00      	nop
 800bc74:	371c      	adds	r7, #28
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
	...

0800bc80 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	4b09      	ldr	r3, [pc, #36]	@ (800bcb8 <TIM_ITRx_SetConfig+0x38>)
 800bc94:	4013      	ands	r3, r2
 800bc96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc98:	683a      	ldr	r2, [r7, #0]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	f043 0307 	orr.w	r3, r3, #7
 800bca2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	609a      	str	r2, [r3, #8]
}
 800bcaa:	bf00      	nop
 800bcac:	3714      	adds	r7, #20
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr
 800bcb6:	bf00      	nop
 800bcb8:	ffcfff8f 	.word	0xffcfff8f

0800bcbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b087      	sub	sp, #28
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
 800bcc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	689b      	ldr	r3, [r3, #8]
 800bcce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bcd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	021a      	lsls	r2, r3, #8
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	431a      	orrs	r2, r3
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	697a      	ldr	r2, [r7, #20]
 800bce6:	4313      	orrs	r3, r2
 800bce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	697a      	ldr	r2, [r7, #20]
 800bcee:	609a      	str	r2, [r3, #8]
}
 800bcf0:	bf00      	nop
 800bcf2:	371c      	adds	r7, #28
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr

0800bcfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d101      	bne.n	800bd14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bd10:	2302      	movs	r3, #2
 800bd12:	e06d      	b.n	800bdf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2201      	movs	r2, #1
 800bd18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2202      	movs	r2, #2
 800bd20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a30      	ldr	r2, [pc, #192]	@ (800bdfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d004      	beq.n	800bd48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a2f      	ldr	r2, [pc, #188]	@ (800be00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d108      	bne.n	800bd5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bd4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	68fa      	ldr	r2, [r7, #12]
 800bd56:	4313      	orrs	r3, r2
 800bd58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	68fa      	ldr	r2, [r7, #12]
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	4a20      	ldr	r2, [pc, #128]	@ (800bdfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d022      	beq.n	800bdc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd86:	d01d      	beq.n	800bdc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	4a1d      	ldr	r2, [pc, #116]	@ (800be04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bd8e:	4293      	cmp	r3, r2
 800bd90:	d018      	beq.n	800bdc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a1c      	ldr	r2, [pc, #112]	@ (800be08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d013      	beq.n	800bdc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4a1a      	ldr	r2, [pc, #104]	@ (800be0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d00e      	beq.n	800bdc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	4a15      	ldr	r2, [pc, #84]	@ (800be00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d009      	beq.n	800bdc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4a16      	ldr	r2, [pc, #88]	@ (800be10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bdb6:	4293      	cmp	r3, r2
 800bdb8:	d004      	beq.n	800bdc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	4a15      	ldr	r2, [pc, #84]	@ (800be14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d10c      	bne.n	800bdde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bdca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2201      	movs	r2, #1
 800bde2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	2200      	movs	r2, #0
 800bdea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bdee:	2300      	movs	r3, #0
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3714      	adds	r7, #20
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	40010000 	.word	0x40010000
 800be00:	40010400 	.word	0x40010400
 800be04:	40000400 	.word	0x40000400
 800be08:	40000800 	.word	0x40000800
 800be0c:	40000c00 	.word	0x40000c00
 800be10:	40001800 	.word	0x40001800
 800be14:	40014000 	.word	0x40014000

0800be18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be18:	b480      	push	{r7}
 800be1a:	b083      	sub	sp, #12
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr

0800be2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be2c:	b480      	push	{r7}
 800be2e:	b083      	sub	sp, #12
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be34:	bf00      	nop
 800be36:	370c      	adds	r7, #12
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr

0800be40 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be40:	b480      	push	{r7}
 800be42:	b083      	sub	sp, #12
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be48:	bf00      	nop
 800be4a:	370c      	adds	r7, #12
 800be4c:	46bd      	mov	sp, r7
 800be4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be52:	4770      	bx	lr

0800be54 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b082      	sub	sp, #8
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d101      	bne.n	800be66 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	e04a      	b.n	800befc <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d106      	bne.n	800be7e <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7f6 f8ff 	bl	800207c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2224      	movs	r2, #36	@ 0x24
 800be82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	681a      	ldr	r2, [r3, #0]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f022 0201 	bic.w	r2, r2, #1
 800be94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d002      	beq.n	800bea4 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 fe26 	bl	800caf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 f8bb 	bl	800c020 <UART_SetConfig>
 800beaa:	4603      	mov	r3, r0
 800beac:	2b01      	cmp	r3, #1
 800beae:	d101      	bne.n	800beb4 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 800beb0:	2301      	movs	r3, #1
 800beb2:	e023      	b.n	800befc <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bec2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	689a      	ldr	r2, [r3, #8]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800bed2:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	689a      	ldr	r2, [r3, #8]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f042 0208 	orr.w	r2, r2, #8
 800bee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	681a      	ldr	r2, [r3, #0]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f042 0201 	orr.w	r2, r2, #1
 800bef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fe9d 	bl	800cc34 <UART_CheckIdleState>
 800befa:	4603      	mov	r3, r0
}
 800befc:	4618      	mov	r0, r3
 800befe:	3708      	adds	r7, #8
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b08a      	sub	sp, #40	@ 0x28
 800bf08:	af02      	add	r7, sp, #8
 800bf0a:	60f8      	str	r0, [r7, #12]
 800bf0c:	60b9      	str	r1, [r7, #8]
 800bf0e:	603b      	str	r3, [r7, #0]
 800bf10:	4613      	mov	r3, r2
 800bf12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf1a:	2b20      	cmp	r3, #32
 800bf1c:	d17b      	bne.n	800c016 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d002      	beq.n	800bf2a <HAL_UART_Transmit+0x26>
 800bf24:	88fb      	ldrh	r3, [r7, #6]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d101      	bne.n	800bf2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e074      	b.n	800c018 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2221      	movs	r2, #33	@ 0x21
 800bf3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf3e:	f7f6 fb5b 	bl	80025f8 <HAL_GetTick>
 800bf42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	88fa      	ldrh	r2, [r7, #6]
 800bf48:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	88fa      	ldrh	r2, [r7, #6]
 800bf50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	689b      	ldr	r3, [r3, #8]
 800bf58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf5c:	d108      	bne.n	800bf70 <HAL_UART_Transmit+0x6c>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	691b      	ldr	r3, [r3, #16]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d104      	bne.n	800bf70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bf66:	2300      	movs	r3, #0
 800bf68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	61bb      	str	r3, [r7, #24]
 800bf6e:	e003      	b.n	800bf78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf74:	2300      	movs	r3, #0
 800bf76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bf78:	e030      	b.n	800bfdc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	2200      	movs	r2, #0
 800bf82:	2180      	movs	r1, #128	@ 0x80
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f000 feff 	bl	800cd88 <UART_WaitOnFlagUntilTimeout>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d005      	beq.n	800bf9c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	2220      	movs	r2, #32
 800bf94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bf98:	2303      	movs	r3, #3
 800bf9a:	e03d      	b.n	800c018 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d10b      	bne.n	800bfba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	881b      	ldrh	r3, [r3, #0]
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfb0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	3302      	adds	r3, #2
 800bfb6:	61bb      	str	r3, [r7, #24]
 800bfb8:	e007      	b.n	800bfca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	781a      	ldrb	r2, [r3, #0]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	3b01      	subs	r3, #1
 800bfd4:	b29a      	uxth	r2, r3
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d1c8      	bne.n	800bf7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	2200      	movs	r2, #0
 800bff0:	2140      	movs	r1, #64	@ 0x40
 800bff2:	68f8      	ldr	r0, [r7, #12]
 800bff4:	f000 fec8 	bl	800cd88 <UART_WaitOnFlagUntilTimeout>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d005      	beq.n	800c00a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2220      	movs	r2, #32
 800c002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c006:	2303      	movs	r3, #3
 800c008:	e006      	b.n	800c018 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2220      	movs	r2, #32
 800c00e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c012:	2300      	movs	r3, #0
 800c014:	e000      	b.n	800c018 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c016:	2302      	movs	r3, #2
  }
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3720      	adds	r7, #32
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}

0800c020 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c024:	b092      	sub	sp, #72	@ 0x48
 800c026:	af00      	add	r7, sp, #0
 800c028:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	689a      	ldr	r2, [r3, #8]
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	431a      	orrs	r2, r3
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	695b      	ldr	r3, [r3, #20]
 800c03e:	431a      	orrs	r2, r3
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	69db      	ldr	r3, [r3, #28]
 800c044:	4313      	orrs	r3, r2
 800c046:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	681a      	ldr	r2, [r3, #0]
 800c04e:	4bbe      	ldr	r3, [pc, #760]	@ (800c348 <UART_SetConfig+0x328>)
 800c050:	4013      	ands	r3, r2
 800c052:	697a      	ldr	r2, [r7, #20]
 800c054:	6812      	ldr	r2, [r2, #0]
 800c056:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c058:	430b      	orrs	r3, r1
 800c05a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	68da      	ldr	r2, [r3, #12]
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	430a      	orrs	r2, r1
 800c070:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	699b      	ldr	r3, [r3, #24]
 800c076:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4ab3      	ldr	r2, [pc, #716]	@ (800c34c <UART_SetConfig+0x32c>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d004      	beq.n	800c08c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	6a1b      	ldr	r3, [r3, #32]
 800c086:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c088:	4313      	orrs	r3, r2
 800c08a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	689a      	ldr	r2, [r3, #8]
 800c092:	4baf      	ldr	r3, [pc, #700]	@ (800c350 <UART_SetConfig+0x330>)
 800c094:	4013      	ands	r3, r2
 800c096:	697a      	ldr	r2, [r7, #20]
 800c098:	6812      	ldr	r2, [r2, #0]
 800c09a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c09c:	430b      	orrs	r3, r1
 800c09e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0a6:	f023 010f 	bic.w	r1, r3, #15
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	430a      	orrs	r2, r1
 800c0b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4aa6      	ldr	r2, [pc, #664]	@ (800c354 <UART_SetConfig+0x334>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d177      	bne.n	800c1b0 <UART_SetConfig+0x190>
 800c0c0:	4ba5      	ldr	r3, [pc, #660]	@ (800c358 <UART_SetConfig+0x338>)
 800c0c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c0c8:	2b28      	cmp	r3, #40	@ 0x28
 800c0ca:	d86d      	bhi.n	800c1a8 <UART_SetConfig+0x188>
 800c0cc:	a201      	add	r2, pc, #4	@ (adr r2, 800c0d4 <UART_SetConfig+0xb4>)
 800c0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0d2:	bf00      	nop
 800c0d4:	0800c179 	.word	0x0800c179
 800c0d8:	0800c1a9 	.word	0x0800c1a9
 800c0dc:	0800c1a9 	.word	0x0800c1a9
 800c0e0:	0800c1a9 	.word	0x0800c1a9
 800c0e4:	0800c1a9 	.word	0x0800c1a9
 800c0e8:	0800c1a9 	.word	0x0800c1a9
 800c0ec:	0800c1a9 	.word	0x0800c1a9
 800c0f0:	0800c1a9 	.word	0x0800c1a9
 800c0f4:	0800c181 	.word	0x0800c181
 800c0f8:	0800c1a9 	.word	0x0800c1a9
 800c0fc:	0800c1a9 	.word	0x0800c1a9
 800c100:	0800c1a9 	.word	0x0800c1a9
 800c104:	0800c1a9 	.word	0x0800c1a9
 800c108:	0800c1a9 	.word	0x0800c1a9
 800c10c:	0800c1a9 	.word	0x0800c1a9
 800c110:	0800c1a9 	.word	0x0800c1a9
 800c114:	0800c189 	.word	0x0800c189
 800c118:	0800c1a9 	.word	0x0800c1a9
 800c11c:	0800c1a9 	.word	0x0800c1a9
 800c120:	0800c1a9 	.word	0x0800c1a9
 800c124:	0800c1a9 	.word	0x0800c1a9
 800c128:	0800c1a9 	.word	0x0800c1a9
 800c12c:	0800c1a9 	.word	0x0800c1a9
 800c130:	0800c1a9 	.word	0x0800c1a9
 800c134:	0800c191 	.word	0x0800c191
 800c138:	0800c1a9 	.word	0x0800c1a9
 800c13c:	0800c1a9 	.word	0x0800c1a9
 800c140:	0800c1a9 	.word	0x0800c1a9
 800c144:	0800c1a9 	.word	0x0800c1a9
 800c148:	0800c1a9 	.word	0x0800c1a9
 800c14c:	0800c1a9 	.word	0x0800c1a9
 800c150:	0800c1a9 	.word	0x0800c1a9
 800c154:	0800c199 	.word	0x0800c199
 800c158:	0800c1a9 	.word	0x0800c1a9
 800c15c:	0800c1a9 	.word	0x0800c1a9
 800c160:	0800c1a9 	.word	0x0800c1a9
 800c164:	0800c1a9 	.word	0x0800c1a9
 800c168:	0800c1a9 	.word	0x0800c1a9
 800c16c:	0800c1a9 	.word	0x0800c1a9
 800c170:	0800c1a9 	.word	0x0800c1a9
 800c174:	0800c1a1 	.word	0x0800c1a1
 800c178:	2301      	movs	r3, #1
 800c17a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c17e:	e222      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c180:	2304      	movs	r3, #4
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c186:	e21e      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c188:	2308      	movs	r3, #8
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c18e:	e21a      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c190:	2310      	movs	r3, #16
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c196:	e216      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c198:	2320      	movs	r3, #32
 800c19a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c19e:	e212      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c1a0:	2340      	movs	r3, #64	@ 0x40
 800c1a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1a6:	e20e      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c1a8:	2380      	movs	r3, #128	@ 0x80
 800c1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ae:	e20a      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4a69      	ldr	r2, [pc, #420]	@ (800c35c <UART_SetConfig+0x33c>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d130      	bne.n	800c21c <UART_SetConfig+0x1fc>
 800c1ba:	4b67      	ldr	r3, [pc, #412]	@ (800c358 <UART_SetConfig+0x338>)
 800c1bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1be:	f003 0307 	and.w	r3, r3, #7
 800c1c2:	2b05      	cmp	r3, #5
 800c1c4:	d826      	bhi.n	800c214 <UART_SetConfig+0x1f4>
 800c1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c1cc <UART_SetConfig+0x1ac>)
 800c1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1cc:	0800c1e5 	.word	0x0800c1e5
 800c1d0:	0800c1ed 	.word	0x0800c1ed
 800c1d4:	0800c1f5 	.word	0x0800c1f5
 800c1d8:	0800c1fd 	.word	0x0800c1fd
 800c1dc:	0800c205 	.word	0x0800c205
 800c1e0:	0800c20d 	.word	0x0800c20d
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1ea:	e1ec      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c1ec:	2304      	movs	r3, #4
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1f2:	e1e8      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c1f4:	2308      	movs	r3, #8
 800c1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c1fa:	e1e4      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c1fc:	2310      	movs	r3, #16
 800c1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c202:	e1e0      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c204:	2320      	movs	r3, #32
 800c206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c20a:	e1dc      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c20c:	2340      	movs	r3, #64	@ 0x40
 800c20e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c212:	e1d8      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c214:	2380      	movs	r3, #128	@ 0x80
 800c216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c21a:	e1d4      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a4f      	ldr	r2, [pc, #316]	@ (800c360 <UART_SetConfig+0x340>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d130      	bne.n	800c288 <UART_SetConfig+0x268>
 800c226:	4b4c      	ldr	r3, [pc, #304]	@ (800c358 <UART_SetConfig+0x338>)
 800c228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c22a:	f003 0307 	and.w	r3, r3, #7
 800c22e:	2b05      	cmp	r3, #5
 800c230:	d826      	bhi.n	800c280 <UART_SetConfig+0x260>
 800c232:	a201      	add	r2, pc, #4	@ (adr r2, 800c238 <UART_SetConfig+0x218>)
 800c234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c238:	0800c251 	.word	0x0800c251
 800c23c:	0800c259 	.word	0x0800c259
 800c240:	0800c261 	.word	0x0800c261
 800c244:	0800c269 	.word	0x0800c269
 800c248:	0800c271 	.word	0x0800c271
 800c24c:	0800c279 	.word	0x0800c279
 800c250:	2300      	movs	r3, #0
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c256:	e1b6      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c258:	2304      	movs	r3, #4
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c25e:	e1b2      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c260:	2308      	movs	r3, #8
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c266:	e1ae      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c268:	2310      	movs	r3, #16
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c26e:	e1aa      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c270:	2320      	movs	r3, #32
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c276:	e1a6      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c278:	2340      	movs	r3, #64	@ 0x40
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c27e:	e1a2      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c280:	2380      	movs	r3, #128	@ 0x80
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c286:	e19e      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a35      	ldr	r2, [pc, #212]	@ (800c364 <UART_SetConfig+0x344>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d130      	bne.n	800c2f4 <UART_SetConfig+0x2d4>
 800c292:	4b31      	ldr	r3, [pc, #196]	@ (800c358 <UART_SetConfig+0x338>)
 800c294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c296:	f003 0307 	and.w	r3, r3, #7
 800c29a:	2b05      	cmp	r3, #5
 800c29c:	d826      	bhi.n	800c2ec <UART_SetConfig+0x2cc>
 800c29e:	a201      	add	r2, pc, #4	@ (adr r2, 800c2a4 <UART_SetConfig+0x284>)
 800c2a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a4:	0800c2bd 	.word	0x0800c2bd
 800c2a8:	0800c2c5 	.word	0x0800c2c5
 800c2ac:	0800c2cd 	.word	0x0800c2cd
 800c2b0:	0800c2d5 	.word	0x0800c2d5
 800c2b4:	0800c2dd 	.word	0x0800c2dd
 800c2b8:	0800c2e5 	.word	0x0800c2e5
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2c2:	e180      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c2c4:	2304      	movs	r3, #4
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ca:	e17c      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c2cc:	2308      	movs	r3, #8
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2d2:	e178      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c2d4:	2310      	movs	r3, #16
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2da:	e174      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c2dc:	2320      	movs	r3, #32
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2e2:	e170      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c2e4:	2340      	movs	r3, #64	@ 0x40
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2ea:	e16c      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c2ec:	2380      	movs	r3, #128	@ 0x80
 800c2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c2f2:	e168      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	4a1b      	ldr	r2, [pc, #108]	@ (800c368 <UART_SetConfig+0x348>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d142      	bne.n	800c384 <UART_SetConfig+0x364>
 800c2fe:	4b16      	ldr	r3, [pc, #88]	@ (800c358 <UART_SetConfig+0x338>)
 800c300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c302:	f003 0307 	and.w	r3, r3, #7
 800c306:	2b05      	cmp	r3, #5
 800c308:	d838      	bhi.n	800c37c <UART_SetConfig+0x35c>
 800c30a:	a201      	add	r2, pc, #4	@ (adr r2, 800c310 <UART_SetConfig+0x2f0>)
 800c30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c310:	0800c329 	.word	0x0800c329
 800c314:	0800c331 	.word	0x0800c331
 800c318:	0800c339 	.word	0x0800c339
 800c31c:	0800c341 	.word	0x0800c341
 800c320:	0800c36d 	.word	0x0800c36d
 800c324:	0800c375 	.word	0x0800c375
 800c328:	2300      	movs	r3, #0
 800c32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c32e:	e14a      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c330:	2304      	movs	r3, #4
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c336:	e146      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c338:	2308      	movs	r3, #8
 800c33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c33e:	e142      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c340:	2310      	movs	r3, #16
 800c342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c346:	e13e      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c348:	cfff69f3 	.word	0xcfff69f3
 800c34c:	58000c00 	.word	0x58000c00
 800c350:	11fff4ff 	.word	0x11fff4ff
 800c354:	40011000 	.word	0x40011000
 800c358:	58024400 	.word	0x58024400
 800c35c:	40004400 	.word	0x40004400
 800c360:	40004800 	.word	0x40004800
 800c364:	40004c00 	.word	0x40004c00
 800c368:	40005000 	.word	0x40005000
 800c36c:	2320      	movs	r3, #32
 800c36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c372:	e128      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c374:	2340      	movs	r3, #64	@ 0x40
 800c376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c37a:	e124      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c37c:	2380      	movs	r3, #128	@ 0x80
 800c37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c382:	e120      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4acb      	ldr	r2, [pc, #812]	@ (800c6b8 <UART_SetConfig+0x698>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d176      	bne.n	800c47c <UART_SetConfig+0x45c>
 800c38e:	4bcb      	ldr	r3, [pc, #812]	@ (800c6bc <UART_SetConfig+0x69c>)
 800c390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c392:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c396:	2b28      	cmp	r3, #40	@ 0x28
 800c398:	d86c      	bhi.n	800c474 <UART_SetConfig+0x454>
 800c39a:	a201      	add	r2, pc, #4	@ (adr r2, 800c3a0 <UART_SetConfig+0x380>)
 800c39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3a0:	0800c445 	.word	0x0800c445
 800c3a4:	0800c475 	.word	0x0800c475
 800c3a8:	0800c475 	.word	0x0800c475
 800c3ac:	0800c475 	.word	0x0800c475
 800c3b0:	0800c475 	.word	0x0800c475
 800c3b4:	0800c475 	.word	0x0800c475
 800c3b8:	0800c475 	.word	0x0800c475
 800c3bc:	0800c475 	.word	0x0800c475
 800c3c0:	0800c44d 	.word	0x0800c44d
 800c3c4:	0800c475 	.word	0x0800c475
 800c3c8:	0800c475 	.word	0x0800c475
 800c3cc:	0800c475 	.word	0x0800c475
 800c3d0:	0800c475 	.word	0x0800c475
 800c3d4:	0800c475 	.word	0x0800c475
 800c3d8:	0800c475 	.word	0x0800c475
 800c3dc:	0800c475 	.word	0x0800c475
 800c3e0:	0800c455 	.word	0x0800c455
 800c3e4:	0800c475 	.word	0x0800c475
 800c3e8:	0800c475 	.word	0x0800c475
 800c3ec:	0800c475 	.word	0x0800c475
 800c3f0:	0800c475 	.word	0x0800c475
 800c3f4:	0800c475 	.word	0x0800c475
 800c3f8:	0800c475 	.word	0x0800c475
 800c3fc:	0800c475 	.word	0x0800c475
 800c400:	0800c45d 	.word	0x0800c45d
 800c404:	0800c475 	.word	0x0800c475
 800c408:	0800c475 	.word	0x0800c475
 800c40c:	0800c475 	.word	0x0800c475
 800c410:	0800c475 	.word	0x0800c475
 800c414:	0800c475 	.word	0x0800c475
 800c418:	0800c475 	.word	0x0800c475
 800c41c:	0800c475 	.word	0x0800c475
 800c420:	0800c465 	.word	0x0800c465
 800c424:	0800c475 	.word	0x0800c475
 800c428:	0800c475 	.word	0x0800c475
 800c42c:	0800c475 	.word	0x0800c475
 800c430:	0800c475 	.word	0x0800c475
 800c434:	0800c475 	.word	0x0800c475
 800c438:	0800c475 	.word	0x0800c475
 800c43c:	0800c475 	.word	0x0800c475
 800c440:	0800c46d 	.word	0x0800c46d
 800c444:	2301      	movs	r3, #1
 800c446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c44a:	e0bc      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c44c:	2304      	movs	r3, #4
 800c44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c452:	e0b8      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c454:	2308      	movs	r3, #8
 800c456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c45a:	e0b4      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c45c:	2310      	movs	r3, #16
 800c45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c462:	e0b0      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c464:	2320      	movs	r3, #32
 800c466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c46a:	e0ac      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c46c:	2340      	movs	r3, #64	@ 0x40
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c472:	e0a8      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c474:	2380      	movs	r3, #128	@ 0x80
 800c476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c47a:	e0a4      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a8f      	ldr	r2, [pc, #572]	@ (800c6c0 <UART_SetConfig+0x6a0>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d130      	bne.n	800c4e8 <UART_SetConfig+0x4c8>
 800c486:	4b8d      	ldr	r3, [pc, #564]	@ (800c6bc <UART_SetConfig+0x69c>)
 800c488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c48a:	f003 0307 	and.w	r3, r3, #7
 800c48e:	2b05      	cmp	r3, #5
 800c490:	d826      	bhi.n	800c4e0 <UART_SetConfig+0x4c0>
 800c492:	a201      	add	r2, pc, #4	@ (adr r2, 800c498 <UART_SetConfig+0x478>)
 800c494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c498:	0800c4b1 	.word	0x0800c4b1
 800c49c:	0800c4b9 	.word	0x0800c4b9
 800c4a0:	0800c4c1 	.word	0x0800c4c1
 800c4a4:	0800c4c9 	.word	0x0800c4c9
 800c4a8:	0800c4d1 	.word	0x0800c4d1
 800c4ac:	0800c4d9 	.word	0x0800c4d9
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4b6:	e086      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c4b8:	2304      	movs	r3, #4
 800c4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4be:	e082      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c4c0:	2308      	movs	r3, #8
 800c4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4c6:	e07e      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c4c8:	2310      	movs	r3, #16
 800c4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4ce:	e07a      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c4d0:	2320      	movs	r3, #32
 800c4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4d6:	e076      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c4d8:	2340      	movs	r3, #64	@ 0x40
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4de:	e072      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c4e0:	2380      	movs	r3, #128	@ 0x80
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c4e6:	e06e      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a75      	ldr	r2, [pc, #468]	@ (800c6c4 <UART_SetConfig+0x6a4>)
 800c4ee:	4293      	cmp	r3, r2
 800c4f0:	d130      	bne.n	800c554 <UART_SetConfig+0x534>
 800c4f2:	4b72      	ldr	r3, [pc, #456]	@ (800c6bc <UART_SetConfig+0x69c>)
 800c4f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4f6:	f003 0307 	and.w	r3, r3, #7
 800c4fa:	2b05      	cmp	r3, #5
 800c4fc:	d826      	bhi.n	800c54c <UART_SetConfig+0x52c>
 800c4fe:	a201      	add	r2, pc, #4	@ (adr r2, 800c504 <UART_SetConfig+0x4e4>)
 800c500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c504:	0800c51d 	.word	0x0800c51d
 800c508:	0800c525 	.word	0x0800c525
 800c50c:	0800c52d 	.word	0x0800c52d
 800c510:	0800c535 	.word	0x0800c535
 800c514:	0800c53d 	.word	0x0800c53d
 800c518:	0800c545 	.word	0x0800c545
 800c51c:	2300      	movs	r3, #0
 800c51e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c522:	e050      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c524:	2304      	movs	r3, #4
 800c526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c52a:	e04c      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c52c:	2308      	movs	r3, #8
 800c52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c532:	e048      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c534:	2310      	movs	r3, #16
 800c536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c53a:	e044      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c53c:	2320      	movs	r3, #32
 800c53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c542:	e040      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c544:	2340      	movs	r3, #64	@ 0x40
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c54a:	e03c      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c54c:	2380      	movs	r3, #128	@ 0x80
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c552:	e038      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a5b      	ldr	r2, [pc, #364]	@ (800c6c8 <UART_SetConfig+0x6a8>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d130      	bne.n	800c5c0 <UART_SetConfig+0x5a0>
 800c55e:	4b57      	ldr	r3, [pc, #348]	@ (800c6bc <UART_SetConfig+0x69c>)
 800c560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c562:	f003 0307 	and.w	r3, r3, #7
 800c566:	2b05      	cmp	r3, #5
 800c568:	d826      	bhi.n	800c5b8 <UART_SetConfig+0x598>
 800c56a:	a201      	add	r2, pc, #4	@ (adr r2, 800c570 <UART_SetConfig+0x550>)
 800c56c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c570:	0800c589 	.word	0x0800c589
 800c574:	0800c591 	.word	0x0800c591
 800c578:	0800c599 	.word	0x0800c599
 800c57c:	0800c5a1 	.word	0x0800c5a1
 800c580:	0800c5a9 	.word	0x0800c5a9
 800c584:	0800c5b1 	.word	0x0800c5b1
 800c588:	2302      	movs	r3, #2
 800c58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c58e:	e01a      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c590:	2304      	movs	r3, #4
 800c592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c596:	e016      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c598:	2308      	movs	r3, #8
 800c59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c59e:	e012      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c5a0:	2310      	movs	r3, #16
 800c5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5a6:	e00e      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c5a8:	2320      	movs	r3, #32
 800c5aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5ae:	e00a      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c5b0:	2340      	movs	r3, #64	@ 0x40
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5b6:	e006      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c5b8:	2380      	movs	r3, #128	@ 0x80
 800c5ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c5be:	e002      	b.n	800c5c6 <UART_SetConfig+0x5a6>
 800c5c0:	2380      	movs	r3, #128	@ 0x80
 800c5c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4a3f      	ldr	r2, [pc, #252]	@ (800c6c8 <UART_SetConfig+0x6a8>)
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	f040 80f8 	bne.w	800c7c2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c5d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c5d6:	2b20      	cmp	r3, #32
 800c5d8:	dc46      	bgt.n	800c668 <UART_SetConfig+0x648>
 800c5da:	2b02      	cmp	r3, #2
 800c5dc:	f2c0 8082 	blt.w	800c6e4 <UART_SetConfig+0x6c4>
 800c5e0:	3b02      	subs	r3, #2
 800c5e2:	2b1e      	cmp	r3, #30
 800c5e4:	d87e      	bhi.n	800c6e4 <UART_SetConfig+0x6c4>
 800c5e6:	a201      	add	r2, pc, #4	@ (adr r2, 800c5ec <UART_SetConfig+0x5cc>)
 800c5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ec:	0800c66f 	.word	0x0800c66f
 800c5f0:	0800c6e5 	.word	0x0800c6e5
 800c5f4:	0800c677 	.word	0x0800c677
 800c5f8:	0800c6e5 	.word	0x0800c6e5
 800c5fc:	0800c6e5 	.word	0x0800c6e5
 800c600:	0800c6e5 	.word	0x0800c6e5
 800c604:	0800c687 	.word	0x0800c687
 800c608:	0800c6e5 	.word	0x0800c6e5
 800c60c:	0800c6e5 	.word	0x0800c6e5
 800c610:	0800c6e5 	.word	0x0800c6e5
 800c614:	0800c6e5 	.word	0x0800c6e5
 800c618:	0800c6e5 	.word	0x0800c6e5
 800c61c:	0800c6e5 	.word	0x0800c6e5
 800c620:	0800c6e5 	.word	0x0800c6e5
 800c624:	0800c697 	.word	0x0800c697
 800c628:	0800c6e5 	.word	0x0800c6e5
 800c62c:	0800c6e5 	.word	0x0800c6e5
 800c630:	0800c6e5 	.word	0x0800c6e5
 800c634:	0800c6e5 	.word	0x0800c6e5
 800c638:	0800c6e5 	.word	0x0800c6e5
 800c63c:	0800c6e5 	.word	0x0800c6e5
 800c640:	0800c6e5 	.word	0x0800c6e5
 800c644:	0800c6e5 	.word	0x0800c6e5
 800c648:	0800c6e5 	.word	0x0800c6e5
 800c64c:	0800c6e5 	.word	0x0800c6e5
 800c650:	0800c6e5 	.word	0x0800c6e5
 800c654:	0800c6e5 	.word	0x0800c6e5
 800c658:	0800c6e5 	.word	0x0800c6e5
 800c65c:	0800c6e5 	.word	0x0800c6e5
 800c660:	0800c6e5 	.word	0x0800c6e5
 800c664:	0800c6d7 	.word	0x0800c6d7
 800c668:	2b40      	cmp	r3, #64	@ 0x40
 800c66a:	d037      	beq.n	800c6dc <UART_SetConfig+0x6bc>
 800c66c:	e03a      	b.n	800c6e4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c66e:	f7fc f9ef 	bl	8008a50 <HAL_RCCEx_GetD3PCLK1Freq>
 800c672:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c674:	e03c      	b.n	800c6f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c67a:	4618      	mov	r0, r3
 800c67c:	f7fc f9fe 	bl	8008a7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c684:	e034      	b.n	800c6f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c686:	f107 0318 	add.w	r3, r7, #24
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7fc fb4a 	bl	8008d24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c690:	69fb      	ldr	r3, [r7, #28]
 800c692:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c694:	e02c      	b.n	800c6f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c696:	4b09      	ldr	r3, [pc, #36]	@ (800c6bc <UART_SetConfig+0x69c>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f003 0320 	and.w	r3, r3, #32
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d016      	beq.n	800c6d0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6a2:	4b06      	ldr	r3, [pc, #24]	@ (800c6bc <UART_SetConfig+0x69c>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	08db      	lsrs	r3, r3, #3
 800c6a8:	f003 0303 	and.w	r3, r3, #3
 800c6ac:	4a07      	ldr	r2, [pc, #28]	@ (800c6cc <UART_SetConfig+0x6ac>)
 800c6ae:	fa22 f303 	lsr.w	r3, r2, r3
 800c6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6b4:	e01c      	b.n	800c6f0 <UART_SetConfig+0x6d0>
 800c6b6:	bf00      	nop
 800c6b8:	40011400 	.word	0x40011400
 800c6bc:	58024400 	.word	0x58024400
 800c6c0:	40007800 	.word	0x40007800
 800c6c4:	40007c00 	.word	0x40007c00
 800c6c8:	58000c00 	.word	0x58000c00
 800c6cc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c6d0:	4b9d      	ldr	r3, [pc, #628]	@ (800c948 <UART_SetConfig+0x928>)
 800c6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6d4:	e00c      	b.n	800c6f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6d6:	4b9d      	ldr	r3, [pc, #628]	@ (800c94c <UART_SetConfig+0x92c>)
 800c6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6da:	e009      	b.n	800c6f0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c6e2:	e005      	b.n	800c6f0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c6ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c6f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f000 81de 	beq.w	800cab4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c6f8:	697b      	ldr	r3, [r7, #20]
 800c6fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c6fc:	4a94      	ldr	r2, [pc, #592]	@ (800c950 <UART_SetConfig+0x930>)
 800c6fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c702:	461a      	mov	r2, r3
 800c704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c706:	fbb3 f3f2 	udiv	r3, r3, r2
 800c70a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	685a      	ldr	r2, [r3, #4]
 800c710:	4613      	mov	r3, r2
 800c712:	005b      	lsls	r3, r3, #1
 800c714:	4413      	add	r3, r2
 800c716:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c718:	429a      	cmp	r2, r3
 800c71a:	d305      	bcc.n	800c728 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c724:	429a      	cmp	r2, r3
 800c726:	d903      	bls.n	800c730 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c728:	2301      	movs	r3, #1
 800c72a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c72e:	e1c1      	b.n	800cab4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c732:	2200      	movs	r2, #0
 800c734:	60bb      	str	r3, [r7, #8]
 800c736:	60fa      	str	r2, [r7, #12]
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c73c:	4a84      	ldr	r2, [pc, #528]	@ (800c950 <UART_SetConfig+0x930>)
 800c73e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c742:	b29b      	uxth	r3, r3
 800c744:	2200      	movs	r2, #0
 800c746:	603b      	str	r3, [r7, #0]
 800c748:	607a      	str	r2, [r7, #4]
 800c74a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c74e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c752:	f7f3 fe1d 	bl	8000390 <__aeabi_uldivmod>
 800c756:	4602      	mov	r2, r0
 800c758:	460b      	mov	r3, r1
 800c75a:	4610      	mov	r0, r2
 800c75c:	4619      	mov	r1, r3
 800c75e:	f04f 0200 	mov.w	r2, #0
 800c762:	f04f 0300 	mov.w	r3, #0
 800c766:	020b      	lsls	r3, r1, #8
 800c768:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c76c:	0202      	lsls	r2, r0, #8
 800c76e:	6979      	ldr	r1, [r7, #20]
 800c770:	6849      	ldr	r1, [r1, #4]
 800c772:	0849      	lsrs	r1, r1, #1
 800c774:	2000      	movs	r0, #0
 800c776:	460c      	mov	r4, r1
 800c778:	4605      	mov	r5, r0
 800c77a:	eb12 0804 	adds.w	r8, r2, r4
 800c77e:	eb43 0905 	adc.w	r9, r3, r5
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	2200      	movs	r2, #0
 800c788:	469a      	mov	sl, r3
 800c78a:	4693      	mov	fp, r2
 800c78c:	4652      	mov	r2, sl
 800c78e:	465b      	mov	r3, fp
 800c790:	4640      	mov	r0, r8
 800c792:	4649      	mov	r1, r9
 800c794:	f7f3 fdfc 	bl	8000390 <__aeabi_uldivmod>
 800c798:	4602      	mov	r2, r0
 800c79a:	460b      	mov	r3, r1
 800c79c:	4613      	mov	r3, r2
 800c79e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c7a6:	d308      	bcc.n	800c7ba <UART_SetConfig+0x79a>
 800c7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7ae:	d204      	bcs.n	800c7ba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7b6:	60da      	str	r2, [r3, #12]
 800c7b8:	e17c      	b.n	800cab4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c7c0:	e178      	b.n	800cab4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	69db      	ldr	r3, [r3, #28]
 800c7c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c7ca:	f040 80c5 	bne.w	800c958 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c7ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c7d2:	2b20      	cmp	r3, #32
 800c7d4:	dc48      	bgt.n	800c868 <UART_SetConfig+0x848>
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	db7b      	blt.n	800c8d2 <UART_SetConfig+0x8b2>
 800c7da:	2b20      	cmp	r3, #32
 800c7dc:	d879      	bhi.n	800c8d2 <UART_SetConfig+0x8b2>
 800c7de:	a201      	add	r2, pc, #4	@ (adr r2, 800c7e4 <UART_SetConfig+0x7c4>)
 800c7e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e4:	0800c86f 	.word	0x0800c86f
 800c7e8:	0800c877 	.word	0x0800c877
 800c7ec:	0800c8d3 	.word	0x0800c8d3
 800c7f0:	0800c8d3 	.word	0x0800c8d3
 800c7f4:	0800c87f 	.word	0x0800c87f
 800c7f8:	0800c8d3 	.word	0x0800c8d3
 800c7fc:	0800c8d3 	.word	0x0800c8d3
 800c800:	0800c8d3 	.word	0x0800c8d3
 800c804:	0800c88f 	.word	0x0800c88f
 800c808:	0800c8d3 	.word	0x0800c8d3
 800c80c:	0800c8d3 	.word	0x0800c8d3
 800c810:	0800c8d3 	.word	0x0800c8d3
 800c814:	0800c8d3 	.word	0x0800c8d3
 800c818:	0800c8d3 	.word	0x0800c8d3
 800c81c:	0800c8d3 	.word	0x0800c8d3
 800c820:	0800c8d3 	.word	0x0800c8d3
 800c824:	0800c89f 	.word	0x0800c89f
 800c828:	0800c8d3 	.word	0x0800c8d3
 800c82c:	0800c8d3 	.word	0x0800c8d3
 800c830:	0800c8d3 	.word	0x0800c8d3
 800c834:	0800c8d3 	.word	0x0800c8d3
 800c838:	0800c8d3 	.word	0x0800c8d3
 800c83c:	0800c8d3 	.word	0x0800c8d3
 800c840:	0800c8d3 	.word	0x0800c8d3
 800c844:	0800c8d3 	.word	0x0800c8d3
 800c848:	0800c8d3 	.word	0x0800c8d3
 800c84c:	0800c8d3 	.word	0x0800c8d3
 800c850:	0800c8d3 	.word	0x0800c8d3
 800c854:	0800c8d3 	.word	0x0800c8d3
 800c858:	0800c8d3 	.word	0x0800c8d3
 800c85c:	0800c8d3 	.word	0x0800c8d3
 800c860:	0800c8d3 	.word	0x0800c8d3
 800c864:	0800c8c5 	.word	0x0800c8c5
 800c868:	2b40      	cmp	r3, #64	@ 0x40
 800c86a:	d02e      	beq.n	800c8ca <UART_SetConfig+0x8aa>
 800c86c:	e031      	b.n	800c8d2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c86e:	f7fa f939 	bl	8006ae4 <HAL_RCC_GetPCLK1Freq>
 800c872:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c874:	e033      	b.n	800c8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c876:	f7fa f94b 	bl	8006b10 <HAL_RCC_GetPCLK2Freq>
 800c87a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c87c:	e02f      	b.n	800c8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c87e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c882:	4618      	mov	r0, r3
 800c884:	f7fc f8fa 	bl	8008a7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c88c:	e027      	b.n	800c8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c88e:	f107 0318 	add.w	r3, r7, #24
 800c892:	4618      	mov	r0, r3
 800c894:	f7fc fa46 	bl	8008d24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c89c:	e01f      	b.n	800c8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c89e:	4b2d      	ldr	r3, [pc, #180]	@ (800c954 <UART_SetConfig+0x934>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f003 0320 	and.w	r3, r3, #32
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d009      	beq.n	800c8be <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8aa:	4b2a      	ldr	r3, [pc, #168]	@ (800c954 <UART_SetConfig+0x934>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	08db      	lsrs	r3, r3, #3
 800c8b0:	f003 0303 	and.w	r3, r3, #3
 800c8b4:	4a24      	ldr	r2, [pc, #144]	@ (800c948 <UART_SetConfig+0x928>)
 800c8b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8bc:	e00f      	b.n	800c8de <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c8be:	4b22      	ldr	r3, [pc, #136]	@ (800c948 <UART_SetConfig+0x928>)
 800c8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8c2:	e00c      	b.n	800c8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8c4:	4b21      	ldr	r3, [pc, #132]	@ (800c94c <UART_SetConfig+0x92c>)
 800c8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8c8:	e009      	b.n	800c8de <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c8d0:	e005      	b.n	800c8de <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c8dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c8de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f000 80e7 	beq.w	800cab4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ea:	4a19      	ldr	r2, [pc, #100]	@ (800c950 <UART_SetConfig+0x930>)
 800c8ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8f0:	461a      	mov	r2, r3
 800c8f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8f8:	005a      	lsls	r2, r3, #1
 800c8fa:	697b      	ldr	r3, [r7, #20]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	085b      	lsrs	r3, r3, #1
 800c900:	441a      	add	r2, r3
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	fbb2 f3f3 	udiv	r3, r2, r3
 800c90a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c90e:	2b0f      	cmp	r3, #15
 800c910:	d916      	bls.n	800c940 <UART_SetConfig+0x920>
 800c912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c918:	d212      	bcs.n	800c940 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	f023 030f 	bic.w	r3, r3, #15
 800c922:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c926:	085b      	lsrs	r3, r3, #1
 800c928:	b29b      	uxth	r3, r3
 800c92a:	f003 0307 	and.w	r3, r3, #7
 800c92e:	b29a      	uxth	r2, r3
 800c930:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c932:	4313      	orrs	r3, r2
 800c934:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c93c:	60da      	str	r2, [r3, #12]
 800c93e:	e0b9      	b.n	800cab4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c940:	2301      	movs	r3, #1
 800c942:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c946:	e0b5      	b.n	800cab4 <UART_SetConfig+0xa94>
 800c948:	03d09000 	.word	0x03d09000
 800c94c:	003d0900 	.word	0x003d0900
 800c950:	08018e98 	.word	0x08018e98
 800c954:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c958:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c95c:	2b20      	cmp	r3, #32
 800c95e:	dc49      	bgt.n	800c9f4 <UART_SetConfig+0x9d4>
 800c960:	2b00      	cmp	r3, #0
 800c962:	db7c      	blt.n	800ca5e <UART_SetConfig+0xa3e>
 800c964:	2b20      	cmp	r3, #32
 800c966:	d87a      	bhi.n	800ca5e <UART_SetConfig+0xa3e>
 800c968:	a201      	add	r2, pc, #4	@ (adr r2, 800c970 <UART_SetConfig+0x950>)
 800c96a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c96e:	bf00      	nop
 800c970:	0800c9fb 	.word	0x0800c9fb
 800c974:	0800ca03 	.word	0x0800ca03
 800c978:	0800ca5f 	.word	0x0800ca5f
 800c97c:	0800ca5f 	.word	0x0800ca5f
 800c980:	0800ca0b 	.word	0x0800ca0b
 800c984:	0800ca5f 	.word	0x0800ca5f
 800c988:	0800ca5f 	.word	0x0800ca5f
 800c98c:	0800ca5f 	.word	0x0800ca5f
 800c990:	0800ca1b 	.word	0x0800ca1b
 800c994:	0800ca5f 	.word	0x0800ca5f
 800c998:	0800ca5f 	.word	0x0800ca5f
 800c99c:	0800ca5f 	.word	0x0800ca5f
 800c9a0:	0800ca5f 	.word	0x0800ca5f
 800c9a4:	0800ca5f 	.word	0x0800ca5f
 800c9a8:	0800ca5f 	.word	0x0800ca5f
 800c9ac:	0800ca5f 	.word	0x0800ca5f
 800c9b0:	0800ca2b 	.word	0x0800ca2b
 800c9b4:	0800ca5f 	.word	0x0800ca5f
 800c9b8:	0800ca5f 	.word	0x0800ca5f
 800c9bc:	0800ca5f 	.word	0x0800ca5f
 800c9c0:	0800ca5f 	.word	0x0800ca5f
 800c9c4:	0800ca5f 	.word	0x0800ca5f
 800c9c8:	0800ca5f 	.word	0x0800ca5f
 800c9cc:	0800ca5f 	.word	0x0800ca5f
 800c9d0:	0800ca5f 	.word	0x0800ca5f
 800c9d4:	0800ca5f 	.word	0x0800ca5f
 800c9d8:	0800ca5f 	.word	0x0800ca5f
 800c9dc:	0800ca5f 	.word	0x0800ca5f
 800c9e0:	0800ca5f 	.word	0x0800ca5f
 800c9e4:	0800ca5f 	.word	0x0800ca5f
 800c9e8:	0800ca5f 	.word	0x0800ca5f
 800c9ec:	0800ca5f 	.word	0x0800ca5f
 800c9f0:	0800ca51 	.word	0x0800ca51
 800c9f4:	2b40      	cmp	r3, #64	@ 0x40
 800c9f6:	d02e      	beq.n	800ca56 <UART_SetConfig+0xa36>
 800c9f8:	e031      	b.n	800ca5e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9fa:	f7fa f873 	bl	8006ae4 <HAL_RCC_GetPCLK1Freq>
 800c9fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca00:	e033      	b.n	800ca6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca02:	f7fa f885 	bl	8006b10 <HAL_RCC_GetPCLK2Freq>
 800ca06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ca08:	e02f      	b.n	800ca6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7fc f834 	bl	8008a7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca18:	e027      	b.n	800ca6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca1a:	f107 0318 	add.w	r3, r7, #24
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7fc f980 	bl	8008d24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca28:	e01f      	b.n	800ca6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca2a:	4b2d      	ldr	r3, [pc, #180]	@ (800cae0 <UART_SetConfig+0xac0>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f003 0320 	and.w	r3, r3, #32
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d009      	beq.n	800ca4a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca36:	4b2a      	ldr	r3, [pc, #168]	@ (800cae0 <UART_SetConfig+0xac0>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	08db      	lsrs	r3, r3, #3
 800ca3c:	f003 0303 	and.w	r3, r3, #3
 800ca40:	4a28      	ldr	r2, [pc, #160]	@ (800cae4 <UART_SetConfig+0xac4>)
 800ca42:	fa22 f303 	lsr.w	r3, r2, r3
 800ca46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca48:	e00f      	b.n	800ca6a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ca4a:	4b26      	ldr	r3, [pc, #152]	@ (800cae4 <UART_SetConfig+0xac4>)
 800ca4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca4e:	e00c      	b.n	800ca6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca50:	4b25      	ldr	r3, [pc, #148]	@ (800cae8 <UART_SetConfig+0xac8>)
 800ca52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca54:	e009      	b.n	800ca6a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ca5c:	e005      	b.n	800ca6a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ca62:	2301      	movs	r3, #1
 800ca64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ca68:	bf00      	nop
    }

    if (pclk != 0U)
 800ca6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d021      	beq.n	800cab4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca74:	4a1d      	ldr	r2, [pc, #116]	@ (800caec <UART_SetConfig+0xacc>)
 800ca76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca7e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	085b      	lsrs	r3, r3, #1
 800ca88:	441a      	add	r2, r3
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca92:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca96:	2b0f      	cmp	r3, #15
 800ca98:	d909      	bls.n	800caae <UART_SetConfig+0xa8e>
 800ca9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800caa0:	d205      	bcs.n	800caae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800caa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa4:	b29a      	uxth	r2, r3
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	60da      	str	r2, [r3, #12]
 800caac:	e002      	b.n	800cab4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	2201      	movs	r2, #1
 800cac0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	2200      	movs	r2, #0
 800cac8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	2200      	movs	r2, #0
 800cace:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cad0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3748      	adds	r7, #72	@ 0x48
 800cad8:	46bd      	mov	sp, r7
 800cada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cade:	bf00      	nop
 800cae0:	58024400 	.word	0x58024400
 800cae4:	03d09000 	.word	0x03d09000
 800cae8:	003d0900 	.word	0x003d0900
 800caec:	08018e98 	.word	0x08018e98

0800caf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cafc:	f003 0308 	and.w	r3, r3, #8
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d00a      	beq.n	800cb1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	685b      	ldr	r3, [r3, #4]
 800cb0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	430a      	orrs	r2, r1
 800cb18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb1e:	f003 0301 	and.w	r3, r3, #1
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d00a      	beq.n	800cb3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	430a      	orrs	r2, r1
 800cb3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb40:	f003 0302 	and.w	r3, r3, #2
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d00a      	beq.n	800cb5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	430a      	orrs	r2, r1
 800cb5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb62:	f003 0304 	and.w	r3, r3, #4
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00a      	beq.n	800cb80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	430a      	orrs	r2, r1
 800cb7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb84:	f003 0310 	and.w	r3, r3, #16
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d00a      	beq.n	800cba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	430a      	orrs	r2, r1
 800cba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cba6:	f003 0320 	and.w	r3, r3, #32
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d00a      	beq.n	800cbc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	430a      	orrs	r2, r1
 800cbc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d01a      	beq.n	800cc06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	430a      	orrs	r2, r1
 800cbe4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cbee:	d10a      	bne.n	800cc06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	430a      	orrs	r2, r1
 800cc04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d00a      	beq.n	800cc28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	685b      	ldr	r3, [r3, #4]
 800cc18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	430a      	orrs	r2, r1
 800cc26:	605a      	str	r2, [r3, #4]
  }
}
 800cc28:	bf00      	nop
 800cc2a:	370c      	adds	r7, #12
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b098      	sub	sp, #96	@ 0x60
 800cc38:	af02      	add	r7, sp, #8
 800cc3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc44:	f7f5 fcd8 	bl	80025f8 <HAL_GetTick>
 800cc48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f003 0308 	and.w	r3, r3, #8
 800cc54:	2b08      	cmp	r3, #8
 800cc56:	d12f      	bne.n	800ccb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc5c:	9300      	str	r3, [sp, #0]
 800cc5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc60:	2200      	movs	r2, #0
 800cc62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 f88e 	bl	800cd88 <UART_WaitOnFlagUntilTimeout>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d022      	beq.n	800ccb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc7a:	e853 3f00 	ldrex	r3, [r3]
 800cc7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cc80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc86:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc90:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc98:	e841 2300 	strex	r3, r2, [r1]
 800cc9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d1e6      	bne.n	800cc72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2220      	movs	r2, #32
 800cca8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccb4:	2303      	movs	r3, #3
 800ccb6:	e063      	b.n	800cd80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f003 0304 	and.w	r3, r3, #4
 800ccc2:	2b04      	cmp	r3, #4
 800ccc4:	d149      	bne.n	800cd5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ccca:	9300      	str	r3, [sp, #0]
 800cccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 f857 	bl	800cd88 <UART_WaitOnFlagUntilTimeout>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d03c      	beq.n	800cd5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce8:	e853 3f00 	ldrex	r3, [r3]
 800ccec:	623b      	str	r3, [r7, #32]
   return(result);
 800ccee:	6a3b      	ldr	r3, [r7, #32]
 800ccf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ccf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccfe:	633b      	str	r3, [r7, #48]	@ 0x30
 800cd00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd06:	e841 2300 	strex	r3, r2, [r1]
 800cd0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1e6      	bne.n	800cce0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	3308      	adds	r3, #8
 800cd18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	e853 3f00 	ldrex	r3, [r3]
 800cd20:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f023 0301 	bic.w	r3, r3, #1
 800cd28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	3308      	adds	r3, #8
 800cd30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cd32:	61fa      	str	r2, [r7, #28]
 800cd34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd36:	69b9      	ldr	r1, [r7, #24]
 800cd38:	69fa      	ldr	r2, [r7, #28]
 800cd3a:	e841 2300 	strex	r3, r2, [r1]
 800cd3e:	617b      	str	r3, [r7, #20]
   return(result);
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d1e5      	bne.n	800cd12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2220      	movs	r2, #32
 800cd4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2200      	movs	r2, #0
 800cd52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd56:	2303      	movs	r3, #3
 800cd58:	e012      	b.n	800cd80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2220      	movs	r2, #32
 800cd5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2220      	movs	r2, #32
 800cd66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2200      	movs	r2, #0
 800cd74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3758      	adds	r7, #88	@ 0x58
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	60f8      	str	r0, [r7, #12]
 800cd90:	60b9      	str	r1, [r7, #8]
 800cd92:	603b      	str	r3, [r7, #0]
 800cd94:	4613      	mov	r3, r2
 800cd96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd98:	e04f      	b.n	800ce3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd9a:	69bb      	ldr	r3, [r7, #24]
 800cd9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cda0:	d04b      	beq.n	800ce3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cda2:	f7f5 fc29 	bl	80025f8 <HAL_GetTick>
 800cda6:	4602      	mov	r2, r0
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	1ad3      	subs	r3, r2, r3
 800cdac:	69ba      	ldr	r2, [r7, #24]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d302      	bcc.n	800cdb8 <UART_WaitOnFlagUntilTimeout+0x30>
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d101      	bne.n	800cdbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cdb8:	2303      	movs	r3, #3
 800cdba:	e04e      	b.n	800ce5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f003 0304 	and.w	r3, r3, #4
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d037      	beq.n	800ce3a <UART_WaitOnFlagUntilTimeout+0xb2>
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	2b80      	cmp	r3, #128	@ 0x80
 800cdce:	d034      	beq.n	800ce3a <UART_WaitOnFlagUntilTimeout+0xb2>
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	2b40      	cmp	r3, #64	@ 0x40
 800cdd4:	d031      	beq.n	800ce3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	69db      	ldr	r3, [r3, #28]
 800cddc:	f003 0308 	and.w	r3, r3, #8
 800cde0:	2b08      	cmp	r3, #8
 800cde2:	d110      	bne.n	800ce06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2208      	movs	r2, #8
 800cdea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	f000 f839 	bl	800ce64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2208      	movs	r2, #8
 800cdf6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ce02:	2301      	movs	r3, #1
 800ce04:	e029      	b.n	800ce5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	69db      	ldr	r3, [r3, #28]
 800ce0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ce10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce14:	d111      	bne.n	800ce3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ce1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f000 f81f 	bl	800ce64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2220      	movs	r2, #32
 800ce2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2200      	movs	r2, #0
 800ce32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ce36:	2303      	movs	r3, #3
 800ce38:	e00f      	b.n	800ce5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	69da      	ldr	r2, [r3, #28]
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	4013      	ands	r3, r2
 800ce44:	68ba      	ldr	r2, [r7, #8]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	bf0c      	ite	eq
 800ce4a:	2301      	moveq	r3, #1
 800ce4c:	2300      	movne	r3, #0
 800ce4e:	b2db      	uxtb	r3, r3
 800ce50:	461a      	mov	r2, r3
 800ce52:	79fb      	ldrb	r3, [r7, #7]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d0a0      	beq.n	800cd9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce58:	2300      	movs	r3, #0
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
	...

0800ce64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b095      	sub	sp, #84	@ 0x54
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce74:	e853 3f00 	ldrex	r3, [r3]
 800ce78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	461a      	mov	r2, r3
 800ce88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce8a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce92:	e841 2300 	strex	r3, r2, [r1]
 800ce96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1e6      	bne.n	800ce6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	3308      	adds	r3, #8
 800cea4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea6:	6a3b      	ldr	r3, [r7, #32]
 800cea8:	e853 3f00 	ldrex	r3, [r3]
 800ceac:	61fb      	str	r3, [r7, #28]
   return(result);
 800ceae:	69fa      	ldr	r2, [r7, #28]
 800ceb0:	4b1e      	ldr	r3, [pc, #120]	@ (800cf2c <UART_EndRxTransfer+0xc8>)
 800ceb2:	4013      	ands	r3, r2
 800ceb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	3308      	adds	r3, #8
 800cebc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cebe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cec0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cec2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cec6:	e841 2300 	strex	r3, r2, [r1]
 800ceca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d1e5      	bne.n	800ce9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ced6:	2b01      	cmp	r3, #1
 800ced8:	d118      	bne.n	800cf0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	e853 3f00 	ldrex	r3, [r3]
 800cee6:	60bb      	str	r3, [r7, #8]
   return(result);
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	f023 0310 	bic.w	r3, r3, #16
 800ceee:	647b      	str	r3, [r7, #68]	@ 0x44
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	461a      	mov	r2, r3
 800cef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cef8:	61bb      	str	r3, [r7, #24]
 800cefa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefc:	6979      	ldr	r1, [r7, #20]
 800cefe:	69ba      	ldr	r2, [r7, #24]
 800cf00:	e841 2300 	strex	r3, r2, [r1]
 800cf04:	613b      	str	r3, [r7, #16]
   return(result);
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d1e6      	bne.n	800ceda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2220      	movs	r2, #32
 800cf10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2200      	movs	r2, #0
 800cf18:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cf20:	bf00      	nop
 800cf22:	3754      	adds	r7, #84	@ 0x54
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr
 800cf2c:	effffffe 	.word	0xeffffffe

0800cf30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b085      	sub	sp, #20
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d101      	bne.n	800cf46 <HAL_UARTEx_DisableFifoMode+0x16>
 800cf42:	2302      	movs	r3, #2
 800cf44:	e027      	b.n	800cf96 <HAL_UARTEx_DisableFifoMode+0x66>
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2201      	movs	r2, #1
 800cf4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2224      	movs	r2, #36	@ 0x24
 800cf52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f022 0201 	bic.w	r2, r2, #1
 800cf6c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cf74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2220      	movs	r2, #32
 800cf88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2200      	movs	r2, #0
 800cf90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf94:	2300      	movs	r3, #0
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3714      	adds	r7, #20
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr

0800cfa2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b084      	sub	sp, #16
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
 800cfaa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cfb2:	2b01      	cmp	r3, #1
 800cfb4:	d101      	bne.n	800cfba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cfb6:	2302      	movs	r3, #2
 800cfb8:	e02d      	b.n	800d016 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2224      	movs	r2, #36	@ 0x24
 800cfc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f022 0201 	bic.w	r2, r2, #1
 800cfe0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	689b      	ldr	r3, [r3, #8]
 800cfe8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	683a      	ldr	r2, [r7, #0]
 800cff2:	430a      	orrs	r2, r1
 800cff4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 f850 	bl	800d09c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68fa      	ldr	r2, [r7, #12]
 800d002:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	2220      	movs	r2, #32
 800d008:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d014:	2300      	movs	r3, #0
}
 800d016:	4618      	mov	r0, r3
 800d018:	3710      	adds	r7, #16
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}

0800d01e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d01e:	b580      	push	{r7, lr}
 800d020:	b084      	sub	sp, #16
 800d022:	af00      	add	r7, sp, #0
 800d024:	6078      	str	r0, [r7, #4]
 800d026:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d02e:	2b01      	cmp	r3, #1
 800d030:	d101      	bne.n	800d036 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d032:	2302      	movs	r3, #2
 800d034:	e02d      	b.n	800d092 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	2201      	movs	r2, #1
 800d03a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2224      	movs	r2, #36	@ 0x24
 800d042:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	681a      	ldr	r2, [r3, #0]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f022 0201 	bic.w	r2, r2, #1
 800d05c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	683a      	ldr	r2, [r7, #0]
 800d06e:	430a      	orrs	r2, r1
 800d070:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 f812 	bl	800d09c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	68fa      	ldr	r2, [r7, #12]
 800d07e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2220      	movs	r2, #32
 800d084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d090:	2300      	movs	r3, #0
}
 800d092:	4618      	mov	r0, r3
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
	...

0800d09c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d108      	bne.n	800d0be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2201      	movs	r2, #1
 800d0b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d0bc:	e031      	b.n	800d122 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d0be:	2310      	movs	r3, #16
 800d0c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d0c2:	2310      	movs	r3, #16
 800d0c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	689b      	ldr	r3, [r3, #8]
 800d0cc:	0e5b      	lsrs	r3, r3, #25
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	f003 0307 	and.w	r3, r3, #7
 800d0d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	689b      	ldr	r3, [r3, #8]
 800d0dc:	0f5b      	lsrs	r3, r3, #29
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	f003 0307 	and.w	r3, r3, #7
 800d0e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d0e6:	7bbb      	ldrb	r3, [r7, #14]
 800d0e8:	7b3a      	ldrb	r2, [r7, #12]
 800d0ea:	4911      	ldr	r1, [pc, #68]	@ (800d130 <UARTEx_SetNbDataToProcess+0x94>)
 800d0ec:	5c8a      	ldrb	r2, [r1, r2]
 800d0ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d0f2:	7b3a      	ldrb	r2, [r7, #12]
 800d0f4:	490f      	ldr	r1, [pc, #60]	@ (800d134 <UARTEx_SetNbDataToProcess+0x98>)
 800d0f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d0f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0fc:	b29a      	uxth	r2, r3
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d104:	7bfb      	ldrb	r3, [r7, #15]
 800d106:	7b7a      	ldrb	r2, [r7, #13]
 800d108:	4909      	ldr	r1, [pc, #36]	@ (800d130 <UARTEx_SetNbDataToProcess+0x94>)
 800d10a:	5c8a      	ldrb	r2, [r1, r2]
 800d10c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d110:	7b7a      	ldrb	r2, [r7, #13]
 800d112:	4908      	ldr	r1, [pc, #32]	@ (800d134 <UARTEx_SetNbDataToProcess+0x98>)
 800d114:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d116:	fb93 f3f2 	sdiv	r3, r3, r2
 800d11a:	b29a      	uxth	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d122:	bf00      	nop
 800d124:	3714      	adds	r7, #20
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	08018eb0 	.word	0x08018eb0
 800d134:	08018eb8 	.word	0x08018eb8

0800d138 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800d138:	b084      	sub	sp, #16
 800d13a:	b480      	push	{r7}
 800d13c:	b085      	sub	sp, #20
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
 800d142:	f107 001c 	add.w	r0, r7, #28
 800d146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800d14a:	2300      	movs	r3, #0
 800d14c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800d14e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800d150:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800d152:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800d154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800d156:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800d158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 800d15a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800d15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 800d15e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	4313      	orrs	r3, r2
 800d164:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	685a      	ldr	r2, [r3, #4]
 800d16a:	4b07      	ldr	r3, [pc, #28]	@ (800d188 <SDMMC_Init+0x50>)
 800d16c:	4013      	ands	r3, r2
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	431a      	orrs	r2, r3
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d176:	2300      	movs	r3, #0
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3714      	adds	r7, #20
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	b004      	add	sp, #16
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop
 800d188:	ffc02c00 	.word	0xffc02c00

0800d18c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b083      	sub	sp, #12
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	370c      	adds	r7, #12
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr

0800d1a6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800d1a6:	b480      	push	{r7}
 800d1a8:	b083      	sub	sp, #12
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	681a      	ldr	r2, [r3, #0]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d1ba:	2300      	movs	r3, #0
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	370c      	adds	r7, #12
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b083      	sub	sp, #12
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f043 0203 	orr.w	r2, r3, #3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d1dc:	2300      	movs	r3, #0
}
 800d1de:	4618      	mov	r0, r3
 800d1e0:	370c      	adds	r7, #12
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e8:	4770      	bx	lr

0800d1ea <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 800d1ea:	b480      	push	{r7}
 800d1ec:	b083      	sub	sp, #12
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	f003 0303 	and.w	r3, r3, #3
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	370c      	adds	r7, #12
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr
	...

0800d208 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 800d208:	b480      	push	{r7}
 800d20a:	b085      	sub	sp, #20
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d212:	2300      	movs	r3, #0
 800d214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d226:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800d22c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800d232:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800d234:	68fa      	ldr	r2, [r7, #12]
 800d236:	4313      	orrs	r3, r2
 800d238:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	68da      	ldr	r2, [r3, #12]
 800d23e:	4b06      	ldr	r3, [pc, #24]	@ (800d258 <SDMMC_SendCommand+0x50>)
 800d240:	4013      	ands	r3, r2
 800d242:	68fa      	ldr	r2, [r7, #12]
 800d244:	431a      	orrs	r2, r3
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d24a:	2300      	movs	r3, #0
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3714      	adds	r7, #20
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr
 800d258:	fffee0c0 	.word	0xfffee0c0

0800d25c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b083      	sub	sp, #12
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	b2db      	uxtb	r3, r3
}
 800d26a:	4618      	mov	r0, r3
 800d26c:	370c      	adds	r7, #12
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr

0800d276 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d276:	b480      	push	{r7}
 800d278:	b085      	sub	sp, #20
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
 800d27e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	3314      	adds	r3, #20
 800d284:	461a      	mov	r2, r3
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	4413      	add	r3, r2
 800d28a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
}
 800d290:	4618      	mov	r0, r3
 800d292:	3714      	adds	r7, #20
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b085      	sub	sp, #20
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	685a      	ldr	r2, [r3, #4]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d2c2:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800d2c8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800d2ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800d2d0:	68fa      	ldr	r2, [r7, #12]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2da:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	431a      	orrs	r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d2e6:	2300      	movs	r3, #0

}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3714      	adds	r7, #20
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr

0800d2f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b088      	sub	sp, #32
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d302:	2310      	movs	r3, #16
 800d304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d30a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d30c:	2300      	movs	r3, #0
 800d30e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d314:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d316:	f107 0308 	add.w	r3, r7, #8
 800d31a:	4619      	mov	r1, r3
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f7ff ff73 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d322:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d326:	2110      	movs	r1, #16
 800d328:	6878      	ldr	r0, [r7, #4]
 800d32a:	f000 fa5f 	bl	800d7ec <SDMMC_GetCmdResp1>
 800d32e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d330:	69fb      	ldr	r3, [r7, #28]
}
 800d332:	4618      	mov	r0, r3
 800d334:	3720      	adds	r7, #32
 800d336:	46bd      	mov	sp, r7
 800d338:	bd80      	pop	{r7, pc}

0800d33a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b088      	sub	sp, #32
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
 800d342:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d348:	2311      	movs	r3, #17
 800d34a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d34c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d350:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d352:	2300      	movs	r3, #0
 800d354:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d356:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d35a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d35c:	f107 0308 	add.w	r3, r7, #8
 800d360:	4619      	mov	r1, r3
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f7ff ff50 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d36c:	2111      	movs	r1, #17
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 fa3c 	bl	800d7ec <SDMMC_GetCmdResp1>
 800d374:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d376:	69fb      	ldr	r3, [r7, #28]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3720      	adds	r7, #32
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b088      	sub	sp, #32
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d38e:	2312      	movs	r3, #18
 800d390:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d392:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d396:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d398:	2300      	movs	r3, #0
 800d39a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d39c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3a2:	f107 0308 	add.w	r3, r7, #8
 800d3a6:	4619      	mov	r1, r3
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f7ff ff2d 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d3ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3b2:	2112      	movs	r1, #18
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f000 fa19 	bl	800d7ec <SDMMC_GetCmdResp1>
 800d3ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3bc:	69fb      	ldr	r3, [r7, #28]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3720      	adds	r7, #32
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}

0800d3c6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d3c6:	b580      	push	{r7, lr}
 800d3c8:	b088      	sub	sp, #32
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	6078      	str	r0, [r7, #4]
 800d3ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d3d4:	2318      	movs	r3, #24
 800d3d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d3dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d3e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3e8:	f107 0308 	add.w	r3, r7, #8
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f7ff ff0a 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d3f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d3f8:	2118      	movs	r1, #24
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f000 f9f6 	bl	800d7ec <SDMMC_GetCmdResp1>
 800d400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d402:	69fb      	ldr	r3, [r7, #28]
}
 800d404:	4618      	mov	r0, r3
 800d406:	3720      	adds	r7, #32
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b088      	sub	sp, #32
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d41a:	2319      	movs	r3, #25
 800d41c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d41e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d422:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d424:	2300      	movs	r3, #0
 800d426:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d428:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d42c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d42e:	f107 0308 	add.w	r3, r7, #8
 800d432:	4619      	mov	r1, r3
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f7ff fee7 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d43a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d43e:	2119      	movs	r1, #25
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f000 f9d3 	bl	800d7ec <SDMMC_GetCmdResp1>
 800d446:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d448:	69fb      	ldr	r3, [r7, #28]
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3720      	adds	r7, #32
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
	...

0800d454 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b088      	sub	sp, #32
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d45c:	2300      	movs	r3, #0
 800d45e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d460:	230c      	movs	r3, #12
 800d462:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d464:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d468:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d46a:	2300      	movs	r3, #0
 800d46c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d46e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d472:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	68db      	ldr	r3, [r3, #12]
 800d478:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d48c:	f107 0308 	add.w	r3, r7, #8
 800d490:	4619      	mov	r1, r3
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7ff feb8 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d498:	4a0b      	ldr	r2, [pc, #44]	@ (800d4c8 <SDMMC_CmdStopTransfer+0x74>)
 800d49a:	210c      	movs	r1, #12
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 f9a5 	bl	800d7ec <SDMMC_GetCmdResp1>
 800d4a2:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d4b6:	d101      	bne.n	800d4bc <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800d4bc:	69fb      	ldr	r3, [r7, #28]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3720      	adds	r7, #32
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	05f5e100 	.word	0x05f5e100

0800d4cc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b088      	sub	sp, #32
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d4da:	2307      	movs	r3, #7
 800d4dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d4e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d4ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4ee:	f107 0308 	add.w	r3, r7, #8
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f7ff fe87 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d4fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d4fe:	2107      	movs	r1, #7
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 f973 	bl	800d7ec <SDMMC_GetCmdResp1>
 800d506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d508:	69fb      	ldr	r3, [r7, #28]
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3720      	adds	r7, #32
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}

0800d512 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d512:	b580      	push	{r7, lr}
 800d514:	b088      	sub	sp, #32
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d51a:	2300      	movs	r3, #0
 800d51c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d51e:	2300      	movs	r3, #0
 800d520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d522:	2300      	movs	r3, #0
 800d524:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d526:	2300      	movs	r3, #0
 800d528:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d52a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d52e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d530:	f107 0308 	add.w	r3, r7, #8
 800d534:	4619      	mov	r1, r3
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f7ff fe66 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 fb97 	bl	800dc70 <SDMMC_GetCmdError>
 800d542:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d544:	69fb      	ldr	r3, [r7, #28]
}
 800d546:	4618      	mov	r0, r3
 800d548:	3720      	adds	r7, #32
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}

0800d54e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d54e:	b580      	push	{r7, lr}
 800d550:	b088      	sub	sp, #32
 800d552:	af00      	add	r7, sp, #0
 800d554:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d556:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d55a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d55c:	2308      	movs	r3, #8
 800d55e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d560:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d566:	2300      	movs	r3, #0
 800d568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d56a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d56e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d570:	f107 0308 	add.w	r3, r7, #8
 800d574:	4619      	mov	r1, r3
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f7ff fe46 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f000 fb29 	bl	800dbd4 <SDMMC_GetCmdResp7>
 800d582:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d584:	69fb      	ldr	r3, [r7, #28]
}
 800d586:	4618      	mov	r0, r3
 800d588:	3720      	adds	r7, #32
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}

0800d58e <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d58e:	b580      	push	{r7, lr}
 800d590:	b088      	sub	sp, #32
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
 800d596:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d59c:	2337      	movs	r3, #55	@ 0x37
 800d59e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d5a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d5ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5b0:	f107 0308 	add.w	r3, r7, #8
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7ff fe26 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d5bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5c0:	2137      	movs	r1, #55	@ 0x37
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f000 f912 	bl	800d7ec <SDMMC_GetCmdResp1>
 800d5c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d5ca:	69fb      	ldr	r3, [r7, #28]
}
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	3720      	adds	r7, #32
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bd80      	pop	{r7, pc}

0800d5d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	b088      	sub	sp, #32
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d5e2:	2329      	movs	r3, #41	@ 0x29
 800d5e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d5e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d5ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d5f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d5f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d5f6:	f107 0308 	add.w	r3, r7, #8
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f7ff fe03 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fa2e 	bl	800da64 <SDMMC_GetCmdResp3>
 800d608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d60a:	69fb      	ldr	r3, [r7, #28]
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3720      	adds	r7, #32
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b088      	sub	sp, #32
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d622:	2306      	movs	r3, #6
 800d624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d626:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d62a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d62c:	2300      	movs	r3, #0
 800d62e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d634:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d636:	f107 0308 	add.w	r3, r7, #8
 800d63a:	4619      	mov	r1, r3
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7ff fde3 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800d642:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d646:	2106      	movs	r1, #6
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 f8cf 	bl	800d7ec <SDMMC_GetCmdResp1>
 800d64e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d650:	69fb      	ldr	r3, [r7, #28]
}
 800d652:	4618      	mov	r0, r3
 800d654:	3720      	adds	r7, #32
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}

0800d65a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800d65a:	b580      	push	{r7, lr}
 800d65c:	b088      	sub	sp, #32
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d662:	2300      	movs	r3, #0
 800d664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d666:	2333      	movs	r3, #51	@ 0x33
 800d668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d66a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d66e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d670:	2300      	movs	r3, #0
 800d672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d674:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d678:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d67a:	f107 0308 	add.w	r3, r7, #8
 800d67e:	4619      	mov	r1, r3
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f7ff fdc1 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800d686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d68a:	2133      	movs	r1, #51	@ 0x33
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 f8ad 	bl	800d7ec <SDMMC_GetCmdResp1>
 800d692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d694:	69fb      	ldr	r3, [r7, #28]
}
 800d696:	4618      	mov	r0, r3
 800d698:	3720      	adds	r7, #32
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b088      	sub	sp, #32
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d6aa:	2302      	movs	r3, #2
 800d6ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d6ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d6b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d6bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6be:	f107 0308 	add.w	r3, r7, #8
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7ff fd9f 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 f980 	bl	800d9d0 <SDMMC_GetCmdResp2>
 800d6d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d6d2:	69fb      	ldr	r3, [r7, #28]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3720      	adds	r7, #32
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b088      	sub	sp, #32
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d6ea:	2309      	movs	r3, #9
 800d6ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d6ee:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800d6f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d6f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d6fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d6fe:	f107 0308 	add.w	r3, r7, #8
 800d702:	4619      	mov	r1, r3
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f7ff fd7f 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 f960 	bl	800d9d0 <SDMMC_GetCmdResp2>
 800d710:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d712:	69fb      	ldr	r3, [r7, #28]
}
 800d714:	4618      	mov	r0, r3
 800d716:	3720      	adds	r7, #32
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b088      	sub	sp, #32
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d726:	2300      	movs	r3, #0
 800d728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d72a:	2303      	movs	r3, #3
 800d72c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d72e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d734:	2300      	movs	r3, #0
 800d736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d73c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d73e:	f107 0308 	add.w	r3, r7, #8
 800d742:	4619      	mov	r1, r3
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f7ff fd5f 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d74a:	683a      	ldr	r2, [r7, #0]
 800d74c:	2103      	movs	r1, #3
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f000 f9c8 	bl	800dae4 <SDMMC_GetCmdResp6>
 800d754:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d756:	69fb      	ldr	r3, [r7, #28]
}
 800d758:	4618      	mov	r0, r3
 800d75a:	3720      	adds	r7, #32
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b088      	sub	sp, #32
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d76e:	230d      	movs	r3, #13
 800d770:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d772:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d778:	2300      	movs	r3, #0
 800d77a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d77c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d780:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d782:	f107 0308 	add.w	r3, r7, #8
 800d786:	4619      	mov	r1, r3
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f7ff fd3d 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d78e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d792:	210d      	movs	r1, #13
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 f829 	bl	800d7ec <SDMMC_GetCmdResp1>
 800d79a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d79c:	69fb      	ldr	r3, [r7, #28]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3720      	adds	r7, #32
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b088      	sub	sp, #32
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800d7b2:	230d      	movs	r3, #13
 800d7b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d7b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d7ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d7c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d7c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d7c6:	f107 0308 	add.w	r3, r7, #8
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f7ff fd1b 	bl	800d208 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800d7d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7d6:	210d      	movs	r1, #13
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 f807 	bl	800d7ec <SDMMC_GetCmdResp1>
 800d7de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d7e0:	69fb      	ldr	r3, [r7, #28]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3720      	adds	r7, #32
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
	...

0800d7ec <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b088      	sub	sp, #32
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	60f8      	str	r0, [r7, #12]
 800d7f4:	460b      	mov	r3, r1
 800d7f6:	607a      	str	r2, [r7, #4]
 800d7f8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800d7fa:	4b70      	ldr	r3, [pc, #448]	@ (800d9bc <SDMMC_GetCmdResp1+0x1d0>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	4a70      	ldr	r2, [pc, #448]	@ (800d9c0 <SDMMC_GetCmdResp1+0x1d4>)
 800d800:	fba2 2303 	umull	r2, r3, r2, r3
 800d804:	0a5a      	lsrs	r2, r3, #9
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	fb02 f303 	mul.w	r3, r2, r3
 800d80c:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	1e5a      	subs	r2, r3, #1
 800d812:	61fa      	str	r2, [r7, #28]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d102      	bne.n	800d81e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d818:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d81c:	e0c9      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d822:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800d824:	69ba      	ldr	r2, [r7, #24]
 800d826:	4b67      	ldr	r3, [pc, #412]	@ (800d9c4 <SDMMC_GetCmdResp1+0x1d8>)
 800d828:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d0ef      	beq.n	800d80e <SDMMC_GetCmdResp1+0x22>
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d834:	2b00      	cmp	r3, #0
 800d836:	d1ea      	bne.n	800d80e <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d83c:	f003 0304 	and.w	r3, r3, #4
 800d840:	2b00      	cmp	r3, #0
 800d842:	d004      	beq.n	800d84e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2204      	movs	r2, #4
 800d848:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d84a:	2304      	movs	r3, #4
 800d84c:	e0b1      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d852:	f003 0301 	and.w	r3, r3, #1
 800d856:	2b00      	cmp	r3, #0
 800d858:	d004      	beq.n	800d864 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	2201      	movs	r2, #1
 800d85e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d860:	2301      	movs	r3, #1
 800d862:	e0a6      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	4a58      	ldr	r2, [pc, #352]	@ (800d9c8 <SDMMC_GetCmdResp1+0x1dc>)
 800d868:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d86a:	68f8      	ldr	r0, [r7, #12]
 800d86c:	f7ff fcf6 	bl	800d25c <SDMMC_GetCommandResponse>
 800d870:	4603      	mov	r3, r0
 800d872:	461a      	mov	r2, r3
 800d874:	7afb      	ldrb	r3, [r7, #11]
 800d876:	4293      	cmp	r3, r2
 800d878:	d001      	beq.n	800d87e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d87a:	2301      	movs	r3, #1
 800d87c:	e099      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d87e:	2100      	movs	r1, #0
 800d880:	68f8      	ldr	r0, [r7, #12]
 800d882:	f7ff fcf8 	bl	800d276 <SDMMC_GetResponse>
 800d886:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d888:	697a      	ldr	r2, [r7, #20]
 800d88a:	4b50      	ldr	r3, [pc, #320]	@ (800d9cc <SDMMC_GetCmdResp1+0x1e0>)
 800d88c:	4013      	ands	r3, r2
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d101      	bne.n	800d896 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d892:	2300      	movs	r3, #0
 800d894:	e08d      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d896:	697b      	ldr	r3, [r7, #20]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	da02      	bge.n	800d8a2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d89c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d8a0:	e087      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d001      	beq.n	800d8b0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d8ac:	2340      	movs	r3, #64	@ 0x40
 800d8ae:	e080      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d001      	beq.n	800d8be <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d8ba:	2380      	movs	r3, #128	@ 0x80
 800d8bc:	e079      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d002      	beq.n	800d8ce <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d8c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d8cc:	e071      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d002      	beq.n	800d8de <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d8d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d8dc:	e069      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d002      	beq.n	800d8ee <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d8e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d8ec:	e061      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d002      	beq.n	800d8fe <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d8f8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d8fc:	e059      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d904:	2b00      	cmp	r3, #0
 800d906:	d002      	beq.n	800d90e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d908:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d90c:	e051      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d914:	2b00      	cmp	r3, #0
 800d916:	d002      	beq.n	800d91e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d918:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d91c:	e049      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d91e:	697b      	ldr	r3, [r7, #20]
 800d920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d924:	2b00      	cmp	r3, #0
 800d926:	d002      	beq.n	800d92e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d928:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d92c:	e041      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d934:	2b00      	cmp	r3, #0
 800d936:	d002      	beq.n	800d93e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d938:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d93c:	e039      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d93e:	697b      	ldr	r3, [r7, #20]
 800d940:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d944:	2b00      	cmp	r3, #0
 800d946:	d002      	beq.n	800d94e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d948:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d94c:	e031      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d954:	2b00      	cmp	r3, #0
 800d956:	d002      	beq.n	800d95e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d958:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d95c:	e029      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d964:	2b00      	cmp	r3, #0
 800d966:	d002      	beq.n	800d96e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d968:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d96c:	e021      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d974:	2b00      	cmp	r3, #0
 800d976:	d002      	beq.n	800d97e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d978:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d97c:	e019      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d984:	2b00      	cmp	r3, #0
 800d986:	d002      	beq.n	800d98e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d988:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d98c:	e011      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d994:	2b00      	cmp	r3, #0
 800d996:	d002      	beq.n	800d99e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d998:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d99c:	e009      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	f003 0308 	and.w	r3, r3, #8
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d002      	beq.n	800d9ae <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d9a8:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d9ac:	e001      	b.n	800d9b2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d9ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3720      	adds	r7, #32
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	24000008 	.word	0x24000008
 800d9c0:	10624dd3 	.word	0x10624dd3
 800d9c4:	00200045 	.word	0x00200045
 800d9c8:	002000c5 	.word	0x002000c5
 800d9cc:	fdffe008 	.word	0xfdffe008

0800d9d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b085      	sub	sp, #20
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800d9d8:	4b1f      	ldr	r3, [pc, #124]	@ (800da58 <SDMMC_GetCmdResp2+0x88>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4a1f      	ldr	r2, [pc, #124]	@ (800da5c <SDMMC_GetCmdResp2+0x8c>)
 800d9de:	fba2 2303 	umull	r2, r3, r2, r3
 800d9e2:	0a5b      	lsrs	r3, r3, #9
 800d9e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9e8:	fb02 f303 	mul.w	r3, r2, r3
 800d9ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	1e5a      	subs	r2, r3, #1
 800d9f2:	60fa      	str	r2, [r7, #12]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d102      	bne.n	800d9fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d9fc:	e026      	b.n	800da4c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da02:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d0ef      	beq.n	800d9ee <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da14:	2b00      	cmp	r3, #0
 800da16:	d1ea      	bne.n	800d9ee <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da1c:	f003 0304 	and.w	r3, r3, #4
 800da20:	2b00      	cmp	r3, #0
 800da22:	d004      	beq.n	800da2e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2204      	movs	r2, #4
 800da28:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800da2a:	2304      	movs	r3, #4
 800da2c:	e00e      	b.n	800da4c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da32:	f003 0301 	and.w	r3, r3, #1
 800da36:	2b00      	cmp	r3, #0
 800da38:	d004      	beq.n	800da44 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	2201      	movs	r2, #1
 800da3e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800da40:	2301      	movs	r3, #1
 800da42:	e003      	b.n	800da4c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	4a06      	ldr	r2, [pc, #24]	@ (800da60 <SDMMC_GetCmdResp2+0x90>)
 800da48:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800da4a:	2300      	movs	r3, #0
}
 800da4c:	4618      	mov	r0, r3
 800da4e:	3714      	adds	r7, #20
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr
 800da58:	24000008 	.word	0x24000008
 800da5c:	10624dd3 	.word	0x10624dd3
 800da60:	002000c5 	.word	0x002000c5

0800da64 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800da6c:	4b1a      	ldr	r3, [pc, #104]	@ (800dad8 <SDMMC_GetCmdResp3+0x74>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a1a      	ldr	r2, [pc, #104]	@ (800dadc <SDMMC_GetCmdResp3+0x78>)
 800da72:	fba2 2303 	umull	r2, r3, r2, r3
 800da76:	0a5b      	lsrs	r3, r3, #9
 800da78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da7c:	fb02 f303 	mul.w	r3, r2, r3
 800da80:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	1e5a      	subs	r2, r3, #1
 800da86:	60fa      	str	r2, [r7, #12]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d102      	bne.n	800da92 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800da8c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800da90:	e01b      	b.n	800daca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da96:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d0ef      	beq.n	800da82 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d1ea      	bne.n	800da82 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dab0:	f003 0304 	and.w	r3, r3, #4
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d004      	beq.n	800dac2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2204      	movs	r2, #4
 800dabc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dabe:	2304      	movs	r3, #4
 800dac0:	e003      	b.n	800daca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4a06      	ldr	r2, [pc, #24]	@ (800dae0 <SDMMC_GetCmdResp3+0x7c>)
 800dac6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dac8:	2300      	movs	r3, #0
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3714      	adds	r7, #20
 800dace:	46bd      	mov	sp, r7
 800dad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad4:	4770      	bx	lr
 800dad6:	bf00      	nop
 800dad8:	24000008 	.word	0x24000008
 800dadc:	10624dd3 	.word	0x10624dd3
 800dae0:	002000c5 	.word	0x002000c5

0800dae4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b088      	sub	sp, #32
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	460b      	mov	r3, r1
 800daee:	607a      	str	r2, [r7, #4]
 800daf0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800daf2:	4b35      	ldr	r3, [pc, #212]	@ (800dbc8 <SDMMC_GetCmdResp6+0xe4>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	4a35      	ldr	r2, [pc, #212]	@ (800dbcc <SDMMC_GetCmdResp6+0xe8>)
 800daf8:	fba2 2303 	umull	r2, r3, r2, r3
 800dafc:	0a5b      	lsrs	r3, r3, #9
 800dafe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db02:	fb02 f303 	mul.w	r3, r2, r3
 800db06:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800db08:	69fb      	ldr	r3, [r7, #28]
 800db0a:	1e5a      	subs	r2, r3, #1
 800db0c:	61fa      	str	r2, [r7, #28]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d102      	bne.n	800db18 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800db12:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800db16:	e052      	b.n	800dbbe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db1c:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db1e:	69bb      	ldr	r3, [r7, #24]
 800db20:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800db24:	2b00      	cmp	r3, #0
 800db26:	d0ef      	beq.n	800db08 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800db28:	69bb      	ldr	r3, [r7, #24]
 800db2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d1ea      	bne.n	800db08 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db36:	f003 0304 	and.w	r3, r3, #4
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d004      	beq.n	800db48 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2204      	movs	r2, #4
 800db42:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800db44:	2304      	movs	r3, #4
 800db46:	e03a      	b.n	800dbbe <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800db4c:	f003 0301 	and.w	r3, r3, #1
 800db50:	2b00      	cmp	r3, #0
 800db52:	d004      	beq.n	800db5e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2201      	movs	r2, #1
 800db58:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db5a:	2301      	movs	r3, #1
 800db5c:	e02f      	b.n	800dbbe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800db5e:	68f8      	ldr	r0, [r7, #12]
 800db60:	f7ff fb7c 	bl	800d25c <SDMMC_GetCommandResponse>
 800db64:	4603      	mov	r3, r0
 800db66:	461a      	mov	r2, r3
 800db68:	7afb      	ldrb	r3, [r7, #11]
 800db6a:	4293      	cmp	r3, r2
 800db6c:	d001      	beq.n	800db72 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800db6e:	2301      	movs	r3, #1
 800db70:	e025      	b.n	800dbbe <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	4a16      	ldr	r2, [pc, #88]	@ (800dbd0 <SDMMC_GetCmdResp6+0xec>)
 800db76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800db78:	2100      	movs	r1, #0
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	f7ff fb7b 	bl	800d276 <SDMMC_GetResponse>
 800db80:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d106      	bne.n	800db9a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	0c1b      	lsrs	r3, r3, #16
 800db90:	b29a      	uxth	r2, r3
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800db96:	2300      	movs	r3, #0
 800db98:	e011      	b.n	800dbbe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d002      	beq.n	800dbaa <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800dba4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800dba8:	e009      	b.n	800dbbe <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d002      	beq.n	800dbba <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800dbb4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dbb8:	e001      	b.n	800dbbe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800dbba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3720      	adds	r7, #32
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	24000008 	.word	0x24000008
 800dbcc:	10624dd3 	.word	0x10624dd3
 800dbd0:	002000c5 	.word	0x002000c5

0800dbd4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b085      	sub	sp, #20
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dbdc:	4b22      	ldr	r3, [pc, #136]	@ (800dc68 <SDMMC_GetCmdResp7+0x94>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4a22      	ldr	r2, [pc, #136]	@ (800dc6c <SDMMC_GetCmdResp7+0x98>)
 800dbe2:	fba2 2303 	umull	r2, r3, r2, r3
 800dbe6:	0a5b      	lsrs	r3, r3, #9
 800dbe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dbec:	fb02 f303 	mul.w	r3, r2, r3
 800dbf0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	1e5a      	subs	r2, r3, #1
 800dbf6:	60fa      	str	r2, [r7, #12]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d102      	bne.n	800dc02 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dbfc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc00:	e02c      	b.n	800dc5c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc06:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d0ef      	beq.n	800dbf2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800dc12:	68bb      	ldr	r3, [r7, #8]
 800dc14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d1ea      	bne.n	800dbf2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc20:	f003 0304 	and.w	r3, r3, #4
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d004      	beq.n	800dc32 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2204      	movs	r2, #4
 800dc2c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800dc2e:	2304      	movs	r3, #4
 800dc30:	e014      	b.n	800dc5c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc36:	f003 0301 	and.w	r3, r3, #1
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d004      	beq.n	800dc48 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2201      	movs	r2, #1
 800dc42:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800dc44:	2301      	movs	r3, #1
 800dc46:	e009      	b.n	800dc5c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d002      	beq.n	800dc5a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2240      	movs	r2, #64	@ 0x40
 800dc58:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800dc5a:	2300      	movs	r3, #0

}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3714      	adds	r7, #20
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr
 800dc68:	24000008 	.word	0x24000008
 800dc6c:	10624dd3 	.word	0x10624dd3

0800dc70 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b085      	sub	sp, #20
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800dc78:	4b11      	ldr	r3, [pc, #68]	@ (800dcc0 <SDMMC_GetCmdError+0x50>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a11      	ldr	r2, [pc, #68]	@ (800dcc4 <SDMMC_GetCmdError+0x54>)
 800dc7e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc82:	0a5b      	lsrs	r3, r3, #9
 800dc84:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dc88:	fb02 f303 	mul.w	r3, r2, r3
 800dc8c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	1e5a      	subs	r2, r3, #1
 800dc92:	60fa      	str	r2, [r7, #12]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d102      	bne.n	800dc9e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800dc98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dc9c:	e009      	b.n	800dcb2 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d0f1      	beq.n	800dc8e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	4a06      	ldr	r2, [pc, #24]	@ (800dcc8 <SDMMC_GetCmdError+0x58>)
 800dcae:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3714      	adds	r7, #20
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	24000008 	.word	0x24000008
 800dcc4:	10624dd3 	.word	0x10624dd3
 800dcc8:	002000c5 	.word	0x002000c5

0800dccc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dccc:	b084      	sub	sp, #16
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b084      	sub	sp, #16
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	f107 001c 	add.w	r0, r7, #28
 800dcda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dcde:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d121      	bne.n	800dd2a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcea:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	68da      	ldr	r2, [r3, #12]
 800dcf6:	4b2c      	ldr	r3, [pc, #176]	@ (800dda8 <USB_CoreInit+0xdc>)
 800dcf8:	4013      	ands	r3, r2
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	68db      	ldr	r3, [r3, #12]
 800dd02:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dd0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d105      	bne.n	800dd1e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f001 fafa 	bl	800f318 <USB_CoreReset>
 800dd24:	4603      	mov	r3, r0
 800dd26:	73fb      	strb	r3, [r7, #15]
 800dd28:	e01b      	b.n	800dd62 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f001 faee 	bl	800f318 <USB_CoreReset>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dd40:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d106      	bne.n	800dd56 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd4c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	639a      	str	r2, [r3, #56]	@ 0x38
 800dd54:	e005      	b.n	800dd62 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dd62:	7fbb      	ldrb	r3, [r7, #30]
 800dd64:	2b01      	cmp	r3, #1
 800dd66:	d116      	bne.n	800dd96 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd6c:	b29a      	uxth	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dd76:	4b0d      	ldr	r3, [pc, #52]	@ (800ddac <USB_CoreInit+0xe0>)
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	689b      	ldr	r3, [r3, #8]
 800dd82:	f043 0206 	orr.w	r2, r3, #6
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	689b      	ldr	r3, [r3, #8]
 800dd8e:	f043 0220 	orr.w	r2, r3, #32
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dd96:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dda2:	b004      	add	sp, #16
 800dda4:	4770      	bx	lr
 800dda6:	bf00      	nop
 800dda8:	ffbdffbf 	.word	0xffbdffbf
 800ddac:	03ee0000 	.word	0x03ee0000

0800ddb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b087      	sub	sp, #28
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	60f8      	str	r0, [r7, #12]
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	4613      	mov	r3, r2
 800ddbc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ddbe:	79fb      	ldrb	r3, [r7, #7]
 800ddc0:	2b02      	cmp	r3, #2
 800ddc2:	d165      	bne.n	800de90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	4a41      	ldr	r2, [pc, #260]	@ (800decc <USB_SetTurnaroundTime+0x11c>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d906      	bls.n	800ddda <USB_SetTurnaroundTime+0x2a>
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	4a40      	ldr	r2, [pc, #256]	@ (800ded0 <USB_SetTurnaroundTime+0x120>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d202      	bcs.n	800ddda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ddd4:	230f      	movs	r3, #15
 800ddd6:	617b      	str	r3, [r7, #20]
 800ddd8:	e062      	b.n	800dea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ddda:	68bb      	ldr	r3, [r7, #8]
 800dddc:	4a3c      	ldr	r2, [pc, #240]	@ (800ded0 <USB_SetTurnaroundTime+0x120>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d306      	bcc.n	800ddf0 <USB_SetTurnaroundTime+0x40>
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	4a3b      	ldr	r2, [pc, #236]	@ (800ded4 <USB_SetTurnaroundTime+0x124>)
 800dde6:	4293      	cmp	r3, r2
 800dde8:	d202      	bcs.n	800ddf0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ddea:	230e      	movs	r3, #14
 800ddec:	617b      	str	r3, [r7, #20]
 800ddee:	e057      	b.n	800dea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	4a38      	ldr	r2, [pc, #224]	@ (800ded4 <USB_SetTurnaroundTime+0x124>)
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d306      	bcc.n	800de06 <USB_SetTurnaroundTime+0x56>
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	4a37      	ldr	r2, [pc, #220]	@ (800ded8 <USB_SetTurnaroundTime+0x128>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d202      	bcs.n	800de06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800de00:	230d      	movs	r3, #13
 800de02:	617b      	str	r3, [r7, #20]
 800de04:	e04c      	b.n	800dea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	4a33      	ldr	r2, [pc, #204]	@ (800ded8 <USB_SetTurnaroundTime+0x128>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	d306      	bcc.n	800de1c <USB_SetTurnaroundTime+0x6c>
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	4a32      	ldr	r2, [pc, #200]	@ (800dedc <USB_SetTurnaroundTime+0x12c>)
 800de12:	4293      	cmp	r3, r2
 800de14:	d802      	bhi.n	800de1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800de16:	230c      	movs	r3, #12
 800de18:	617b      	str	r3, [r7, #20]
 800de1a:	e041      	b.n	800dea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	4a2f      	ldr	r2, [pc, #188]	@ (800dedc <USB_SetTurnaroundTime+0x12c>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d906      	bls.n	800de32 <USB_SetTurnaroundTime+0x82>
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	4a2e      	ldr	r2, [pc, #184]	@ (800dee0 <USB_SetTurnaroundTime+0x130>)
 800de28:	4293      	cmp	r3, r2
 800de2a:	d802      	bhi.n	800de32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800de2c:	230b      	movs	r3, #11
 800de2e:	617b      	str	r3, [r7, #20]
 800de30:	e036      	b.n	800dea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	4a2a      	ldr	r2, [pc, #168]	@ (800dee0 <USB_SetTurnaroundTime+0x130>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d906      	bls.n	800de48 <USB_SetTurnaroundTime+0x98>
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	4a29      	ldr	r2, [pc, #164]	@ (800dee4 <USB_SetTurnaroundTime+0x134>)
 800de3e:	4293      	cmp	r3, r2
 800de40:	d802      	bhi.n	800de48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800de42:	230a      	movs	r3, #10
 800de44:	617b      	str	r3, [r7, #20]
 800de46:	e02b      	b.n	800dea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	4a26      	ldr	r2, [pc, #152]	@ (800dee4 <USB_SetTurnaroundTime+0x134>)
 800de4c:	4293      	cmp	r3, r2
 800de4e:	d906      	bls.n	800de5e <USB_SetTurnaroundTime+0xae>
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	4a25      	ldr	r2, [pc, #148]	@ (800dee8 <USB_SetTurnaroundTime+0x138>)
 800de54:	4293      	cmp	r3, r2
 800de56:	d202      	bcs.n	800de5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800de58:	2309      	movs	r3, #9
 800de5a:	617b      	str	r3, [r7, #20]
 800de5c:	e020      	b.n	800dea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	4a21      	ldr	r2, [pc, #132]	@ (800dee8 <USB_SetTurnaroundTime+0x138>)
 800de62:	4293      	cmp	r3, r2
 800de64:	d306      	bcc.n	800de74 <USB_SetTurnaroundTime+0xc4>
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	4a20      	ldr	r2, [pc, #128]	@ (800deec <USB_SetTurnaroundTime+0x13c>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d802      	bhi.n	800de74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800de6e:	2308      	movs	r3, #8
 800de70:	617b      	str	r3, [r7, #20]
 800de72:	e015      	b.n	800dea0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	4a1d      	ldr	r2, [pc, #116]	@ (800deec <USB_SetTurnaroundTime+0x13c>)
 800de78:	4293      	cmp	r3, r2
 800de7a:	d906      	bls.n	800de8a <USB_SetTurnaroundTime+0xda>
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	4a1c      	ldr	r2, [pc, #112]	@ (800def0 <USB_SetTurnaroundTime+0x140>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d202      	bcs.n	800de8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800de84:	2307      	movs	r3, #7
 800de86:	617b      	str	r3, [r7, #20]
 800de88:	e00a      	b.n	800dea0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800de8a:	2306      	movs	r3, #6
 800de8c:	617b      	str	r3, [r7, #20]
 800de8e:	e007      	b.n	800dea0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800de90:	79fb      	ldrb	r3, [r7, #7]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d102      	bne.n	800de9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800de96:	2309      	movs	r3, #9
 800de98:	617b      	str	r3, [r7, #20]
 800de9a:	e001      	b.n	800dea0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800de9c:	2309      	movs	r3, #9
 800de9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	68db      	ldr	r3, [r3, #12]
 800dea4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	68da      	ldr	r2, [r3, #12]
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	029b      	lsls	r3, r3, #10
 800deb4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800deb8:	431a      	orrs	r2, r3
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800debe:	2300      	movs	r3, #0
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	371c      	adds	r7, #28
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr
 800decc:	00d8acbf 	.word	0x00d8acbf
 800ded0:	00e4e1c0 	.word	0x00e4e1c0
 800ded4:	00f42400 	.word	0x00f42400
 800ded8:	01067380 	.word	0x01067380
 800dedc:	011a499f 	.word	0x011a499f
 800dee0:	01312cff 	.word	0x01312cff
 800dee4:	014ca43f 	.word	0x014ca43f
 800dee8:	016e3600 	.word	0x016e3600
 800deec:	01a6ab1f 	.word	0x01a6ab1f
 800def0:	01e84800 	.word	0x01e84800

0800def4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800def4:	b480      	push	{r7}
 800def6:	b083      	sub	sp, #12
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	689b      	ldr	r3, [r3, #8]
 800df00:	f043 0201 	orr.w	r2, r3, #1
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df08:	2300      	movs	r3, #0
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	370c      	adds	r7, #12
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr

0800df16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df16:	b480      	push	{r7}
 800df18:	b083      	sub	sp, #12
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	689b      	ldr	r3, [r3, #8]
 800df22:	f023 0201 	bic.w	r2, r3, #1
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	370c      	adds	r7, #12
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr

0800df38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	460b      	mov	r3, r1
 800df42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800df44:	2300      	movs	r3, #0
 800df46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	68db      	ldr	r3, [r3, #12]
 800df4c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800df54:	78fb      	ldrb	r3, [r7, #3]
 800df56:	2b01      	cmp	r3, #1
 800df58:	d115      	bne.n	800df86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800df66:	200a      	movs	r0, #10
 800df68:	f7f4 fb52 	bl	8002610 <HAL_Delay>
      ms += 10U;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	330a      	adds	r3, #10
 800df70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f001 f93f 	bl	800f1f6 <USB_GetMode>
 800df78:	4603      	mov	r3, r0
 800df7a:	2b01      	cmp	r3, #1
 800df7c:	d01e      	beq.n	800dfbc <USB_SetCurrentMode+0x84>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2bc7      	cmp	r3, #199	@ 0xc7
 800df82:	d9f0      	bls.n	800df66 <USB_SetCurrentMode+0x2e>
 800df84:	e01a      	b.n	800dfbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800df86:	78fb      	ldrb	r3, [r7, #3]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d115      	bne.n	800dfb8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800df98:	200a      	movs	r0, #10
 800df9a:	f7f4 fb39 	bl	8002610 <HAL_Delay>
      ms += 10U;
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	330a      	adds	r3, #10
 800dfa2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f001 f926 	bl	800f1f6 <USB_GetMode>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d005      	beq.n	800dfbc <USB_SetCurrentMode+0x84>
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	2bc7      	cmp	r3, #199	@ 0xc7
 800dfb4:	d9f0      	bls.n	800df98 <USB_SetCurrentMode+0x60>
 800dfb6:	e001      	b.n	800dfbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	e005      	b.n	800dfc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2bc8      	cmp	r3, #200	@ 0xc8
 800dfc0:	d101      	bne.n	800dfc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	e000      	b.n	800dfc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dfc6:	2300      	movs	r3, #0
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3710      	adds	r7, #16
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	bd80      	pop	{r7, pc}

0800dfd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dfd0:	b084      	sub	sp, #16
 800dfd2:	b580      	push	{r7, lr}
 800dfd4:	b086      	sub	sp, #24
 800dfd6:	af00      	add	r7, sp, #0
 800dfd8:	6078      	str	r0, [r7, #4]
 800dfda:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800dfde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dfea:	2300      	movs	r3, #0
 800dfec:	613b      	str	r3, [r7, #16]
 800dfee:	e009      	b.n	800e004 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	3340      	adds	r3, #64	@ 0x40
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	4413      	add	r3, r2
 800dffa:	2200      	movs	r2, #0
 800dffc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	3301      	adds	r3, #1
 800e002:	613b      	str	r3, [r7, #16]
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	2b0e      	cmp	r3, #14
 800e008:	d9f2      	bls.n	800dff0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e00a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d11c      	bne.n	800e04c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	68fa      	ldr	r2, [r7, #12]
 800e01c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e020:	f043 0302 	orr.w	r3, r3, #2
 800e024:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e02a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	601a      	str	r2, [r3, #0]
 800e04a:	e005      	b.n	800e058 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e050:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e05e:	461a      	mov	r2, r3
 800e060:	2300      	movs	r3, #0
 800e062:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e064:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d10d      	bne.n	800e088 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e06c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e070:	2b00      	cmp	r3, #0
 800e072:	d104      	bne.n	800e07e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e074:	2100      	movs	r1, #0
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f000 f968 	bl	800e34c <USB_SetDevSpeed>
 800e07c:	e008      	b.n	800e090 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e07e:	2101      	movs	r1, #1
 800e080:	6878      	ldr	r0, [r7, #4]
 800e082:	f000 f963 	bl	800e34c <USB_SetDevSpeed>
 800e086:	e003      	b.n	800e090 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e088:	2103      	movs	r1, #3
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 f95e 	bl	800e34c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e090:	2110      	movs	r1, #16
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 f8fa 	bl	800e28c <USB_FlushTxFifo>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d001      	beq.n	800e0a2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 f924 	bl	800e2f0 <USB_FlushRxFifo>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d001      	beq.n	800e0b2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0b8:	461a      	mov	r2, r3
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	613b      	str	r3, [r7, #16]
 800e0da:	e043      	b.n	800e164 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	015a      	lsls	r2, r3, #5
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e0ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e0f2:	d118      	bne.n	800e126 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d10a      	bne.n	800e110 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	015a      	lsls	r2, r3, #5
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	4413      	add	r3, r2
 800e102:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e106:	461a      	mov	r2, r3
 800e108:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e10c:	6013      	str	r3, [r2, #0]
 800e10e:	e013      	b.n	800e138 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e110:	693b      	ldr	r3, [r7, #16]
 800e112:	015a      	lsls	r2, r3, #5
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	4413      	add	r3, r2
 800e118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e11c:	461a      	mov	r2, r3
 800e11e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e122:	6013      	str	r3, [r2, #0]
 800e124:	e008      	b.n	800e138 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	015a      	lsls	r2, r3, #5
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	4413      	add	r3, r2
 800e12e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e132:	461a      	mov	r2, r3
 800e134:	2300      	movs	r3, #0
 800e136:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	015a      	lsls	r2, r3, #5
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	4413      	add	r3, r2
 800e140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e144:	461a      	mov	r2, r3
 800e146:	2300      	movs	r3, #0
 800e148:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	015a      	lsls	r2, r3, #5
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	4413      	add	r3, r2
 800e152:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e156:	461a      	mov	r2, r3
 800e158:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e15c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e15e:	693b      	ldr	r3, [r7, #16]
 800e160:	3301      	adds	r3, #1
 800e162:	613b      	str	r3, [r7, #16]
 800e164:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e168:	461a      	mov	r2, r3
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	4293      	cmp	r3, r2
 800e16e:	d3b5      	bcc.n	800e0dc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e170:	2300      	movs	r3, #0
 800e172:	613b      	str	r3, [r7, #16]
 800e174:	e043      	b.n	800e1fe <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	015a      	lsls	r2, r3, #5
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	4413      	add	r3, r2
 800e17e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e188:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e18c:	d118      	bne.n	800e1c0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d10a      	bne.n	800e1aa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	015a      	lsls	r2, r3, #5
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	4413      	add	r3, r2
 800e19c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e1a6:	6013      	str	r3, [r2, #0]
 800e1a8:	e013      	b.n	800e1d2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e1aa:	693b      	ldr	r3, [r7, #16]
 800e1ac:	015a      	lsls	r2, r3, #5
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	4413      	add	r3, r2
 800e1b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e1bc:	6013      	str	r3, [r2, #0]
 800e1be:	e008      	b.n	800e1d2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	015a      	lsls	r2, r3, #5
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	4413      	add	r3, r2
 800e1c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	015a      	lsls	r2, r3, #5
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	4413      	add	r3, r2
 800e1da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1de:	461a      	mov	r2, r3
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e1e4:	693b      	ldr	r3, [r7, #16]
 800e1e6:	015a      	lsls	r2, r3, #5
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	4413      	add	r3, r2
 800e1ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e1f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	613b      	str	r3, [r7, #16]
 800e1fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e202:	461a      	mov	r2, r3
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	4293      	cmp	r3, r2
 800e208:	d3b5      	bcc.n	800e176 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e21c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2200      	movs	r2, #0
 800e222:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e22a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e22c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e230:	2b00      	cmp	r3, #0
 800e232:	d105      	bne.n	800e240 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	699b      	ldr	r3, [r3, #24]
 800e238:	f043 0210 	orr.w	r2, r3, #16
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	699a      	ldr	r2, [r3, #24]
 800e244:	4b0f      	ldr	r3, [pc, #60]	@ (800e284 <USB_DevInit+0x2b4>)
 800e246:	4313      	orrs	r3, r2
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e24c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e250:	2b00      	cmp	r3, #0
 800e252:	d005      	beq.n	800e260 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	699b      	ldr	r3, [r3, #24]
 800e258:	f043 0208 	orr.w	r2, r3, #8
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e260:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e264:	2b01      	cmp	r3, #1
 800e266:	d105      	bne.n	800e274 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	699a      	ldr	r2, [r3, #24]
 800e26c:	4b06      	ldr	r3, [pc, #24]	@ (800e288 <USB_DevInit+0x2b8>)
 800e26e:	4313      	orrs	r3, r2
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e274:	7dfb      	ldrb	r3, [r7, #23]
}
 800e276:	4618      	mov	r0, r3
 800e278:	3718      	adds	r7, #24
 800e27a:	46bd      	mov	sp, r7
 800e27c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e280:	b004      	add	sp, #16
 800e282:	4770      	bx	lr
 800e284:	803c3800 	.word	0x803c3800
 800e288:	40000004 	.word	0x40000004

0800e28c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b085      	sub	sp, #20
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e296:	2300      	movs	r3, #0
 800e298:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	3301      	adds	r3, #1
 800e29e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e2a6:	d901      	bls.n	800e2ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e2a8:	2303      	movs	r3, #3
 800e2aa:	e01b      	b.n	800e2e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	691b      	ldr	r3, [r3, #16]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	daf2      	bge.n	800e29a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	019b      	lsls	r3, r3, #6
 800e2bc:	f043 0220 	orr.w	r2, r3, #32
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e2d0:	d901      	bls.n	800e2d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e2d2:	2303      	movs	r3, #3
 800e2d4:	e006      	b.n	800e2e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	691b      	ldr	r3, [r3, #16]
 800e2da:	f003 0320 	and.w	r3, r3, #32
 800e2de:	2b20      	cmp	r3, #32
 800e2e0:	d0f0      	beq.n	800e2c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e2e2:	2300      	movs	r3, #0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3714      	adds	r7, #20
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	3301      	adds	r3, #1
 800e300:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e308:	d901      	bls.n	800e30e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e30a:	2303      	movs	r3, #3
 800e30c:	e018      	b.n	800e340 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	691b      	ldr	r3, [r3, #16]
 800e312:	2b00      	cmp	r3, #0
 800e314:	daf2      	bge.n	800e2fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e316:	2300      	movs	r3, #0
 800e318:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2210      	movs	r2, #16
 800e31e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	3301      	adds	r3, #1
 800e324:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e32c:	d901      	bls.n	800e332 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e32e:	2303      	movs	r3, #3
 800e330:	e006      	b.n	800e340 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	691b      	ldr	r3, [r3, #16]
 800e336:	f003 0310 	and.w	r3, r3, #16
 800e33a:	2b10      	cmp	r3, #16
 800e33c:	d0f0      	beq.n	800e320 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e33e:	2300      	movs	r3, #0
}
 800e340:	4618      	mov	r0, r3
 800e342:	3714      	adds	r7, #20
 800e344:	46bd      	mov	sp, r7
 800e346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34a:	4770      	bx	lr

0800e34c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e34c:	b480      	push	{r7}
 800e34e:	b085      	sub	sp, #20
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	460b      	mov	r3, r1
 800e356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e362:	681a      	ldr	r2, [r3, #0]
 800e364:	78fb      	ldrb	r3, [r7, #3]
 800e366:	68f9      	ldr	r1, [r7, #12]
 800e368:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e36c:	4313      	orrs	r3, r2
 800e36e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e370:	2300      	movs	r3, #0
}
 800e372:	4618      	mov	r0, r3
 800e374:	3714      	adds	r7, #20
 800e376:	46bd      	mov	sp, r7
 800e378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37c:	4770      	bx	lr

0800e37e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e37e:	b480      	push	{r7}
 800e380:	b087      	sub	sp, #28
 800e382:	af00      	add	r7, sp, #0
 800e384:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e390:	689b      	ldr	r3, [r3, #8]
 800e392:	f003 0306 	and.w	r3, r3, #6
 800e396:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d102      	bne.n	800e3a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	75fb      	strb	r3, [r7, #23]
 800e3a2:	e00a      	b.n	800e3ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	d002      	beq.n	800e3b0 <USB_GetDevSpeed+0x32>
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	2b06      	cmp	r3, #6
 800e3ae:	d102      	bne.n	800e3b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e3b0:	2302      	movs	r3, #2
 800e3b2:	75fb      	strb	r3, [r7, #23]
 800e3b4:	e001      	b.n	800e3ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e3b6:	230f      	movs	r3, #15
 800e3b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e3ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	371c      	adds	r7, #28
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	785b      	ldrb	r3, [r3, #1]
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	d139      	bne.n	800e458 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3ea:	69da      	ldr	r2, [r3, #28]
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	781b      	ldrb	r3, [r3, #0]
 800e3f0:	f003 030f 	and.w	r3, r3, #15
 800e3f4:	2101      	movs	r1, #1
 800e3f6:	fa01 f303 	lsl.w	r3, r1, r3
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	68f9      	ldr	r1, [r7, #12]
 800e3fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e402:	4313      	orrs	r3, r2
 800e404:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	015a      	lsls	r2, r3, #5
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	4413      	add	r3, r2
 800e40e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d153      	bne.n	800e4c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	015a      	lsls	r2, r3, #5
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	4413      	add	r3, r2
 800e424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	689b      	ldr	r3, [r3, #8]
 800e42e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	791b      	ldrb	r3, [r3, #4]
 800e436:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e438:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e43a:	68bb      	ldr	r3, [r7, #8]
 800e43c:	059b      	lsls	r3, r3, #22
 800e43e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e440:	431a      	orrs	r2, r3
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	0159      	lsls	r1, r3, #5
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	440b      	add	r3, r1
 800e44a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e44e:	4619      	mov	r1, r3
 800e450:	4b20      	ldr	r3, [pc, #128]	@ (800e4d4 <USB_ActivateEndpoint+0x10c>)
 800e452:	4313      	orrs	r3, r2
 800e454:	600b      	str	r3, [r1, #0]
 800e456:	e035      	b.n	800e4c4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e45e:	69da      	ldr	r2, [r3, #28]
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	f003 030f 	and.w	r3, r3, #15
 800e468:	2101      	movs	r1, #1
 800e46a:	fa01 f303 	lsl.w	r3, r1, r3
 800e46e:	041b      	lsls	r3, r3, #16
 800e470:	68f9      	ldr	r1, [r7, #12]
 800e472:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e476:	4313      	orrs	r3, r2
 800e478:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	015a      	lsls	r2, r3, #5
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	4413      	add	r3, r2
 800e482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d119      	bne.n	800e4c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	015a      	lsls	r2, r3, #5
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	4413      	add	r3, r2
 800e498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	689b      	ldr	r3, [r3, #8]
 800e4a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	791b      	ldrb	r3, [r3, #4]
 800e4aa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e4ac:	430b      	orrs	r3, r1
 800e4ae:	431a      	orrs	r2, r3
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	0159      	lsls	r1, r3, #5
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	440b      	add	r3, r1
 800e4b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4bc:	4619      	mov	r1, r3
 800e4be:	4b05      	ldr	r3, [pc, #20]	@ (800e4d4 <USB_ActivateEndpoint+0x10c>)
 800e4c0:	4313      	orrs	r3, r2
 800e4c2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e4c4:	2300      	movs	r3, #0
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3714      	adds	r7, #20
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop
 800e4d4:	10008000 	.word	0x10008000

0800e4d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	785b      	ldrb	r3, [r3, #1]
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d161      	bne.n	800e5b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e4f4:	68bb      	ldr	r3, [r7, #8]
 800e4f6:	015a      	lsls	r2, r3, #5
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	4413      	add	r3, r2
 800e4fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e506:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e50a:	d11f      	bne.n	800e54c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	015a      	lsls	r2, r3, #5
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	4413      	add	r3, r2
 800e514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	68ba      	ldr	r2, [r7, #8]
 800e51c:	0151      	lsls	r1, r2, #5
 800e51e:	68fa      	ldr	r2, [r7, #12]
 800e520:	440a      	add	r2, r1
 800e522:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e526:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e52a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	015a      	lsls	r2, r3, #5
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	4413      	add	r3, r2
 800e534:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	68ba      	ldr	r2, [r7, #8]
 800e53c:	0151      	lsls	r1, r2, #5
 800e53e:	68fa      	ldr	r2, [r7, #12]
 800e540:	440a      	add	r2, r1
 800e542:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e546:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e54a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e552:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	f003 030f 	and.w	r3, r3, #15
 800e55c:	2101      	movs	r1, #1
 800e55e:	fa01 f303 	lsl.w	r3, r1, r3
 800e562:	b29b      	uxth	r3, r3
 800e564:	43db      	mvns	r3, r3
 800e566:	68f9      	ldr	r1, [r7, #12]
 800e568:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e56c:	4013      	ands	r3, r2
 800e56e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e576:	69da      	ldr	r2, [r3, #28]
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	781b      	ldrb	r3, [r3, #0]
 800e57c:	f003 030f 	and.w	r3, r3, #15
 800e580:	2101      	movs	r1, #1
 800e582:	fa01 f303 	lsl.w	r3, r1, r3
 800e586:	b29b      	uxth	r3, r3
 800e588:	43db      	mvns	r3, r3
 800e58a:	68f9      	ldr	r1, [r7, #12]
 800e58c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e590:	4013      	ands	r3, r2
 800e592:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	015a      	lsls	r2, r3, #5
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	4413      	add	r3, r2
 800e59c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5a0:	681a      	ldr	r2, [r3, #0]
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	0159      	lsls	r1, r3, #5
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	440b      	add	r3, r1
 800e5aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	4b35      	ldr	r3, [pc, #212]	@ (800e688 <USB_DeactivateEndpoint+0x1b0>)
 800e5b2:	4013      	ands	r3, r2
 800e5b4:	600b      	str	r3, [r1, #0]
 800e5b6:	e060      	b.n	800e67a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	015a      	lsls	r2, r3, #5
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	4413      	add	r3, r2
 800e5c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e5ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e5ce:	d11f      	bne.n	800e610 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	015a      	lsls	r2, r3, #5
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	4413      	add	r3, r2
 800e5d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	68ba      	ldr	r2, [r7, #8]
 800e5e0:	0151      	lsls	r1, r2, #5
 800e5e2:	68fa      	ldr	r2, [r7, #12]
 800e5e4:	440a      	add	r2, r1
 800e5e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e5ea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e5ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	015a      	lsls	r2, r3, #5
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	4413      	add	r3, r2
 800e5f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	68ba      	ldr	r2, [r7, #8]
 800e600:	0151      	lsls	r1, r2, #5
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	440a      	add	r2, r1
 800e606:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e60a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e60e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e616:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	781b      	ldrb	r3, [r3, #0]
 800e61c:	f003 030f 	and.w	r3, r3, #15
 800e620:	2101      	movs	r1, #1
 800e622:	fa01 f303 	lsl.w	r3, r1, r3
 800e626:	041b      	lsls	r3, r3, #16
 800e628:	43db      	mvns	r3, r3
 800e62a:	68f9      	ldr	r1, [r7, #12]
 800e62c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e630:	4013      	ands	r3, r2
 800e632:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e63a:	69da      	ldr	r2, [r3, #28]
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	f003 030f 	and.w	r3, r3, #15
 800e644:	2101      	movs	r1, #1
 800e646:	fa01 f303 	lsl.w	r3, r1, r3
 800e64a:	041b      	lsls	r3, r3, #16
 800e64c:	43db      	mvns	r3, r3
 800e64e:	68f9      	ldr	r1, [r7, #12]
 800e650:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e654:	4013      	ands	r3, r2
 800e656:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	015a      	lsls	r2, r3, #5
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	4413      	add	r3, r2
 800e660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e664:	681a      	ldr	r2, [r3, #0]
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	0159      	lsls	r1, r3, #5
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	440b      	add	r3, r1
 800e66e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e672:	4619      	mov	r1, r3
 800e674:	4b05      	ldr	r3, [pc, #20]	@ (800e68c <USB_DeactivateEndpoint+0x1b4>)
 800e676:	4013      	ands	r3, r2
 800e678:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e67a:	2300      	movs	r3, #0
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3714      	adds	r7, #20
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr
 800e688:	ec337800 	.word	0xec337800
 800e68c:	eff37800 	.word	0xeff37800

0800e690 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b08a      	sub	sp, #40	@ 0x28
 800e694:	af02      	add	r7, sp, #8
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	60b9      	str	r1, [r7, #8]
 800e69a:	4613      	mov	r3, r2
 800e69c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e6a2:	68bb      	ldr	r3, [r7, #8]
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	785b      	ldrb	r3, [r3, #1]
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	f040 8185 	bne.w	800e9bc <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	691b      	ldr	r3, [r3, #16]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d132      	bne.n	800e720 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	015a      	lsls	r2, r3, #5
 800e6be:	69fb      	ldr	r3, [r7, #28]
 800e6c0:	4413      	add	r3, r2
 800e6c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6c6:	691a      	ldr	r2, [r3, #16]
 800e6c8:	69bb      	ldr	r3, [r7, #24]
 800e6ca:	0159      	lsls	r1, r3, #5
 800e6cc:	69fb      	ldr	r3, [r7, #28]
 800e6ce:	440b      	add	r3, r1
 800e6d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	4ba7      	ldr	r3, [pc, #668]	@ (800e974 <USB_EPStartXfer+0x2e4>)
 800e6d8:	4013      	ands	r3, r2
 800e6da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e6dc:	69bb      	ldr	r3, [r7, #24]
 800e6de:	015a      	lsls	r2, r3, #5
 800e6e0:	69fb      	ldr	r3, [r7, #28]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6e8:	691b      	ldr	r3, [r3, #16]
 800e6ea:	69ba      	ldr	r2, [r7, #24]
 800e6ec:	0151      	lsls	r1, r2, #5
 800e6ee:	69fa      	ldr	r2, [r7, #28]
 800e6f0:	440a      	add	r2, r1
 800e6f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e6f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e6fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e6fc:	69bb      	ldr	r3, [r7, #24]
 800e6fe:	015a      	lsls	r2, r3, #5
 800e700:	69fb      	ldr	r3, [r7, #28]
 800e702:	4413      	add	r3, r2
 800e704:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e708:	691a      	ldr	r2, [r3, #16]
 800e70a:	69bb      	ldr	r3, [r7, #24]
 800e70c:	0159      	lsls	r1, r3, #5
 800e70e:	69fb      	ldr	r3, [r7, #28]
 800e710:	440b      	add	r3, r1
 800e712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e716:	4619      	mov	r1, r3
 800e718:	4b97      	ldr	r3, [pc, #604]	@ (800e978 <USB_EPStartXfer+0x2e8>)
 800e71a:	4013      	ands	r3, r2
 800e71c:	610b      	str	r3, [r1, #16]
 800e71e:	e097      	b.n	800e850 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e720:	69bb      	ldr	r3, [r7, #24]
 800e722:	015a      	lsls	r2, r3, #5
 800e724:	69fb      	ldr	r3, [r7, #28]
 800e726:	4413      	add	r3, r2
 800e728:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e72c:	691a      	ldr	r2, [r3, #16]
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	0159      	lsls	r1, r3, #5
 800e732:	69fb      	ldr	r3, [r7, #28]
 800e734:	440b      	add	r3, r1
 800e736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e73a:	4619      	mov	r1, r3
 800e73c:	4b8e      	ldr	r3, [pc, #568]	@ (800e978 <USB_EPStartXfer+0x2e8>)
 800e73e:	4013      	ands	r3, r2
 800e740:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	015a      	lsls	r2, r3, #5
 800e746:	69fb      	ldr	r3, [r7, #28]
 800e748:	4413      	add	r3, r2
 800e74a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e74e:	691a      	ldr	r2, [r3, #16]
 800e750:	69bb      	ldr	r3, [r7, #24]
 800e752:	0159      	lsls	r1, r3, #5
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	440b      	add	r3, r1
 800e758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e75c:	4619      	mov	r1, r3
 800e75e:	4b85      	ldr	r3, [pc, #532]	@ (800e974 <USB_EPStartXfer+0x2e4>)
 800e760:	4013      	ands	r3, r2
 800e762:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e764:	69bb      	ldr	r3, [r7, #24]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d11a      	bne.n	800e7a0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	691a      	ldr	r2, [r3, #16]
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	689b      	ldr	r3, [r3, #8]
 800e772:	429a      	cmp	r2, r3
 800e774:	d903      	bls.n	800e77e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	689a      	ldr	r2, [r3, #8]
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	015a      	lsls	r2, r3, #5
 800e782:	69fb      	ldr	r3, [r7, #28]
 800e784:	4413      	add	r3, r2
 800e786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e78a:	691b      	ldr	r3, [r3, #16]
 800e78c:	69ba      	ldr	r2, [r7, #24]
 800e78e:	0151      	lsls	r1, r2, #5
 800e790:	69fa      	ldr	r2, [r7, #28]
 800e792:	440a      	add	r2, r1
 800e794:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e798:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e79c:	6113      	str	r3, [r2, #16]
 800e79e:	e044      	b.n	800e82a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	691a      	ldr	r2, [r3, #16]
 800e7a4:	68bb      	ldr	r3, [r7, #8]
 800e7a6:	689b      	ldr	r3, [r3, #8]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	1e5a      	subs	r2, r3, #1
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7b4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800e7b6:	69bb      	ldr	r3, [r7, #24]
 800e7b8:	015a      	lsls	r2, r3, #5
 800e7ba:	69fb      	ldr	r3, [r7, #28]
 800e7bc:	4413      	add	r3, r2
 800e7be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7c2:	691a      	ldr	r2, [r3, #16]
 800e7c4:	8afb      	ldrh	r3, [r7, #22]
 800e7c6:	04d9      	lsls	r1, r3, #19
 800e7c8:	4b6c      	ldr	r3, [pc, #432]	@ (800e97c <USB_EPStartXfer+0x2ec>)
 800e7ca:	400b      	ands	r3, r1
 800e7cc:	69b9      	ldr	r1, [r7, #24]
 800e7ce:	0148      	lsls	r0, r1, #5
 800e7d0:	69f9      	ldr	r1, [r7, #28]
 800e7d2:	4401      	add	r1, r0
 800e7d4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e7d8:	4313      	orrs	r3, r2
 800e7da:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	791b      	ldrb	r3, [r3, #4]
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d122      	bne.n	800e82a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e7e4:	69bb      	ldr	r3, [r7, #24]
 800e7e6:	015a      	lsls	r2, r3, #5
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	4413      	add	r3, r2
 800e7ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7f0:	691b      	ldr	r3, [r3, #16]
 800e7f2:	69ba      	ldr	r2, [r7, #24]
 800e7f4:	0151      	lsls	r1, r2, #5
 800e7f6:	69fa      	ldr	r2, [r7, #28]
 800e7f8:	440a      	add	r2, r1
 800e7fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7fe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e802:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	015a      	lsls	r2, r3, #5
 800e808:	69fb      	ldr	r3, [r7, #28]
 800e80a:	4413      	add	r3, r2
 800e80c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e810:	691a      	ldr	r2, [r3, #16]
 800e812:	8afb      	ldrh	r3, [r7, #22]
 800e814:	075b      	lsls	r3, r3, #29
 800e816:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800e81a:	69b9      	ldr	r1, [r7, #24]
 800e81c:	0148      	lsls	r0, r1, #5
 800e81e:	69f9      	ldr	r1, [r7, #28]
 800e820:	4401      	add	r1, r0
 800e822:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e826:	4313      	orrs	r3, r2
 800e828:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e82a:	69bb      	ldr	r3, [r7, #24]
 800e82c:	015a      	lsls	r2, r3, #5
 800e82e:	69fb      	ldr	r3, [r7, #28]
 800e830:	4413      	add	r3, r2
 800e832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e836:	691a      	ldr	r2, [r3, #16]
 800e838:	68bb      	ldr	r3, [r7, #8]
 800e83a:	691b      	ldr	r3, [r3, #16]
 800e83c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e840:	69b9      	ldr	r1, [r7, #24]
 800e842:	0148      	lsls	r0, r1, #5
 800e844:	69f9      	ldr	r1, [r7, #28]
 800e846:	4401      	add	r1, r0
 800e848:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e84c:	4313      	orrs	r3, r2
 800e84e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e850:	79fb      	ldrb	r3, [r7, #7]
 800e852:	2b01      	cmp	r3, #1
 800e854:	d14b      	bne.n	800e8ee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	69db      	ldr	r3, [r3, #28]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d009      	beq.n	800e872 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	015a      	lsls	r2, r3, #5
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	4413      	add	r3, r2
 800e866:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e86a:	461a      	mov	r2, r3
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	69db      	ldr	r3, [r3, #28]
 800e870:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	791b      	ldrb	r3, [r3, #4]
 800e876:	2b01      	cmp	r3, #1
 800e878:	d128      	bne.n	800e8cc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e880:	689b      	ldr	r3, [r3, #8]
 800e882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e886:	2b00      	cmp	r3, #0
 800e888:	d110      	bne.n	800e8ac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	015a      	lsls	r2, r3, #5
 800e88e:	69fb      	ldr	r3, [r7, #28]
 800e890:	4413      	add	r3, r2
 800e892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	69ba      	ldr	r2, [r7, #24]
 800e89a:	0151      	lsls	r1, r2, #5
 800e89c:	69fa      	ldr	r2, [r7, #28]
 800e89e:	440a      	add	r2, r1
 800e8a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e8a8:	6013      	str	r3, [r2, #0]
 800e8aa:	e00f      	b.n	800e8cc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	015a      	lsls	r2, r3, #5
 800e8b0:	69fb      	ldr	r3, [r7, #28]
 800e8b2:	4413      	add	r3, r2
 800e8b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	69ba      	ldr	r2, [r7, #24]
 800e8bc:	0151      	lsls	r1, r2, #5
 800e8be:	69fa      	ldr	r2, [r7, #28]
 800e8c0:	440a      	add	r2, r1
 800e8c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e8ca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e8cc:	69bb      	ldr	r3, [r7, #24]
 800e8ce:	015a      	lsls	r2, r3, #5
 800e8d0:	69fb      	ldr	r3, [r7, #28]
 800e8d2:	4413      	add	r3, r2
 800e8d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	69ba      	ldr	r2, [r7, #24]
 800e8dc:	0151      	lsls	r1, r2, #5
 800e8de:	69fa      	ldr	r2, [r7, #28]
 800e8e0:	440a      	add	r2, r1
 800e8e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e8ea:	6013      	str	r3, [r2, #0]
 800e8ec:	e169      	b.n	800ebc2 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e8ee:	69bb      	ldr	r3, [r7, #24]
 800e8f0:	015a      	lsls	r2, r3, #5
 800e8f2:	69fb      	ldr	r3, [r7, #28]
 800e8f4:	4413      	add	r3, r2
 800e8f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	69ba      	ldr	r2, [r7, #24]
 800e8fe:	0151      	lsls	r1, r2, #5
 800e900:	69fa      	ldr	r2, [r7, #28]
 800e902:	440a      	add	r2, r1
 800e904:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e908:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e90c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	791b      	ldrb	r3, [r3, #4]
 800e912:	2b01      	cmp	r3, #1
 800e914:	d015      	beq.n	800e942 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	691b      	ldr	r3, [r3, #16]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f000 8151 	beq.w	800ebc2 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	f003 030f 	and.w	r3, r3, #15
 800e930:	2101      	movs	r1, #1
 800e932:	fa01 f303 	lsl.w	r3, r1, r3
 800e936:	69f9      	ldr	r1, [r7, #28]
 800e938:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e93c:	4313      	orrs	r3, r2
 800e93e:	634b      	str	r3, [r1, #52]	@ 0x34
 800e940:	e13f      	b.n	800ebc2 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e942:	69fb      	ldr	r3, [r7, #28]
 800e944:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e948:	689b      	ldr	r3, [r3, #8]
 800e94a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d116      	bne.n	800e980 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	015a      	lsls	r2, r3, #5
 800e956:	69fb      	ldr	r3, [r7, #28]
 800e958:	4413      	add	r3, r2
 800e95a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	69ba      	ldr	r2, [r7, #24]
 800e962:	0151      	lsls	r1, r2, #5
 800e964:	69fa      	ldr	r2, [r7, #28]
 800e966:	440a      	add	r2, r1
 800e968:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e96c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e970:	6013      	str	r3, [r2, #0]
 800e972:	e015      	b.n	800e9a0 <USB_EPStartXfer+0x310>
 800e974:	e007ffff 	.word	0xe007ffff
 800e978:	fff80000 	.word	0xfff80000
 800e97c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	015a      	lsls	r2, r3, #5
 800e984:	69fb      	ldr	r3, [r7, #28]
 800e986:	4413      	add	r3, r2
 800e988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	69ba      	ldr	r2, [r7, #24]
 800e990:	0151      	lsls	r1, r2, #5
 800e992:	69fa      	ldr	r2, [r7, #28]
 800e994:	440a      	add	r2, r1
 800e996:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e99a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e99e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e9a0:	68bb      	ldr	r3, [r7, #8]
 800e9a2:	68d9      	ldr	r1, [r3, #12]
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	781a      	ldrb	r2, [r3, #0]
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	691b      	ldr	r3, [r3, #16]
 800e9ac:	b298      	uxth	r0, r3
 800e9ae:	79fb      	ldrb	r3, [r7, #7]
 800e9b0:	9300      	str	r3, [sp, #0]
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	68f8      	ldr	r0, [r7, #12]
 800e9b6:	f000 f9b9 	bl	800ed2c <USB_WritePacket>
 800e9ba:	e102      	b.n	800ebc2 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e9bc:	69bb      	ldr	r3, [r7, #24]
 800e9be:	015a      	lsls	r2, r3, #5
 800e9c0:	69fb      	ldr	r3, [r7, #28]
 800e9c2:	4413      	add	r3, r2
 800e9c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9c8:	691a      	ldr	r2, [r3, #16]
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	0159      	lsls	r1, r3, #5
 800e9ce:	69fb      	ldr	r3, [r7, #28]
 800e9d0:	440b      	add	r3, r1
 800e9d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	4b7c      	ldr	r3, [pc, #496]	@ (800ebcc <USB_EPStartXfer+0x53c>)
 800e9da:	4013      	ands	r3, r2
 800e9dc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	015a      	lsls	r2, r3, #5
 800e9e2:	69fb      	ldr	r3, [r7, #28]
 800e9e4:	4413      	add	r3, r2
 800e9e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9ea:	691a      	ldr	r2, [r3, #16]
 800e9ec:	69bb      	ldr	r3, [r7, #24]
 800e9ee:	0159      	lsls	r1, r3, #5
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	440b      	add	r3, r1
 800e9f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	4b75      	ldr	r3, [pc, #468]	@ (800ebd0 <USB_EPStartXfer+0x540>)
 800e9fc:	4013      	ands	r3, r2
 800e9fe:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800ea00:	69bb      	ldr	r3, [r7, #24]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d12f      	bne.n	800ea66 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	691b      	ldr	r3, [r3, #16]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d003      	beq.n	800ea16 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	689a      	ldr	r2, [r3, #8]
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	689a      	ldr	r2, [r3, #8]
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ea1e:	69bb      	ldr	r3, [r7, #24]
 800ea20:	015a      	lsls	r2, r3, #5
 800ea22:	69fb      	ldr	r3, [r7, #28]
 800ea24:	4413      	add	r3, r2
 800ea26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea2a:	691a      	ldr	r2, [r3, #16]
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	6a1b      	ldr	r3, [r3, #32]
 800ea30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea34:	69b9      	ldr	r1, [r7, #24]
 800ea36:	0148      	lsls	r0, r1, #5
 800ea38:	69f9      	ldr	r1, [r7, #28]
 800ea3a:	4401      	add	r1, r0
 800ea3c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ea40:	4313      	orrs	r3, r2
 800ea42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	015a      	lsls	r2, r3, #5
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	4413      	add	r3, r2
 800ea4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea50:	691b      	ldr	r3, [r3, #16]
 800ea52:	69ba      	ldr	r2, [r7, #24]
 800ea54:	0151      	lsls	r1, r2, #5
 800ea56:	69fa      	ldr	r2, [r7, #28]
 800ea58:	440a      	add	r2, r1
 800ea5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ea62:	6113      	str	r3, [r2, #16]
 800ea64:	e05f      	b.n	800eb26 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	691b      	ldr	r3, [r3, #16]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d123      	bne.n	800eab6 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	015a      	lsls	r2, r3, #5
 800ea72:	69fb      	ldr	r3, [r7, #28]
 800ea74:	4413      	add	r3, r2
 800ea76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea7a:	691a      	ldr	r2, [r3, #16]
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	689b      	ldr	r3, [r3, #8]
 800ea80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea84:	69b9      	ldr	r1, [r7, #24]
 800ea86:	0148      	lsls	r0, r1, #5
 800ea88:	69f9      	ldr	r1, [r7, #28]
 800ea8a:	4401      	add	r1, r0
 800ea8c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ea90:	4313      	orrs	r3, r2
 800ea92:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	015a      	lsls	r2, r3, #5
 800ea98:	69fb      	ldr	r3, [r7, #28]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaa0:	691b      	ldr	r3, [r3, #16]
 800eaa2:	69ba      	ldr	r2, [r7, #24]
 800eaa4:	0151      	lsls	r1, r2, #5
 800eaa6:	69fa      	ldr	r2, [r7, #28]
 800eaa8:	440a      	add	r2, r1
 800eaaa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eaae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eab2:	6113      	str	r3, [r2, #16]
 800eab4:	e037      	b.n	800eb26 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	691a      	ldr	r2, [r3, #16]
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	689b      	ldr	r3, [r3, #8]
 800eabe:	4413      	add	r3, r2
 800eac0:	1e5a      	subs	r2, r3, #1
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	689b      	ldr	r3, [r3, #8]
 800eac6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eaca:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	689b      	ldr	r3, [r3, #8]
 800ead0:	8afa      	ldrh	r2, [r7, #22]
 800ead2:	fb03 f202 	mul.w	r2, r3, r2
 800ead6:	68bb      	ldr	r3, [r7, #8]
 800ead8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	015a      	lsls	r2, r3, #5
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	4413      	add	r3, r2
 800eae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eae6:	691a      	ldr	r2, [r3, #16]
 800eae8:	8afb      	ldrh	r3, [r7, #22]
 800eaea:	04d9      	lsls	r1, r3, #19
 800eaec:	4b39      	ldr	r3, [pc, #228]	@ (800ebd4 <USB_EPStartXfer+0x544>)
 800eaee:	400b      	ands	r3, r1
 800eaf0:	69b9      	ldr	r1, [r7, #24]
 800eaf2:	0148      	lsls	r0, r1, #5
 800eaf4:	69f9      	ldr	r1, [r7, #28]
 800eaf6:	4401      	add	r1, r0
 800eaf8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eafc:	4313      	orrs	r3, r2
 800eafe:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800eb00:	69bb      	ldr	r3, [r7, #24]
 800eb02:	015a      	lsls	r2, r3, #5
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	4413      	add	r3, r2
 800eb08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb0c:	691a      	ldr	r2, [r3, #16]
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	6a1b      	ldr	r3, [r3, #32]
 800eb12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb16:	69b9      	ldr	r1, [r7, #24]
 800eb18:	0148      	lsls	r0, r1, #5
 800eb1a:	69f9      	ldr	r1, [r7, #28]
 800eb1c:	4401      	add	r1, r0
 800eb1e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb22:	4313      	orrs	r3, r2
 800eb24:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800eb26:	79fb      	ldrb	r3, [r7, #7]
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	d10d      	bne.n	800eb48 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d009      	beq.n	800eb48 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	68d9      	ldr	r1, [r3, #12]
 800eb38:	69bb      	ldr	r3, [r7, #24]
 800eb3a:	015a      	lsls	r2, r3, #5
 800eb3c:	69fb      	ldr	r3, [r7, #28]
 800eb3e:	4413      	add	r3, r2
 800eb40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb44:	460a      	mov	r2, r1
 800eb46:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	791b      	ldrb	r3, [r3, #4]
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d128      	bne.n	800eba2 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eb50:	69fb      	ldr	r3, [r7, #28]
 800eb52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb56:	689b      	ldr	r3, [r3, #8]
 800eb58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d110      	bne.n	800eb82 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800eb60:	69bb      	ldr	r3, [r7, #24]
 800eb62:	015a      	lsls	r2, r3, #5
 800eb64:	69fb      	ldr	r3, [r7, #28]
 800eb66:	4413      	add	r3, r2
 800eb68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	69ba      	ldr	r2, [r7, #24]
 800eb70:	0151      	lsls	r1, r2, #5
 800eb72:	69fa      	ldr	r2, [r7, #28]
 800eb74:	440a      	add	r2, r1
 800eb76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb7a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800eb7e:	6013      	str	r3, [r2, #0]
 800eb80:	e00f      	b.n	800eba2 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	015a      	lsls	r2, r3, #5
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	4413      	add	r3, r2
 800eb8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	69ba      	ldr	r2, [r7, #24]
 800eb92:	0151      	lsls	r1, r2, #5
 800eb94:	69fa      	ldr	r2, [r7, #28]
 800eb96:	440a      	add	r2, r1
 800eb98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eba0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800eba2:	69bb      	ldr	r3, [r7, #24]
 800eba4:	015a      	lsls	r2, r3, #5
 800eba6:	69fb      	ldr	r3, [r7, #28]
 800eba8:	4413      	add	r3, r2
 800ebaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	69ba      	ldr	r2, [r7, #24]
 800ebb2:	0151      	lsls	r1, r2, #5
 800ebb4:	69fa      	ldr	r2, [r7, #28]
 800ebb6:	440a      	add	r2, r1
 800ebb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebbc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ebc0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ebc2:	2300      	movs	r3, #0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3720      	adds	r7, #32
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}
 800ebcc:	fff80000 	.word	0xfff80000
 800ebd0:	e007ffff 	.word	0xe007ffff
 800ebd4:	1ff80000 	.word	0x1ff80000

0800ebd8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ebd8:	b480      	push	{r7}
 800ebda:	b087      	sub	sp, #28
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
 800ebe0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ebee:	683b      	ldr	r3, [r7, #0]
 800ebf0:	785b      	ldrb	r3, [r3, #1]
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d14a      	bne.n	800ec8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	781b      	ldrb	r3, [r3, #0]
 800ebfa:	015a      	lsls	r2, r3, #5
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	4413      	add	r3, r2
 800ec00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec0e:	f040 8086 	bne.w	800ed1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	015a      	lsls	r2, r3, #5
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	4413      	add	r3, r2
 800ec1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	683a      	ldr	r2, [r7, #0]
 800ec24:	7812      	ldrb	r2, [r2, #0]
 800ec26:	0151      	lsls	r1, r2, #5
 800ec28:	693a      	ldr	r2, [r7, #16]
 800ec2a:	440a      	add	r2, r1
 800ec2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ec34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ec36:	683b      	ldr	r3, [r7, #0]
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	015a      	lsls	r2, r3, #5
 800ec3c:	693b      	ldr	r3, [r7, #16]
 800ec3e:	4413      	add	r3, r2
 800ec40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	683a      	ldr	r2, [r7, #0]
 800ec48:	7812      	ldrb	r2, [r2, #0]
 800ec4a:	0151      	lsls	r1, r2, #5
 800ec4c:	693a      	ldr	r2, [r7, #16]
 800ec4e:	440a      	add	r2, r1
 800ec50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ec66:	4293      	cmp	r3, r2
 800ec68:	d902      	bls.n	800ec70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ec6a:	2301      	movs	r3, #1
 800ec6c:	75fb      	strb	r3, [r7, #23]
          break;
 800ec6e:	e056      	b.n	800ed1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	015a      	lsls	r2, r3, #5
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	4413      	add	r3, r2
 800ec7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec88:	d0e7      	beq.n	800ec5a <USB_EPStopXfer+0x82>
 800ec8a:	e048      	b.n	800ed1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	015a      	lsls	r2, r3, #5
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	4413      	add	r3, r2
 800ec96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eca0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eca4:	d13b      	bne.n	800ed1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	015a      	lsls	r2, r3, #5
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	4413      	add	r3, r2
 800ecb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	683a      	ldr	r2, [r7, #0]
 800ecb8:	7812      	ldrb	r2, [r2, #0]
 800ecba:	0151      	lsls	r1, r2, #5
 800ecbc:	693a      	ldr	r2, [r7, #16]
 800ecbe:	440a      	add	r2, r1
 800ecc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecc4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ecc8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	781b      	ldrb	r3, [r3, #0]
 800ecce:	015a      	lsls	r2, r3, #5
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	683a      	ldr	r2, [r7, #0]
 800ecdc:	7812      	ldrb	r2, [r2, #0]
 800ecde:	0151      	lsls	r1, r2, #5
 800ece0:	693a      	ldr	r2, [r7, #16]
 800ece2:	440a      	add	r2, r1
 800ece4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ece8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ecec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	3301      	adds	r3, #1
 800ecf2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d902      	bls.n	800ed04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ecfe:	2301      	movs	r3, #1
 800ed00:	75fb      	strb	r3, [r7, #23]
          break;
 800ed02:	e00c      	b.n	800ed1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	015a      	lsls	r2, r3, #5
 800ed0a:	693b      	ldr	r3, [r7, #16]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed1c:	d0e7      	beq.n	800ecee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ed1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	371c      	adds	r7, #28
 800ed24:	46bd      	mov	sp, r7
 800ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2a:	4770      	bx	lr

0800ed2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b089      	sub	sp, #36	@ 0x24
 800ed30:	af00      	add	r7, sp, #0
 800ed32:	60f8      	str	r0, [r7, #12]
 800ed34:	60b9      	str	r1, [r7, #8]
 800ed36:	4611      	mov	r1, r2
 800ed38:	461a      	mov	r2, r3
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	71fb      	strb	r3, [r7, #7]
 800ed3e:	4613      	mov	r3, r2
 800ed40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ed4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d123      	bne.n	800ed9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ed52:	88bb      	ldrh	r3, [r7, #4]
 800ed54:	3303      	adds	r3, #3
 800ed56:	089b      	lsrs	r3, r3, #2
 800ed58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	61bb      	str	r3, [r7, #24]
 800ed5e:	e018      	b.n	800ed92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ed60:	79fb      	ldrb	r3, [r7, #7]
 800ed62:	031a      	lsls	r2, r3, #12
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	4413      	add	r3, r2
 800ed68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	69fb      	ldr	r3, [r7, #28]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ed74:	69fb      	ldr	r3, [r7, #28]
 800ed76:	3301      	adds	r3, #1
 800ed78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed80:	69fb      	ldr	r3, [r7, #28]
 800ed82:	3301      	adds	r3, #1
 800ed84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	3301      	adds	r3, #1
 800ed8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ed8c:	69bb      	ldr	r3, [r7, #24]
 800ed8e:	3301      	adds	r3, #1
 800ed90:	61bb      	str	r3, [r7, #24]
 800ed92:	69ba      	ldr	r2, [r7, #24]
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d3e2      	bcc.n	800ed60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3724      	adds	r7, #36	@ 0x24
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b08b      	sub	sp, #44	@ 0x2c
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	4613      	mov	r3, r2
 800edb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800edbe:	88fb      	ldrh	r3, [r7, #6]
 800edc0:	089b      	lsrs	r3, r3, #2
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800edc6:	88fb      	ldrh	r3, [r7, #6]
 800edc8:	f003 0303 	and.w	r3, r3, #3
 800edcc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800edce:	2300      	movs	r3, #0
 800edd0:	623b      	str	r3, [r7, #32]
 800edd2:	e014      	b.n	800edfe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800edd4:	69bb      	ldr	r3, [r7, #24]
 800edd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edde:	601a      	str	r2, [r3, #0]
    pDest++;
 800ede0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ede2:	3301      	adds	r3, #1
 800ede4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ede6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ede8:	3301      	adds	r3, #1
 800edea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800edec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edee:	3301      	adds	r3, #1
 800edf0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800edf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edf4:	3301      	adds	r3, #1
 800edf6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800edf8:	6a3b      	ldr	r3, [r7, #32]
 800edfa:	3301      	adds	r3, #1
 800edfc:	623b      	str	r3, [r7, #32]
 800edfe:	6a3a      	ldr	r2, [r7, #32]
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d3e6      	bcc.n	800edd4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ee06:	8bfb      	ldrh	r3, [r7, #30]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d01e      	beq.n	800ee4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ee10:	69bb      	ldr	r3, [r7, #24]
 800ee12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee16:	461a      	mov	r2, r3
 800ee18:	f107 0310 	add.w	r3, r7, #16
 800ee1c:	6812      	ldr	r2, [r2, #0]
 800ee1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ee20:	693a      	ldr	r2, [r7, #16]
 800ee22:	6a3b      	ldr	r3, [r7, #32]
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	00db      	lsls	r3, r3, #3
 800ee28:	fa22 f303 	lsr.w	r3, r2, r3
 800ee2c:	b2da      	uxtb	r2, r3
 800ee2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee30:	701a      	strb	r2, [r3, #0]
      i++;
 800ee32:	6a3b      	ldr	r3, [r7, #32]
 800ee34:	3301      	adds	r3, #1
 800ee36:	623b      	str	r3, [r7, #32]
      pDest++;
 800ee38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ee3e:	8bfb      	ldrh	r3, [r7, #30]
 800ee40:	3b01      	subs	r3, #1
 800ee42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ee44:	8bfb      	ldrh	r3, [r7, #30]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d1ea      	bne.n	800ee20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ee4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	372c      	adds	r7, #44	@ 0x2c
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr

0800ee58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b085      	sub	sp, #20
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	785b      	ldrb	r3, [r3, #1]
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d12c      	bne.n	800eece <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	015a      	lsls	r2, r3, #5
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	4413      	add	r3, r2
 800ee7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	db12      	blt.n	800eeac <USB_EPSetStall+0x54>
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d00f      	beq.n	800eeac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	015a      	lsls	r2, r3, #5
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	4413      	add	r3, r2
 800ee94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	68ba      	ldr	r2, [r7, #8]
 800ee9c:	0151      	lsls	r1, r2, #5
 800ee9e:	68fa      	ldr	r2, [r7, #12]
 800eea0:	440a      	add	r2, r1
 800eea2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eea6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eeaa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800eeac:	68bb      	ldr	r3, [r7, #8]
 800eeae:	015a      	lsls	r2, r3, #5
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	4413      	add	r3, r2
 800eeb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	68ba      	ldr	r2, [r7, #8]
 800eebc:	0151      	lsls	r1, r2, #5
 800eebe:	68fa      	ldr	r2, [r7, #12]
 800eec0:	440a      	add	r2, r1
 800eec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eec6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eeca:	6013      	str	r3, [r2, #0]
 800eecc:	e02b      	b.n	800ef26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	015a      	lsls	r2, r3, #5
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	4413      	add	r3, r2
 800eed6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	db12      	blt.n	800ef06 <USB_EPSetStall+0xae>
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d00f      	beq.n	800ef06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800eee6:	68bb      	ldr	r3, [r7, #8]
 800eee8:	015a      	lsls	r2, r3, #5
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	4413      	add	r3, r2
 800eeee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	68ba      	ldr	r2, [r7, #8]
 800eef6:	0151      	lsls	r1, r2, #5
 800eef8:	68fa      	ldr	r2, [r7, #12]
 800eefa:	440a      	add	r2, r1
 800eefc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ef04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	015a      	lsls	r2, r3, #5
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	4413      	add	r3, r2
 800ef0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	68ba      	ldr	r2, [r7, #8]
 800ef16:	0151      	lsls	r1, r2, #5
 800ef18:	68fa      	ldr	r2, [r7, #12]
 800ef1a:	440a      	add	r2, r1
 800ef1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ef26:	2300      	movs	r3, #0
}
 800ef28:	4618      	mov	r0, r3
 800ef2a:	3714      	adds	r7, #20
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef32:	4770      	bx	lr

0800ef34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b085      	sub	sp, #20
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	785b      	ldrb	r3, [r3, #1]
 800ef4c:	2b01      	cmp	r3, #1
 800ef4e:	d128      	bne.n	800efa2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	015a      	lsls	r2, r3, #5
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	4413      	add	r3, r2
 800ef58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	68ba      	ldr	r2, [r7, #8]
 800ef60:	0151      	lsls	r1, r2, #5
 800ef62:	68fa      	ldr	r2, [r7, #12]
 800ef64:	440a      	add	r2, r1
 800ef66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ef6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ef70:	683b      	ldr	r3, [r7, #0]
 800ef72:	791b      	ldrb	r3, [r3, #4]
 800ef74:	2b03      	cmp	r3, #3
 800ef76:	d003      	beq.n	800ef80 <USB_EPClearStall+0x4c>
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	791b      	ldrb	r3, [r3, #4]
 800ef7c:	2b02      	cmp	r3, #2
 800ef7e:	d138      	bne.n	800eff2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	015a      	lsls	r2, r3, #5
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	4413      	add	r3, r2
 800ef88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	68ba      	ldr	r2, [r7, #8]
 800ef90:	0151      	lsls	r1, r2, #5
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	440a      	add	r2, r1
 800ef96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ef9e:	6013      	str	r3, [r2, #0]
 800efa0:	e027      	b.n	800eff2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	015a      	lsls	r2, r3, #5
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	4413      	add	r3, r2
 800efaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	68ba      	ldr	r2, [r7, #8]
 800efb2:	0151      	lsls	r1, r2, #5
 800efb4:	68fa      	ldr	r2, [r7, #12]
 800efb6:	440a      	add	r2, r1
 800efb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efbc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800efc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	791b      	ldrb	r3, [r3, #4]
 800efc6:	2b03      	cmp	r3, #3
 800efc8:	d003      	beq.n	800efd2 <USB_EPClearStall+0x9e>
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	791b      	ldrb	r3, [r3, #4]
 800efce:	2b02      	cmp	r3, #2
 800efd0:	d10f      	bne.n	800eff2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800efd2:	68bb      	ldr	r3, [r7, #8]
 800efd4:	015a      	lsls	r2, r3, #5
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	4413      	add	r3, r2
 800efda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	68ba      	ldr	r2, [r7, #8]
 800efe2:	0151      	lsls	r1, r2, #5
 800efe4:	68fa      	ldr	r2, [r7, #12]
 800efe6:	440a      	add	r2, r1
 800efe8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eff0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800eff2:	2300      	movs	r3, #0
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3714      	adds	r7, #20
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f000:	b480      	push	{r7}
 800f002:	b085      	sub	sp, #20
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	460b      	mov	r3, r1
 800f00a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	68fa      	ldr	r2, [r7, #12]
 800f01a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f01e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f022:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f02a:	681a      	ldr	r2, [r3, #0]
 800f02c:	78fb      	ldrb	r3, [r7, #3]
 800f02e:	011b      	lsls	r3, r3, #4
 800f030:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f034:	68f9      	ldr	r1, [r7, #12]
 800f036:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f03a:	4313      	orrs	r3, r2
 800f03c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f03e:	2300      	movs	r3, #0
}
 800f040:	4618      	mov	r0, r3
 800f042:	3714      	adds	r7, #20
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr

0800f04c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f04c:	b480      	push	{r7}
 800f04e:	b085      	sub	sp, #20
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f066:	f023 0303 	bic.w	r3, r3, #3
 800f06a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	68fa      	ldr	r2, [r7, #12]
 800f076:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f07a:	f023 0302 	bic.w	r3, r3, #2
 800f07e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f080:	2300      	movs	r3, #0
}
 800f082:	4618      	mov	r0, r3
 800f084:	3714      	adds	r7, #20
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr

0800f08e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f08e:	b480      	push	{r7}
 800f090:	b085      	sub	sp, #20
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	68fa      	ldr	r2, [r7, #12]
 800f0a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f0a8:	f023 0303 	bic.w	r3, r3, #3
 800f0ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f0bc:	f043 0302 	orr.w	r3, r3, #2
 800f0c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f0c2:	2300      	movs	r3, #0
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3714      	adds	r7, #20
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr

0800f0d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b085      	sub	sp, #20
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	695b      	ldr	r3, [r3, #20]
 800f0dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	699b      	ldr	r3, [r3, #24]
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	4013      	ands	r3, r2
 800f0e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3714      	adds	r7, #20
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f4:	4770      	bx	lr

0800f0f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f0f6:	b480      	push	{r7}
 800f0f8:	b085      	sub	sp, #20
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f108:	699b      	ldr	r3, [r3, #24]
 800f10a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f112:	69db      	ldr	r3, [r3, #28]
 800f114:	68ba      	ldr	r2, [r7, #8]
 800f116:	4013      	ands	r3, r2
 800f118:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	0c1b      	lsrs	r3, r3, #16
}
 800f11e:	4618      	mov	r0, r3
 800f120:	3714      	adds	r7, #20
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr

0800f12a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f12a:	b480      	push	{r7}
 800f12c:	b085      	sub	sp, #20
 800f12e:	af00      	add	r7, sp, #0
 800f130:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f13c:	699b      	ldr	r3, [r3, #24]
 800f13e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f146:	69db      	ldr	r3, [r3, #28]
 800f148:	68ba      	ldr	r2, [r7, #8]
 800f14a:	4013      	ands	r3, r2
 800f14c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	b29b      	uxth	r3, r3
}
 800f152:	4618      	mov	r0, r3
 800f154:	3714      	adds	r7, #20
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr

0800f15e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f15e:	b480      	push	{r7}
 800f160:	b085      	sub	sp, #20
 800f162:	af00      	add	r7, sp, #0
 800f164:	6078      	str	r0, [r7, #4]
 800f166:	460b      	mov	r3, r1
 800f168:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f16e:	78fb      	ldrb	r3, [r7, #3]
 800f170:	015a      	lsls	r2, r3, #5
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	4413      	add	r3, r2
 800f176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f17a:	689b      	ldr	r3, [r3, #8]
 800f17c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f184:	695b      	ldr	r3, [r3, #20]
 800f186:	68ba      	ldr	r2, [r7, #8]
 800f188:	4013      	ands	r3, r2
 800f18a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f18c:	68bb      	ldr	r3, [r7, #8]
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3714      	adds	r7, #20
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr

0800f19a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f19a:	b480      	push	{r7}
 800f19c:	b087      	sub	sp, #28
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
 800f1a2:	460b      	mov	r3, r1
 800f1a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1b0:	691b      	ldr	r3, [r3, #16]
 800f1b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f1be:	78fb      	ldrb	r3, [r7, #3]
 800f1c0:	f003 030f 	and.w	r3, r3, #15
 800f1c4:	68fa      	ldr	r2, [r7, #12]
 800f1c6:	fa22 f303 	lsr.w	r3, r2, r3
 800f1ca:	01db      	lsls	r3, r3, #7
 800f1cc:	b2db      	uxtb	r3, r3
 800f1ce:	693a      	ldr	r2, [r7, #16]
 800f1d0:	4313      	orrs	r3, r2
 800f1d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f1d4:	78fb      	ldrb	r3, [r7, #3]
 800f1d6:	015a      	lsls	r2, r3, #5
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	4413      	add	r3, r2
 800f1dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1e0:	689b      	ldr	r3, [r3, #8]
 800f1e2:	693a      	ldr	r2, [r7, #16]
 800f1e4:	4013      	ands	r3, r2
 800f1e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f1e8:	68bb      	ldr	r3, [r7, #8]
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	371c      	adds	r7, #28
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f4:	4770      	bx	lr

0800f1f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f1f6:	b480      	push	{r7}
 800f1f8:	b083      	sub	sp, #12
 800f1fa:	af00      	add	r7, sp, #0
 800f1fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	695b      	ldr	r3, [r3, #20]
 800f202:	f003 0301 	and.w	r3, r3, #1
}
 800f206:	4618      	mov	r0, r3
 800f208:	370c      	adds	r7, #12
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr
	...

0800f214 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f214:	b480      	push	{r7}
 800f216:	b085      	sub	sp, #20
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f226:	681a      	ldr	r2, [r3, #0]
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f22e:	4619      	mov	r1, r3
 800f230:	4b09      	ldr	r3, [pc, #36]	@ (800f258 <USB_ActivateSetup+0x44>)
 800f232:	4013      	ands	r3, r2
 800f234:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	68fa      	ldr	r2, [r7, #12]
 800f240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f248:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f24a:	2300      	movs	r3, #0
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3714      	adds	r7, #20
 800f250:	46bd      	mov	sp, r7
 800f252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f256:	4770      	bx	lr
 800f258:	fffff800 	.word	0xfffff800

0800f25c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f25c:	b480      	push	{r7}
 800f25e:	b087      	sub	sp, #28
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	460b      	mov	r3, r1
 800f266:	607a      	str	r2, [r7, #4]
 800f268:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	333c      	adds	r3, #60	@ 0x3c
 800f272:	3304      	adds	r3, #4
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	4a26      	ldr	r2, [pc, #152]	@ (800f314 <USB_EP0_OutStart+0xb8>)
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d90a      	bls.n	800f296 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f28c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f290:	d101      	bne.n	800f296 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f292:	2300      	movs	r3, #0
 800f294:	e037      	b.n	800f306 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f29c:	461a      	mov	r2, r3
 800f29e:	2300      	movs	r3, #0
 800f2a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2a8:	691b      	ldr	r3, [r3, #16]
 800f2aa:	697a      	ldr	r2, [r7, #20]
 800f2ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f2b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2bc:	691b      	ldr	r3, [r3, #16]
 800f2be:	697a      	ldr	r2, [r7, #20]
 800f2c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2c4:	f043 0318 	orr.w	r3, r3, #24
 800f2c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2d0:	691b      	ldr	r3, [r3, #16]
 800f2d2:	697a      	ldr	r2, [r7, #20]
 800f2d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2d8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f2dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f2de:	7afb      	ldrb	r3, [r7, #11]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d10f      	bne.n	800f304 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f2e4:	697b      	ldr	r3, [r7, #20]
 800f2e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	697a      	ldr	r2, [r7, #20]
 800f2fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2fe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f302:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f304:	2300      	movs	r3, #0
}
 800f306:	4618      	mov	r0, r3
 800f308:	371c      	adds	r7, #28
 800f30a:	46bd      	mov	sp, r7
 800f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f310:	4770      	bx	lr
 800f312:	bf00      	nop
 800f314:	4f54300a 	.word	0x4f54300a

0800f318 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f318:	b480      	push	{r7}
 800f31a:	b085      	sub	sp, #20
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f320:	2300      	movs	r3, #0
 800f322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	3301      	adds	r3, #1
 800f328:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f330:	d901      	bls.n	800f336 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f332:	2303      	movs	r3, #3
 800f334:	e01b      	b.n	800f36e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	691b      	ldr	r3, [r3, #16]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	daf2      	bge.n	800f324 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f33e:	2300      	movs	r3, #0
 800f340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	691b      	ldr	r3, [r3, #16]
 800f346:	f043 0201 	orr.w	r2, r3, #1
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	3301      	adds	r3, #1
 800f352:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f35a:	d901      	bls.n	800f360 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f35c:	2303      	movs	r3, #3
 800f35e:	e006      	b.n	800f36e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	691b      	ldr	r3, [r3, #16]
 800f364:	f003 0301 	and.w	r3, r3, #1
 800f368:	2b01      	cmp	r3, #1
 800f36a:	d0f0      	beq.n	800f34e <USB_CoreReset+0x36>

  return HAL_OK;
 800f36c:	2300      	movs	r3, #0
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3714      	adds	r7, #20
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr
	...

0800f37c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f380:	4904      	ldr	r1, [pc, #16]	@ (800f394 <MX_FATFS_Init+0x18>)
 800f382:	4805      	ldr	r0, [pc, #20]	@ (800f398 <MX_FATFS_Init+0x1c>)
 800f384:	f005 fb48 	bl	8014a18 <FATFS_LinkDriver>
 800f388:	4603      	mov	r3, r0
 800f38a:	461a      	mov	r2, r3
 800f38c:	4b03      	ldr	r3, [pc, #12]	@ (800f39c <MX_FATFS_Init+0x20>)
 800f38e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f390:	bf00      	nop
 800f392:	bd80      	pop	{r7, pc}
 800f394:	240005d0 	.word	0x240005d0
 800f398:	08018ec0 	.word	0x08018ec0
 800f39c:	240005cc 	.word	0x240005cc

0800f3a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f3a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f3ba:	f000 f879 	bl	800f4b0 <BSP_SD_IsDetected>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d001      	beq.n	800f3c8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800f3c4:	2302      	movs	r3, #2
 800f3c6:	e012      	b.n	800f3ee <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800f3c8:	480b      	ldr	r0, [pc, #44]	@ (800f3f8 <BSP_SD_Init+0x48>)
 800f3ca:	f7fa f8b5 	bl	8009538 <HAL_SD_Init>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f3d2:	79fb      	ldrb	r3, [r7, #7]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d109      	bne.n	800f3ec <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800f3d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800f3dc:	4806      	ldr	r0, [pc, #24]	@ (800f3f8 <BSP_SD_Init+0x48>)
 800f3de:	f7fa ff71 	bl	800a2c4 <HAL_SD_ConfigWideBusOperation>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d001      	beq.n	800f3ec <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f3ec:	79fb      	ldrb	r3, [r7, #7]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3708      	adds	r7, #8
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	240003b8 	.word	0x240003b8

0800f3fc <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b088      	sub	sp, #32
 800f400:	af02      	add	r7, sp, #8
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	607a      	str	r2, [r7, #4]
 800f408:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f40a:	2300      	movs	r3, #0
 800f40c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	9300      	str	r3, [sp, #0]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	68ba      	ldr	r2, [r7, #8]
 800f416:	68f9      	ldr	r1, [r7, #12]
 800f418:	4806      	ldr	r0, [pc, #24]	@ (800f434 <BSP_SD_ReadBlocks+0x38>)
 800f41a:	f7fa f9ad 	bl	8009778 <HAL_SD_ReadBlocks>
 800f41e:	4603      	mov	r3, r0
 800f420:	2b00      	cmp	r3, #0
 800f422:	d001      	beq.n	800f428 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f424:	2301      	movs	r3, #1
 800f426:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f428:	7dfb      	ldrb	r3, [r7, #23]
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3718      	adds	r7, #24
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
 800f432:	bf00      	nop
 800f434:	240003b8 	.word	0x240003b8

0800f438 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b088      	sub	sp, #32
 800f43c:	af02      	add	r7, sp, #8
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	607a      	str	r2, [r7, #4]
 800f444:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f446:	2300      	movs	r3, #0
 800f448:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	9300      	str	r3, [sp, #0]
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	68ba      	ldr	r2, [r7, #8]
 800f452:	68f9      	ldr	r1, [r7, #12]
 800f454:	4806      	ldr	r0, [pc, #24]	@ (800f470 <BSP_SD_WriteBlocks+0x38>)
 800f456:	f7fa fb19 	bl	8009a8c <HAL_SD_WriteBlocks>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d001      	beq.n	800f464 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f460:	2301      	movs	r3, #1
 800f462:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f464:	7dfb      	ldrb	r3, [r7, #23]
}
 800f466:	4618      	mov	r0, r3
 800f468:	3718      	adds	r7, #24
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	240003b8 	.word	0x240003b8

0800f474 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f478:	4805      	ldr	r0, [pc, #20]	@ (800f490 <BSP_SD_GetCardState+0x1c>)
 800f47a:	f7fb f835 	bl	800a4e8 <HAL_SD_GetCardState>
 800f47e:	4603      	mov	r3, r0
 800f480:	2b04      	cmp	r3, #4
 800f482:	bf14      	ite	ne
 800f484:	2301      	movne	r3, #1
 800f486:	2300      	moveq	r3, #0
 800f488:	b2db      	uxtb	r3, r3
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	240003b8 	.word	0x240003b8

0800f494 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800f49c:	6879      	ldr	r1, [r7, #4]
 800f49e:	4803      	ldr	r0, [pc, #12]	@ (800f4ac <BSP_SD_GetCardInfo+0x18>)
 800f4a0:	f7fa fee4 	bl	800a26c <HAL_SD_GetCardInfo>
}
 800f4a4:	bf00      	nop
 800f4a6:	3708      	adds	r7, #8
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	240003b8 	.word	0x240003b8

0800f4b0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b082      	sub	sp, #8
 800f4b4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f4ba:	f000 f80b 	bl	800f4d4 <BSP_PlatformIsDetected>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d101      	bne.n	800f4c8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f4c8:	79fb      	ldrb	r3, [r7, #7]
 800f4ca:	b2db      	uxtb	r3, r3
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f4da:	2301      	movs	r3, #1
 800f4dc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f4de:	2102      	movs	r1, #2
 800f4e0:	4806      	ldr	r0, [pc, #24]	@ (800f4fc <BSP_PlatformIsDetected+0x28>)
 800f4e2:	f7f5 f829 	bl	8004538 <HAL_GPIO_ReadPin>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d001      	beq.n	800f4f0 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f4f0:	79fb      	ldrb	r3, [r7, #7]
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3708      	adds	r7, #8
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	58020000 	.word	0x58020000

0800f500 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b082      	sub	sp, #8
 800f504:	af00      	add	r7, sp, #0
 800f506:	4603      	mov	r3, r0
 800f508:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f50a:	4b0b      	ldr	r3, [pc, #44]	@ (800f538 <SD_CheckStatus+0x38>)
 800f50c:	2201      	movs	r2, #1
 800f50e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f510:	f7ff ffb0 	bl	800f474 <BSP_SD_GetCardState>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d107      	bne.n	800f52a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f51a:	4b07      	ldr	r3, [pc, #28]	@ (800f538 <SD_CheckStatus+0x38>)
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	b2db      	uxtb	r3, r3
 800f520:	f023 0301 	bic.w	r3, r3, #1
 800f524:	b2da      	uxtb	r2, r3
 800f526:	4b04      	ldr	r3, [pc, #16]	@ (800f538 <SD_CheckStatus+0x38>)
 800f528:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f52a:	4b03      	ldr	r3, [pc, #12]	@ (800f538 <SD_CheckStatus+0x38>)
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	b2db      	uxtb	r3, r3
}
 800f530:	4618      	mov	r0, r3
 800f532:	3708      	adds	r7, #8
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}
 800f538:	24000015 	.word	0x24000015

0800f53c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b082      	sub	sp, #8
 800f540:	af00      	add	r7, sp, #0
 800f542:	4603      	mov	r3, r0
 800f544:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f546:	4b0b      	ldr	r3, [pc, #44]	@ (800f574 <SD_initialize+0x38>)
 800f548:	2201      	movs	r2, #1
 800f54a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f54c:	f7ff ff30 	bl	800f3b0 <BSP_SD_Init>
 800f550:	4603      	mov	r3, r0
 800f552:	2b00      	cmp	r3, #0
 800f554:	d107      	bne.n	800f566 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f556:	79fb      	ldrb	r3, [r7, #7]
 800f558:	4618      	mov	r0, r3
 800f55a:	f7ff ffd1 	bl	800f500 <SD_CheckStatus>
 800f55e:	4603      	mov	r3, r0
 800f560:	461a      	mov	r2, r3
 800f562:	4b04      	ldr	r3, [pc, #16]	@ (800f574 <SD_initialize+0x38>)
 800f564:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f566:	4b03      	ldr	r3, [pc, #12]	@ (800f574 <SD_initialize+0x38>)
 800f568:	781b      	ldrb	r3, [r3, #0]
 800f56a:	b2db      	uxtb	r3, r3
}
 800f56c:	4618      	mov	r0, r3
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	24000015 	.word	0x24000015

0800f578 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	4603      	mov	r3, r0
 800f580:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f582:	79fb      	ldrb	r3, [r7, #7]
 800f584:	4618      	mov	r0, r3
 800f586:	f7ff ffbb 	bl	800f500 <SD_CheckStatus>
 800f58a:	4603      	mov	r3, r0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	3708      	adds	r7, #8
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b086      	sub	sp, #24
 800f598:	af00      	add	r7, sp, #0
 800f59a:	60b9      	str	r1, [r7, #8]
 800f59c:	607a      	str	r2, [r7, #4]
 800f59e:	603b      	str	r3, [r7, #0]
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f5a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f5ac:	683a      	ldr	r2, [r7, #0]
 800f5ae:	6879      	ldr	r1, [r7, #4]
 800f5b0:	68b8      	ldr	r0, [r7, #8]
 800f5b2:	f7ff ff23 	bl	800f3fc <BSP_SD_ReadBlocks>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d107      	bne.n	800f5cc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f5bc:	bf00      	nop
 800f5be:	f7ff ff59 	bl	800f474 <BSP_SD_GetCardState>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d1fa      	bne.n	800f5be <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f5cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3718      	adds	r7, #24
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}

0800f5d6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f5d6:	b580      	push	{r7, lr}
 800f5d8:	b086      	sub	sp, #24
 800f5da:	af00      	add	r7, sp, #0
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	607a      	str	r2, [r7, #4]
 800f5e0:	603b      	str	r3, [r7, #0]
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f5ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f5ee:	683a      	ldr	r2, [r7, #0]
 800f5f0:	6879      	ldr	r1, [r7, #4]
 800f5f2:	68b8      	ldr	r0, [r7, #8]
 800f5f4:	f7ff ff20 	bl	800f438 <BSP_SD_WriteBlocks>
 800f5f8:	4603      	mov	r3, r0
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d107      	bne.n	800f60e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f5fe:	bf00      	nop
 800f600:	f7ff ff38 	bl	800f474 <BSP_SD_GetCardState>
 800f604:	4603      	mov	r3, r0
 800f606:	2b00      	cmp	r3, #0
 800f608:	d1fa      	bne.n	800f600 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f60a:	2300      	movs	r3, #0
 800f60c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f60e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f610:	4618      	mov	r0, r3
 800f612:	3718      	adds	r7, #24
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}

0800f618 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b08c      	sub	sp, #48	@ 0x30
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	4603      	mov	r3, r0
 800f620:	603a      	str	r2, [r7, #0]
 800f622:	71fb      	strb	r3, [r7, #7]
 800f624:	460b      	mov	r3, r1
 800f626:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f628:	2301      	movs	r3, #1
 800f62a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f62e:	4b25      	ldr	r3, [pc, #148]	@ (800f6c4 <SD_ioctl+0xac>)
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	b2db      	uxtb	r3, r3
 800f634:	f003 0301 	and.w	r3, r3, #1
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d001      	beq.n	800f640 <SD_ioctl+0x28>
 800f63c:	2303      	movs	r3, #3
 800f63e:	e03c      	b.n	800f6ba <SD_ioctl+0xa2>

  switch (cmd)
 800f640:	79bb      	ldrb	r3, [r7, #6]
 800f642:	2b03      	cmp	r3, #3
 800f644:	d834      	bhi.n	800f6b0 <SD_ioctl+0x98>
 800f646:	a201      	add	r2, pc, #4	@ (adr r2, 800f64c <SD_ioctl+0x34>)
 800f648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f64c:	0800f65d 	.word	0x0800f65d
 800f650:	0800f665 	.word	0x0800f665
 800f654:	0800f67d 	.word	0x0800f67d
 800f658:	0800f697 	.word	0x0800f697
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f65c:	2300      	movs	r3, #0
 800f65e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f662:	e028      	b.n	800f6b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f664:	f107 0308 	add.w	r3, r7, #8
 800f668:	4618      	mov	r0, r3
 800f66a:	f7ff ff13 	bl	800f494 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f66e:	6a3a      	ldr	r2, [r7, #32]
 800f670:	683b      	ldr	r3, [r7, #0]
 800f672:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f674:	2300      	movs	r3, #0
 800f676:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f67a:	e01c      	b.n	800f6b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f67c:	f107 0308 	add.w	r3, r7, #8
 800f680:	4618      	mov	r0, r3
 800f682:	f7ff ff07 	bl	800f494 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f688:	b29a      	uxth	r2, r3
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f68e:	2300      	movs	r3, #0
 800f690:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f694:	e00f      	b.n	800f6b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f696:	f107 0308 	add.w	r3, r7, #8
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7ff fefa 	bl	800f494 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6a2:	0a5a      	lsrs	r2, r3, #9
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800f6ae:	e002      	b.n	800f6b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f6b0:	2304      	movs	r3, #4
 800f6b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800f6b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3730      	adds	r7, #48	@ 0x30
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	24000015 	.word	0x24000015

0800f6c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f6c8:	b580      	push	{r7, lr}
 800f6ca:	b084      	sub	sp, #16
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	460b      	mov	r3, r1
 800f6d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f6d4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f6d8:	f005 ff70 	bl	80155bc <USBD_static_malloc>
 800f6dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d109      	bne.n	800f6f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	32b0      	adds	r2, #176	@ 0xb0
 800f6ee:	2100      	movs	r1, #0
 800f6f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f6f4:	2302      	movs	r3, #2
 800f6f6:	e0d4      	b.n	800f8a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f6f8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f6fc:	2100      	movs	r1, #0
 800f6fe:	68f8      	ldr	r0, [r7, #12]
 800f700:	f006 fdb3 	bl	801626a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	32b0      	adds	r2, #176	@ 0xb0
 800f70e:	68f9      	ldr	r1, [r7, #12]
 800f710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	32b0      	adds	r2, #176	@ 0xb0
 800f71e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	7c1b      	ldrb	r3, [r3, #16]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d138      	bne.n	800f7a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f730:	4b5e      	ldr	r3, [pc, #376]	@ (800f8ac <USBD_CDC_Init+0x1e4>)
 800f732:	7819      	ldrb	r1, [r3, #0]
 800f734:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f738:	2202      	movs	r2, #2
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f005 fe1b 	bl	8015376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f740:	4b5a      	ldr	r3, [pc, #360]	@ (800f8ac <USBD_CDC_Init+0x1e4>)
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	f003 020f 	and.w	r2, r3, #15
 800f748:	6879      	ldr	r1, [r7, #4]
 800f74a:	4613      	mov	r3, r2
 800f74c:	009b      	lsls	r3, r3, #2
 800f74e:	4413      	add	r3, r2
 800f750:	009b      	lsls	r3, r3, #2
 800f752:	440b      	add	r3, r1
 800f754:	3324      	adds	r3, #36	@ 0x24
 800f756:	2201      	movs	r2, #1
 800f758:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f75a:	4b55      	ldr	r3, [pc, #340]	@ (800f8b0 <USBD_CDC_Init+0x1e8>)
 800f75c:	7819      	ldrb	r1, [r3, #0]
 800f75e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f762:	2202      	movs	r2, #2
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f005 fe06 	bl	8015376 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f76a:	4b51      	ldr	r3, [pc, #324]	@ (800f8b0 <USBD_CDC_Init+0x1e8>)
 800f76c:	781b      	ldrb	r3, [r3, #0]
 800f76e:	f003 020f 	and.w	r2, r3, #15
 800f772:	6879      	ldr	r1, [r7, #4]
 800f774:	4613      	mov	r3, r2
 800f776:	009b      	lsls	r3, r3, #2
 800f778:	4413      	add	r3, r2
 800f77a:	009b      	lsls	r3, r3, #2
 800f77c:	440b      	add	r3, r1
 800f77e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f782:	2201      	movs	r2, #1
 800f784:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f786:	4b4b      	ldr	r3, [pc, #300]	@ (800f8b4 <USBD_CDC_Init+0x1ec>)
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	f003 020f 	and.w	r2, r3, #15
 800f78e:	6879      	ldr	r1, [r7, #4]
 800f790:	4613      	mov	r3, r2
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4413      	add	r3, r2
 800f796:	009b      	lsls	r3, r3, #2
 800f798:	440b      	add	r3, r1
 800f79a:	3326      	adds	r3, #38	@ 0x26
 800f79c:	2210      	movs	r2, #16
 800f79e:	801a      	strh	r2, [r3, #0]
 800f7a0:	e035      	b.n	800f80e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f7a2:	4b42      	ldr	r3, [pc, #264]	@ (800f8ac <USBD_CDC_Init+0x1e4>)
 800f7a4:	7819      	ldrb	r1, [r3, #0]
 800f7a6:	2340      	movs	r3, #64	@ 0x40
 800f7a8:	2202      	movs	r2, #2
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f005 fde3 	bl	8015376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f7b0:	4b3e      	ldr	r3, [pc, #248]	@ (800f8ac <USBD_CDC_Init+0x1e4>)
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	f003 020f 	and.w	r2, r3, #15
 800f7b8:	6879      	ldr	r1, [r7, #4]
 800f7ba:	4613      	mov	r3, r2
 800f7bc:	009b      	lsls	r3, r3, #2
 800f7be:	4413      	add	r3, r2
 800f7c0:	009b      	lsls	r3, r3, #2
 800f7c2:	440b      	add	r3, r1
 800f7c4:	3324      	adds	r3, #36	@ 0x24
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f7ca:	4b39      	ldr	r3, [pc, #228]	@ (800f8b0 <USBD_CDC_Init+0x1e8>)
 800f7cc:	7819      	ldrb	r1, [r3, #0]
 800f7ce:	2340      	movs	r3, #64	@ 0x40
 800f7d0:	2202      	movs	r2, #2
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f005 fdcf 	bl	8015376 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f7d8:	4b35      	ldr	r3, [pc, #212]	@ (800f8b0 <USBD_CDC_Init+0x1e8>)
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	f003 020f 	and.w	r2, r3, #15
 800f7e0:	6879      	ldr	r1, [r7, #4]
 800f7e2:	4613      	mov	r3, r2
 800f7e4:	009b      	lsls	r3, r3, #2
 800f7e6:	4413      	add	r3, r2
 800f7e8:	009b      	lsls	r3, r3, #2
 800f7ea:	440b      	add	r3, r1
 800f7ec:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f7f0:	2201      	movs	r2, #1
 800f7f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f7f4:	4b2f      	ldr	r3, [pc, #188]	@ (800f8b4 <USBD_CDC_Init+0x1ec>)
 800f7f6:	781b      	ldrb	r3, [r3, #0]
 800f7f8:	f003 020f 	and.w	r2, r3, #15
 800f7fc:	6879      	ldr	r1, [r7, #4]
 800f7fe:	4613      	mov	r3, r2
 800f800:	009b      	lsls	r3, r3, #2
 800f802:	4413      	add	r3, r2
 800f804:	009b      	lsls	r3, r3, #2
 800f806:	440b      	add	r3, r1
 800f808:	3326      	adds	r3, #38	@ 0x26
 800f80a:	2210      	movs	r2, #16
 800f80c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f80e:	4b29      	ldr	r3, [pc, #164]	@ (800f8b4 <USBD_CDC_Init+0x1ec>)
 800f810:	7819      	ldrb	r1, [r3, #0]
 800f812:	2308      	movs	r3, #8
 800f814:	2203      	movs	r2, #3
 800f816:	6878      	ldr	r0, [r7, #4]
 800f818:	f005 fdad 	bl	8015376 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f81c:	4b25      	ldr	r3, [pc, #148]	@ (800f8b4 <USBD_CDC_Init+0x1ec>)
 800f81e:	781b      	ldrb	r3, [r3, #0]
 800f820:	f003 020f 	and.w	r2, r3, #15
 800f824:	6879      	ldr	r1, [r7, #4]
 800f826:	4613      	mov	r3, r2
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	4413      	add	r3, r2
 800f82c:	009b      	lsls	r3, r3, #2
 800f82e:	440b      	add	r3, r1
 800f830:	3324      	adds	r3, #36	@ 0x24
 800f832:	2201      	movs	r2, #1
 800f834:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2200      	movs	r2, #0
 800f83a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f844:	687a      	ldr	r2, [r7, #4]
 800f846:	33b0      	adds	r3, #176	@ 0xb0
 800f848:	009b      	lsls	r3, r3, #2
 800f84a:	4413      	add	r3, r2
 800f84c:	685b      	ldr	r3, [r3, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2200      	movs	r2, #0
 800f856:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	2200      	movs	r2, #0
 800f85e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d101      	bne.n	800f870 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f86c:	2302      	movs	r3, #2
 800f86e:	e018      	b.n	800f8a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	7c1b      	ldrb	r3, [r3, #16]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d10a      	bne.n	800f88e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f878:	4b0d      	ldr	r3, [pc, #52]	@ (800f8b0 <USBD_CDC_Init+0x1e8>)
 800f87a:	7819      	ldrb	r1, [r3, #0]
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f882:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f005 fe64 	bl	8015554 <USBD_LL_PrepareReceive>
 800f88c:	e008      	b.n	800f8a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f88e:	4b08      	ldr	r3, [pc, #32]	@ (800f8b0 <USBD_CDC_Init+0x1e8>)
 800f890:	7819      	ldrb	r1, [r3, #0]
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f898:	2340      	movs	r3, #64	@ 0x40
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f005 fe5a 	bl	8015554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f8a0:	2300      	movs	r3, #0
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3710      	adds	r7, #16
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
 800f8aa:	bf00      	nop
 800f8ac:	2400009f 	.word	0x2400009f
 800f8b0:	240000a0 	.word	0x240000a0
 800f8b4:	240000a1 	.word	0x240000a1

0800f8b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b082      	sub	sp, #8
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f8c4:	4b3a      	ldr	r3, [pc, #232]	@ (800f9b0 <USBD_CDC_DeInit+0xf8>)
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	4619      	mov	r1, r3
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f005 fd79 	bl	80153c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f8d0:	4b37      	ldr	r3, [pc, #220]	@ (800f9b0 <USBD_CDC_DeInit+0xf8>)
 800f8d2:	781b      	ldrb	r3, [r3, #0]
 800f8d4:	f003 020f 	and.w	r2, r3, #15
 800f8d8:	6879      	ldr	r1, [r7, #4]
 800f8da:	4613      	mov	r3, r2
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	4413      	add	r3, r2
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	440b      	add	r3, r1
 800f8e4:	3324      	adds	r3, #36	@ 0x24
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f8ea:	4b32      	ldr	r3, [pc, #200]	@ (800f9b4 <USBD_CDC_DeInit+0xfc>)
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	4619      	mov	r1, r3
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f005 fd66 	bl	80153c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f8f6:	4b2f      	ldr	r3, [pc, #188]	@ (800f9b4 <USBD_CDC_DeInit+0xfc>)
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	f003 020f 	and.w	r2, r3, #15
 800f8fe:	6879      	ldr	r1, [r7, #4]
 800f900:	4613      	mov	r3, r2
 800f902:	009b      	lsls	r3, r3, #2
 800f904:	4413      	add	r3, r2
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	440b      	add	r3, r1
 800f90a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f90e:	2200      	movs	r2, #0
 800f910:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f912:	4b29      	ldr	r3, [pc, #164]	@ (800f9b8 <USBD_CDC_DeInit+0x100>)
 800f914:	781b      	ldrb	r3, [r3, #0]
 800f916:	4619      	mov	r1, r3
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f005 fd52 	bl	80153c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f91e:	4b26      	ldr	r3, [pc, #152]	@ (800f9b8 <USBD_CDC_DeInit+0x100>)
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	f003 020f 	and.w	r2, r3, #15
 800f926:	6879      	ldr	r1, [r7, #4]
 800f928:	4613      	mov	r3, r2
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	4413      	add	r3, r2
 800f92e:	009b      	lsls	r3, r3, #2
 800f930:	440b      	add	r3, r1
 800f932:	3324      	adds	r3, #36	@ 0x24
 800f934:	2200      	movs	r2, #0
 800f936:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f938:	4b1f      	ldr	r3, [pc, #124]	@ (800f9b8 <USBD_CDC_DeInit+0x100>)
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	f003 020f 	and.w	r2, r3, #15
 800f940:	6879      	ldr	r1, [r7, #4]
 800f942:	4613      	mov	r3, r2
 800f944:	009b      	lsls	r3, r3, #2
 800f946:	4413      	add	r3, r2
 800f948:	009b      	lsls	r3, r3, #2
 800f94a:	440b      	add	r3, r1
 800f94c:	3326      	adds	r3, #38	@ 0x26
 800f94e:	2200      	movs	r2, #0
 800f950:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	32b0      	adds	r2, #176	@ 0xb0
 800f95c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d01f      	beq.n	800f9a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f96a:	687a      	ldr	r2, [r7, #4]
 800f96c:	33b0      	adds	r3, #176	@ 0xb0
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	4413      	add	r3, r2
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	685b      	ldr	r3, [r3, #4]
 800f976:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	32b0      	adds	r2, #176	@ 0xb0
 800f982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f986:	4618      	mov	r0, r3
 800f988:	f005 fe26 	bl	80155d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	32b0      	adds	r2, #176	@ 0xb0
 800f996:	2100      	movs	r1, #0
 800f998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f9a4:	2300      	movs	r3, #0
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3708      	adds	r7, #8
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	2400009f 	.word	0x2400009f
 800f9b4:	240000a0 	.word	0x240000a0
 800f9b8:	240000a1 	.word	0x240000a1

0800f9bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b086      	sub	sp, #24
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	32b0      	adds	r2, #176	@ 0xb0
 800f9d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d101      	bne.n	800f9ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f9e8:	2303      	movs	r3, #3
 800f9ea:	e0bf      	b.n	800fb6c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d050      	beq.n	800fa9a <USBD_CDC_Setup+0xde>
 800f9f8:	2b20      	cmp	r3, #32
 800f9fa:	f040 80af 	bne.w	800fb5c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	88db      	ldrh	r3, [r3, #6]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d03a      	beq.n	800fa7c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	b25b      	sxtb	r3, r3
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	da1b      	bge.n	800fa48 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fa16:	687a      	ldr	r2, [r7, #4]
 800fa18:	33b0      	adds	r3, #176	@ 0xb0
 800fa1a:	009b      	lsls	r3, r3, #2
 800fa1c:	4413      	add	r3, r2
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	689b      	ldr	r3, [r3, #8]
 800fa22:	683a      	ldr	r2, [r7, #0]
 800fa24:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800fa26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fa28:	683a      	ldr	r2, [r7, #0]
 800fa2a:	88d2      	ldrh	r2, [r2, #6]
 800fa2c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	88db      	ldrh	r3, [r3, #6]
 800fa32:	2b07      	cmp	r3, #7
 800fa34:	bf28      	it	cs
 800fa36:	2307      	movcs	r3, #7
 800fa38:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	89fa      	ldrh	r2, [r7, #14]
 800fa3e:	4619      	mov	r1, r3
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f001 fdbd 	bl	80115c0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800fa46:	e090      	b.n	800fb6a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	785a      	ldrb	r2, [r3, #1]
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	88db      	ldrh	r3, [r3, #6]
 800fa56:	2b3f      	cmp	r3, #63	@ 0x3f
 800fa58:	d803      	bhi.n	800fa62 <USBD_CDC_Setup+0xa6>
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	88db      	ldrh	r3, [r3, #6]
 800fa5e:	b2da      	uxtb	r2, r3
 800fa60:	e000      	b.n	800fa64 <USBD_CDC_Setup+0xa8>
 800fa62:	2240      	movs	r2, #64	@ 0x40
 800fa64:	693b      	ldr	r3, [r7, #16]
 800fa66:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800fa6a:	6939      	ldr	r1, [r7, #16]
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800fa72:	461a      	mov	r2, r3
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f001 fdcf 	bl	8011618 <USBD_CtlPrepareRx>
      break;
 800fa7a:	e076      	b.n	800fb6a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	33b0      	adds	r3, #176	@ 0xb0
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	4413      	add	r3, r2
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	689b      	ldr	r3, [r3, #8]
 800fa8e:	683a      	ldr	r2, [r7, #0]
 800fa90:	7850      	ldrb	r0, [r2, #1]
 800fa92:	2200      	movs	r2, #0
 800fa94:	6839      	ldr	r1, [r7, #0]
 800fa96:	4798      	blx	r3
      break;
 800fa98:	e067      	b.n	800fb6a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	785b      	ldrb	r3, [r3, #1]
 800fa9e:	2b0b      	cmp	r3, #11
 800faa0:	d851      	bhi.n	800fb46 <USBD_CDC_Setup+0x18a>
 800faa2:	a201      	add	r2, pc, #4	@ (adr r2, 800faa8 <USBD_CDC_Setup+0xec>)
 800faa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faa8:	0800fad9 	.word	0x0800fad9
 800faac:	0800fb55 	.word	0x0800fb55
 800fab0:	0800fb47 	.word	0x0800fb47
 800fab4:	0800fb47 	.word	0x0800fb47
 800fab8:	0800fb47 	.word	0x0800fb47
 800fabc:	0800fb47 	.word	0x0800fb47
 800fac0:	0800fb47 	.word	0x0800fb47
 800fac4:	0800fb47 	.word	0x0800fb47
 800fac8:	0800fb47 	.word	0x0800fb47
 800facc:	0800fb47 	.word	0x0800fb47
 800fad0:	0800fb03 	.word	0x0800fb03
 800fad4:	0800fb2d 	.word	0x0800fb2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	2b03      	cmp	r3, #3
 800fae2:	d107      	bne.n	800faf4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fae4:	f107 030a 	add.w	r3, r7, #10
 800fae8:	2202      	movs	r2, #2
 800faea:	4619      	mov	r1, r3
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f001 fd67 	bl	80115c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800faf2:	e032      	b.n	800fb5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800faf4:	6839      	ldr	r1, [r7, #0]
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f001 fce5 	bl	80114c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800fafc:	2303      	movs	r3, #3
 800fafe:	75fb      	strb	r3, [r7, #23]
          break;
 800fb00:	e02b      	b.n	800fb5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb08:	b2db      	uxtb	r3, r3
 800fb0a:	2b03      	cmp	r3, #3
 800fb0c:	d107      	bne.n	800fb1e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800fb0e:	f107 030d 	add.w	r3, r7, #13
 800fb12:	2201      	movs	r2, #1
 800fb14:	4619      	mov	r1, r3
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f001 fd52 	bl	80115c0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fb1c:	e01d      	b.n	800fb5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fb1e:	6839      	ldr	r1, [r7, #0]
 800fb20:	6878      	ldr	r0, [r7, #4]
 800fb22:	f001 fcd0 	bl	80114c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800fb26:	2303      	movs	r3, #3
 800fb28:	75fb      	strb	r3, [r7, #23]
          break;
 800fb2a:	e016      	b.n	800fb5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb32:	b2db      	uxtb	r3, r3
 800fb34:	2b03      	cmp	r3, #3
 800fb36:	d00f      	beq.n	800fb58 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800fb38:	6839      	ldr	r1, [r7, #0]
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f001 fcc3 	bl	80114c6 <USBD_CtlError>
            ret = USBD_FAIL;
 800fb40:	2303      	movs	r3, #3
 800fb42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800fb44:	e008      	b.n	800fb58 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fb46:	6839      	ldr	r1, [r7, #0]
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f001 fcbc 	bl	80114c6 <USBD_CtlError>
          ret = USBD_FAIL;
 800fb4e:	2303      	movs	r3, #3
 800fb50:	75fb      	strb	r3, [r7, #23]
          break;
 800fb52:	e002      	b.n	800fb5a <USBD_CDC_Setup+0x19e>
          break;
 800fb54:	bf00      	nop
 800fb56:	e008      	b.n	800fb6a <USBD_CDC_Setup+0x1ae>
          break;
 800fb58:	bf00      	nop
      }
      break;
 800fb5a:	e006      	b.n	800fb6a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800fb5c:	6839      	ldr	r1, [r7, #0]
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f001 fcb1 	bl	80114c6 <USBD_CtlError>
      ret = USBD_FAIL;
 800fb64:	2303      	movs	r3, #3
 800fb66:	75fb      	strb	r3, [r7, #23]
      break;
 800fb68:	bf00      	nop
  }

  return (uint8_t)ret;
 800fb6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3718      	adds	r7, #24
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fb86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	32b0      	adds	r2, #176	@ 0xb0
 800fb92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d101      	bne.n	800fb9e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800fb9a:	2303      	movs	r3, #3
 800fb9c:	e065      	b.n	800fc6a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	32b0      	adds	r2, #176	@ 0xb0
 800fba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fbae:	78fb      	ldrb	r3, [r7, #3]
 800fbb0:	f003 020f 	and.w	r2, r3, #15
 800fbb4:	6879      	ldr	r1, [r7, #4]
 800fbb6:	4613      	mov	r3, r2
 800fbb8:	009b      	lsls	r3, r3, #2
 800fbba:	4413      	add	r3, r2
 800fbbc:	009b      	lsls	r3, r3, #2
 800fbbe:	440b      	add	r3, r1
 800fbc0:	3318      	adds	r3, #24
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d02f      	beq.n	800fc28 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800fbc8:	78fb      	ldrb	r3, [r7, #3]
 800fbca:	f003 020f 	and.w	r2, r3, #15
 800fbce:	6879      	ldr	r1, [r7, #4]
 800fbd0:	4613      	mov	r3, r2
 800fbd2:	009b      	lsls	r3, r3, #2
 800fbd4:	4413      	add	r3, r2
 800fbd6:	009b      	lsls	r3, r3, #2
 800fbd8:	440b      	add	r3, r1
 800fbda:	3318      	adds	r3, #24
 800fbdc:	681a      	ldr	r2, [r3, #0]
 800fbde:	78fb      	ldrb	r3, [r7, #3]
 800fbe0:	f003 010f 	and.w	r1, r3, #15
 800fbe4:	68f8      	ldr	r0, [r7, #12]
 800fbe6:	460b      	mov	r3, r1
 800fbe8:	00db      	lsls	r3, r3, #3
 800fbea:	440b      	add	r3, r1
 800fbec:	009b      	lsls	r3, r3, #2
 800fbee:	4403      	add	r3, r0
 800fbf0:	331c      	adds	r3, #28
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	fbb2 f1f3 	udiv	r1, r2, r3
 800fbf8:	fb01 f303 	mul.w	r3, r1, r3
 800fbfc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d112      	bne.n	800fc28 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800fc02:	78fb      	ldrb	r3, [r7, #3]
 800fc04:	f003 020f 	and.w	r2, r3, #15
 800fc08:	6879      	ldr	r1, [r7, #4]
 800fc0a:	4613      	mov	r3, r2
 800fc0c:	009b      	lsls	r3, r3, #2
 800fc0e:	4413      	add	r3, r2
 800fc10:	009b      	lsls	r3, r3, #2
 800fc12:	440b      	add	r3, r1
 800fc14:	3318      	adds	r3, #24
 800fc16:	2200      	movs	r2, #0
 800fc18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fc1a:	78f9      	ldrb	r1, [r7, #3]
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	2200      	movs	r2, #0
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f005 fc76 	bl	8015512 <USBD_LL_Transmit>
 800fc26:	e01f      	b.n	800fc68 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	33b0      	adds	r3, #176	@ 0xb0
 800fc3a:	009b      	lsls	r3, r3, #2
 800fc3c:	4413      	add	r3, r2
 800fc3e:	685b      	ldr	r3, [r3, #4]
 800fc40:	691b      	ldr	r3, [r3, #16]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d010      	beq.n	800fc68 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	33b0      	adds	r3, #176	@ 0xb0
 800fc50:	009b      	lsls	r3, r3, #2
 800fc52:	4413      	add	r3, r2
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	691b      	ldr	r3, [r3, #16]
 800fc58:	68ba      	ldr	r2, [r7, #8]
 800fc5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800fc5e:	68ba      	ldr	r2, [r7, #8]
 800fc60:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800fc64:	78fa      	ldrb	r2, [r7, #3]
 800fc66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800fc68:	2300      	movs	r3, #0
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3710      	adds	r7, #16
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}

0800fc72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fc72:	b580      	push	{r7, lr}
 800fc74:	b084      	sub	sp, #16
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	6078      	str	r0, [r7, #4]
 800fc7a:	460b      	mov	r3, r1
 800fc7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	32b0      	adds	r2, #176	@ 0xb0
 800fc88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	32b0      	adds	r2, #176	@ 0xb0
 800fc98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d101      	bne.n	800fca4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800fca0:	2303      	movs	r3, #3
 800fca2:	e01a      	b.n	800fcda <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fca4:	78fb      	ldrb	r3, [r7, #3]
 800fca6:	4619      	mov	r1, r3
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f005 fc74 	bl	8015596 <USBD_LL_GetRxDataSize>
 800fcae:	4602      	mov	r2, r0
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	33b0      	adds	r3, #176	@ 0xb0
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	4413      	add	r3, r2
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	68db      	ldr	r3, [r3, #12]
 800fcc8:	68fa      	ldr	r2, [r7, #12]
 800fcca:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800fcce:	68fa      	ldr	r2, [r7, #12]
 800fcd0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800fcd4:	4611      	mov	r1, r2
 800fcd6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fcd8:	2300      	movs	r3, #0
}
 800fcda:	4618      	mov	r0, r3
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}

0800fce2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fce2:	b580      	push	{r7, lr}
 800fce4:	b084      	sub	sp, #16
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	32b0      	adds	r2, #176	@ 0xb0
 800fcf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcf8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d101      	bne.n	800fd04 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fd00:	2303      	movs	r3, #3
 800fd02:	e024      	b.n	800fd4e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fd0a:	687a      	ldr	r2, [r7, #4]
 800fd0c:	33b0      	adds	r3, #176	@ 0xb0
 800fd0e:	009b      	lsls	r3, r3, #2
 800fd10:	4413      	add	r3, r2
 800fd12:	685b      	ldr	r3, [r3, #4]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d019      	beq.n	800fd4c <USBD_CDC_EP0_RxReady+0x6a>
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800fd1e:	2bff      	cmp	r3, #255	@ 0xff
 800fd20:	d014      	beq.n	800fd4c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fd28:	687a      	ldr	r2, [r7, #4]
 800fd2a:	33b0      	adds	r3, #176	@ 0xb0
 800fd2c:	009b      	lsls	r3, r3, #2
 800fd2e:	4413      	add	r3, r2
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	689b      	ldr	r3, [r3, #8]
 800fd34:	68fa      	ldr	r2, [r7, #12]
 800fd36:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800fd3a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800fd3c:	68fa      	ldr	r2, [r7, #12]
 800fd3e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fd42:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	22ff      	movs	r2, #255	@ 0xff
 800fd48:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800fd4c:	2300      	movs	r3, #0
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
	...

0800fd58 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b086      	sub	sp, #24
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fd60:	2182      	movs	r1, #130	@ 0x82
 800fd62:	4818      	ldr	r0, [pc, #96]	@ (800fdc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fd64:	f000 fd4f 	bl	8010806 <USBD_GetEpDesc>
 800fd68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fd6a:	2101      	movs	r1, #1
 800fd6c:	4815      	ldr	r0, [pc, #84]	@ (800fdc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fd6e:	f000 fd4a 	bl	8010806 <USBD_GetEpDesc>
 800fd72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fd74:	2181      	movs	r1, #129	@ 0x81
 800fd76:	4813      	ldr	r0, [pc, #76]	@ (800fdc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fd78:	f000 fd45 	bl	8010806 <USBD_GetEpDesc>
 800fd7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fd7e:	697b      	ldr	r3, [r7, #20]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d002      	beq.n	800fd8a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	2210      	movs	r2, #16
 800fd88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d006      	beq.n	800fd9e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fd90:	693b      	ldr	r3, [r7, #16]
 800fd92:	2200      	movs	r2, #0
 800fd94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fd98:	711a      	strb	r2, [r3, #4]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d006      	beq.n	800fdb2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	2200      	movs	r2, #0
 800fda8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fdac:	711a      	strb	r2, [r3, #4]
 800fdae:	2200      	movs	r2, #0
 800fdb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2243      	movs	r2, #67	@ 0x43
 800fdb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fdb8:	4b02      	ldr	r3, [pc, #8]	@ (800fdc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3718      	adds	r7, #24
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
 800fdc2:	bf00      	nop
 800fdc4:	2400005c 	.word	0x2400005c

0800fdc8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b086      	sub	sp, #24
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fdd0:	2182      	movs	r1, #130	@ 0x82
 800fdd2:	4818      	ldr	r0, [pc, #96]	@ (800fe34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fdd4:	f000 fd17 	bl	8010806 <USBD_GetEpDesc>
 800fdd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fdda:	2101      	movs	r1, #1
 800fddc:	4815      	ldr	r0, [pc, #84]	@ (800fe34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fdde:	f000 fd12 	bl	8010806 <USBD_GetEpDesc>
 800fde2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fde4:	2181      	movs	r1, #129	@ 0x81
 800fde6:	4813      	ldr	r0, [pc, #76]	@ (800fe34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fde8:	f000 fd0d 	bl	8010806 <USBD_GetEpDesc>
 800fdec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d002      	beq.n	800fdfa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	2210      	movs	r2, #16
 800fdf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d006      	beq.n	800fe0e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	2200      	movs	r2, #0
 800fe04:	711a      	strb	r2, [r3, #4]
 800fe06:	2200      	movs	r2, #0
 800fe08:	f042 0202 	orr.w	r2, r2, #2
 800fe0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d006      	beq.n	800fe22 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2200      	movs	r2, #0
 800fe18:	711a      	strb	r2, [r3, #4]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	f042 0202 	orr.w	r2, r2, #2
 800fe20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2243      	movs	r2, #67	@ 0x43
 800fe26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fe28:	4b02      	ldr	r3, [pc, #8]	@ (800fe34 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	3718      	adds	r7, #24
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	bf00      	nop
 800fe34:	2400005c 	.word	0x2400005c

0800fe38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b086      	sub	sp, #24
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fe40:	2182      	movs	r1, #130	@ 0x82
 800fe42:	4818      	ldr	r0, [pc, #96]	@ (800fea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fe44:	f000 fcdf 	bl	8010806 <USBD_GetEpDesc>
 800fe48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fe4a:	2101      	movs	r1, #1
 800fe4c:	4815      	ldr	r0, [pc, #84]	@ (800fea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fe4e:	f000 fcda 	bl	8010806 <USBD_GetEpDesc>
 800fe52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fe54:	2181      	movs	r1, #129	@ 0x81
 800fe56:	4813      	ldr	r0, [pc, #76]	@ (800fea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fe58:	f000 fcd5 	bl	8010806 <USBD_GetEpDesc>
 800fe5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fe5e:	697b      	ldr	r3, [r7, #20]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d002      	beq.n	800fe6a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	2210      	movs	r2, #16
 800fe68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fe6a:	693b      	ldr	r3, [r7, #16]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d006      	beq.n	800fe7e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fe70:	693b      	ldr	r3, [r7, #16]
 800fe72:	2200      	movs	r2, #0
 800fe74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fe78:	711a      	strb	r2, [r3, #4]
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d006      	beq.n	800fe92 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2200      	movs	r2, #0
 800fe88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fe8c:	711a      	strb	r2, [r3, #4]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2243      	movs	r2, #67	@ 0x43
 800fe96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fe98:	4b02      	ldr	r3, [pc, #8]	@ (800fea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3718      	adds	r7, #24
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}
 800fea2:	bf00      	nop
 800fea4:	2400005c 	.word	0x2400005c

0800fea8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	220a      	movs	r2, #10
 800feb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800feb6:	4b03      	ldr	r3, [pc, #12]	@ (800fec4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800feb8:	4618      	mov	r0, r3
 800feba:	370c      	adds	r7, #12
 800febc:	46bd      	mov	sp, r7
 800febe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec2:	4770      	bx	lr
 800fec4:	24000018 	.word	0x24000018

0800fec8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fec8:	b480      	push	{r7}
 800feca:	b083      	sub	sp, #12
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d101      	bne.n	800fedc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fed8:	2303      	movs	r3, #3
 800feda:	e009      	b.n	800fef0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fee2:	687a      	ldr	r2, [r7, #4]
 800fee4:	33b0      	adds	r3, #176	@ 0xb0
 800fee6:	009b      	lsls	r3, r3, #2
 800fee8:	4413      	add	r3, r2
 800feea:	683a      	ldr	r2, [r7, #0]
 800feec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800feee:	2300      	movs	r3, #0
}
 800fef0:	4618      	mov	r0, r3
 800fef2:	370c      	adds	r7, #12
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b087      	sub	sp, #28
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	60b9      	str	r1, [r7, #8]
 800ff06:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	32b0      	adds	r2, #176	@ 0xb0
 800ff12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff16:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d101      	bne.n	800ff22 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ff1e:	2303      	movs	r3, #3
 800ff20:	e008      	b.n	800ff34 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ff22:	697b      	ldr	r3, [r7, #20]
 800ff24:	68ba      	ldr	r2, [r7, #8]
 800ff26:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	687a      	ldr	r2, [r7, #4]
 800ff2e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ff32:	2300      	movs	r3, #0
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	371c      	adds	r7, #28
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr

0800ff40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ff40:	b480      	push	{r7}
 800ff42:	b085      	sub	sp, #20
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
 800ff48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	32b0      	adds	r2, #176	@ 0xb0
 800ff54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d101      	bne.n	800ff64 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ff60:	2303      	movs	r3, #3
 800ff62:	e004      	b.n	800ff6e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	683a      	ldr	r2, [r7, #0]
 800ff68:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ff6c:	2300      	movs	r3, #0
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3714      	adds	r7, #20
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr
	...

0800ff7c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	32b0      	adds	r2, #176	@ 0xb0
 800ff8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff92:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ff94:	2301      	movs	r3, #1
 800ff96:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ff98:	68bb      	ldr	r3, [r7, #8]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d101      	bne.n	800ffa2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ff9e:	2303      	movs	r3, #3
 800ffa0:	e025      	b.n	800ffee <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d11f      	bne.n	800ffec <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	2201      	movs	r2, #1
 800ffb0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ffb4:	4b10      	ldr	r3, [pc, #64]	@ (800fff8 <USBD_CDC_TransmitPacket+0x7c>)
 800ffb6:	781b      	ldrb	r3, [r3, #0]
 800ffb8:	f003 020f 	and.w	r2, r3, #15
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	4613      	mov	r3, r2
 800ffc6:	009b      	lsls	r3, r3, #2
 800ffc8:	4413      	add	r3, r2
 800ffca:	009b      	lsls	r3, r3, #2
 800ffcc:	4403      	add	r3, r0
 800ffce:	3318      	adds	r3, #24
 800ffd0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ffd2:	4b09      	ldr	r3, [pc, #36]	@ (800fff8 <USBD_CDC_TransmitPacket+0x7c>)
 800ffd4:	7819      	ldrb	r1, [r3, #0]
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ffe2:	6878      	ldr	r0, [r7, #4]
 800ffe4:	f005 fa95 	bl	8015512 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ffec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3710      	adds	r7, #16
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}
 800fff6:	bf00      	nop
 800fff8:	2400009f 	.word	0x2400009f

0800fffc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b084      	sub	sp, #16
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	32b0      	adds	r2, #176	@ 0xb0
 801000e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010012:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	32b0      	adds	r2, #176	@ 0xb0
 801001e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d101      	bne.n	801002a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010026:	2303      	movs	r3, #3
 8010028:	e018      	b.n	801005c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	7c1b      	ldrb	r3, [r3, #16]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d10a      	bne.n	8010048 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010032:	4b0c      	ldr	r3, [pc, #48]	@ (8010064 <USBD_CDC_ReceivePacket+0x68>)
 8010034:	7819      	ldrb	r1, [r3, #0]
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801003c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010040:	6878      	ldr	r0, [r7, #4]
 8010042:	f005 fa87 	bl	8015554 <USBD_LL_PrepareReceive>
 8010046:	e008      	b.n	801005a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010048:	4b06      	ldr	r3, [pc, #24]	@ (8010064 <USBD_CDC_ReceivePacket+0x68>)
 801004a:	7819      	ldrb	r1, [r3, #0]
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010052:	2340      	movs	r3, #64	@ 0x40
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f005 fa7d 	bl	8015554 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801005a:	2300      	movs	r3, #0
}
 801005c:	4618      	mov	r0, r3
 801005e:	3710      	adds	r7, #16
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}
 8010064:	240000a0 	.word	0x240000a0

08010068 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b086      	sub	sp, #24
 801006c:	af00      	add	r7, sp, #0
 801006e:	60f8      	str	r0, [r7, #12]
 8010070:	60b9      	str	r1, [r7, #8]
 8010072:	4613      	mov	r3, r2
 8010074:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d101      	bne.n	8010080 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801007c:	2303      	movs	r3, #3
 801007e:	e01f      	b.n	80100c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2200      	movs	r2, #0
 8010084:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2200      	movs	r2, #0
 801008c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	2200      	movs	r2, #0
 8010094:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d003      	beq.n	80100a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	68ba      	ldr	r2, [r7, #8]
 80100a2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	2201      	movs	r2, #1
 80100aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	79fa      	ldrb	r2, [r7, #7]
 80100b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80100b4:	68f8      	ldr	r0, [r7, #12]
 80100b6:	f005 f8f3 	bl	80152a0 <USBD_LL_Init>
 80100ba:	4603      	mov	r3, r0
 80100bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80100be:	7dfb      	ldrb	r3, [r7, #23]
}
 80100c0:	4618      	mov	r0, r3
 80100c2:	3718      	adds	r7, #24
 80100c4:	46bd      	mov	sp, r7
 80100c6:	bd80      	pop	{r7, pc}

080100c8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b084      	sub	sp, #16
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80100d2:	2300      	movs	r3, #0
 80100d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d101      	bne.n	80100e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80100dc:	2303      	movs	r3, #3
 80100de:	e025      	b.n	801012c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	683a      	ldr	r2, [r7, #0]
 80100e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	32ae      	adds	r2, #174	@ 0xae
 80100f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d00f      	beq.n	801011c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	32ae      	adds	r2, #174	@ 0xae
 8010106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801010a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801010c:	f107 020e 	add.w	r2, r7, #14
 8010110:	4610      	mov	r0, r2
 8010112:	4798      	blx	r3
 8010114:	4602      	mov	r2, r0
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010122:	1c5a      	adds	r2, r3, #1
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801012a:	2300      	movs	r3, #0
}
 801012c:	4618      	mov	r0, r3
 801012e:	3710      	adds	r7, #16
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f005 f8ff 	bl	8015340 <USBD_LL_Start>
 8010142:	4603      	mov	r3, r0
}
 8010144:	4618      	mov	r0, r3
 8010146:	3708      	adds	r7, #8
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}

0801014c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801014c:	b480      	push	{r7}
 801014e:	b083      	sub	sp, #12
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010154:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010156:	4618      	mov	r0, r3
 8010158:	370c      	adds	r7, #12
 801015a:	46bd      	mov	sp, r7
 801015c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010160:	4770      	bx	lr

08010162 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010162:	b580      	push	{r7, lr}
 8010164:	b084      	sub	sp, #16
 8010166:	af00      	add	r7, sp, #0
 8010168:	6078      	str	r0, [r7, #4]
 801016a:	460b      	mov	r3, r1
 801016c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801016e:	2300      	movs	r3, #0
 8010170:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010178:	2b00      	cmp	r3, #0
 801017a:	d009      	beq.n	8010190 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	78fa      	ldrb	r2, [r7, #3]
 8010186:	4611      	mov	r1, r2
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	4798      	blx	r3
 801018c:	4603      	mov	r3, r0
 801018e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010190:	7bfb      	ldrb	r3, [r7, #15]
}
 8010192:	4618      	mov	r0, r3
 8010194:	3710      	adds	r7, #16
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801019a:	b580      	push	{r7, lr}
 801019c:	b084      	sub	sp, #16
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
 80101a2:	460b      	mov	r3, r1
 80101a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80101a6:	2300      	movs	r3, #0
 80101a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101b0:	685b      	ldr	r3, [r3, #4]
 80101b2:	78fa      	ldrb	r2, [r7, #3]
 80101b4:	4611      	mov	r1, r2
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	4798      	blx	r3
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d001      	beq.n	80101c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80101c0:	2303      	movs	r3, #3
 80101c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80101c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80101c6:	4618      	mov	r0, r3
 80101c8:	3710      	adds	r7, #16
 80101ca:	46bd      	mov	sp, r7
 80101cc:	bd80      	pop	{r7, pc}

080101ce <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80101ce:	b580      	push	{r7, lr}
 80101d0:	b084      	sub	sp, #16
 80101d2:	af00      	add	r7, sp, #0
 80101d4:	6078      	str	r0, [r7, #4]
 80101d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80101de:	6839      	ldr	r1, [r7, #0]
 80101e0:	4618      	mov	r0, r3
 80101e2:	f001 f936 	bl	8011452 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2201      	movs	r2, #1
 80101ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80101f4:	461a      	mov	r2, r3
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010202:	f003 031f 	and.w	r3, r3, #31
 8010206:	2b02      	cmp	r3, #2
 8010208:	d01a      	beq.n	8010240 <USBD_LL_SetupStage+0x72>
 801020a:	2b02      	cmp	r3, #2
 801020c:	d822      	bhi.n	8010254 <USBD_LL_SetupStage+0x86>
 801020e:	2b00      	cmp	r3, #0
 8010210:	d002      	beq.n	8010218 <USBD_LL_SetupStage+0x4a>
 8010212:	2b01      	cmp	r3, #1
 8010214:	d00a      	beq.n	801022c <USBD_LL_SetupStage+0x5e>
 8010216:	e01d      	b.n	8010254 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801021e:	4619      	mov	r1, r3
 8010220:	6878      	ldr	r0, [r7, #4]
 8010222:	f000 fb63 	bl	80108ec <USBD_StdDevReq>
 8010226:	4603      	mov	r3, r0
 8010228:	73fb      	strb	r3, [r7, #15]
      break;
 801022a:	e020      	b.n	801026e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010232:	4619      	mov	r1, r3
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f000 fbcb 	bl	80109d0 <USBD_StdItfReq>
 801023a:	4603      	mov	r3, r0
 801023c:	73fb      	strb	r3, [r7, #15]
      break;
 801023e:	e016      	b.n	801026e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010246:	4619      	mov	r1, r3
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f000 fc2d 	bl	8010aa8 <USBD_StdEPReq>
 801024e:	4603      	mov	r3, r0
 8010250:	73fb      	strb	r3, [r7, #15]
      break;
 8010252:	e00c      	b.n	801026e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801025a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801025e:	b2db      	uxtb	r3, r3
 8010260:	4619      	mov	r1, r3
 8010262:	6878      	ldr	r0, [r7, #4]
 8010264:	f005 f8cc 	bl	8015400 <USBD_LL_StallEP>
 8010268:	4603      	mov	r3, r0
 801026a:	73fb      	strb	r3, [r7, #15]
      break;
 801026c:	bf00      	nop
  }

  return ret;
 801026e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010270:	4618      	mov	r0, r3
 8010272:	3710      	adds	r7, #16
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b086      	sub	sp, #24
 801027c:	af00      	add	r7, sp, #0
 801027e:	60f8      	str	r0, [r7, #12]
 8010280:	460b      	mov	r3, r1
 8010282:	607a      	str	r2, [r7, #4]
 8010284:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8010286:	2300      	movs	r3, #0
 8010288:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801028a:	7afb      	ldrb	r3, [r7, #11]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d16e      	bne.n	801036e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8010296:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010298:	68fb      	ldr	r3, [r7, #12]
 801029a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801029e:	2b03      	cmp	r3, #3
 80102a0:	f040 8098 	bne.w	80103d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80102a4:	693b      	ldr	r3, [r7, #16]
 80102a6:	689a      	ldr	r2, [r3, #8]
 80102a8:	693b      	ldr	r3, [r7, #16]
 80102aa:	68db      	ldr	r3, [r3, #12]
 80102ac:	429a      	cmp	r2, r3
 80102ae:	d913      	bls.n	80102d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	689a      	ldr	r2, [r3, #8]
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	1ad2      	subs	r2, r2, r3
 80102ba:	693b      	ldr	r3, [r7, #16]
 80102bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	68da      	ldr	r2, [r3, #12]
 80102c2:	693b      	ldr	r3, [r7, #16]
 80102c4:	689b      	ldr	r3, [r3, #8]
 80102c6:	4293      	cmp	r3, r2
 80102c8:	bf28      	it	cs
 80102ca:	4613      	movcs	r3, r2
 80102cc:	461a      	mov	r2, r3
 80102ce:	6879      	ldr	r1, [r7, #4]
 80102d0:	68f8      	ldr	r0, [r7, #12]
 80102d2:	f001 f9be 	bl	8011652 <USBD_CtlContinueRx>
 80102d6:	e07d      	b.n	80103d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80102de:	f003 031f 	and.w	r3, r3, #31
 80102e2:	2b02      	cmp	r3, #2
 80102e4:	d014      	beq.n	8010310 <USBD_LL_DataOutStage+0x98>
 80102e6:	2b02      	cmp	r3, #2
 80102e8:	d81d      	bhi.n	8010326 <USBD_LL_DataOutStage+0xae>
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d002      	beq.n	80102f4 <USBD_LL_DataOutStage+0x7c>
 80102ee:	2b01      	cmp	r3, #1
 80102f0:	d003      	beq.n	80102fa <USBD_LL_DataOutStage+0x82>
 80102f2:	e018      	b.n	8010326 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80102f4:	2300      	movs	r3, #0
 80102f6:	75bb      	strb	r3, [r7, #22]
            break;
 80102f8:	e018      	b.n	801032c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010300:	b2db      	uxtb	r3, r3
 8010302:	4619      	mov	r1, r3
 8010304:	68f8      	ldr	r0, [r7, #12]
 8010306:	f000 fa64 	bl	80107d2 <USBD_CoreFindIF>
 801030a:	4603      	mov	r3, r0
 801030c:	75bb      	strb	r3, [r7, #22]
            break;
 801030e:	e00d      	b.n	801032c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010316:	b2db      	uxtb	r3, r3
 8010318:	4619      	mov	r1, r3
 801031a:	68f8      	ldr	r0, [r7, #12]
 801031c:	f000 fa66 	bl	80107ec <USBD_CoreFindEP>
 8010320:	4603      	mov	r3, r0
 8010322:	75bb      	strb	r3, [r7, #22]
            break;
 8010324:	e002      	b.n	801032c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010326:	2300      	movs	r3, #0
 8010328:	75bb      	strb	r3, [r7, #22]
            break;
 801032a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801032c:	7dbb      	ldrb	r3, [r7, #22]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d119      	bne.n	8010366 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010338:	b2db      	uxtb	r3, r3
 801033a:	2b03      	cmp	r3, #3
 801033c:	d113      	bne.n	8010366 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801033e:	7dba      	ldrb	r2, [r7, #22]
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	32ae      	adds	r2, #174	@ 0xae
 8010344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010348:	691b      	ldr	r3, [r3, #16]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d00b      	beq.n	8010366 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801034e:	7dba      	ldrb	r2, [r7, #22]
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8010356:	7dba      	ldrb	r2, [r7, #22]
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	32ae      	adds	r2, #174	@ 0xae
 801035c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010360:	691b      	ldr	r3, [r3, #16]
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010366:	68f8      	ldr	r0, [r7, #12]
 8010368:	f001 f984 	bl	8011674 <USBD_CtlSendStatus>
 801036c:	e032      	b.n	80103d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801036e:	7afb      	ldrb	r3, [r7, #11]
 8010370:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010374:	b2db      	uxtb	r3, r3
 8010376:	4619      	mov	r1, r3
 8010378:	68f8      	ldr	r0, [r7, #12]
 801037a:	f000 fa37 	bl	80107ec <USBD_CoreFindEP>
 801037e:	4603      	mov	r3, r0
 8010380:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010382:	7dbb      	ldrb	r3, [r7, #22]
 8010384:	2bff      	cmp	r3, #255	@ 0xff
 8010386:	d025      	beq.n	80103d4 <USBD_LL_DataOutStage+0x15c>
 8010388:	7dbb      	ldrb	r3, [r7, #22]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d122      	bne.n	80103d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010394:	b2db      	uxtb	r3, r3
 8010396:	2b03      	cmp	r3, #3
 8010398:	d117      	bne.n	80103ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801039a:	7dba      	ldrb	r2, [r7, #22]
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	32ae      	adds	r2, #174	@ 0xae
 80103a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103a4:	699b      	ldr	r3, [r3, #24]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d00f      	beq.n	80103ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80103aa:	7dba      	ldrb	r2, [r7, #22]
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80103b2:	7dba      	ldrb	r2, [r7, #22]
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	32ae      	adds	r2, #174	@ 0xae
 80103b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103bc:	699b      	ldr	r3, [r3, #24]
 80103be:	7afa      	ldrb	r2, [r7, #11]
 80103c0:	4611      	mov	r1, r2
 80103c2:	68f8      	ldr	r0, [r7, #12]
 80103c4:	4798      	blx	r3
 80103c6:	4603      	mov	r3, r0
 80103c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80103ca:	7dfb      	ldrb	r3, [r7, #23]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d001      	beq.n	80103d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80103d0:	7dfb      	ldrb	r3, [r7, #23]
 80103d2:	e000      	b.n	80103d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80103d4:	2300      	movs	r3, #0
}
 80103d6:	4618      	mov	r0, r3
 80103d8:	3718      	adds	r7, #24
 80103da:	46bd      	mov	sp, r7
 80103dc:	bd80      	pop	{r7, pc}

080103de <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80103de:	b580      	push	{r7, lr}
 80103e0:	b086      	sub	sp, #24
 80103e2:	af00      	add	r7, sp, #0
 80103e4:	60f8      	str	r0, [r7, #12]
 80103e6:	460b      	mov	r3, r1
 80103e8:	607a      	str	r2, [r7, #4]
 80103ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80103ec:	7afb      	ldrb	r3, [r7, #11]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d16f      	bne.n	80104d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	3314      	adds	r3, #20
 80103f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80103fe:	2b02      	cmp	r3, #2
 8010400:	d15a      	bne.n	80104b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	689a      	ldr	r2, [r3, #8]
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	68db      	ldr	r3, [r3, #12]
 801040a:	429a      	cmp	r2, r3
 801040c:	d914      	bls.n	8010438 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	689a      	ldr	r2, [r3, #8]
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	68db      	ldr	r3, [r3, #12]
 8010416:	1ad2      	subs	r2, r2, r3
 8010418:	693b      	ldr	r3, [r7, #16]
 801041a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	689b      	ldr	r3, [r3, #8]
 8010420:	461a      	mov	r2, r3
 8010422:	6879      	ldr	r1, [r7, #4]
 8010424:	68f8      	ldr	r0, [r7, #12]
 8010426:	f001 f8e6 	bl	80115f6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801042a:	2300      	movs	r3, #0
 801042c:	2200      	movs	r2, #0
 801042e:	2100      	movs	r1, #0
 8010430:	68f8      	ldr	r0, [r7, #12]
 8010432:	f005 f88f 	bl	8015554 <USBD_LL_PrepareReceive>
 8010436:	e03f      	b.n	80104b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	68da      	ldr	r2, [r3, #12]
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	689b      	ldr	r3, [r3, #8]
 8010440:	429a      	cmp	r2, r3
 8010442:	d11c      	bne.n	801047e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	685a      	ldr	r2, [r3, #4]
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801044c:	429a      	cmp	r2, r3
 801044e:	d316      	bcc.n	801047e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	685a      	ldr	r2, [r3, #4]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801045a:	429a      	cmp	r2, r3
 801045c:	d20f      	bcs.n	801047e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801045e:	2200      	movs	r2, #0
 8010460:	2100      	movs	r1, #0
 8010462:	68f8      	ldr	r0, [r7, #12]
 8010464:	f001 f8c7 	bl	80115f6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	2200      	movs	r2, #0
 801046c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010470:	2300      	movs	r3, #0
 8010472:	2200      	movs	r2, #0
 8010474:	2100      	movs	r1, #0
 8010476:	68f8      	ldr	r0, [r7, #12]
 8010478:	f005 f86c 	bl	8015554 <USBD_LL_PrepareReceive>
 801047c:	e01c      	b.n	80104b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010484:	b2db      	uxtb	r3, r3
 8010486:	2b03      	cmp	r3, #3
 8010488:	d10f      	bne.n	80104aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010490:	68db      	ldr	r3, [r3, #12]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d009      	beq.n	80104aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2200      	movs	r2, #0
 801049a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104a4:	68db      	ldr	r3, [r3, #12]
 80104a6:	68f8      	ldr	r0, [r7, #12]
 80104a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80104aa:	2180      	movs	r1, #128	@ 0x80
 80104ac:	68f8      	ldr	r0, [r7, #12]
 80104ae:	f004 ffa7 	bl	8015400 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80104b2:	68f8      	ldr	r0, [r7, #12]
 80104b4:	f001 f8f1 	bl	801169a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d03a      	beq.n	8010538 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80104c2:	68f8      	ldr	r0, [r7, #12]
 80104c4:	f7ff fe42 	bl	801014c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	2200      	movs	r2, #0
 80104cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80104d0:	e032      	b.n	8010538 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80104d2:	7afb      	ldrb	r3, [r7, #11]
 80104d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80104d8:	b2db      	uxtb	r3, r3
 80104da:	4619      	mov	r1, r3
 80104dc:	68f8      	ldr	r0, [r7, #12]
 80104de:	f000 f985 	bl	80107ec <USBD_CoreFindEP>
 80104e2:	4603      	mov	r3, r0
 80104e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80104e6:	7dfb      	ldrb	r3, [r7, #23]
 80104e8:	2bff      	cmp	r3, #255	@ 0xff
 80104ea:	d025      	beq.n	8010538 <USBD_LL_DataInStage+0x15a>
 80104ec:	7dfb      	ldrb	r3, [r7, #23]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d122      	bne.n	8010538 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80104f8:	b2db      	uxtb	r3, r3
 80104fa:	2b03      	cmp	r3, #3
 80104fc:	d11c      	bne.n	8010538 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80104fe:	7dfa      	ldrb	r2, [r7, #23]
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	32ae      	adds	r2, #174	@ 0xae
 8010504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010508:	695b      	ldr	r3, [r3, #20]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d014      	beq.n	8010538 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801050e:	7dfa      	ldrb	r2, [r7, #23]
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010516:	7dfa      	ldrb	r2, [r7, #23]
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	32ae      	adds	r2, #174	@ 0xae
 801051c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010520:	695b      	ldr	r3, [r3, #20]
 8010522:	7afa      	ldrb	r2, [r7, #11]
 8010524:	4611      	mov	r1, r2
 8010526:	68f8      	ldr	r0, [r7, #12]
 8010528:	4798      	blx	r3
 801052a:	4603      	mov	r3, r0
 801052c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801052e:	7dbb      	ldrb	r3, [r7, #22]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d001      	beq.n	8010538 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010534:	7dbb      	ldrb	r3, [r7, #22]
 8010536:	e000      	b.n	801053a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010538:	2300      	movs	r3, #0
}
 801053a:	4618      	mov	r0, r3
 801053c:	3718      	adds	r7, #24
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b084      	sub	sp, #16
 8010546:	af00      	add	r7, sp, #0
 8010548:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801054a:	2300      	movs	r3, #0
 801054c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2201      	movs	r2, #1
 8010552:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	2200      	movs	r2, #0
 801055a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2200      	movs	r2, #0
 8010562:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2200      	movs	r2, #0
 8010568:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2200      	movs	r2, #0
 8010570:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801057a:	2b00      	cmp	r3, #0
 801057c:	d014      	beq.n	80105a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d00e      	beq.n	80105a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	687a      	ldr	r2, [r7, #4]
 8010594:	6852      	ldr	r2, [r2, #4]
 8010596:	b2d2      	uxtb	r2, r2
 8010598:	4611      	mov	r1, r2
 801059a:	6878      	ldr	r0, [r7, #4]
 801059c:	4798      	blx	r3
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d001      	beq.n	80105a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80105a4:	2303      	movs	r3, #3
 80105a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80105a8:	2340      	movs	r3, #64	@ 0x40
 80105aa:	2200      	movs	r2, #0
 80105ac:	2100      	movs	r1, #0
 80105ae:	6878      	ldr	r0, [r7, #4]
 80105b0:	f004 fee1 	bl	8015376 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2201      	movs	r2, #1
 80105b8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2240      	movs	r2, #64	@ 0x40
 80105c0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80105c4:	2340      	movs	r3, #64	@ 0x40
 80105c6:	2200      	movs	r2, #0
 80105c8:	2180      	movs	r1, #128	@ 0x80
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f004 fed3 	bl	8015376 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2201      	movs	r2, #1
 80105d4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2240      	movs	r2, #64	@ 0x40
 80105da:	621a      	str	r2, [r3, #32]

  return ret;
 80105dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3710      	adds	r7, #16
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}

080105e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80105e6:	b480      	push	{r7}
 80105e8:	b083      	sub	sp, #12
 80105ea:	af00      	add	r7, sp, #0
 80105ec:	6078      	str	r0, [r7, #4]
 80105ee:	460b      	mov	r3, r1
 80105f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	78fa      	ldrb	r2, [r7, #3]
 80105f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80105f8:	2300      	movs	r3, #0
}
 80105fa:	4618      	mov	r0, r3
 80105fc:	370c      	adds	r7, #12
 80105fe:	46bd      	mov	sp, r7
 8010600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010604:	4770      	bx	lr

08010606 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010606:	b480      	push	{r7}
 8010608:	b083      	sub	sp, #12
 801060a:	af00      	add	r7, sp, #0
 801060c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010614:	b2db      	uxtb	r3, r3
 8010616:	2b04      	cmp	r3, #4
 8010618:	d006      	beq.n	8010628 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010620:	b2da      	uxtb	r2, r3
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2204      	movs	r2, #4
 801062c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010630:	2300      	movs	r3, #0
}
 8010632:	4618      	mov	r0, r3
 8010634:	370c      	adds	r7, #12
 8010636:	46bd      	mov	sp, r7
 8010638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801063c:	4770      	bx	lr

0801063e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801063e:	b480      	push	{r7}
 8010640:	b083      	sub	sp, #12
 8010642:	af00      	add	r7, sp, #0
 8010644:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801064c:	b2db      	uxtb	r3, r3
 801064e:	2b04      	cmp	r3, #4
 8010650:	d106      	bne.n	8010660 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010658:	b2da      	uxtb	r2, r3
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010660:	2300      	movs	r3, #0
}
 8010662:	4618      	mov	r0, r3
 8010664:	370c      	adds	r7, #12
 8010666:	46bd      	mov	sp, r7
 8010668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066c:	4770      	bx	lr

0801066e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801066e:	b580      	push	{r7, lr}
 8010670:	b082      	sub	sp, #8
 8010672:	af00      	add	r7, sp, #0
 8010674:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801067c:	b2db      	uxtb	r3, r3
 801067e:	2b03      	cmp	r3, #3
 8010680:	d110      	bne.n	80106a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010688:	2b00      	cmp	r3, #0
 801068a:	d00b      	beq.n	80106a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010692:	69db      	ldr	r3, [r3, #28]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d005      	beq.n	80106a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801069e:	69db      	ldr	r3, [r3, #28]
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80106a4:	2300      	movs	r3, #0
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	3708      	adds	r7, #8
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}

080106ae <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80106ae:	b580      	push	{r7, lr}
 80106b0:	b082      	sub	sp, #8
 80106b2:	af00      	add	r7, sp, #0
 80106b4:	6078      	str	r0, [r7, #4]
 80106b6:	460b      	mov	r3, r1
 80106b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	32ae      	adds	r2, #174	@ 0xae
 80106c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d101      	bne.n	80106d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80106cc:	2303      	movs	r3, #3
 80106ce:	e01c      	b.n	801070a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106d6:	b2db      	uxtb	r3, r3
 80106d8:	2b03      	cmp	r3, #3
 80106da:	d115      	bne.n	8010708 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	32ae      	adds	r2, #174	@ 0xae
 80106e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106ea:	6a1b      	ldr	r3, [r3, #32]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d00b      	beq.n	8010708 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	32ae      	adds	r2, #174	@ 0xae
 80106fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106fe:	6a1b      	ldr	r3, [r3, #32]
 8010700:	78fa      	ldrb	r2, [r7, #3]
 8010702:	4611      	mov	r1, r2
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010708:	2300      	movs	r3, #0
}
 801070a:	4618      	mov	r0, r3
 801070c:	3708      	adds	r7, #8
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}

08010712 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010712:	b580      	push	{r7, lr}
 8010714:	b082      	sub	sp, #8
 8010716:	af00      	add	r7, sp, #0
 8010718:	6078      	str	r0, [r7, #4]
 801071a:	460b      	mov	r3, r1
 801071c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	32ae      	adds	r2, #174	@ 0xae
 8010728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d101      	bne.n	8010734 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8010730:	2303      	movs	r3, #3
 8010732:	e01c      	b.n	801076e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801073a:	b2db      	uxtb	r3, r3
 801073c:	2b03      	cmp	r3, #3
 801073e:	d115      	bne.n	801076c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	32ae      	adds	r2, #174	@ 0xae
 801074a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801074e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010750:	2b00      	cmp	r3, #0
 8010752:	d00b      	beq.n	801076c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	32ae      	adds	r2, #174	@ 0xae
 801075e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010764:	78fa      	ldrb	r2, [r7, #3]
 8010766:	4611      	mov	r1, r2
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801076c:	2300      	movs	r3, #0
}
 801076e:	4618      	mov	r0, r3
 8010770:	3708      	adds	r7, #8
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}

08010776 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8010776:	b480      	push	{r7}
 8010778:	b083      	sub	sp, #12
 801077a:	af00      	add	r7, sp, #0
 801077c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801077e:	2300      	movs	r3, #0
}
 8010780:	4618      	mov	r0, r3
 8010782:	370c      	adds	r7, #12
 8010784:	46bd      	mov	sp, r7
 8010786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078a:	4770      	bx	lr

0801078c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b084      	sub	sp, #16
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010794:	2300      	movs	r3, #0
 8010796:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2201      	movs	r2, #1
 801079c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d00e      	beq.n	80107c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	687a      	ldr	r2, [r7, #4]
 80107b4:	6852      	ldr	r2, [r2, #4]
 80107b6:	b2d2      	uxtb	r2, r2
 80107b8:	4611      	mov	r1, r2
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	4798      	blx	r3
 80107be:	4603      	mov	r3, r0
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d001      	beq.n	80107c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80107c4:	2303      	movs	r3, #3
 80107c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80107c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80107ca:	4618      	mov	r0, r3
 80107cc:	3710      	adds	r7, #16
 80107ce:	46bd      	mov	sp, r7
 80107d0:	bd80      	pop	{r7, pc}

080107d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80107d2:	b480      	push	{r7}
 80107d4:	b083      	sub	sp, #12
 80107d6:	af00      	add	r7, sp, #0
 80107d8:	6078      	str	r0, [r7, #4]
 80107da:	460b      	mov	r3, r1
 80107dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80107de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80107e0:	4618      	mov	r0, r3
 80107e2:	370c      	adds	r7, #12
 80107e4:	46bd      	mov	sp, r7
 80107e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ea:	4770      	bx	lr

080107ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b083      	sub	sp, #12
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	460b      	mov	r3, r1
 80107f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80107f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	370c      	adds	r7, #12
 80107fe:	46bd      	mov	sp, r7
 8010800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010804:	4770      	bx	lr

08010806 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010806:	b580      	push	{r7, lr}
 8010808:	b086      	sub	sp, #24
 801080a:	af00      	add	r7, sp, #0
 801080c:	6078      	str	r0, [r7, #4]
 801080e:	460b      	mov	r3, r1
 8010810:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801081a:	2300      	movs	r3, #0
 801081c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	885b      	ldrh	r3, [r3, #2]
 8010822:	b29b      	uxth	r3, r3
 8010824:	68fa      	ldr	r2, [r7, #12]
 8010826:	7812      	ldrb	r2, [r2, #0]
 8010828:	4293      	cmp	r3, r2
 801082a:	d91f      	bls.n	801086c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	781b      	ldrb	r3, [r3, #0]
 8010830:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010832:	e013      	b.n	801085c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010834:	f107 030a 	add.w	r3, r7, #10
 8010838:	4619      	mov	r1, r3
 801083a:	6978      	ldr	r0, [r7, #20]
 801083c:	f000 f81b 	bl	8010876 <USBD_GetNextDesc>
 8010840:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010842:	697b      	ldr	r3, [r7, #20]
 8010844:	785b      	ldrb	r3, [r3, #1]
 8010846:	2b05      	cmp	r3, #5
 8010848:	d108      	bne.n	801085c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	789b      	ldrb	r3, [r3, #2]
 8010852:	78fa      	ldrb	r2, [r7, #3]
 8010854:	429a      	cmp	r2, r3
 8010856:	d008      	beq.n	801086a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010858:	2300      	movs	r3, #0
 801085a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	885b      	ldrh	r3, [r3, #2]
 8010860:	b29a      	uxth	r2, r3
 8010862:	897b      	ldrh	r3, [r7, #10]
 8010864:	429a      	cmp	r2, r3
 8010866:	d8e5      	bhi.n	8010834 <USBD_GetEpDesc+0x2e>
 8010868:	e000      	b.n	801086c <USBD_GetEpDesc+0x66>
          break;
 801086a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801086c:	693b      	ldr	r3, [r7, #16]
}
 801086e:	4618      	mov	r0, r3
 8010870:	3718      	adds	r7, #24
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010876:	b480      	push	{r7}
 8010878:	b085      	sub	sp, #20
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
 801087e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	881b      	ldrh	r3, [r3, #0]
 8010888:	68fa      	ldr	r2, [r7, #12]
 801088a:	7812      	ldrb	r2, [r2, #0]
 801088c:	4413      	add	r3, r2
 801088e:	b29a      	uxth	r2, r3
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	461a      	mov	r2, r3
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	4413      	add	r3, r2
 801089e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80108a0:	68fb      	ldr	r3, [r7, #12]
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3714      	adds	r7, #20
 80108a6:	46bd      	mov	sp, r7
 80108a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ac:	4770      	bx	lr

080108ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80108ae:	b480      	push	{r7}
 80108b0:	b087      	sub	sp, #28
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	781b      	ldrb	r3, [r3, #0]
 80108be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	3301      	adds	r3, #1
 80108c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80108c6:	697b      	ldr	r3, [r7, #20]
 80108c8:	781b      	ldrb	r3, [r3, #0]
 80108ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80108cc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80108d0:	021b      	lsls	r3, r3, #8
 80108d2:	b21a      	sxth	r2, r3
 80108d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80108d8:	4313      	orrs	r3, r2
 80108da:	b21b      	sxth	r3, r3
 80108dc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80108de:	89fb      	ldrh	r3, [r7, #14]
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	371c      	adds	r7, #28
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr

080108ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b084      	sub	sp, #16
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80108f6:	2300      	movs	r3, #0
 80108f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	781b      	ldrb	r3, [r3, #0]
 80108fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010902:	2b40      	cmp	r3, #64	@ 0x40
 8010904:	d005      	beq.n	8010912 <USBD_StdDevReq+0x26>
 8010906:	2b40      	cmp	r3, #64	@ 0x40
 8010908:	d857      	bhi.n	80109ba <USBD_StdDevReq+0xce>
 801090a:	2b00      	cmp	r3, #0
 801090c:	d00f      	beq.n	801092e <USBD_StdDevReq+0x42>
 801090e:	2b20      	cmp	r3, #32
 8010910:	d153      	bne.n	80109ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	32ae      	adds	r2, #174	@ 0xae
 801091c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010920:	689b      	ldr	r3, [r3, #8]
 8010922:	6839      	ldr	r1, [r7, #0]
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	4798      	blx	r3
 8010928:	4603      	mov	r3, r0
 801092a:	73fb      	strb	r3, [r7, #15]
      break;
 801092c:	e04a      	b.n	80109c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	785b      	ldrb	r3, [r3, #1]
 8010932:	2b09      	cmp	r3, #9
 8010934:	d83b      	bhi.n	80109ae <USBD_StdDevReq+0xc2>
 8010936:	a201      	add	r2, pc, #4	@ (adr r2, 801093c <USBD_StdDevReq+0x50>)
 8010938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801093c:	08010991 	.word	0x08010991
 8010940:	080109a5 	.word	0x080109a5
 8010944:	080109af 	.word	0x080109af
 8010948:	0801099b 	.word	0x0801099b
 801094c:	080109af 	.word	0x080109af
 8010950:	0801096f 	.word	0x0801096f
 8010954:	08010965 	.word	0x08010965
 8010958:	080109af 	.word	0x080109af
 801095c:	08010987 	.word	0x08010987
 8010960:	08010979 	.word	0x08010979
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010964:	6839      	ldr	r1, [r7, #0]
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f000 fa3c 	bl	8010de4 <USBD_GetDescriptor>
          break;
 801096c:	e024      	b.n	80109b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801096e:	6839      	ldr	r1, [r7, #0]
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f000 fbcb 	bl	801110c <USBD_SetAddress>
          break;
 8010976:	e01f      	b.n	80109b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010978:	6839      	ldr	r1, [r7, #0]
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f000 fc0a 	bl	8011194 <USBD_SetConfig>
 8010980:	4603      	mov	r3, r0
 8010982:	73fb      	strb	r3, [r7, #15]
          break;
 8010984:	e018      	b.n	80109b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010986:	6839      	ldr	r1, [r7, #0]
 8010988:	6878      	ldr	r0, [r7, #4]
 801098a:	f000 fcad 	bl	80112e8 <USBD_GetConfig>
          break;
 801098e:	e013      	b.n	80109b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010990:	6839      	ldr	r1, [r7, #0]
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f000 fcde 	bl	8011354 <USBD_GetStatus>
          break;
 8010998:	e00e      	b.n	80109b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801099a:	6839      	ldr	r1, [r7, #0]
 801099c:	6878      	ldr	r0, [r7, #4]
 801099e:	f000 fd0d 	bl	80113bc <USBD_SetFeature>
          break;
 80109a2:	e009      	b.n	80109b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80109a4:	6839      	ldr	r1, [r7, #0]
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f000 fd31 	bl	801140e <USBD_ClrFeature>
          break;
 80109ac:	e004      	b.n	80109b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80109ae:	6839      	ldr	r1, [r7, #0]
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f000 fd88 	bl	80114c6 <USBD_CtlError>
          break;
 80109b6:	bf00      	nop
      }
      break;
 80109b8:	e004      	b.n	80109c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80109ba:	6839      	ldr	r1, [r7, #0]
 80109bc:	6878      	ldr	r0, [r7, #4]
 80109be:	f000 fd82 	bl	80114c6 <USBD_CtlError>
      break;
 80109c2:	bf00      	nop
  }

  return ret;
 80109c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80109c6:	4618      	mov	r0, r3
 80109c8:	3710      	adds	r7, #16
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	bf00      	nop

080109d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80109d0:	b580      	push	{r7, lr}
 80109d2:	b084      	sub	sp, #16
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
 80109d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80109da:	2300      	movs	r3, #0
 80109dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	781b      	ldrb	r3, [r3, #0]
 80109e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80109e6:	2b40      	cmp	r3, #64	@ 0x40
 80109e8:	d005      	beq.n	80109f6 <USBD_StdItfReq+0x26>
 80109ea:	2b40      	cmp	r3, #64	@ 0x40
 80109ec:	d852      	bhi.n	8010a94 <USBD_StdItfReq+0xc4>
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d001      	beq.n	80109f6 <USBD_StdItfReq+0x26>
 80109f2:	2b20      	cmp	r3, #32
 80109f4:	d14e      	bne.n	8010a94 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80109fc:	b2db      	uxtb	r3, r3
 80109fe:	3b01      	subs	r3, #1
 8010a00:	2b02      	cmp	r3, #2
 8010a02:	d840      	bhi.n	8010a86 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010a04:	683b      	ldr	r3, [r7, #0]
 8010a06:	889b      	ldrh	r3, [r3, #4]
 8010a08:	b2db      	uxtb	r3, r3
 8010a0a:	2b01      	cmp	r3, #1
 8010a0c:	d836      	bhi.n	8010a7c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	889b      	ldrh	r3, [r3, #4]
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	4619      	mov	r1, r3
 8010a16:	6878      	ldr	r0, [r7, #4]
 8010a18:	f7ff fedb 	bl	80107d2 <USBD_CoreFindIF>
 8010a1c:	4603      	mov	r3, r0
 8010a1e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010a20:	7bbb      	ldrb	r3, [r7, #14]
 8010a22:	2bff      	cmp	r3, #255	@ 0xff
 8010a24:	d01d      	beq.n	8010a62 <USBD_StdItfReq+0x92>
 8010a26:	7bbb      	ldrb	r3, [r7, #14]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d11a      	bne.n	8010a62 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010a2c:	7bba      	ldrb	r2, [r7, #14]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	32ae      	adds	r2, #174	@ 0xae
 8010a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a36:	689b      	ldr	r3, [r3, #8]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d00f      	beq.n	8010a5c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010a3c:	7bba      	ldrb	r2, [r7, #14]
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010a44:	7bba      	ldrb	r2, [r7, #14]
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	32ae      	adds	r2, #174	@ 0xae
 8010a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a4e:	689b      	ldr	r3, [r3, #8]
 8010a50:	6839      	ldr	r1, [r7, #0]
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	4798      	blx	r3
 8010a56:	4603      	mov	r3, r0
 8010a58:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010a5a:	e004      	b.n	8010a66 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010a5c:	2303      	movs	r3, #3
 8010a5e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010a60:	e001      	b.n	8010a66 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010a62:	2303      	movs	r3, #3
 8010a64:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	88db      	ldrh	r3, [r3, #6]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d110      	bne.n	8010a90 <USBD_StdItfReq+0xc0>
 8010a6e:	7bfb      	ldrb	r3, [r7, #15]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d10d      	bne.n	8010a90 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f000 fdfd 	bl	8011674 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010a7a:	e009      	b.n	8010a90 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010a7c:	6839      	ldr	r1, [r7, #0]
 8010a7e:	6878      	ldr	r0, [r7, #4]
 8010a80:	f000 fd21 	bl	80114c6 <USBD_CtlError>
          break;
 8010a84:	e004      	b.n	8010a90 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010a86:	6839      	ldr	r1, [r7, #0]
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f000 fd1c 	bl	80114c6 <USBD_CtlError>
          break;
 8010a8e:	e000      	b.n	8010a92 <USBD_StdItfReq+0xc2>
          break;
 8010a90:	bf00      	nop
      }
      break;
 8010a92:	e004      	b.n	8010a9e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010a94:	6839      	ldr	r1, [r7, #0]
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	f000 fd15 	bl	80114c6 <USBD_CtlError>
      break;
 8010a9c:	bf00      	nop
  }

  return ret;
 8010a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3710      	adds	r7, #16
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}

08010aa8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b084      	sub	sp, #16
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	889b      	ldrh	r3, [r3, #4]
 8010aba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	781b      	ldrb	r3, [r3, #0]
 8010ac0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010ac4:	2b40      	cmp	r3, #64	@ 0x40
 8010ac6:	d007      	beq.n	8010ad8 <USBD_StdEPReq+0x30>
 8010ac8:	2b40      	cmp	r3, #64	@ 0x40
 8010aca:	f200 817f 	bhi.w	8010dcc <USBD_StdEPReq+0x324>
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d02a      	beq.n	8010b28 <USBD_StdEPReq+0x80>
 8010ad2:	2b20      	cmp	r3, #32
 8010ad4:	f040 817a 	bne.w	8010dcc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010ad8:	7bbb      	ldrb	r3, [r7, #14]
 8010ada:	4619      	mov	r1, r3
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f7ff fe85 	bl	80107ec <USBD_CoreFindEP>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010ae6:	7b7b      	ldrb	r3, [r7, #13]
 8010ae8:	2bff      	cmp	r3, #255	@ 0xff
 8010aea:	f000 8174 	beq.w	8010dd6 <USBD_StdEPReq+0x32e>
 8010aee:	7b7b      	ldrb	r3, [r7, #13]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	f040 8170 	bne.w	8010dd6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010af6:	7b7a      	ldrb	r2, [r7, #13]
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010afe:	7b7a      	ldrb	r2, [r7, #13]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	32ae      	adds	r2, #174	@ 0xae
 8010b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b08:	689b      	ldr	r3, [r3, #8]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	f000 8163 	beq.w	8010dd6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010b10:	7b7a      	ldrb	r2, [r7, #13]
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	32ae      	adds	r2, #174	@ 0xae
 8010b16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b1a:	689b      	ldr	r3, [r3, #8]
 8010b1c:	6839      	ldr	r1, [r7, #0]
 8010b1e:	6878      	ldr	r0, [r7, #4]
 8010b20:	4798      	blx	r3
 8010b22:	4603      	mov	r3, r0
 8010b24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010b26:	e156      	b.n	8010dd6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	785b      	ldrb	r3, [r3, #1]
 8010b2c:	2b03      	cmp	r3, #3
 8010b2e:	d008      	beq.n	8010b42 <USBD_StdEPReq+0x9a>
 8010b30:	2b03      	cmp	r3, #3
 8010b32:	f300 8145 	bgt.w	8010dc0 <USBD_StdEPReq+0x318>
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	f000 809b 	beq.w	8010c72 <USBD_StdEPReq+0x1ca>
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	d03c      	beq.n	8010bba <USBD_StdEPReq+0x112>
 8010b40:	e13e      	b.n	8010dc0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b48:	b2db      	uxtb	r3, r3
 8010b4a:	2b02      	cmp	r3, #2
 8010b4c:	d002      	beq.n	8010b54 <USBD_StdEPReq+0xac>
 8010b4e:	2b03      	cmp	r3, #3
 8010b50:	d016      	beq.n	8010b80 <USBD_StdEPReq+0xd8>
 8010b52:	e02c      	b.n	8010bae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010b54:	7bbb      	ldrb	r3, [r7, #14]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d00d      	beq.n	8010b76 <USBD_StdEPReq+0xce>
 8010b5a:	7bbb      	ldrb	r3, [r7, #14]
 8010b5c:	2b80      	cmp	r3, #128	@ 0x80
 8010b5e:	d00a      	beq.n	8010b76 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010b60:	7bbb      	ldrb	r3, [r7, #14]
 8010b62:	4619      	mov	r1, r3
 8010b64:	6878      	ldr	r0, [r7, #4]
 8010b66:	f004 fc4b 	bl	8015400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010b6a:	2180      	movs	r1, #128	@ 0x80
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f004 fc47 	bl	8015400 <USBD_LL_StallEP>
 8010b72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010b74:	e020      	b.n	8010bb8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010b76:	6839      	ldr	r1, [r7, #0]
 8010b78:	6878      	ldr	r0, [r7, #4]
 8010b7a:	f000 fca4 	bl	80114c6 <USBD_CtlError>
              break;
 8010b7e:	e01b      	b.n	8010bb8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	885b      	ldrh	r3, [r3, #2]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d10e      	bne.n	8010ba6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010b88:	7bbb      	ldrb	r3, [r7, #14]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d00b      	beq.n	8010ba6 <USBD_StdEPReq+0xfe>
 8010b8e:	7bbb      	ldrb	r3, [r7, #14]
 8010b90:	2b80      	cmp	r3, #128	@ 0x80
 8010b92:	d008      	beq.n	8010ba6 <USBD_StdEPReq+0xfe>
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	88db      	ldrh	r3, [r3, #6]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d104      	bne.n	8010ba6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010b9c:	7bbb      	ldrb	r3, [r7, #14]
 8010b9e:	4619      	mov	r1, r3
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f004 fc2d 	bl	8015400 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f000 fd64 	bl	8011674 <USBD_CtlSendStatus>

              break;
 8010bac:	e004      	b.n	8010bb8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010bae:	6839      	ldr	r1, [r7, #0]
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f000 fc88 	bl	80114c6 <USBD_CtlError>
              break;
 8010bb6:	bf00      	nop
          }
          break;
 8010bb8:	e107      	b.n	8010dca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010bc0:	b2db      	uxtb	r3, r3
 8010bc2:	2b02      	cmp	r3, #2
 8010bc4:	d002      	beq.n	8010bcc <USBD_StdEPReq+0x124>
 8010bc6:	2b03      	cmp	r3, #3
 8010bc8:	d016      	beq.n	8010bf8 <USBD_StdEPReq+0x150>
 8010bca:	e04b      	b.n	8010c64 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010bcc:	7bbb      	ldrb	r3, [r7, #14]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d00d      	beq.n	8010bee <USBD_StdEPReq+0x146>
 8010bd2:	7bbb      	ldrb	r3, [r7, #14]
 8010bd4:	2b80      	cmp	r3, #128	@ 0x80
 8010bd6:	d00a      	beq.n	8010bee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010bd8:	7bbb      	ldrb	r3, [r7, #14]
 8010bda:	4619      	mov	r1, r3
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f004 fc0f 	bl	8015400 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010be2:	2180      	movs	r1, #128	@ 0x80
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f004 fc0b 	bl	8015400 <USBD_LL_StallEP>
 8010bea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010bec:	e040      	b.n	8010c70 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010bee:	6839      	ldr	r1, [r7, #0]
 8010bf0:	6878      	ldr	r0, [r7, #4]
 8010bf2:	f000 fc68 	bl	80114c6 <USBD_CtlError>
              break;
 8010bf6:	e03b      	b.n	8010c70 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010bf8:	683b      	ldr	r3, [r7, #0]
 8010bfa:	885b      	ldrh	r3, [r3, #2]
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d136      	bne.n	8010c6e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010c00:	7bbb      	ldrb	r3, [r7, #14]
 8010c02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d004      	beq.n	8010c14 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010c0a:	7bbb      	ldrb	r3, [r7, #14]
 8010c0c:	4619      	mov	r1, r3
 8010c0e:	6878      	ldr	r0, [r7, #4]
 8010c10:	f004 fc15 	bl	801543e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f000 fd2d 	bl	8011674 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010c1a:	7bbb      	ldrb	r3, [r7, #14]
 8010c1c:	4619      	mov	r1, r3
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f7ff fde4 	bl	80107ec <USBD_CoreFindEP>
 8010c24:	4603      	mov	r3, r0
 8010c26:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010c28:	7b7b      	ldrb	r3, [r7, #13]
 8010c2a:	2bff      	cmp	r3, #255	@ 0xff
 8010c2c:	d01f      	beq.n	8010c6e <USBD_StdEPReq+0x1c6>
 8010c2e:	7b7b      	ldrb	r3, [r7, #13]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d11c      	bne.n	8010c6e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010c34:	7b7a      	ldrb	r2, [r7, #13]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010c3c:	7b7a      	ldrb	r2, [r7, #13]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	32ae      	adds	r2, #174	@ 0xae
 8010c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c46:	689b      	ldr	r3, [r3, #8]
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d010      	beq.n	8010c6e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010c4c:	7b7a      	ldrb	r2, [r7, #13]
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	32ae      	adds	r2, #174	@ 0xae
 8010c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c56:	689b      	ldr	r3, [r3, #8]
 8010c58:	6839      	ldr	r1, [r7, #0]
 8010c5a:	6878      	ldr	r0, [r7, #4]
 8010c5c:	4798      	blx	r3
 8010c5e:	4603      	mov	r3, r0
 8010c60:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010c62:	e004      	b.n	8010c6e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010c64:	6839      	ldr	r1, [r7, #0]
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f000 fc2d 	bl	80114c6 <USBD_CtlError>
              break;
 8010c6c:	e000      	b.n	8010c70 <USBD_StdEPReq+0x1c8>
              break;
 8010c6e:	bf00      	nop
          }
          break;
 8010c70:	e0ab      	b.n	8010dca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c78:	b2db      	uxtb	r3, r3
 8010c7a:	2b02      	cmp	r3, #2
 8010c7c:	d002      	beq.n	8010c84 <USBD_StdEPReq+0x1dc>
 8010c7e:	2b03      	cmp	r3, #3
 8010c80:	d032      	beq.n	8010ce8 <USBD_StdEPReq+0x240>
 8010c82:	e097      	b.n	8010db4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010c84:	7bbb      	ldrb	r3, [r7, #14]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d007      	beq.n	8010c9a <USBD_StdEPReq+0x1f2>
 8010c8a:	7bbb      	ldrb	r3, [r7, #14]
 8010c8c:	2b80      	cmp	r3, #128	@ 0x80
 8010c8e:	d004      	beq.n	8010c9a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010c90:	6839      	ldr	r1, [r7, #0]
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f000 fc17 	bl	80114c6 <USBD_CtlError>
                break;
 8010c98:	e091      	b.n	8010dbe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010c9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	da0b      	bge.n	8010cba <USBD_StdEPReq+0x212>
 8010ca2:	7bbb      	ldrb	r3, [r7, #14]
 8010ca4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010ca8:	4613      	mov	r3, r2
 8010caa:	009b      	lsls	r3, r3, #2
 8010cac:	4413      	add	r3, r2
 8010cae:	009b      	lsls	r3, r3, #2
 8010cb0:	3310      	adds	r3, #16
 8010cb2:	687a      	ldr	r2, [r7, #4]
 8010cb4:	4413      	add	r3, r2
 8010cb6:	3304      	adds	r3, #4
 8010cb8:	e00b      	b.n	8010cd2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010cba:	7bbb      	ldrb	r3, [r7, #14]
 8010cbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010cc0:	4613      	mov	r3, r2
 8010cc2:	009b      	lsls	r3, r3, #2
 8010cc4:	4413      	add	r3, r2
 8010cc6:	009b      	lsls	r3, r3, #2
 8010cc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010ccc:	687a      	ldr	r2, [r7, #4]
 8010cce:	4413      	add	r3, r2
 8010cd0:	3304      	adds	r3, #4
 8010cd2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	2202      	movs	r2, #2
 8010cde:	4619      	mov	r1, r3
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	f000 fc6d 	bl	80115c0 <USBD_CtlSendData>
              break;
 8010ce6:	e06a      	b.n	8010dbe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010ce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	da11      	bge.n	8010d14 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010cf0:	7bbb      	ldrb	r3, [r7, #14]
 8010cf2:	f003 020f 	and.w	r2, r3, #15
 8010cf6:	6879      	ldr	r1, [r7, #4]
 8010cf8:	4613      	mov	r3, r2
 8010cfa:	009b      	lsls	r3, r3, #2
 8010cfc:	4413      	add	r3, r2
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	440b      	add	r3, r1
 8010d02:	3324      	adds	r3, #36	@ 0x24
 8010d04:	881b      	ldrh	r3, [r3, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d117      	bne.n	8010d3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010d0a:	6839      	ldr	r1, [r7, #0]
 8010d0c:	6878      	ldr	r0, [r7, #4]
 8010d0e:	f000 fbda 	bl	80114c6 <USBD_CtlError>
                  break;
 8010d12:	e054      	b.n	8010dbe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010d14:	7bbb      	ldrb	r3, [r7, #14]
 8010d16:	f003 020f 	and.w	r2, r3, #15
 8010d1a:	6879      	ldr	r1, [r7, #4]
 8010d1c:	4613      	mov	r3, r2
 8010d1e:	009b      	lsls	r3, r3, #2
 8010d20:	4413      	add	r3, r2
 8010d22:	009b      	lsls	r3, r3, #2
 8010d24:	440b      	add	r3, r1
 8010d26:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010d2a:	881b      	ldrh	r3, [r3, #0]
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d104      	bne.n	8010d3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010d30:	6839      	ldr	r1, [r7, #0]
 8010d32:	6878      	ldr	r0, [r7, #4]
 8010d34:	f000 fbc7 	bl	80114c6 <USBD_CtlError>
                  break;
 8010d38:	e041      	b.n	8010dbe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	da0b      	bge.n	8010d5a <USBD_StdEPReq+0x2b2>
 8010d42:	7bbb      	ldrb	r3, [r7, #14]
 8010d44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010d48:	4613      	mov	r3, r2
 8010d4a:	009b      	lsls	r3, r3, #2
 8010d4c:	4413      	add	r3, r2
 8010d4e:	009b      	lsls	r3, r3, #2
 8010d50:	3310      	adds	r3, #16
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	4413      	add	r3, r2
 8010d56:	3304      	adds	r3, #4
 8010d58:	e00b      	b.n	8010d72 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010d5a:	7bbb      	ldrb	r3, [r7, #14]
 8010d5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d60:	4613      	mov	r3, r2
 8010d62:	009b      	lsls	r3, r3, #2
 8010d64:	4413      	add	r3, r2
 8010d66:	009b      	lsls	r3, r3, #2
 8010d68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010d6c:	687a      	ldr	r2, [r7, #4]
 8010d6e:	4413      	add	r3, r2
 8010d70:	3304      	adds	r3, #4
 8010d72:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010d74:	7bbb      	ldrb	r3, [r7, #14]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d002      	beq.n	8010d80 <USBD_StdEPReq+0x2d8>
 8010d7a:	7bbb      	ldrb	r3, [r7, #14]
 8010d7c:	2b80      	cmp	r3, #128	@ 0x80
 8010d7e:	d103      	bne.n	8010d88 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010d80:	68bb      	ldr	r3, [r7, #8]
 8010d82:	2200      	movs	r2, #0
 8010d84:	601a      	str	r2, [r3, #0]
 8010d86:	e00e      	b.n	8010da6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010d88:	7bbb      	ldrb	r3, [r7, #14]
 8010d8a:	4619      	mov	r1, r3
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f004 fb75 	bl	801547c <USBD_LL_IsStallEP>
 8010d92:	4603      	mov	r3, r0
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d003      	beq.n	8010da0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010d98:	68bb      	ldr	r3, [r7, #8]
 8010d9a:	2201      	movs	r2, #1
 8010d9c:	601a      	str	r2, [r3, #0]
 8010d9e:	e002      	b.n	8010da6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	2200      	movs	r2, #0
 8010da4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	2202      	movs	r2, #2
 8010daa:	4619      	mov	r1, r3
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f000 fc07 	bl	80115c0 <USBD_CtlSendData>
              break;
 8010db2:	e004      	b.n	8010dbe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010db4:	6839      	ldr	r1, [r7, #0]
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f000 fb85 	bl	80114c6 <USBD_CtlError>
              break;
 8010dbc:	bf00      	nop
          }
          break;
 8010dbe:	e004      	b.n	8010dca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010dc0:	6839      	ldr	r1, [r7, #0]
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f000 fb7f 	bl	80114c6 <USBD_CtlError>
          break;
 8010dc8:	bf00      	nop
      }
      break;
 8010dca:	e005      	b.n	8010dd8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010dcc:	6839      	ldr	r1, [r7, #0]
 8010dce:	6878      	ldr	r0, [r7, #4]
 8010dd0:	f000 fb79 	bl	80114c6 <USBD_CtlError>
      break;
 8010dd4:	e000      	b.n	8010dd8 <USBD_StdEPReq+0x330>
      break;
 8010dd6:	bf00      	nop
  }

  return ret;
 8010dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3710      	adds	r7, #16
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
	...

08010de4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b084      	sub	sp, #16
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010dee:	2300      	movs	r3, #0
 8010df0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010df2:	2300      	movs	r3, #0
 8010df4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010df6:	2300      	movs	r3, #0
 8010df8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	885b      	ldrh	r3, [r3, #2]
 8010dfe:	0a1b      	lsrs	r3, r3, #8
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	3b01      	subs	r3, #1
 8010e04:	2b0e      	cmp	r3, #14
 8010e06:	f200 8152 	bhi.w	80110ae <USBD_GetDescriptor+0x2ca>
 8010e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8010e10 <USBD_GetDescriptor+0x2c>)
 8010e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e10:	08010e81 	.word	0x08010e81
 8010e14:	08010e99 	.word	0x08010e99
 8010e18:	08010ed9 	.word	0x08010ed9
 8010e1c:	080110af 	.word	0x080110af
 8010e20:	080110af 	.word	0x080110af
 8010e24:	0801104f 	.word	0x0801104f
 8010e28:	0801107b 	.word	0x0801107b
 8010e2c:	080110af 	.word	0x080110af
 8010e30:	080110af 	.word	0x080110af
 8010e34:	080110af 	.word	0x080110af
 8010e38:	080110af 	.word	0x080110af
 8010e3c:	080110af 	.word	0x080110af
 8010e40:	080110af 	.word	0x080110af
 8010e44:	080110af 	.word	0x080110af
 8010e48:	08010e4d 	.word	0x08010e4d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e52:	69db      	ldr	r3, [r3, #28]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d00b      	beq.n	8010e70 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e5e:	69db      	ldr	r3, [r3, #28]
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	7c12      	ldrb	r2, [r2, #16]
 8010e64:	f107 0108 	add.w	r1, r7, #8
 8010e68:	4610      	mov	r0, r2
 8010e6a:	4798      	blx	r3
 8010e6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010e6e:	e126      	b.n	80110be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010e70:	6839      	ldr	r1, [r7, #0]
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f000 fb27 	bl	80114c6 <USBD_CtlError>
        err++;
 8010e78:	7afb      	ldrb	r3, [r7, #11]
 8010e7a:	3301      	adds	r3, #1
 8010e7c:	72fb      	strb	r3, [r7, #11]
      break;
 8010e7e:	e11e      	b.n	80110be <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	687a      	ldr	r2, [r7, #4]
 8010e8a:	7c12      	ldrb	r2, [r2, #16]
 8010e8c:	f107 0108 	add.w	r1, r7, #8
 8010e90:	4610      	mov	r0, r2
 8010e92:	4798      	blx	r3
 8010e94:	60f8      	str	r0, [r7, #12]
      break;
 8010e96:	e112      	b.n	80110be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	7c1b      	ldrb	r3, [r3, #16]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d10d      	bne.n	8010ebc <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ea8:	f107 0208 	add.w	r2, r7, #8
 8010eac:	4610      	mov	r0, r2
 8010eae:	4798      	blx	r3
 8010eb0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	3301      	adds	r3, #1
 8010eb6:	2202      	movs	r2, #2
 8010eb8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010eba:	e100      	b.n	80110be <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ec4:	f107 0208 	add.w	r2, r7, #8
 8010ec8:	4610      	mov	r0, r2
 8010eca:	4798      	blx	r3
 8010ecc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	2202      	movs	r2, #2
 8010ed4:	701a      	strb	r2, [r3, #0]
      break;
 8010ed6:	e0f2      	b.n	80110be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	885b      	ldrh	r3, [r3, #2]
 8010edc:	b2db      	uxtb	r3, r3
 8010ede:	2b05      	cmp	r3, #5
 8010ee0:	f200 80ac 	bhi.w	801103c <USBD_GetDescriptor+0x258>
 8010ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8010eec <USBD_GetDescriptor+0x108>)
 8010ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eea:	bf00      	nop
 8010eec:	08010f05 	.word	0x08010f05
 8010ef0:	08010f39 	.word	0x08010f39
 8010ef4:	08010f6d 	.word	0x08010f6d
 8010ef8:	08010fa1 	.word	0x08010fa1
 8010efc:	08010fd5 	.word	0x08010fd5
 8010f00:	08011009 	.word	0x08011009
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010f0a:	685b      	ldr	r3, [r3, #4]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d00b      	beq.n	8010f28 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	687a      	ldr	r2, [r7, #4]
 8010f1a:	7c12      	ldrb	r2, [r2, #16]
 8010f1c:	f107 0108 	add.w	r1, r7, #8
 8010f20:	4610      	mov	r0, r2
 8010f22:	4798      	blx	r3
 8010f24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010f26:	e091      	b.n	801104c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010f28:	6839      	ldr	r1, [r7, #0]
 8010f2a:	6878      	ldr	r0, [r7, #4]
 8010f2c:	f000 facb 	bl	80114c6 <USBD_CtlError>
            err++;
 8010f30:	7afb      	ldrb	r3, [r7, #11]
 8010f32:	3301      	adds	r3, #1
 8010f34:	72fb      	strb	r3, [r7, #11]
          break;
 8010f36:	e089      	b.n	801104c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010f3e:	689b      	ldr	r3, [r3, #8]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d00b      	beq.n	8010f5c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010f4a:	689b      	ldr	r3, [r3, #8]
 8010f4c:	687a      	ldr	r2, [r7, #4]
 8010f4e:	7c12      	ldrb	r2, [r2, #16]
 8010f50:	f107 0108 	add.w	r1, r7, #8
 8010f54:	4610      	mov	r0, r2
 8010f56:	4798      	blx	r3
 8010f58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010f5a:	e077      	b.n	801104c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010f5c:	6839      	ldr	r1, [r7, #0]
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f000 fab1 	bl	80114c6 <USBD_CtlError>
            err++;
 8010f64:	7afb      	ldrb	r3, [r7, #11]
 8010f66:	3301      	adds	r3, #1
 8010f68:	72fb      	strb	r3, [r7, #11]
          break;
 8010f6a:	e06f      	b.n	801104c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010f72:	68db      	ldr	r3, [r3, #12]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d00b      	beq.n	8010f90 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010f7e:	68db      	ldr	r3, [r3, #12]
 8010f80:	687a      	ldr	r2, [r7, #4]
 8010f82:	7c12      	ldrb	r2, [r2, #16]
 8010f84:	f107 0108 	add.w	r1, r7, #8
 8010f88:	4610      	mov	r0, r2
 8010f8a:	4798      	blx	r3
 8010f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010f8e:	e05d      	b.n	801104c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010f90:	6839      	ldr	r1, [r7, #0]
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f000 fa97 	bl	80114c6 <USBD_CtlError>
            err++;
 8010f98:	7afb      	ldrb	r3, [r7, #11]
 8010f9a:	3301      	adds	r3, #1
 8010f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8010f9e:	e055      	b.n	801104c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010fa6:	691b      	ldr	r3, [r3, #16]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d00b      	beq.n	8010fc4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010fb2:	691b      	ldr	r3, [r3, #16]
 8010fb4:	687a      	ldr	r2, [r7, #4]
 8010fb6:	7c12      	ldrb	r2, [r2, #16]
 8010fb8:	f107 0108 	add.w	r1, r7, #8
 8010fbc:	4610      	mov	r0, r2
 8010fbe:	4798      	blx	r3
 8010fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010fc2:	e043      	b.n	801104c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010fc4:	6839      	ldr	r1, [r7, #0]
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 fa7d 	bl	80114c6 <USBD_CtlError>
            err++;
 8010fcc:	7afb      	ldrb	r3, [r7, #11]
 8010fce:	3301      	adds	r3, #1
 8010fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8010fd2:	e03b      	b.n	801104c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010fda:	695b      	ldr	r3, [r3, #20]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d00b      	beq.n	8010ff8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010fe6:	695b      	ldr	r3, [r3, #20]
 8010fe8:	687a      	ldr	r2, [r7, #4]
 8010fea:	7c12      	ldrb	r2, [r2, #16]
 8010fec:	f107 0108 	add.w	r1, r7, #8
 8010ff0:	4610      	mov	r0, r2
 8010ff2:	4798      	blx	r3
 8010ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ff6:	e029      	b.n	801104c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010ff8:	6839      	ldr	r1, [r7, #0]
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f000 fa63 	bl	80114c6 <USBD_CtlError>
            err++;
 8011000:	7afb      	ldrb	r3, [r7, #11]
 8011002:	3301      	adds	r3, #1
 8011004:	72fb      	strb	r3, [r7, #11]
          break;
 8011006:	e021      	b.n	801104c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801100e:	699b      	ldr	r3, [r3, #24]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d00b      	beq.n	801102c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801101a:	699b      	ldr	r3, [r3, #24]
 801101c:	687a      	ldr	r2, [r7, #4]
 801101e:	7c12      	ldrb	r2, [r2, #16]
 8011020:	f107 0108 	add.w	r1, r7, #8
 8011024:	4610      	mov	r0, r2
 8011026:	4798      	blx	r3
 8011028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801102a:	e00f      	b.n	801104c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801102c:	6839      	ldr	r1, [r7, #0]
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f000 fa49 	bl	80114c6 <USBD_CtlError>
            err++;
 8011034:	7afb      	ldrb	r3, [r7, #11]
 8011036:	3301      	adds	r3, #1
 8011038:	72fb      	strb	r3, [r7, #11]
          break;
 801103a:	e007      	b.n	801104c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801103c:	6839      	ldr	r1, [r7, #0]
 801103e:	6878      	ldr	r0, [r7, #4]
 8011040:	f000 fa41 	bl	80114c6 <USBD_CtlError>
          err++;
 8011044:	7afb      	ldrb	r3, [r7, #11]
 8011046:	3301      	adds	r3, #1
 8011048:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801104a:	bf00      	nop
      }
      break;
 801104c:	e037      	b.n	80110be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	7c1b      	ldrb	r3, [r3, #16]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d109      	bne.n	801106a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801105c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801105e:	f107 0208 	add.w	r2, r7, #8
 8011062:	4610      	mov	r0, r2
 8011064:	4798      	blx	r3
 8011066:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011068:	e029      	b.n	80110be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801106a:	6839      	ldr	r1, [r7, #0]
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f000 fa2a 	bl	80114c6 <USBD_CtlError>
        err++;
 8011072:	7afb      	ldrb	r3, [r7, #11]
 8011074:	3301      	adds	r3, #1
 8011076:	72fb      	strb	r3, [r7, #11]
      break;
 8011078:	e021      	b.n	80110be <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	7c1b      	ldrb	r3, [r3, #16]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d10d      	bne.n	801109e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801108a:	f107 0208 	add.w	r2, r7, #8
 801108e:	4610      	mov	r0, r2
 8011090:	4798      	blx	r3
 8011092:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	3301      	adds	r3, #1
 8011098:	2207      	movs	r2, #7
 801109a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801109c:	e00f      	b.n	80110be <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801109e:	6839      	ldr	r1, [r7, #0]
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f000 fa10 	bl	80114c6 <USBD_CtlError>
        err++;
 80110a6:	7afb      	ldrb	r3, [r7, #11]
 80110a8:	3301      	adds	r3, #1
 80110aa:	72fb      	strb	r3, [r7, #11]
      break;
 80110ac:	e007      	b.n	80110be <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80110ae:	6839      	ldr	r1, [r7, #0]
 80110b0:	6878      	ldr	r0, [r7, #4]
 80110b2:	f000 fa08 	bl	80114c6 <USBD_CtlError>
      err++;
 80110b6:	7afb      	ldrb	r3, [r7, #11]
 80110b8:	3301      	adds	r3, #1
 80110ba:	72fb      	strb	r3, [r7, #11]
      break;
 80110bc:	bf00      	nop
  }

  if (err != 0U)
 80110be:	7afb      	ldrb	r3, [r7, #11]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d11e      	bne.n	8011102 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	88db      	ldrh	r3, [r3, #6]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d016      	beq.n	80110fa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80110cc:	893b      	ldrh	r3, [r7, #8]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d00e      	beq.n	80110f0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	88da      	ldrh	r2, [r3, #6]
 80110d6:	893b      	ldrh	r3, [r7, #8]
 80110d8:	4293      	cmp	r3, r2
 80110da:	bf28      	it	cs
 80110dc:	4613      	movcs	r3, r2
 80110de:	b29b      	uxth	r3, r3
 80110e0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80110e2:	893b      	ldrh	r3, [r7, #8]
 80110e4:	461a      	mov	r2, r3
 80110e6:	68f9      	ldr	r1, [r7, #12]
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f000 fa69 	bl	80115c0 <USBD_CtlSendData>
 80110ee:	e009      	b.n	8011104 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80110f0:	6839      	ldr	r1, [r7, #0]
 80110f2:	6878      	ldr	r0, [r7, #4]
 80110f4:	f000 f9e7 	bl	80114c6 <USBD_CtlError>
 80110f8:	e004      	b.n	8011104 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f000 faba 	bl	8011674 <USBD_CtlSendStatus>
 8011100:	e000      	b.n	8011104 <USBD_GetDescriptor+0x320>
    return;
 8011102:	bf00      	nop
  }
}
 8011104:	3710      	adds	r7, #16
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop

0801110c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b084      	sub	sp, #16
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011116:	683b      	ldr	r3, [r7, #0]
 8011118:	889b      	ldrh	r3, [r3, #4]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d131      	bne.n	8011182 <USBD_SetAddress+0x76>
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	88db      	ldrh	r3, [r3, #6]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d12d      	bne.n	8011182 <USBD_SetAddress+0x76>
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	885b      	ldrh	r3, [r3, #2]
 801112a:	2b7f      	cmp	r3, #127	@ 0x7f
 801112c:	d829      	bhi.n	8011182 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801112e:	683b      	ldr	r3, [r7, #0]
 8011130:	885b      	ldrh	r3, [r3, #2]
 8011132:	b2db      	uxtb	r3, r3
 8011134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011138:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011140:	b2db      	uxtb	r3, r3
 8011142:	2b03      	cmp	r3, #3
 8011144:	d104      	bne.n	8011150 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011146:	6839      	ldr	r1, [r7, #0]
 8011148:	6878      	ldr	r0, [r7, #4]
 801114a:	f000 f9bc 	bl	80114c6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801114e:	e01d      	b.n	801118c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	7bfa      	ldrb	r2, [r7, #15]
 8011154:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011158:	7bfb      	ldrb	r3, [r7, #15]
 801115a:	4619      	mov	r1, r3
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f004 f9b9 	bl	80154d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f000 fa86 	bl	8011674 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011168:	7bfb      	ldrb	r3, [r7, #15]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d004      	beq.n	8011178 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	2202      	movs	r2, #2
 8011172:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011176:	e009      	b.n	801118c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	2201      	movs	r2, #1
 801117c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011180:	e004      	b.n	801118c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011182:	6839      	ldr	r1, [r7, #0]
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f000 f99e 	bl	80114c6 <USBD_CtlError>
  }
}
 801118a:	bf00      	nop
 801118c:	bf00      	nop
 801118e:	3710      	adds	r7, #16
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}

08011194 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b084      	sub	sp, #16
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
 801119c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801119e:	2300      	movs	r3, #0
 80111a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	885b      	ldrh	r3, [r3, #2]
 80111a6:	b2da      	uxtb	r2, r3
 80111a8:	4b4e      	ldr	r3, [pc, #312]	@ (80112e4 <USBD_SetConfig+0x150>)
 80111aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80111ac:	4b4d      	ldr	r3, [pc, #308]	@ (80112e4 <USBD_SetConfig+0x150>)
 80111ae:	781b      	ldrb	r3, [r3, #0]
 80111b0:	2b01      	cmp	r3, #1
 80111b2:	d905      	bls.n	80111c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80111b4:	6839      	ldr	r1, [r7, #0]
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f000 f985 	bl	80114c6 <USBD_CtlError>
    return USBD_FAIL;
 80111bc:	2303      	movs	r3, #3
 80111be:	e08c      	b.n	80112da <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111c6:	b2db      	uxtb	r3, r3
 80111c8:	2b02      	cmp	r3, #2
 80111ca:	d002      	beq.n	80111d2 <USBD_SetConfig+0x3e>
 80111cc:	2b03      	cmp	r3, #3
 80111ce:	d029      	beq.n	8011224 <USBD_SetConfig+0x90>
 80111d0:	e075      	b.n	80112be <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80111d2:	4b44      	ldr	r3, [pc, #272]	@ (80112e4 <USBD_SetConfig+0x150>)
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d020      	beq.n	801121c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80111da:	4b42      	ldr	r3, [pc, #264]	@ (80112e4 <USBD_SetConfig+0x150>)
 80111dc:	781b      	ldrb	r3, [r3, #0]
 80111de:	461a      	mov	r2, r3
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80111e4:	4b3f      	ldr	r3, [pc, #252]	@ (80112e4 <USBD_SetConfig+0x150>)
 80111e6:	781b      	ldrb	r3, [r3, #0]
 80111e8:	4619      	mov	r1, r3
 80111ea:	6878      	ldr	r0, [r7, #4]
 80111ec:	f7fe ffb9 	bl	8010162 <USBD_SetClassConfig>
 80111f0:	4603      	mov	r3, r0
 80111f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80111f4:	7bfb      	ldrb	r3, [r7, #15]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d008      	beq.n	801120c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80111fa:	6839      	ldr	r1, [r7, #0]
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f000 f962 	bl	80114c6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2202      	movs	r2, #2
 8011206:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801120a:	e065      	b.n	80112d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f000 fa31 	bl	8011674 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2203      	movs	r2, #3
 8011216:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801121a:	e05d      	b.n	80112d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f000 fa29 	bl	8011674 <USBD_CtlSendStatus>
      break;
 8011222:	e059      	b.n	80112d8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011224:	4b2f      	ldr	r3, [pc, #188]	@ (80112e4 <USBD_SetConfig+0x150>)
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d112      	bne.n	8011252 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2202      	movs	r2, #2
 8011230:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8011234:	4b2b      	ldr	r3, [pc, #172]	@ (80112e4 <USBD_SetConfig+0x150>)
 8011236:	781b      	ldrb	r3, [r3, #0]
 8011238:	461a      	mov	r2, r3
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801123e:	4b29      	ldr	r3, [pc, #164]	@ (80112e4 <USBD_SetConfig+0x150>)
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	4619      	mov	r1, r3
 8011244:	6878      	ldr	r0, [r7, #4]
 8011246:	f7fe ffa8 	bl	801019a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f000 fa12 	bl	8011674 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011250:	e042      	b.n	80112d8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8011252:	4b24      	ldr	r3, [pc, #144]	@ (80112e4 <USBD_SetConfig+0x150>)
 8011254:	781b      	ldrb	r3, [r3, #0]
 8011256:	461a      	mov	r2, r3
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	685b      	ldr	r3, [r3, #4]
 801125c:	429a      	cmp	r2, r3
 801125e:	d02a      	beq.n	80112b6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	685b      	ldr	r3, [r3, #4]
 8011264:	b2db      	uxtb	r3, r3
 8011266:	4619      	mov	r1, r3
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f7fe ff96 	bl	801019a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801126e:	4b1d      	ldr	r3, [pc, #116]	@ (80112e4 <USBD_SetConfig+0x150>)
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	461a      	mov	r2, r3
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011278:	4b1a      	ldr	r3, [pc, #104]	@ (80112e4 <USBD_SetConfig+0x150>)
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	4619      	mov	r1, r3
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f7fe ff6f 	bl	8010162 <USBD_SetClassConfig>
 8011284:	4603      	mov	r3, r0
 8011286:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011288:	7bfb      	ldrb	r3, [r7, #15]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d00f      	beq.n	80112ae <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801128e:	6839      	ldr	r1, [r7, #0]
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f000 f918 	bl	80114c6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	b2db      	uxtb	r3, r3
 801129c:	4619      	mov	r1, r3
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f7fe ff7b 	bl	801019a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	2202      	movs	r2, #2
 80112a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80112ac:	e014      	b.n	80112d8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f000 f9e0 	bl	8011674 <USBD_CtlSendStatus>
      break;
 80112b4:	e010      	b.n	80112d8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80112b6:	6878      	ldr	r0, [r7, #4]
 80112b8:	f000 f9dc 	bl	8011674 <USBD_CtlSendStatus>
      break;
 80112bc:	e00c      	b.n	80112d8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80112be:	6839      	ldr	r1, [r7, #0]
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f000 f900 	bl	80114c6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80112c6:	4b07      	ldr	r3, [pc, #28]	@ (80112e4 <USBD_SetConfig+0x150>)
 80112c8:	781b      	ldrb	r3, [r3, #0]
 80112ca:	4619      	mov	r1, r3
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f7fe ff64 	bl	801019a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80112d2:	2303      	movs	r3, #3
 80112d4:	73fb      	strb	r3, [r7, #15]
      break;
 80112d6:	bf00      	nop
  }

  return ret;
 80112d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80112da:	4618      	mov	r0, r3
 80112dc:	3710      	adds	r7, #16
 80112de:	46bd      	mov	sp, r7
 80112e0:	bd80      	pop	{r7, pc}
 80112e2:	bf00      	nop
 80112e4:	240005d4 	.word	0x240005d4

080112e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80112f2:	683b      	ldr	r3, [r7, #0]
 80112f4:	88db      	ldrh	r3, [r3, #6]
 80112f6:	2b01      	cmp	r3, #1
 80112f8:	d004      	beq.n	8011304 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80112fa:	6839      	ldr	r1, [r7, #0]
 80112fc:	6878      	ldr	r0, [r7, #4]
 80112fe:	f000 f8e2 	bl	80114c6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011302:	e023      	b.n	801134c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801130a:	b2db      	uxtb	r3, r3
 801130c:	2b02      	cmp	r3, #2
 801130e:	dc02      	bgt.n	8011316 <USBD_GetConfig+0x2e>
 8011310:	2b00      	cmp	r3, #0
 8011312:	dc03      	bgt.n	801131c <USBD_GetConfig+0x34>
 8011314:	e015      	b.n	8011342 <USBD_GetConfig+0x5a>
 8011316:	2b03      	cmp	r3, #3
 8011318:	d00b      	beq.n	8011332 <USBD_GetConfig+0x4a>
 801131a:	e012      	b.n	8011342 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	2200      	movs	r2, #0
 8011320:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	3308      	adds	r3, #8
 8011326:	2201      	movs	r2, #1
 8011328:	4619      	mov	r1, r3
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f000 f948 	bl	80115c0 <USBD_CtlSendData>
        break;
 8011330:	e00c      	b.n	801134c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	3304      	adds	r3, #4
 8011336:	2201      	movs	r2, #1
 8011338:	4619      	mov	r1, r3
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f000 f940 	bl	80115c0 <USBD_CtlSendData>
        break;
 8011340:	e004      	b.n	801134c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011342:	6839      	ldr	r1, [r7, #0]
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f000 f8be 	bl	80114c6 <USBD_CtlError>
        break;
 801134a:	bf00      	nop
}
 801134c:	bf00      	nop
 801134e:	3708      	adds	r7, #8
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011364:	b2db      	uxtb	r3, r3
 8011366:	3b01      	subs	r3, #1
 8011368:	2b02      	cmp	r3, #2
 801136a:	d81e      	bhi.n	80113aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	88db      	ldrh	r3, [r3, #6]
 8011370:	2b02      	cmp	r3, #2
 8011372:	d004      	beq.n	801137e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011374:	6839      	ldr	r1, [r7, #0]
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f000 f8a5 	bl	80114c6 <USBD_CtlError>
        break;
 801137c:	e01a      	b.n	80113b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2201      	movs	r2, #1
 8011382:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801138a:	2b00      	cmp	r3, #0
 801138c:	d005      	beq.n	801139a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	f043 0202 	orr.w	r2, r3, #2
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	330c      	adds	r3, #12
 801139e:	2202      	movs	r2, #2
 80113a0:	4619      	mov	r1, r3
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f000 f90c 	bl	80115c0 <USBD_CtlSendData>
      break;
 80113a8:	e004      	b.n	80113b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80113aa:	6839      	ldr	r1, [r7, #0]
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f000 f88a 	bl	80114c6 <USBD_CtlError>
      break;
 80113b2:	bf00      	nop
  }
}
 80113b4:	bf00      	nop
 80113b6:	3708      	adds	r7, #8
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}

080113bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	885b      	ldrh	r3, [r3, #2]
 80113ca:	2b01      	cmp	r3, #1
 80113cc:	d107      	bne.n	80113de <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	2201      	movs	r2, #1
 80113d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f000 f94c 	bl	8011674 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80113dc:	e013      	b.n	8011406 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	885b      	ldrh	r3, [r3, #2]
 80113e2:	2b02      	cmp	r3, #2
 80113e4:	d10b      	bne.n	80113fe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	889b      	ldrh	r3, [r3, #4]
 80113ea:	0a1b      	lsrs	r3, r3, #8
 80113ec:	b29b      	uxth	r3, r3
 80113ee:	b2da      	uxtb	r2, r3
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80113f6:	6878      	ldr	r0, [r7, #4]
 80113f8:	f000 f93c 	bl	8011674 <USBD_CtlSendStatus>
}
 80113fc:	e003      	b.n	8011406 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80113fe:	6839      	ldr	r1, [r7, #0]
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f000 f860 	bl	80114c6 <USBD_CtlError>
}
 8011406:	bf00      	nop
 8011408:	3708      	adds	r7, #8
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}

0801140e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801140e:	b580      	push	{r7, lr}
 8011410:	b082      	sub	sp, #8
 8011412:	af00      	add	r7, sp, #0
 8011414:	6078      	str	r0, [r7, #4]
 8011416:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801141e:	b2db      	uxtb	r3, r3
 8011420:	3b01      	subs	r3, #1
 8011422:	2b02      	cmp	r3, #2
 8011424:	d80b      	bhi.n	801143e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	885b      	ldrh	r3, [r3, #2]
 801142a:	2b01      	cmp	r3, #1
 801142c:	d10c      	bne.n	8011448 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	2200      	movs	r2, #0
 8011432:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	f000 f91c 	bl	8011674 <USBD_CtlSendStatus>
      }
      break;
 801143c:	e004      	b.n	8011448 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801143e:	6839      	ldr	r1, [r7, #0]
 8011440:	6878      	ldr	r0, [r7, #4]
 8011442:	f000 f840 	bl	80114c6 <USBD_CtlError>
      break;
 8011446:	e000      	b.n	801144a <USBD_ClrFeature+0x3c>
      break;
 8011448:	bf00      	nop
  }
}
 801144a:	bf00      	nop
 801144c:	3708      	adds	r7, #8
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}

08011452 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011452:	b580      	push	{r7, lr}
 8011454:	b084      	sub	sp, #16
 8011456:	af00      	add	r7, sp, #0
 8011458:	6078      	str	r0, [r7, #4]
 801145a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	781a      	ldrb	r2, [r3, #0]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	3301      	adds	r3, #1
 801146c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	781a      	ldrb	r2, [r3, #0]
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	3301      	adds	r3, #1
 801147a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801147c:	68f8      	ldr	r0, [r7, #12]
 801147e:	f7ff fa16 	bl	80108ae <SWAPBYTE>
 8011482:	4603      	mov	r3, r0
 8011484:	461a      	mov	r2, r3
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	3301      	adds	r3, #1
 801148e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	3301      	adds	r3, #1
 8011494:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011496:	68f8      	ldr	r0, [r7, #12]
 8011498:	f7ff fa09 	bl	80108ae <SWAPBYTE>
 801149c:	4603      	mov	r3, r0
 801149e:	461a      	mov	r2, r3
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	3301      	adds	r3, #1
 80114a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	3301      	adds	r3, #1
 80114ae:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80114b0:	68f8      	ldr	r0, [r7, #12]
 80114b2:	f7ff f9fc 	bl	80108ae <SWAPBYTE>
 80114b6:	4603      	mov	r3, r0
 80114b8:	461a      	mov	r2, r3
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	80da      	strh	r2, [r3, #6]
}
 80114be:	bf00      	nop
 80114c0:	3710      	adds	r7, #16
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}

080114c6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b082      	sub	sp, #8
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	6078      	str	r0, [r7, #4]
 80114ce:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80114d0:	2180      	movs	r1, #128	@ 0x80
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f003 ff94 	bl	8015400 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80114d8:	2100      	movs	r1, #0
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f003 ff90 	bl	8015400 <USBD_LL_StallEP>
}
 80114e0:	bf00      	nop
 80114e2:	3708      	adds	r7, #8
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}

080114e8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b086      	sub	sp, #24
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80114f4:	2300      	movs	r3, #0
 80114f6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d042      	beq.n	8011584 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8011502:	6938      	ldr	r0, [r7, #16]
 8011504:	f000 f842 	bl	801158c <USBD_GetLen>
 8011508:	4603      	mov	r3, r0
 801150a:	3301      	adds	r3, #1
 801150c:	005b      	lsls	r3, r3, #1
 801150e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011512:	d808      	bhi.n	8011526 <USBD_GetString+0x3e>
 8011514:	6938      	ldr	r0, [r7, #16]
 8011516:	f000 f839 	bl	801158c <USBD_GetLen>
 801151a:	4603      	mov	r3, r0
 801151c:	3301      	adds	r3, #1
 801151e:	b29b      	uxth	r3, r3
 8011520:	005b      	lsls	r3, r3, #1
 8011522:	b29a      	uxth	r2, r3
 8011524:	e001      	b.n	801152a <USBD_GetString+0x42>
 8011526:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801152e:	7dfb      	ldrb	r3, [r7, #23]
 8011530:	68ba      	ldr	r2, [r7, #8]
 8011532:	4413      	add	r3, r2
 8011534:	687a      	ldr	r2, [r7, #4]
 8011536:	7812      	ldrb	r2, [r2, #0]
 8011538:	701a      	strb	r2, [r3, #0]
  idx++;
 801153a:	7dfb      	ldrb	r3, [r7, #23]
 801153c:	3301      	adds	r3, #1
 801153e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011540:	7dfb      	ldrb	r3, [r7, #23]
 8011542:	68ba      	ldr	r2, [r7, #8]
 8011544:	4413      	add	r3, r2
 8011546:	2203      	movs	r2, #3
 8011548:	701a      	strb	r2, [r3, #0]
  idx++;
 801154a:	7dfb      	ldrb	r3, [r7, #23]
 801154c:	3301      	adds	r3, #1
 801154e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011550:	e013      	b.n	801157a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8011552:	7dfb      	ldrb	r3, [r7, #23]
 8011554:	68ba      	ldr	r2, [r7, #8]
 8011556:	4413      	add	r3, r2
 8011558:	693a      	ldr	r2, [r7, #16]
 801155a:	7812      	ldrb	r2, [r2, #0]
 801155c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	3301      	adds	r3, #1
 8011562:	613b      	str	r3, [r7, #16]
    idx++;
 8011564:	7dfb      	ldrb	r3, [r7, #23]
 8011566:	3301      	adds	r3, #1
 8011568:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801156a:	7dfb      	ldrb	r3, [r7, #23]
 801156c:	68ba      	ldr	r2, [r7, #8]
 801156e:	4413      	add	r3, r2
 8011570:	2200      	movs	r2, #0
 8011572:	701a      	strb	r2, [r3, #0]
    idx++;
 8011574:	7dfb      	ldrb	r3, [r7, #23]
 8011576:	3301      	adds	r3, #1
 8011578:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	781b      	ldrb	r3, [r3, #0]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d1e7      	bne.n	8011552 <USBD_GetString+0x6a>
 8011582:	e000      	b.n	8011586 <USBD_GetString+0x9e>
    return;
 8011584:	bf00      	nop
  }
}
 8011586:	3718      	adds	r7, #24
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}

0801158c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801158c:	b480      	push	{r7}
 801158e:	b085      	sub	sp, #20
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011594:	2300      	movs	r3, #0
 8011596:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801159c:	e005      	b.n	80115aa <USBD_GetLen+0x1e>
  {
    len++;
 801159e:	7bfb      	ldrb	r3, [r7, #15]
 80115a0:	3301      	adds	r3, #1
 80115a2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	3301      	adds	r3, #1
 80115a8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80115aa:	68bb      	ldr	r3, [r7, #8]
 80115ac:	781b      	ldrb	r3, [r3, #0]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d1f5      	bne.n	801159e <USBD_GetLen+0x12>
  }

  return len;
 80115b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	3714      	adds	r7, #20
 80115b8:	46bd      	mov	sp, r7
 80115ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115be:	4770      	bx	lr

080115c0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b084      	sub	sp, #16
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	60f8      	str	r0, [r7, #12]
 80115c8:	60b9      	str	r1, [r7, #8]
 80115ca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	2202      	movs	r2, #2
 80115d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	687a      	ldr	r2, [r7, #4]
 80115d8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	687a      	ldr	r2, [r7, #4]
 80115de:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	68ba      	ldr	r2, [r7, #8]
 80115e4:	2100      	movs	r1, #0
 80115e6:	68f8      	ldr	r0, [r7, #12]
 80115e8:	f003 ff93 	bl	8015512 <USBD_LL_Transmit>

  return USBD_OK;
 80115ec:	2300      	movs	r3, #0
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3710      	adds	r7, #16
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}

080115f6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80115f6:	b580      	push	{r7, lr}
 80115f8:	b084      	sub	sp, #16
 80115fa:	af00      	add	r7, sp, #0
 80115fc:	60f8      	str	r0, [r7, #12]
 80115fe:	60b9      	str	r1, [r7, #8]
 8011600:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	68ba      	ldr	r2, [r7, #8]
 8011606:	2100      	movs	r1, #0
 8011608:	68f8      	ldr	r0, [r7, #12]
 801160a:	f003 ff82 	bl	8015512 <USBD_LL_Transmit>

  return USBD_OK;
 801160e:	2300      	movs	r3, #0
}
 8011610:	4618      	mov	r0, r3
 8011612:	3710      	adds	r7, #16
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}

08011618 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b084      	sub	sp, #16
 801161c:	af00      	add	r7, sp, #0
 801161e:	60f8      	str	r0, [r7, #12]
 8011620:	60b9      	str	r1, [r7, #8]
 8011622:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	2203      	movs	r2, #3
 8011628:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	687a      	ldr	r2, [r7, #4]
 8011630:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	687a      	ldr	r2, [r7, #4]
 8011638:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	68ba      	ldr	r2, [r7, #8]
 8011640:	2100      	movs	r1, #0
 8011642:	68f8      	ldr	r0, [r7, #12]
 8011644:	f003 ff86 	bl	8015554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011648:	2300      	movs	r3, #0
}
 801164a:	4618      	mov	r0, r3
 801164c:	3710      	adds	r7, #16
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}

08011652 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011652:	b580      	push	{r7, lr}
 8011654:	b084      	sub	sp, #16
 8011656:	af00      	add	r7, sp, #0
 8011658:	60f8      	str	r0, [r7, #12]
 801165a:	60b9      	str	r1, [r7, #8]
 801165c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	68ba      	ldr	r2, [r7, #8]
 8011662:	2100      	movs	r1, #0
 8011664:	68f8      	ldr	r0, [r7, #12]
 8011666:	f003 ff75 	bl	8015554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801166a:	2300      	movs	r3, #0
}
 801166c:	4618      	mov	r0, r3
 801166e:	3710      	adds	r7, #16
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2204      	movs	r2, #4
 8011680:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011684:	2300      	movs	r3, #0
 8011686:	2200      	movs	r2, #0
 8011688:	2100      	movs	r1, #0
 801168a:	6878      	ldr	r0, [r7, #4]
 801168c:	f003 ff41 	bl	8015512 <USBD_LL_Transmit>

  return USBD_OK;
 8011690:	2300      	movs	r3, #0
}
 8011692:	4618      	mov	r0, r3
 8011694:	3708      	adds	r7, #8
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}

0801169a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801169a:	b580      	push	{r7, lr}
 801169c:	b082      	sub	sp, #8
 801169e:	af00      	add	r7, sp, #0
 80116a0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	2205      	movs	r2, #5
 80116a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80116aa:	2300      	movs	r3, #0
 80116ac:	2200      	movs	r2, #0
 80116ae:	2100      	movs	r1, #0
 80116b0:	6878      	ldr	r0, [r7, #4]
 80116b2:	f003 ff4f 	bl	8015554 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80116b6:	2300      	movs	r3, #0
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3708      	adds	r7, #8
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}

080116c0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	4603      	mov	r3, r0
 80116c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80116ca:	79fb      	ldrb	r3, [r7, #7]
 80116cc:	4a08      	ldr	r2, [pc, #32]	@ (80116f0 <disk_status+0x30>)
 80116ce:	009b      	lsls	r3, r3, #2
 80116d0:	4413      	add	r3, r2
 80116d2:	685b      	ldr	r3, [r3, #4]
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	79fa      	ldrb	r2, [r7, #7]
 80116d8:	4905      	ldr	r1, [pc, #20]	@ (80116f0 <disk_status+0x30>)
 80116da:	440a      	add	r2, r1
 80116dc:	7a12      	ldrb	r2, [r2, #8]
 80116de:	4610      	mov	r0, r2
 80116e0:	4798      	blx	r3
 80116e2:	4603      	mov	r3, r0
 80116e4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80116e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3710      	adds	r7, #16
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	24000800 	.word	0x24000800

080116f4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b084      	sub	sp, #16
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	4603      	mov	r3, r0
 80116fc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80116fe:	2300      	movs	r3, #0
 8011700:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011702:	79fb      	ldrb	r3, [r7, #7]
 8011704:	4a0e      	ldr	r2, [pc, #56]	@ (8011740 <disk_initialize+0x4c>)
 8011706:	5cd3      	ldrb	r3, [r2, r3]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d114      	bne.n	8011736 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801170c:	79fb      	ldrb	r3, [r7, #7]
 801170e:	4a0c      	ldr	r2, [pc, #48]	@ (8011740 <disk_initialize+0x4c>)
 8011710:	009b      	lsls	r3, r3, #2
 8011712:	4413      	add	r3, r2
 8011714:	685b      	ldr	r3, [r3, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	79fa      	ldrb	r2, [r7, #7]
 801171a:	4909      	ldr	r1, [pc, #36]	@ (8011740 <disk_initialize+0x4c>)
 801171c:	440a      	add	r2, r1
 801171e:	7a12      	ldrb	r2, [r2, #8]
 8011720:	4610      	mov	r0, r2
 8011722:	4798      	blx	r3
 8011724:	4603      	mov	r3, r0
 8011726:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8011728:	7bfb      	ldrb	r3, [r7, #15]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d103      	bne.n	8011736 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 801172e:	79fb      	ldrb	r3, [r7, #7]
 8011730:	4a03      	ldr	r2, [pc, #12]	@ (8011740 <disk_initialize+0x4c>)
 8011732:	2101      	movs	r1, #1
 8011734:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8011736:	7bfb      	ldrb	r3, [r7, #15]
}
 8011738:	4618      	mov	r0, r3
 801173a:	3710      	adds	r7, #16
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	24000800 	.word	0x24000800

08011744 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011744:	b590      	push	{r4, r7, lr}
 8011746:	b087      	sub	sp, #28
 8011748:	af00      	add	r7, sp, #0
 801174a:	60b9      	str	r1, [r7, #8]
 801174c:	607a      	str	r2, [r7, #4]
 801174e:	603b      	str	r3, [r7, #0]
 8011750:	4603      	mov	r3, r0
 8011752:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011754:	7bfb      	ldrb	r3, [r7, #15]
 8011756:	4a0a      	ldr	r2, [pc, #40]	@ (8011780 <disk_read+0x3c>)
 8011758:	009b      	lsls	r3, r3, #2
 801175a:	4413      	add	r3, r2
 801175c:	685b      	ldr	r3, [r3, #4]
 801175e:	689c      	ldr	r4, [r3, #8]
 8011760:	7bfb      	ldrb	r3, [r7, #15]
 8011762:	4a07      	ldr	r2, [pc, #28]	@ (8011780 <disk_read+0x3c>)
 8011764:	4413      	add	r3, r2
 8011766:	7a18      	ldrb	r0, [r3, #8]
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	687a      	ldr	r2, [r7, #4]
 801176c:	68b9      	ldr	r1, [r7, #8]
 801176e:	47a0      	blx	r4
 8011770:	4603      	mov	r3, r0
 8011772:	75fb      	strb	r3, [r7, #23]
  return res;
 8011774:	7dfb      	ldrb	r3, [r7, #23]
}
 8011776:	4618      	mov	r0, r3
 8011778:	371c      	adds	r7, #28
 801177a:	46bd      	mov	sp, r7
 801177c:	bd90      	pop	{r4, r7, pc}
 801177e:	bf00      	nop
 8011780:	24000800 	.word	0x24000800

08011784 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011784:	b590      	push	{r4, r7, lr}
 8011786:	b087      	sub	sp, #28
 8011788:	af00      	add	r7, sp, #0
 801178a:	60b9      	str	r1, [r7, #8]
 801178c:	607a      	str	r2, [r7, #4]
 801178e:	603b      	str	r3, [r7, #0]
 8011790:	4603      	mov	r3, r0
 8011792:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011794:	7bfb      	ldrb	r3, [r7, #15]
 8011796:	4a0a      	ldr	r2, [pc, #40]	@ (80117c0 <disk_write+0x3c>)
 8011798:	009b      	lsls	r3, r3, #2
 801179a:	4413      	add	r3, r2
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	68dc      	ldr	r4, [r3, #12]
 80117a0:	7bfb      	ldrb	r3, [r7, #15]
 80117a2:	4a07      	ldr	r2, [pc, #28]	@ (80117c0 <disk_write+0x3c>)
 80117a4:	4413      	add	r3, r2
 80117a6:	7a18      	ldrb	r0, [r3, #8]
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	687a      	ldr	r2, [r7, #4]
 80117ac:	68b9      	ldr	r1, [r7, #8]
 80117ae:	47a0      	blx	r4
 80117b0:	4603      	mov	r3, r0
 80117b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80117b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	371c      	adds	r7, #28
 80117ba:	46bd      	mov	sp, r7
 80117bc:	bd90      	pop	{r4, r7, pc}
 80117be:	bf00      	nop
 80117c0:	24000800 	.word	0x24000800

080117c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	4603      	mov	r3, r0
 80117cc:	603a      	str	r2, [r7, #0]
 80117ce:	71fb      	strb	r3, [r7, #7]
 80117d0:	460b      	mov	r3, r1
 80117d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80117d4:	79fb      	ldrb	r3, [r7, #7]
 80117d6:	4a09      	ldr	r2, [pc, #36]	@ (80117fc <disk_ioctl+0x38>)
 80117d8:	009b      	lsls	r3, r3, #2
 80117da:	4413      	add	r3, r2
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	691b      	ldr	r3, [r3, #16]
 80117e0:	79fa      	ldrb	r2, [r7, #7]
 80117e2:	4906      	ldr	r1, [pc, #24]	@ (80117fc <disk_ioctl+0x38>)
 80117e4:	440a      	add	r2, r1
 80117e6:	7a10      	ldrb	r0, [r2, #8]
 80117e8:	79b9      	ldrb	r1, [r7, #6]
 80117ea:	683a      	ldr	r2, [r7, #0]
 80117ec:	4798      	blx	r3
 80117ee:	4603      	mov	r3, r0
 80117f0:	73fb      	strb	r3, [r7, #15]
  return res;
 80117f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3710      	adds	r7, #16
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}
 80117fc:	24000800 	.word	0x24000800

08011800 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011800:	b480      	push	{r7}
 8011802:	b085      	sub	sp, #20
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	3301      	adds	r3, #1
 801180c:	781b      	ldrb	r3, [r3, #0]
 801180e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011810:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011814:	021b      	lsls	r3, r3, #8
 8011816:	b21a      	sxth	r2, r3
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	781b      	ldrb	r3, [r3, #0]
 801181c:	b21b      	sxth	r3, r3
 801181e:	4313      	orrs	r3, r2
 8011820:	b21b      	sxth	r3, r3
 8011822:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011824:	89fb      	ldrh	r3, [r7, #14]
}
 8011826:	4618      	mov	r0, r3
 8011828:	3714      	adds	r7, #20
 801182a:	46bd      	mov	sp, r7
 801182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011830:	4770      	bx	lr

08011832 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011832:	b480      	push	{r7}
 8011834:	b085      	sub	sp, #20
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	3303      	adds	r3, #3
 801183e:	781b      	ldrb	r3, [r3, #0]
 8011840:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	021b      	lsls	r3, r3, #8
 8011846:	687a      	ldr	r2, [r7, #4]
 8011848:	3202      	adds	r2, #2
 801184a:	7812      	ldrb	r2, [r2, #0]
 801184c:	4313      	orrs	r3, r2
 801184e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	021b      	lsls	r3, r3, #8
 8011854:	687a      	ldr	r2, [r7, #4]
 8011856:	3201      	adds	r2, #1
 8011858:	7812      	ldrb	r2, [r2, #0]
 801185a:	4313      	orrs	r3, r2
 801185c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	021b      	lsls	r3, r3, #8
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	7812      	ldrb	r2, [r2, #0]
 8011866:	4313      	orrs	r3, r2
 8011868:	60fb      	str	r3, [r7, #12]
	return rv;
 801186a:	68fb      	ldr	r3, [r7, #12]
}
 801186c:	4618      	mov	r0, r3
 801186e:	3714      	adds	r7, #20
 8011870:	46bd      	mov	sp, r7
 8011872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011876:	4770      	bx	lr

08011878 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011878:	b480      	push	{r7}
 801187a:	b083      	sub	sp, #12
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
 8011880:	460b      	mov	r3, r1
 8011882:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	1c5a      	adds	r2, r3, #1
 8011888:	607a      	str	r2, [r7, #4]
 801188a:	887a      	ldrh	r2, [r7, #2]
 801188c:	b2d2      	uxtb	r2, r2
 801188e:	701a      	strb	r2, [r3, #0]
 8011890:	887b      	ldrh	r3, [r7, #2]
 8011892:	0a1b      	lsrs	r3, r3, #8
 8011894:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	1c5a      	adds	r2, r3, #1
 801189a:	607a      	str	r2, [r7, #4]
 801189c:	887a      	ldrh	r2, [r7, #2]
 801189e:	b2d2      	uxtb	r2, r2
 80118a0:	701a      	strb	r2, [r3, #0]
}
 80118a2:	bf00      	nop
 80118a4:	370c      	adds	r7, #12
 80118a6:	46bd      	mov	sp, r7
 80118a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ac:	4770      	bx	lr

080118ae <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80118ae:	b480      	push	{r7}
 80118b0:	b083      	sub	sp, #12
 80118b2:	af00      	add	r7, sp, #0
 80118b4:	6078      	str	r0, [r7, #4]
 80118b6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	1c5a      	adds	r2, r3, #1
 80118bc:	607a      	str	r2, [r7, #4]
 80118be:	683a      	ldr	r2, [r7, #0]
 80118c0:	b2d2      	uxtb	r2, r2
 80118c2:	701a      	strb	r2, [r3, #0]
 80118c4:	683b      	ldr	r3, [r7, #0]
 80118c6:	0a1b      	lsrs	r3, r3, #8
 80118c8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	1c5a      	adds	r2, r3, #1
 80118ce:	607a      	str	r2, [r7, #4]
 80118d0:	683a      	ldr	r2, [r7, #0]
 80118d2:	b2d2      	uxtb	r2, r2
 80118d4:	701a      	strb	r2, [r3, #0]
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	0a1b      	lsrs	r3, r3, #8
 80118da:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	1c5a      	adds	r2, r3, #1
 80118e0:	607a      	str	r2, [r7, #4]
 80118e2:	683a      	ldr	r2, [r7, #0]
 80118e4:	b2d2      	uxtb	r2, r2
 80118e6:	701a      	strb	r2, [r3, #0]
 80118e8:	683b      	ldr	r3, [r7, #0]
 80118ea:	0a1b      	lsrs	r3, r3, #8
 80118ec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	1c5a      	adds	r2, r3, #1
 80118f2:	607a      	str	r2, [r7, #4]
 80118f4:	683a      	ldr	r2, [r7, #0]
 80118f6:	b2d2      	uxtb	r2, r2
 80118f8:	701a      	strb	r2, [r3, #0]
}
 80118fa:	bf00      	nop
 80118fc:	370c      	adds	r7, #12
 80118fe:	46bd      	mov	sp, r7
 8011900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011904:	4770      	bx	lr

08011906 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011906:	b480      	push	{r7}
 8011908:	b087      	sub	sp, #28
 801190a:	af00      	add	r7, sp, #0
 801190c:	60f8      	str	r0, [r7, #12]
 801190e:	60b9      	str	r1, [r7, #8]
 8011910:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	613b      	str	r3, [r7, #16]

	if (cnt) {
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d00d      	beq.n	801193c <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011920:	693a      	ldr	r2, [r7, #16]
 8011922:	1c53      	adds	r3, r2, #1
 8011924:	613b      	str	r3, [r7, #16]
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	1c59      	adds	r1, r3, #1
 801192a:	6179      	str	r1, [r7, #20]
 801192c:	7812      	ldrb	r2, [r2, #0]
 801192e:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	3b01      	subs	r3, #1
 8011934:	607b      	str	r3, [r7, #4]
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d1f1      	bne.n	8011920 <mem_cpy+0x1a>
	}
}
 801193c:	bf00      	nop
 801193e:	371c      	adds	r7, #28
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011948:	b480      	push	{r7}
 801194a:	b087      	sub	sp, #28
 801194c:	af00      	add	r7, sp, #0
 801194e:	60f8      	str	r0, [r7, #12]
 8011950:	60b9      	str	r1, [r7, #8]
 8011952:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011958:	697b      	ldr	r3, [r7, #20]
 801195a:	1c5a      	adds	r2, r3, #1
 801195c:	617a      	str	r2, [r7, #20]
 801195e:	68ba      	ldr	r2, [r7, #8]
 8011960:	b2d2      	uxtb	r2, r2
 8011962:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	3b01      	subs	r3, #1
 8011968:	607b      	str	r3, [r7, #4]
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d1f3      	bne.n	8011958 <mem_set+0x10>
}
 8011970:	bf00      	nop
 8011972:	bf00      	nop
 8011974:	371c      	adds	r7, #28
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr

0801197e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801197e:	b480      	push	{r7}
 8011980:	b089      	sub	sp, #36	@ 0x24
 8011982:	af00      	add	r7, sp, #0
 8011984:	60f8      	str	r0, [r7, #12]
 8011986:	60b9      	str	r1, [r7, #8]
 8011988:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	61fb      	str	r3, [r7, #28]
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011992:	2300      	movs	r3, #0
 8011994:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011996:	69fb      	ldr	r3, [r7, #28]
 8011998:	1c5a      	adds	r2, r3, #1
 801199a:	61fa      	str	r2, [r7, #28]
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	4619      	mov	r1, r3
 80119a0:	69bb      	ldr	r3, [r7, #24]
 80119a2:	1c5a      	adds	r2, r3, #1
 80119a4:	61ba      	str	r2, [r7, #24]
 80119a6:	781b      	ldrb	r3, [r3, #0]
 80119a8:	1acb      	subs	r3, r1, r3
 80119aa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	3b01      	subs	r3, #1
 80119b0:	607b      	str	r3, [r7, #4]
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d002      	beq.n	80119be <mem_cmp+0x40>
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d0eb      	beq.n	8011996 <mem_cmp+0x18>

	return r;
 80119be:	697b      	ldr	r3, [r7, #20]
}
 80119c0:	4618      	mov	r0, r3
 80119c2:	3724      	adds	r7, #36	@ 0x24
 80119c4:	46bd      	mov	sp, r7
 80119c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ca:	4770      	bx	lr

080119cc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80119cc:	b480      	push	{r7}
 80119ce:	b083      	sub	sp, #12
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
 80119d4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80119d6:	e002      	b.n	80119de <chk_chr+0x12>
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	3301      	adds	r3, #1
 80119dc:	607b      	str	r3, [r7, #4]
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	781b      	ldrb	r3, [r3, #0]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d005      	beq.n	80119f2 <chk_chr+0x26>
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	781b      	ldrb	r3, [r3, #0]
 80119ea:	461a      	mov	r2, r3
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	4293      	cmp	r3, r2
 80119f0:	d1f2      	bne.n	80119d8 <chk_chr+0xc>
	return *str;
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	781b      	ldrb	r3, [r3, #0]
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	370c      	adds	r7, #12
 80119fa:	46bd      	mov	sp, r7
 80119fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a00:	4770      	bx	lr
	...

08011a04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011a04:	b480      	push	{r7}
 8011a06:	b085      	sub	sp, #20
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
 8011a0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011a0e:	2300      	movs	r3, #0
 8011a10:	60bb      	str	r3, [r7, #8]
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	60fb      	str	r3, [r7, #12]
 8011a16:	e029      	b.n	8011a6c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011a18:	4a27      	ldr	r2, [pc, #156]	@ (8011ab8 <chk_lock+0xb4>)
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	011b      	lsls	r3, r3, #4
 8011a1e:	4413      	add	r3, r2
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d01d      	beq.n	8011a62 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011a26:	4a24      	ldr	r2, [pc, #144]	@ (8011ab8 <chk_lock+0xb4>)
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	011b      	lsls	r3, r3, #4
 8011a2c:	4413      	add	r3, r2
 8011a2e:	681a      	ldr	r2, [r3, #0]
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d116      	bne.n	8011a66 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011a38:	4a1f      	ldr	r2, [pc, #124]	@ (8011ab8 <chk_lock+0xb4>)
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	011b      	lsls	r3, r3, #4
 8011a3e:	4413      	add	r3, r2
 8011a40:	3304      	adds	r3, #4
 8011a42:	681a      	ldr	r2, [r3, #0]
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d10c      	bne.n	8011a66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8011ab8 <chk_lock+0xb4>)
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	011b      	lsls	r3, r3, #4
 8011a52:	4413      	add	r3, r2
 8011a54:	3308      	adds	r3, #8
 8011a56:	681a      	ldr	r2, [r3, #0]
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d102      	bne.n	8011a66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011a60:	e007      	b.n	8011a72 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011a62:	2301      	movs	r3, #1
 8011a64:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	3301      	adds	r3, #1
 8011a6a:	60fb      	str	r3, [r7, #12]
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d9d2      	bls.n	8011a18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	2b02      	cmp	r3, #2
 8011a76:	d109      	bne.n	8011a8c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d102      	bne.n	8011a84 <chk_lock+0x80>
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	2b02      	cmp	r3, #2
 8011a82:	d101      	bne.n	8011a88 <chk_lock+0x84>
 8011a84:	2300      	movs	r3, #0
 8011a86:	e010      	b.n	8011aaa <chk_lock+0xa6>
 8011a88:	2312      	movs	r3, #18
 8011a8a:	e00e      	b.n	8011aaa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d108      	bne.n	8011aa4 <chk_lock+0xa0>
 8011a92:	4a09      	ldr	r2, [pc, #36]	@ (8011ab8 <chk_lock+0xb4>)
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	011b      	lsls	r3, r3, #4
 8011a98:	4413      	add	r3, r2
 8011a9a:	330c      	adds	r3, #12
 8011a9c:	881b      	ldrh	r3, [r3, #0]
 8011a9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011aa2:	d101      	bne.n	8011aa8 <chk_lock+0xa4>
 8011aa4:	2310      	movs	r3, #16
 8011aa6:	e000      	b.n	8011aaa <chk_lock+0xa6>
 8011aa8:	2300      	movs	r3, #0
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3714      	adds	r7, #20
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab4:	4770      	bx	lr
 8011ab6:	bf00      	nop
 8011ab8:	240005e0 	.word	0x240005e0

08011abc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011abc:	b480      	push	{r7}
 8011abe:	b083      	sub	sp, #12
 8011ac0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	607b      	str	r3, [r7, #4]
 8011ac6:	e002      	b.n	8011ace <enq_lock+0x12>
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	3301      	adds	r3, #1
 8011acc:	607b      	str	r3, [r7, #4]
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	2b01      	cmp	r3, #1
 8011ad2:	d806      	bhi.n	8011ae2 <enq_lock+0x26>
 8011ad4:	4a09      	ldr	r2, [pc, #36]	@ (8011afc <enq_lock+0x40>)
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	011b      	lsls	r3, r3, #4
 8011ada:	4413      	add	r3, r2
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d1f2      	bne.n	8011ac8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2b02      	cmp	r3, #2
 8011ae6:	bf14      	ite	ne
 8011ae8:	2301      	movne	r3, #1
 8011aea:	2300      	moveq	r3, #0
 8011aec:	b2db      	uxtb	r3, r3
}
 8011aee:	4618      	mov	r0, r3
 8011af0:	370c      	adds	r7, #12
 8011af2:	46bd      	mov	sp, r7
 8011af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011af8:	4770      	bx	lr
 8011afa:	bf00      	nop
 8011afc:	240005e0 	.word	0x240005e0

08011b00 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011b00:	b480      	push	{r7}
 8011b02:	b085      	sub	sp, #20
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
 8011b08:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011b0a:	2300      	movs	r3, #0
 8011b0c:	60fb      	str	r3, [r7, #12]
 8011b0e:	e01f      	b.n	8011b50 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011b10:	4a41      	ldr	r2, [pc, #260]	@ (8011c18 <inc_lock+0x118>)
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	011b      	lsls	r3, r3, #4
 8011b16:	4413      	add	r3, r2
 8011b18:	681a      	ldr	r2, [r3, #0]
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d113      	bne.n	8011b4a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011b22:	4a3d      	ldr	r2, [pc, #244]	@ (8011c18 <inc_lock+0x118>)
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	011b      	lsls	r3, r3, #4
 8011b28:	4413      	add	r3, r2
 8011b2a:	3304      	adds	r3, #4
 8011b2c:	681a      	ldr	r2, [r3, #0]
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d109      	bne.n	8011b4a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011b36:	4a38      	ldr	r2, [pc, #224]	@ (8011c18 <inc_lock+0x118>)
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	011b      	lsls	r3, r3, #4
 8011b3c:	4413      	add	r3, r2
 8011b3e:	3308      	adds	r3, #8
 8011b40:	681a      	ldr	r2, [r3, #0]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d006      	beq.n	8011b58 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	60fb      	str	r3, [r7, #12]
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d9dc      	bls.n	8011b10 <inc_lock+0x10>
 8011b56:	e000      	b.n	8011b5a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011b58:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	2b02      	cmp	r3, #2
 8011b5e:	d132      	bne.n	8011bc6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011b60:	2300      	movs	r3, #0
 8011b62:	60fb      	str	r3, [r7, #12]
 8011b64:	e002      	b.n	8011b6c <inc_lock+0x6c>
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	3301      	adds	r3, #1
 8011b6a:	60fb      	str	r3, [r7, #12]
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	2b01      	cmp	r3, #1
 8011b70:	d806      	bhi.n	8011b80 <inc_lock+0x80>
 8011b72:	4a29      	ldr	r2, [pc, #164]	@ (8011c18 <inc_lock+0x118>)
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	011b      	lsls	r3, r3, #4
 8011b78:	4413      	add	r3, r2
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d1f2      	bne.n	8011b66 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	2b02      	cmp	r3, #2
 8011b84:	d101      	bne.n	8011b8a <inc_lock+0x8a>
 8011b86:	2300      	movs	r3, #0
 8011b88:	e040      	b.n	8011c0c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681a      	ldr	r2, [r3, #0]
 8011b8e:	4922      	ldr	r1, [pc, #136]	@ (8011c18 <inc_lock+0x118>)
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	011b      	lsls	r3, r3, #4
 8011b94:	440b      	add	r3, r1
 8011b96:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	689a      	ldr	r2, [r3, #8]
 8011b9c:	491e      	ldr	r1, [pc, #120]	@ (8011c18 <inc_lock+0x118>)
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	011b      	lsls	r3, r3, #4
 8011ba2:	440b      	add	r3, r1
 8011ba4:	3304      	adds	r3, #4
 8011ba6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	695a      	ldr	r2, [r3, #20]
 8011bac:	491a      	ldr	r1, [pc, #104]	@ (8011c18 <inc_lock+0x118>)
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	011b      	lsls	r3, r3, #4
 8011bb2:	440b      	add	r3, r1
 8011bb4:	3308      	adds	r3, #8
 8011bb6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011bb8:	4a17      	ldr	r2, [pc, #92]	@ (8011c18 <inc_lock+0x118>)
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	011b      	lsls	r3, r3, #4
 8011bbe:	4413      	add	r3, r2
 8011bc0:	330c      	adds	r3, #12
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d009      	beq.n	8011be0 <inc_lock+0xe0>
 8011bcc:	4a12      	ldr	r2, [pc, #72]	@ (8011c18 <inc_lock+0x118>)
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	011b      	lsls	r3, r3, #4
 8011bd2:	4413      	add	r3, r2
 8011bd4:	330c      	adds	r3, #12
 8011bd6:	881b      	ldrh	r3, [r3, #0]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d001      	beq.n	8011be0 <inc_lock+0xe0>
 8011bdc:	2300      	movs	r3, #0
 8011bde:	e015      	b.n	8011c0c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d108      	bne.n	8011bf8 <inc_lock+0xf8>
 8011be6:	4a0c      	ldr	r2, [pc, #48]	@ (8011c18 <inc_lock+0x118>)
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	011b      	lsls	r3, r3, #4
 8011bec:	4413      	add	r3, r2
 8011bee:	330c      	adds	r3, #12
 8011bf0:	881b      	ldrh	r3, [r3, #0]
 8011bf2:	3301      	adds	r3, #1
 8011bf4:	b29a      	uxth	r2, r3
 8011bf6:	e001      	b.n	8011bfc <inc_lock+0xfc>
 8011bf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011bfc:	4906      	ldr	r1, [pc, #24]	@ (8011c18 <inc_lock+0x118>)
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	011b      	lsls	r3, r3, #4
 8011c02:	440b      	add	r3, r1
 8011c04:	330c      	adds	r3, #12
 8011c06:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	3301      	adds	r3, #1
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3714      	adds	r7, #20
 8011c10:	46bd      	mov	sp, r7
 8011c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c16:	4770      	bx	lr
 8011c18:	240005e0 	.word	0x240005e0

08011c1c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b085      	sub	sp, #20
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	3b01      	subs	r3, #1
 8011c28:	607b      	str	r3, [r7, #4]
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	2b01      	cmp	r3, #1
 8011c2e:	d825      	bhi.n	8011c7c <dec_lock+0x60>
		n = Files[i].ctr;
 8011c30:	4a17      	ldr	r2, [pc, #92]	@ (8011c90 <dec_lock+0x74>)
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	011b      	lsls	r3, r3, #4
 8011c36:	4413      	add	r3, r2
 8011c38:	330c      	adds	r3, #12
 8011c3a:	881b      	ldrh	r3, [r3, #0]
 8011c3c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011c3e:	89fb      	ldrh	r3, [r7, #14]
 8011c40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c44:	d101      	bne.n	8011c4a <dec_lock+0x2e>
 8011c46:	2300      	movs	r3, #0
 8011c48:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011c4a:	89fb      	ldrh	r3, [r7, #14]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d002      	beq.n	8011c56 <dec_lock+0x3a>
 8011c50:	89fb      	ldrh	r3, [r7, #14]
 8011c52:	3b01      	subs	r3, #1
 8011c54:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011c56:	4a0e      	ldr	r2, [pc, #56]	@ (8011c90 <dec_lock+0x74>)
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	011b      	lsls	r3, r3, #4
 8011c5c:	4413      	add	r3, r2
 8011c5e:	330c      	adds	r3, #12
 8011c60:	89fa      	ldrh	r2, [r7, #14]
 8011c62:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011c64:	89fb      	ldrh	r3, [r7, #14]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d105      	bne.n	8011c76 <dec_lock+0x5a>
 8011c6a:	4a09      	ldr	r2, [pc, #36]	@ (8011c90 <dec_lock+0x74>)
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	011b      	lsls	r3, r3, #4
 8011c70:	4413      	add	r3, r2
 8011c72:	2200      	movs	r2, #0
 8011c74:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011c76:	2300      	movs	r3, #0
 8011c78:	737b      	strb	r3, [r7, #13]
 8011c7a:	e001      	b.n	8011c80 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011c7c:	2302      	movs	r3, #2
 8011c7e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011c80:	7b7b      	ldrb	r3, [r7, #13]
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	3714      	adds	r7, #20
 8011c86:	46bd      	mov	sp, r7
 8011c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8c:	4770      	bx	lr
 8011c8e:	bf00      	nop
 8011c90:	240005e0 	.word	0x240005e0

08011c94 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011c94:	b480      	push	{r7}
 8011c96:	b085      	sub	sp, #20
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	60fb      	str	r3, [r7, #12]
 8011ca0:	e010      	b.n	8011cc4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011ca2:	4a0d      	ldr	r2, [pc, #52]	@ (8011cd8 <clear_lock+0x44>)
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	011b      	lsls	r3, r3, #4
 8011ca8:	4413      	add	r3, r2
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d105      	bne.n	8011cbe <clear_lock+0x2a>
 8011cb2:	4a09      	ldr	r2, [pc, #36]	@ (8011cd8 <clear_lock+0x44>)
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	011b      	lsls	r3, r3, #4
 8011cb8:	4413      	add	r3, r2
 8011cba:	2200      	movs	r2, #0
 8011cbc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	3301      	adds	r3, #1
 8011cc2:	60fb      	str	r3, [r7, #12]
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d9eb      	bls.n	8011ca2 <clear_lock+0xe>
	}
}
 8011cca:	bf00      	nop
 8011ccc:	bf00      	nop
 8011cce:	3714      	adds	r7, #20
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd6:	4770      	bx	lr
 8011cd8:	240005e0 	.word	0x240005e0

08011cdc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b086      	sub	sp, #24
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011ce4:	2300      	movs	r3, #0
 8011ce6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	78db      	ldrb	r3, [r3, #3]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d034      	beq.n	8011d5a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011cf4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	7858      	ldrb	r0, [r3, #1]
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011d00:	2301      	movs	r3, #1
 8011d02:	697a      	ldr	r2, [r7, #20]
 8011d04:	f7ff fd3e 	bl	8011784 <disk_write>
 8011d08:	4603      	mov	r3, r0
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d002      	beq.n	8011d14 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011d0e:	2301      	movs	r3, #1
 8011d10:	73fb      	strb	r3, [r7, #15]
 8011d12:	e022      	b.n	8011d5a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2200      	movs	r2, #0
 8011d18:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d1e:	697a      	ldr	r2, [r7, #20]
 8011d20:	1ad2      	subs	r2, r2, r3
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6a1b      	ldr	r3, [r3, #32]
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d217      	bcs.n	8011d5a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	789b      	ldrb	r3, [r3, #2]
 8011d2e:	613b      	str	r3, [r7, #16]
 8011d30:	e010      	b.n	8011d54 <sync_window+0x78>
					wsect += fs->fsize;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	6a1b      	ldr	r3, [r3, #32]
 8011d36:	697a      	ldr	r2, [r7, #20]
 8011d38:	4413      	add	r3, r2
 8011d3a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	7858      	ldrb	r0, [r3, #1]
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011d46:	2301      	movs	r3, #1
 8011d48:	697a      	ldr	r2, [r7, #20]
 8011d4a:	f7ff fd1b 	bl	8011784 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	3b01      	subs	r3, #1
 8011d52:	613b      	str	r3, [r7, #16]
 8011d54:	693b      	ldr	r3, [r7, #16]
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d8eb      	bhi.n	8011d32 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	3718      	adds	r7, #24
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}

08011d64 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b084      	sub	sp, #16
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d76:	683a      	ldr	r2, [r7, #0]
 8011d78:	429a      	cmp	r2, r3
 8011d7a:	d01b      	beq.n	8011db4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f7ff ffad 	bl	8011cdc <sync_window>
 8011d82:	4603      	mov	r3, r0
 8011d84:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011d86:	7bfb      	ldrb	r3, [r7, #15]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d113      	bne.n	8011db4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	7858      	ldrb	r0, [r3, #1]
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011d96:	2301      	movs	r3, #1
 8011d98:	683a      	ldr	r2, [r7, #0]
 8011d9a:	f7ff fcd3 	bl	8011744 <disk_read>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d004      	beq.n	8011dae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011da4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011da8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011daa:	2301      	movs	r3, #1
 8011dac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	683a      	ldr	r2, [r7, #0]
 8011db2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8011db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011db6:	4618      	mov	r0, r3
 8011db8:	3710      	adds	r7, #16
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
	...

08011dc0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b084      	sub	sp, #16
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f7ff ff87 	bl	8011cdc <sync_window>
 8011dce:	4603      	mov	r3, r0
 8011dd0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011dd2:	7bfb      	ldrb	r3, [r7, #15]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d159      	bne.n	8011e8c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	2b03      	cmp	r3, #3
 8011dde:	d149      	bne.n	8011e74 <sync_fs+0xb4>
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	791b      	ldrb	r3, [r3, #4]
 8011de4:	2b01      	cmp	r3, #1
 8011de6:	d145      	bne.n	8011e74 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	899b      	ldrh	r3, [r3, #12]
 8011df2:	461a      	mov	r2, r3
 8011df4:	2100      	movs	r1, #0
 8011df6:	f7ff fda7 	bl	8011948 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	3338      	adds	r3, #56	@ 0x38
 8011dfe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8011e02:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7ff fd36 	bl	8011878 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	3338      	adds	r3, #56	@ 0x38
 8011e10:	4921      	ldr	r1, [pc, #132]	@ (8011e98 <sync_fs+0xd8>)
 8011e12:	4618      	mov	r0, r3
 8011e14:	f7ff fd4b 	bl	80118ae <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	3338      	adds	r3, #56	@ 0x38
 8011e1c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8011e20:	491e      	ldr	r1, [pc, #120]	@ (8011e9c <sync_fs+0xdc>)
 8011e22:	4618      	mov	r0, r3
 8011e24:	f7ff fd43 	bl	80118ae <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	3338      	adds	r3, #56	@ 0x38
 8011e2c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	699b      	ldr	r3, [r3, #24]
 8011e34:	4619      	mov	r1, r3
 8011e36:	4610      	mov	r0, r2
 8011e38:	f7ff fd39 	bl	80118ae <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	3338      	adds	r3, #56	@ 0x38
 8011e40:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	695b      	ldr	r3, [r3, #20]
 8011e48:	4619      	mov	r1, r3
 8011e4a:	4610      	mov	r0, r2
 8011e4c:	f7ff fd2f 	bl	80118ae <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e54:	1c5a      	adds	r2, r3, #1
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	7858      	ldrb	r0, [r3, #1]
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011e68:	2301      	movs	r3, #1
 8011e6a:	f7ff fc8b 	bl	8011784 <disk_write>
			fs->fsi_flag = 0;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2200      	movs	r2, #0
 8011e72:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	785b      	ldrb	r3, [r3, #1]
 8011e78:	2200      	movs	r2, #0
 8011e7a:	2100      	movs	r1, #0
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7ff fca1 	bl	80117c4 <disk_ioctl>
 8011e82:	4603      	mov	r3, r0
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d001      	beq.n	8011e8c <sync_fs+0xcc>
 8011e88:	2301      	movs	r3, #1
 8011e8a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3710      	adds	r7, #16
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}
 8011e96:	bf00      	nop
 8011e98:	41615252 	.word	0x41615252
 8011e9c:	61417272 	.word	0x61417272

08011ea0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	b083      	sub	sp, #12
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	3b02      	subs	r3, #2
 8011eae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	69db      	ldr	r3, [r3, #28]
 8011eb4:	3b02      	subs	r3, #2
 8011eb6:	683a      	ldr	r2, [r7, #0]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d301      	bcc.n	8011ec0 <clust2sect+0x20>
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	e008      	b.n	8011ed2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	895b      	ldrh	r3, [r3, #10]
 8011ec4:	461a      	mov	r2, r3
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	fb03 f202 	mul.w	r2, r3, r2
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ed0:	4413      	add	r3, r2
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	370c      	adds	r7, #12
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011edc:	4770      	bx	lr

08011ede <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011ede:	b580      	push	{r7, lr}
 8011ee0:	b086      	sub	sp, #24
 8011ee2:	af00      	add	r7, sp, #0
 8011ee4:	6078      	str	r0, [r7, #4]
 8011ee6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	2b01      	cmp	r3, #1
 8011ef2:	d904      	bls.n	8011efe <get_fat+0x20>
 8011ef4:	693b      	ldr	r3, [r7, #16]
 8011ef6:	69db      	ldr	r3, [r3, #28]
 8011ef8:	683a      	ldr	r2, [r7, #0]
 8011efa:	429a      	cmp	r2, r3
 8011efc:	d302      	bcc.n	8011f04 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011efe:	2301      	movs	r3, #1
 8011f00:	617b      	str	r3, [r7, #20]
 8011f02:	e0ba      	b.n	801207a <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011f04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011f08:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	2b03      	cmp	r3, #3
 8011f10:	f000 8082 	beq.w	8012018 <get_fat+0x13a>
 8011f14:	2b03      	cmp	r3, #3
 8011f16:	f300 80a6 	bgt.w	8012066 <get_fat+0x188>
 8011f1a:	2b01      	cmp	r3, #1
 8011f1c:	d002      	beq.n	8011f24 <get_fat+0x46>
 8011f1e:	2b02      	cmp	r3, #2
 8011f20:	d055      	beq.n	8011fce <get_fat+0xf0>
 8011f22:	e0a0      	b.n	8012066 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011f24:	683b      	ldr	r3, [r7, #0]
 8011f26:	60fb      	str	r3, [r7, #12]
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	085b      	lsrs	r3, r3, #1
 8011f2c:	68fa      	ldr	r2, [r7, #12]
 8011f2e:	4413      	add	r3, r2
 8011f30:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	899b      	ldrh	r3, [r3, #12]
 8011f3a:	4619      	mov	r1, r3
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f42:	4413      	add	r3, r2
 8011f44:	4619      	mov	r1, r3
 8011f46:	6938      	ldr	r0, [r7, #16]
 8011f48:	f7ff ff0c 	bl	8011d64 <move_window>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	f040 808c 	bne.w	801206c <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	1c5a      	adds	r2, r3, #1
 8011f58:	60fa      	str	r2, [r7, #12]
 8011f5a:	693a      	ldr	r2, [r7, #16]
 8011f5c:	8992      	ldrh	r2, [r2, #12]
 8011f5e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f62:	fb01 f202 	mul.w	r2, r1, r2
 8011f66:	1a9b      	subs	r3, r3, r2
 8011f68:	693a      	ldr	r2, [r7, #16]
 8011f6a:	4413      	add	r3, r2
 8011f6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011f70:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011f72:	693b      	ldr	r3, [r7, #16]
 8011f74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011f76:	693b      	ldr	r3, [r7, #16]
 8011f78:	899b      	ldrh	r3, [r3, #12]
 8011f7a:	4619      	mov	r1, r3
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f82:	4413      	add	r3, r2
 8011f84:	4619      	mov	r1, r3
 8011f86:	6938      	ldr	r0, [r7, #16]
 8011f88:	f7ff feec 	bl	8011d64 <move_window>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d16e      	bne.n	8012070 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011f92:	693b      	ldr	r3, [r7, #16]
 8011f94:	899b      	ldrh	r3, [r3, #12]
 8011f96:	461a      	mov	r2, r3
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f9e:	fb01 f202 	mul.w	r2, r1, r2
 8011fa2:	1a9b      	subs	r3, r3, r2
 8011fa4:	693a      	ldr	r2, [r7, #16]
 8011fa6:	4413      	add	r3, r2
 8011fa8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8011fac:	021b      	lsls	r3, r3, #8
 8011fae:	68ba      	ldr	r2, [r7, #8]
 8011fb0:	4313      	orrs	r3, r2
 8011fb2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	f003 0301 	and.w	r3, r3, #1
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d002      	beq.n	8011fc4 <get_fat+0xe6>
 8011fbe:	68bb      	ldr	r3, [r7, #8]
 8011fc0:	091b      	lsrs	r3, r3, #4
 8011fc2:	e002      	b.n	8011fca <get_fat+0xec>
 8011fc4:	68bb      	ldr	r3, [r7, #8]
 8011fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011fca:	617b      	str	r3, [r7, #20]
			break;
 8011fcc:	e055      	b.n	801207a <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011fce:	693b      	ldr	r3, [r7, #16]
 8011fd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011fd2:	693b      	ldr	r3, [r7, #16]
 8011fd4:	899b      	ldrh	r3, [r3, #12]
 8011fd6:	085b      	lsrs	r3, r3, #1
 8011fd8:	b29b      	uxth	r3, r3
 8011fda:	4619      	mov	r1, r3
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fe2:	4413      	add	r3, r2
 8011fe4:	4619      	mov	r1, r3
 8011fe6:	6938      	ldr	r0, [r7, #16]
 8011fe8:	f7ff febc 	bl	8011d64 <move_window>
 8011fec:	4603      	mov	r3, r0
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d140      	bne.n	8012074 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011ff2:	693b      	ldr	r3, [r7, #16]
 8011ff4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	005b      	lsls	r3, r3, #1
 8011ffc:	693a      	ldr	r2, [r7, #16]
 8011ffe:	8992      	ldrh	r2, [r2, #12]
 8012000:	fbb3 f0f2 	udiv	r0, r3, r2
 8012004:	fb00 f202 	mul.w	r2, r0, r2
 8012008:	1a9b      	subs	r3, r3, r2
 801200a:	440b      	add	r3, r1
 801200c:	4618      	mov	r0, r3
 801200e:	f7ff fbf7 	bl	8011800 <ld_word>
 8012012:	4603      	mov	r3, r0
 8012014:	617b      	str	r3, [r7, #20]
			break;
 8012016:	e030      	b.n	801207a <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012018:	693b      	ldr	r3, [r7, #16]
 801201a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801201c:	693b      	ldr	r3, [r7, #16]
 801201e:	899b      	ldrh	r3, [r3, #12]
 8012020:	089b      	lsrs	r3, r3, #2
 8012022:	b29b      	uxth	r3, r3
 8012024:	4619      	mov	r1, r3
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	fbb3 f3f1 	udiv	r3, r3, r1
 801202c:	4413      	add	r3, r2
 801202e:	4619      	mov	r1, r3
 8012030:	6938      	ldr	r0, [r7, #16]
 8012032:	f7ff fe97 	bl	8011d64 <move_window>
 8012036:	4603      	mov	r3, r0
 8012038:	2b00      	cmp	r3, #0
 801203a:	d11d      	bne.n	8012078 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	009b      	lsls	r3, r3, #2
 8012046:	693a      	ldr	r2, [r7, #16]
 8012048:	8992      	ldrh	r2, [r2, #12]
 801204a:	fbb3 f0f2 	udiv	r0, r3, r2
 801204e:	fb00 f202 	mul.w	r2, r0, r2
 8012052:	1a9b      	subs	r3, r3, r2
 8012054:	440b      	add	r3, r1
 8012056:	4618      	mov	r0, r3
 8012058:	f7ff fbeb 	bl	8011832 <ld_dword>
 801205c:	4603      	mov	r3, r0
 801205e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8012062:	617b      	str	r3, [r7, #20]
			break;
 8012064:	e009      	b.n	801207a <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012066:	2301      	movs	r3, #1
 8012068:	617b      	str	r3, [r7, #20]
 801206a:	e006      	b.n	801207a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801206c:	bf00      	nop
 801206e:	e004      	b.n	801207a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012070:	bf00      	nop
 8012072:	e002      	b.n	801207a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012074:	bf00      	nop
 8012076:	e000      	b.n	801207a <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012078:	bf00      	nop
		}
	}

	return val;
 801207a:	697b      	ldr	r3, [r7, #20]
}
 801207c:	4618      	mov	r0, r3
 801207e:	3718      	adds	r7, #24
 8012080:	46bd      	mov	sp, r7
 8012082:	bd80      	pop	{r7, pc}

08012084 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8012084:	b590      	push	{r4, r7, lr}
 8012086:	b089      	sub	sp, #36	@ 0x24
 8012088:	af00      	add	r7, sp, #0
 801208a:	60f8      	str	r0, [r7, #12]
 801208c:	60b9      	str	r1, [r7, #8]
 801208e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012090:	2302      	movs	r3, #2
 8012092:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	2b01      	cmp	r3, #1
 8012098:	f240 8109 	bls.w	80122ae <put_fat+0x22a>
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	69db      	ldr	r3, [r3, #28]
 80120a0:	68ba      	ldr	r2, [r7, #8]
 80120a2:	429a      	cmp	r2, r3
 80120a4:	f080 8103 	bcs.w	80122ae <put_fat+0x22a>
		switch (fs->fs_type) {
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	781b      	ldrb	r3, [r3, #0]
 80120ac:	2b03      	cmp	r3, #3
 80120ae:	f000 80b6 	beq.w	801221e <put_fat+0x19a>
 80120b2:	2b03      	cmp	r3, #3
 80120b4:	f300 80fb 	bgt.w	80122ae <put_fat+0x22a>
 80120b8:	2b01      	cmp	r3, #1
 80120ba:	d003      	beq.n	80120c4 <put_fat+0x40>
 80120bc:	2b02      	cmp	r3, #2
 80120be:	f000 8083 	beq.w	80121c8 <put_fat+0x144>
 80120c2:	e0f4      	b.n	80122ae <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	61bb      	str	r3, [r7, #24]
 80120c8:	69bb      	ldr	r3, [r7, #24]
 80120ca:	085b      	lsrs	r3, r3, #1
 80120cc:	69ba      	ldr	r2, [r7, #24]
 80120ce:	4413      	add	r3, r2
 80120d0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	899b      	ldrh	r3, [r3, #12]
 80120da:	4619      	mov	r1, r3
 80120dc:	69bb      	ldr	r3, [r7, #24]
 80120de:	fbb3 f3f1 	udiv	r3, r3, r1
 80120e2:	4413      	add	r3, r2
 80120e4:	4619      	mov	r1, r3
 80120e6:	68f8      	ldr	r0, [r7, #12]
 80120e8:	f7ff fe3c 	bl	8011d64 <move_window>
 80120ec:	4603      	mov	r3, r0
 80120ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80120f0:	7ffb      	ldrb	r3, [r7, #31]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	f040 80d4 	bne.w	80122a0 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80120fe:	69bb      	ldr	r3, [r7, #24]
 8012100:	1c5a      	adds	r2, r3, #1
 8012102:	61ba      	str	r2, [r7, #24]
 8012104:	68fa      	ldr	r2, [r7, #12]
 8012106:	8992      	ldrh	r2, [r2, #12]
 8012108:	fbb3 f0f2 	udiv	r0, r3, r2
 801210c:	fb00 f202 	mul.w	r2, r0, r2
 8012110:	1a9b      	subs	r3, r3, r2
 8012112:	440b      	add	r3, r1
 8012114:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	f003 0301 	and.w	r3, r3, #1
 801211c:	2b00      	cmp	r3, #0
 801211e:	d00d      	beq.n	801213c <put_fat+0xb8>
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	b25b      	sxtb	r3, r3
 8012126:	f003 030f 	and.w	r3, r3, #15
 801212a:	b25a      	sxtb	r2, r3
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	b25b      	sxtb	r3, r3
 8012130:	011b      	lsls	r3, r3, #4
 8012132:	b25b      	sxtb	r3, r3
 8012134:	4313      	orrs	r3, r2
 8012136:	b25b      	sxtb	r3, r3
 8012138:	b2db      	uxtb	r3, r3
 801213a:	e001      	b.n	8012140 <put_fat+0xbc>
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	b2db      	uxtb	r3, r3
 8012140:	697a      	ldr	r2, [r7, #20]
 8012142:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	2201      	movs	r2, #1
 8012148:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	899b      	ldrh	r3, [r3, #12]
 8012152:	4619      	mov	r1, r3
 8012154:	69bb      	ldr	r3, [r7, #24]
 8012156:	fbb3 f3f1 	udiv	r3, r3, r1
 801215a:	4413      	add	r3, r2
 801215c:	4619      	mov	r1, r3
 801215e:	68f8      	ldr	r0, [r7, #12]
 8012160:	f7ff fe00 	bl	8011d64 <move_window>
 8012164:	4603      	mov	r3, r0
 8012166:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012168:	7ffb      	ldrb	r3, [r7, #31]
 801216a:	2b00      	cmp	r3, #0
 801216c:	f040 809a 	bne.w	80122a4 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	899b      	ldrh	r3, [r3, #12]
 801217a:	461a      	mov	r2, r3
 801217c:	69bb      	ldr	r3, [r7, #24]
 801217e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012182:	fb00 f202 	mul.w	r2, r0, r2
 8012186:	1a9b      	subs	r3, r3, r2
 8012188:	440b      	add	r3, r1
 801218a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801218c:	68bb      	ldr	r3, [r7, #8]
 801218e:	f003 0301 	and.w	r3, r3, #1
 8012192:	2b00      	cmp	r3, #0
 8012194:	d003      	beq.n	801219e <put_fat+0x11a>
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	091b      	lsrs	r3, r3, #4
 801219a:	b2db      	uxtb	r3, r3
 801219c:	e00e      	b.n	80121bc <put_fat+0x138>
 801219e:	697b      	ldr	r3, [r7, #20]
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	b25b      	sxtb	r3, r3
 80121a4:	f023 030f 	bic.w	r3, r3, #15
 80121a8:	b25a      	sxtb	r2, r3
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	0a1b      	lsrs	r3, r3, #8
 80121ae:	b25b      	sxtb	r3, r3
 80121b0:	f003 030f 	and.w	r3, r3, #15
 80121b4:	b25b      	sxtb	r3, r3
 80121b6:	4313      	orrs	r3, r2
 80121b8:	b25b      	sxtb	r3, r3
 80121ba:	b2db      	uxtb	r3, r3
 80121bc:	697a      	ldr	r2, [r7, #20]
 80121be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	2201      	movs	r2, #1
 80121c4:	70da      	strb	r2, [r3, #3]
			break;
 80121c6:	e072      	b.n	80122ae <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	899b      	ldrh	r3, [r3, #12]
 80121d0:	085b      	lsrs	r3, r3, #1
 80121d2:	b29b      	uxth	r3, r3
 80121d4:	4619      	mov	r1, r3
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	fbb3 f3f1 	udiv	r3, r3, r1
 80121dc:	4413      	add	r3, r2
 80121de:	4619      	mov	r1, r3
 80121e0:	68f8      	ldr	r0, [r7, #12]
 80121e2:	f7ff fdbf 	bl	8011d64 <move_window>
 80121e6:	4603      	mov	r3, r0
 80121e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80121ea:	7ffb      	ldrb	r3, [r7, #31]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d15b      	bne.n	80122a8 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	005b      	lsls	r3, r3, #1
 80121fa:	68fa      	ldr	r2, [r7, #12]
 80121fc:	8992      	ldrh	r2, [r2, #12]
 80121fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8012202:	fb00 f202 	mul.w	r2, r0, r2
 8012206:	1a9b      	subs	r3, r3, r2
 8012208:	440b      	add	r3, r1
 801220a:	687a      	ldr	r2, [r7, #4]
 801220c:	b292      	uxth	r2, r2
 801220e:	4611      	mov	r1, r2
 8012210:	4618      	mov	r0, r3
 8012212:	f7ff fb31 	bl	8011878 <st_word>
			fs->wflag = 1;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	2201      	movs	r2, #1
 801221a:	70da      	strb	r2, [r3, #3]
			break;
 801221c:	e047      	b.n	80122ae <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	899b      	ldrh	r3, [r3, #12]
 8012226:	089b      	lsrs	r3, r3, #2
 8012228:	b29b      	uxth	r3, r3
 801222a:	4619      	mov	r1, r3
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012232:	4413      	add	r3, r2
 8012234:	4619      	mov	r1, r3
 8012236:	68f8      	ldr	r0, [r7, #12]
 8012238:	f7ff fd94 	bl	8011d64 <move_window>
 801223c:	4603      	mov	r3, r0
 801223e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012240:	7ffb      	ldrb	r3, [r7, #31]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d132      	bne.n	80122ac <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012252:	68bb      	ldr	r3, [r7, #8]
 8012254:	009b      	lsls	r3, r3, #2
 8012256:	68fa      	ldr	r2, [r7, #12]
 8012258:	8992      	ldrh	r2, [r2, #12]
 801225a:	fbb3 f0f2 	udiv	r0, r3, r2
 801225e:	fb00 f202 	mul.w	r2, r0, r2
 8012262:	1a9b      	subs	r3, r3, r2
 8012264:	440b      	add	r3, r1
 8012266:	4618      	mov	r0, r3
 8012268:	f7ff fae3 	bl	8011832 <ld_dword>
 801226c:	4603      	mov	r3, r0
 801226e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8012272:	4323      	orrs	r3, r4
 8012274:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801227c:	68bb      	ldr	r3, [r7, #8]
 801227e:	009b      	lsls	r3, r3, #2
 8012280:	68fa      	ldr	r2, [r7, #12]
 8012282:	8992      	ldrh	r2, [r2, #12]
 8012284:	fbb3 f0f2 	udiv	r0, r3, r2
 8012288:	fb00 f202 	mul.w	r2, r0, r2
 801228c:	1a9b      	subs	r3, r3, r2
 801228e:	440b      	add	r3, r1
 8012290:	6879      	ldr	r1, [r7, #4]
 8012292:	4618      	mov	r0, r3
 8012294:	f7ff fb0b 	bl	80118ae <st_dword>
			fs->wflag = 1;
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2201      	movs	r2, #1
 801229c:	70da      	strb	r2, [r3, #3]
			break;
 801229e:	e006      	b.n	80122ae <put_fat+0x22a>
			if (res != FR_OK) break;
 80122a0:	bf00      	nop
 80122a2:	e004      	b.n	80122ae <put_fat+0x22a>
			if (res != FR_OK) break;
 80122a4:	bf00      	nop
 80122a6:	e002      	b.n	80122ae <put_fat+0x22a>
			if (res != FR_OK) break;
 80122a8:	bf00      	nop
 80122aa:	e000      	b.n	80122ae <put_fat+0x22a>
			if (res != FR_OK) break;
 80122ac:	bf00      	nop
		}
	}
	return res;
 80122ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80122b0:	4618      	mov	r0, r3
 80122b2:	3724      	adds	r7, #36	@ 0x24
 80122b4:	46bd      	mov	sp, r7
 80122b6:	bd90      	pop	{r4, r7, pc}

080122b8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b088      	sub	sp, #32
 80122bc:	af00      	add	r7, sp, #0
 80122be:	60f8      	str	r0, [r7, #12]
 80122c0:	60b9      	str	r1, [r7, #8]
 80122c2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80122c4:	2300      	movs	r3, #0
 80122c6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d904      	bls.n	80122de <remove_chain+0x26>
 80122d4:	69bb      	ldr	r3, [r7, #24]
 80122d6:	69db      	ldr	r3, [r3, #28]
 80122d8:	68ba      	ldr	r2, [r7, #8]
 80122da:	429a      	cmp	r2, r3
 80122dc:	d301      	bcc.n	80122e2 <remove_chain+0x2a>
 80122de:	2302      	movs	r3, #2
 80122e0:	e04b      	b.n	801237a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d00c      	beq.n	8012302 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80122e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80122ec:	6879      	ldr	r1, [r7, #4]
 80122ee:	69b8      	ldr	r0, [r7, #24]
 80122f0:	f7ff fec8 	bl	8012084 <put_fat>
 80122f4:	4603      	mov	r3, r0
 80122f6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80122f8:	7ffb      	ldrb	r3, [r7, #31]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d001      	beq.n	8012302 <remove_chain+0x4a>
 80122fe:	7ffb      	ldrb	r3, [r7, #31]
 8012300:	e03b      	b.n	801237a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012302:	68b9      	ldr	r1, [r7, #8]
 8012304:	68f8      	ldr	r0, [r7, #12]
 8012306:	f7ff fdea 	bl	8011ede <get_fat>
 801230a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801230c:	697b      	ldr	r3, [r7, #20]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d031      	beq.n	8012376 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	2b01      	cmp	r3, #1
 8012316:	d101      	bne.n	801231c <remove_chain+0x64>
 8012318:	2302      	movs	r3, #2
 801231a:	e02e      	b.n	801237a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012322:	d101      	bne.n	8012328 <remove_chain+0x70>
 8012324:	2301      	movs	r3, #1
 8012326:	e028      	b.n	801237a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012328:	2200      	movs	r2, #0
 801232a:	68b9      	ldr	r1, [r7, #8]
 801232c:	69b8      	ldr	r0, [r7, #24]
 801232e:	f7ff fea9 	bl	8012084 <put_fat>
 8012332:	4603      	mov	r3, r0
 8012334:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012336:	7ffb      	ldrb	r3, [r7, #31]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d001      	beq.n	8012340 <remove_chain+0x88>
 801233c:	7ffb      	ldrb	r3, [r7, #31]
 801233e:	e01c      	b.n	801237a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012340:	69bb      	ldr	r3, [r7, #24]
 8012342:	699a      	ldr	r2, [r3, #24]
 8012344:	69bb      	ldr	r3, [r7, #24]
 8012346:	69db      	ldr	r3, [r3, #28]
 8012348:	3b02      	subs	r3, #2
 801234a:	429a      	cmp	r2, r3
 801234c:	d20b      	bcs.n	8012366 <remove_chain+0xae>
			fs->free_clst++;
 801234e:	69bb      	ldr	r3, [r7, #24]
 8012350:	699b      	ldr	r3, [r3, #24]
 8012352:	1c5a      	adds	r2, r3, #1
 8012354:	69bb      	ldr	r3, [r7, #24]
 8012356:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8012358:	69bb      	ldr	r3, [r7, #24]
 801235a:	791b      	ldrb	r3, [r3, #4]
 801235c:	f043 0301 	orr.w	r3, r3, #1
 8012360:	b2da      	uxtb	r2, r3
 8012362:	69bb      	ldr	r3, [r7, #24]
 8012364:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012366:	697b      	ldr	r3, [r7, #20]
 8012368:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801236a:	69bb      	ldr	r3, [r7, #24]
 801236c:	69db      	ldr	r3, [r3, #28]
 801236e:	68ba      	ldr	r2, [r7, #8]
 8012370:	429a      	cmp	r2, r3
 8012372:	d3c6      	bcc.n	8012302 <remove_chain+0x4a>
 8012374:	e000      	b.n	8012378 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012376:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012378:	2300      	movs	r3, #0
}
 801237a:	4618      	mov	r0, r3
 801237c:	3720      	adds	r7, #32
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}

08012382 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012382:	b580      	push	{r7, lr}
 8012384:	b088      	sub	sp, #32
 8012386:	af00      	add	r7, sp, #0
 8012388:	6078      	str	r0, [r7, #4]
 801238a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012392:	683b      	ldr	r3, [r7, #0]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d10d      	bne.n	80123b4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	695b      	ldr	r3, [r3, #20]
 801239c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801239e:	69bb      	ldr	r3, [r7, #24]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d004      	beq.n	80123ae <create_chain+0x2c>
 80123a4:	693b      	ldr	r3, [r7, #16]
 80123a6:	69db      	ldr	r3, [r3, #28]
 80123a8:	69ba      	ldr	r2, [r7, #24]
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d31b      	bcc.n	80123e6 <create_chain+0x64>
 80123ae:	2301      	movs	r3, #1
 80123b0:	61bb      	str	r3, [r7, #24]
 80123b2:	e018      	b.n	80123e6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80123b4:	6839      	ldr	r1, [r7, #0]
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f7ff fd91 	bl	8011ede <get_fat>
 80123bc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	2b01      	cmp	r3, #1
 80123c2:	d801      	bhi.n	80123c8 <create_chain+0x46>
 80123c4:	2301      	movs	r3, #1
 80123c6:	e070      	b.n	80124aa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80123ce:	d101      	bne.n	80123d4 <create_chain+0x52>
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	e06a      	b.n	80124aa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	69db      	ldr	r3, [r3, #28]
 80123d8:	68fa      	ldr	r2, [r7, #12]
 80123da:	429a      	cmp	r2, r3
 80123dc:	d201      	bcs.n	80123e2 <create_chain+0x60>
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	e063      	b.n	80124aa <create_chain+0x128>
		scl = clst;
 80123e2:	683b      	ldr	r3, [r7, #0]
 80123e4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80123e6:	69bb      	ldr	r3, [r7, #24]
 80123e8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80123ea:	69fb      	ldr	r3, [r7, #28]
 80123ec:	3301      	adds	r3, #1
 80123ee:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	69db      	ldr	r3, [r3, #28]
 80123f4:	69fa      	ldr	r2, [r7, #28]
 80123f6:	429a      	cmp	r2, r3
 80123f8:	d307      	bcc.n	801240a <create_chain+0x88>
				ncl = 2;
 80123fa:	2302      	movs	r3, #2
 80123fc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80123fe:	69fa      	ldr	r2, [r7, #28]
 8012400:	69bb      	ldr	r3, [r7, #24]
 8012402:	429a      	cmp	r2, r3
 8012404:	d901      	bls.n	801240a <create_chain+0x88>
 8012406:	2300      	movs	r3, #0
 8012408:	e04f      	b.n	80124aa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801240a:	69f9      	ldr	r1, [r7, #28]
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f7ff fd66 	bl	8011ede <get_fat>
 8012412:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d00e      	beq.n	8012438 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	2b01      	cmp	r3, #1
 801241e:	d003      	beq.n	8012428 <create_chain+0xa6>
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012426:	d101      	bne.n	801242c <create_chain+0xaa>
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	e03e      	b.n	80124aa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801242c:	69fa      	ldr	r2, [r7, #28]
 801242e:	69bb      	ldr	r3, [r7, #24]
 8012430:	429a      	cmp	r2, r3
 8012432:	d1da      	bne.n	80123ea <create_chain+0x68>
 8012434:	2300      	movs	r3, #0
 8012436:	e038      	b.n	80124aa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012438:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801243a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801243e:	69f9      	ldr	r1, [r7, #28]
 8012440:	6938      	ldr	r0, [r7, #16]
 8012442:	f7ff fe1f 	bl	8012084 <put_fat>
 8012446:	4603      	mov	r3, r0
 8012448:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801244a:	7dfb      	ldrb	r3, [r7, #23]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d109      	bne.n	8012464 <create_chain+0xe2>
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d006      	beq.n	8012464 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012456:	69fa      	ldr	r2, [r7, #28]
 8012458:	6839      	ldr	r1, [r7, #0]
 801245a:	6938      	ldr	r0, [r7, #16]
 801245c:	f7ff fe12 	bl	8012084 <put_fat>
 8012460:	4603      	mov	r3, r0
 8012462:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012464:	7dfb      	ldrb	r3, [r7, #23]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d116      	bne.n	8012498 <create_chain+0x116>
		fs->last_clst = ncl;
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	69fa      	ldr	r2, [r7, #28]
 801246e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012470:	693b      	ldr	r3, [r7, #16]
 8012472:	699a      	ldr	r2, [r3, #24]
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	69db      	ldr	r3, [r3, #28]
 8012478:	3b02      	subs	r3, #2
 801247a:	429a      	cmp	r2, r3
 801247c:	d804      	bhi.n	8012488 <create_chain+0x106>
 801247e:	693b      	ldr	r3, [r7, #16]
 8012480:	699b      	ldr	r3, [r3, #24]
 8012482:	1e5a      	subs	r2, r3, #1
 8012484:	693b      	ldr	r3, [r7, #16]
 8012486:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	791b      	ldrb	r3, [r3, #4]
 801248c:	f043 0301 	orr.w	r3, r3, #1
 8012490:	b2da      	uxtb	r2, r3
 8012492:	693b      	ldr	r3, [r7, #16]
 8012494:	711a      	strb	r2, [r3, #4]
 8012496:	e007      	b.n	80124a8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012498:	7dfb      	ldrb	r3, [r7, #23]
 801249a:	2b01      	cmp	r3, #1
 801249c:	d102      	bne.n	80124a4 <create_chain+0x122>
 801249e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80124a2:	e000      	b.n	80124a6 <create_chain+0x124>
 80124a4:	2301      	movs	r3, #1
 80124a6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80124a8:	69fb      	ldr	r3, [r7, #28]
}
 80124aa:	4618      	mov	r0, r3
 80124ac:	3720      	adds	r7, #32
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}

080124b2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80124b2:	b480      	push	{r7}
 80124b4:	b087      	sub	sp, #28
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	6078      	str	r0, [r7, #4]
 80124ba:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124c6:	3304      	adds	r3, #4
 80124c8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	899b      	ldrh	r3, [r3, #12]
 80124ce:	461a      	mov	r2, r3
 80124d0:	683b      	ldr	r3, [r7, #0]
 80124d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80124d6:	68fa      	ldr	r2, [r7, #12]
 80124d8:	8952      	ldrh	r2, [r2, #10]
 80124da:	fbb3 f3f2 	udiv	r3, r3, r2
 80124de:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80124e0:	693b      	ldr	r3, [r7, #16]
 80124e2:	1d1a      	adds	r2, r3, #4
 80124e4:	613a      	str	r2, [r7, #16]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d101      	bne.n	80124f4 <clmt_clust+0x42>
 80124f0:	2300      	movs	r3, #0
 80124f2:	e010      	b.n	8012516 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80124f4:	697a      	ldr	r2, [r7, #20]
 80124f6:	68bb      	ldr	r3, [r7, #8]
 80124f8:	429a      	cmp	r2, r3
 80124fa:	d307      	bcc.n	801250c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80124fc:	697a      	ldr	r2, [r7, #20]
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	1ad3      	subs	r3, r2, r3
 8012502:	617b      	str	r3, [r7, #20]
 8012504:	693b      	ldr	r3, [r7, #16]
 8012506:	3304      	adds	r3, #4
 8012508:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801250a:	e7e9      	b.n	80124e0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801250c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801250e:	693b      	ldr	r3, [r7, #16]
 8012510:	681a      	ldr	r2, [r3, #0]
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	4413      	add	r3, r2
}
 8012516:	4618      	mov	r0, r3
 8012518:	371c      	adds	r7, #28
 801251a:	46bd      	mov	sp, r7
 801251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012520:	4770      	bx	lr

08012522 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012522:	b580      	push	{r7, lr}
 8012524:	b086      	sub	sp, #24
 8012526:	af00      	add	r7, sp, #0
 8012528:	6078      	str	r0, [r7, #4]
 801252a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8012538:	d204      	bcs.n	8012544 <dir_sdi+0x22>
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	f003 031f 	and.w	r3, r3, #31
 8012540:	2b00      	cmp	r3, #0
 8012542:	d001      	beq.n	8012548 <dir_sdi+0x26>
		return FR_INT_ERR;
 8012544:	2302      	movs	r3, #2
 8012546:	e071      	b.n	801262c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	683a      	ldr	r2, [r7, #0]
 801254c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	689b      	ldr	r3, [r3, #8]
 8012552:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012554:	697b      	ldr	r3, [r7, #20]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d106      	bne.n	8012568 <dir_sdi+0x46>
 801255a:	693b      	ldr	r3, [r7, #16]
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	2b02      	cmp	r3, #2
 8012560:	d902      	bls.n	8012568 <dir_sdi+0x46>
		clst = fs->dirbase;
 8012562:	693b      	ldr	r3, [r7, #16]
 8012564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012566:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012568:	697b      	ldr	r3, [r7, #20]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d10c      	bne.n	8012588 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	095b      	lsrs	r3, r3, #5
 8012572:	693a      	ldr	r2, [r7, #16]
 8012574:	8912      	ldrh	r2, [r2, #8]
 8012576:	4293      	cmp	r3, r2
 8012578:	d301      	bcc.n	801257e <dir_sdi+0x5c>
 801257a:	2302      	movs	r3, #2
 801257c:	e056      	b.n	801262c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	61da      	str	r2, [r3, #28]
 8012586:	e02d      	b.n	80125e4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012588:	693b      	ldr	r3, [r7, #16]
 801258a:	895b      	ldrh	r3, [r3, #10]
 801258c:	461a      	mov	r2, r3
 801258e:	693b      	ldr	r3, [r7, #16]
 8012590:	899b      	ldrh	r3, [r3, #12]
 8012592:	fb02 f303 	mul.w	r3, r2, r3
 8012596:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012598:	e019      	b.n	80125ce <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6979      	ldr	r1, [r7, #20]
 801259e:	4618      	mov	r0, r3
 80125a0:	f7ff fc9d 	bl	8011ede <get_fat>
 80125a4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80125a6:	697b      	ldr	r3, [r7, #20]
 80125a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80125ac:	d101      	bne.n	80125b2 <dir_sdi+0x90>
 80125ae:	2301      	movs	r3, #1
 80125b0:	e03c      	b.n	801262c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	2b01      	cmp	r3, #1
 80125b6:	d904      	bls.n	80125c2 <dir_sdi+0xa0>
 80125b8:	693b      	ldr	r3, [r7, #16]
 80125ba:	69db      	ldr	r3, [r3, #28]
 80125bc:	697a      	ldr	r2, [r7, #20]
 80125be:	429a      	cmp	r2, r3
 80125c0:	d301      	bcc.n	80125c6 <dir_sdi+0xa4>
 80125c2:	2302      	movs	r3, #2
 80125c4:	e032      	b.n	801262c <dir_sdi+0x10a>
			ofs -= csz;
 80125c6:	683a      	ldr	r2, [r7, #0]
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	1ad3      	subs	r3, r2, r3
 80125cc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80125ce:	683a      	ldr	r2, [r7, #0]
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	429a      	cmp	r2, r3
 80125d4:	d2e1      	bcs.n	801259a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80125d6:	6979      	ldr	r1, [r7, #20]
 80125d8:	6938      	ldr	r0, [r7, #16]
 80125da:	f7ff fc61 	bl	8011ea0 <clust2sect>
 80125de:	4602      	mov	r2, r0
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	697a      	ldr	r2, [r7, #20]
 80125e8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	69db      	ldr	r3, [r3, #28]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d101      	bne.n	80125f6 <dir_sdi+0xd4>
 80125f2:	2302      	movs	r3, #2
 80125f4:	e01a      	b.n	801262c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	69da      	ldr	r2, [r3, #28]
 80125fa:	693b      	ldr	r3, [r7, #16]
 80125fc:	899b      	ldrh	r3, [r3, #12]
 80125fe:	4619      	mov	r1, r3
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	fbb3 f3f1 	udiv	r3, r3, r1
 8012606:	441a      	add	r2, r3
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801260c:	693b      	ldr	r3, [r7, #16]
 801260e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8012612:	693b      	ldr	r3, [r7, #16]
 8012614:	899b      	ldrh	r3, [r3, #12]
 8012616:	461a      	mov	r2, r3
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	fbb3 f0f2 	udiv	r0, r3, r2
 801261e:	fb00 f202 	mul.w	r2, r0, r2
 8012622:	1a9b      	subs	r3, r3, r2
 8012624:	18ca      	adds	r2, r1, r3
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801262a:	2300      	movs	r3, #0
}
 801262c:	4618      	mov	r0, r3
 801262e:	3718      	adds	r7, #24
 8012630:	46bd      	mov	sp, r7
 8012632:	bd80      	pop	{r7, pc}

08012634 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b086      	sub	sp, #24
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	695b      	ldr	r3, [r3, #20]
 8012648:	3320      	adds	r3, #32
 801264a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	69db      	ldr	r3, [r3, #28]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d003      	beq.n	801265c <dir_next+0x28>
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801265a:	d301      	bcc.n	8012660 <dir_next+0x2c>
 801265c:	2304      	movs	r3, #4
 801265e:	e0bb      	b.n	80127d8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	899b      	ldrh	r3, [r3, #12]
 8012664:	461a      	mov	r2, r3
 8012666:	68bb      	ldr	r3, [r7, #8]
 8012668:	fbb3 f1f2 	udiv	r1, r3, r2
 801266c:	fb01 f202 	mul.w	r2, r1, r2
 8012670:	1a9b      	subs	r3, r3, r2
 8012672:	2b00      	cmp	r3, #0
 8012674:	f040 809d 	bne.w	80127b2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	69db      	ldr	r3, [r3, #28]
 801267c:	1c5a      	adds	r2, r3, #1
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	699b      	ldr	r3, [r3, #24]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d10b      	bne.n	80126a2 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801268a:	68bb      	ldr	r3, [r7, #8]
 801268c:	095b      	lsrs	r3, r3, #5
 801268e:	68fa      	ldr	r2, [r7, #12]
 8012690:	8912      	ldrh	r2, [r2, #8]
 8012692:	4293      	cmp	r3, r2
 8012694:	f0c0 808d 	bcc.w	80127b2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2200      	movs	r2, #0
 801269c:	61da      	str	r2, [r3, #28]
 801269e:	2304      	movs	r3, #4
 80126a0:	e09a      	b.n	80127d8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	899b      	ldrh	r3, [r3, #12]
 80126a6:	461a      	mov	r2, r3
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80126ae:	68fa      	ldr	r2, [r7, #12]
 80126b0:	8952      	ldrh	r2, [r2, #10]
 80126b2:	3a01      	subs	r2, #1
 80126b4:	4013      	ands	r3, r2
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	d17b      	bne.n	80127b2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80126ba:	687a      	ldr	r2, [r7, #4]
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	699b      	ldr	r3, [r3, #24]
 80126c0:	4619      	mov	r1, r3
 80126c2:	4610      	mov	r0, r2
 80126c4:	f7ff fc0b 	bl	8011ede <get_fat>
 80126c8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	2b01      	cmp	r3, #1
 80126ce:	d801      	bhi.n	80126d4 <dir_next+0xa0>
 80126d0:	2302      	movs	r3, #2
 80126d2:	e081      	b.n	80127d8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80126d4:	697b      	ldr	r3, [r7, #20]
 80126d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80126da:	d101      	bne.n	80126e0 <dir_next+0xac>
 80126dc:	2301      	movs	r3, #1
 80126de:	e07b      	b.n	80127d8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	69db      	ldr	r3, [r3, #28]
 80126e4:	697a      	ldr	r2, [r7, #20]
 80126e6:	429a      	cmp	r2, r3
 80126e8:	d359      	bcc.n	801279e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d104      	bne.n	80126fa <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	2200      	movs	r2, #0
 80126f4:	61da      	str	r2, [r3, #28]
 80126f6:	2304      	movs	r3, #4
 80126f8:	e06e      	b.n	80127d8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80126fa:	687a      	ldr	r2, [r7, #4]
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	699b      	ldr	r3, [r3, #24]
 8012700:	4619      	mov	r1, r3
 8012702:	4610      	mov	r0, r2
 8012704:	f7ff fe3d 	bl	8012382 <create_chain>
 8012708:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801270a:	697b      	ldr	r3, [r7, #20]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d101      	bne.n	8012714 <dir_next+0xe0>
 8012710:	2307      	movs	r3, #7
 8012712:	e061      	b.n	80127d8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	2b01      	cmp	r3, #1
 8012718:	d101      	bne.n	801271e <dir_next+0xea>
 801271a:	2302      	movs	r3, #2
 801271c:	e05c      	b.n	80127d8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801271e:	697b      	ldr	r3, [r7, #20]
 8012720:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012724:	d101      	bne.n	801272a <dir_next+0xf6>
 8012726:	2301      	movs	r3, #1
 8012728:	e056      	b.n	80127d8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 801272a:	68f8      	ldr	r0, [r7, #12]
 801272c:	f7ff fad6 	bl	8011cdc <sync_window>
 8012730:	4603      	mov	r3, r0
 8012732:	2b00      	cmp	r3, #0
 8012734:	d001      	beq.n	801273a <dir_next+0x106>
 8012736:	2301      	movs	r3, #1
 8012738:	e04e      	b.n	80127d8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	899b      	ldrh	r3, [r3, #12]
 8012744:	461a      	mov	r2, r3
 8012746:	2100      	movs	r1, #0
 8012748:	f7ff f8fe 	bl	8011948 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801274c:	2300      	movs	r3, #0
 801274e:	613b      	str	r3, [r7, #16]
 8012750:	6979      	ldr	r1, [r7, #20]
 8012752:	68f8      	ldr	r0, [r7, #12]
 8012754:	f7ff fba4 	bl	8011ea0 <clust2sect>
 8012758:	4602      	mov	r2, r0
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	635a      	str	r2, [r3, #52]	@ 0x34
 801275e:	e012      	b.n	8012786 <dir_next+0x152>
						fs->wflag = 1;
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	2201      	movs	r2, #1
 8012764:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012766:	68f8      	ldr	r0, [r7, #12]
 8012768:	f7ff fab8 	bl	8011cdc <sync_window>
 801276c:	4603      	mov	r3, r0
 801276e:	2b00      	cmp	r3, #0
 8012770:	d001      	beq.n	8012776 <dir_next+0x142>
 8012772:	2301      	movs	r3, #1
 8012774:	e030      	b.n	80127d8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012776:	693b      	ldr	r3, [r7, #16]
 8012778:	3301      	adds	r3, #1
 801277a:	613b      	str	r3, [r7, #16]
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012780:	1c5a      	adds	r2, r3, #1
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	635a      	str	r2, [r3, #52]	@ 0x34
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	895b      	ldrh	r3, [r3, #10]
 801278a:	461a      	mov	r2, r3
 801278c:	693b      	ldr	r3, [r7, #16]
 801278e:	4293      	cmp	r3, r2
 8012790:	d3e6      	bcc.n	8012760 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012796:	693b      	ldr	r3, [r7, #16]
 8012798:	1ad2      	subs	r2, r2, r3
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	697a      	ldr	r2, [r7, #20]
 80127a2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80127a4:	6979      	ldr	r1, [r7, #20]
 80127a6:	68f8      	ldr	r0, [r7, #12]
 80127a8:	f7ff fb7a 	bl	8011ea0 <clust2sect>
 80127ac:	4602      	mov	r2, r0
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	68ba      	ldr	r2, [r7, #8]
 80127b6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	899b      	ldrh	r3, [r3, #12]
 80127c2:	461a      	mov	r2, r3
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80127ca:	fb00 f202 	mul.w	r2, r0, r2
 80127ce:	1a9b      	subs	r3, r3, r2
 80127d0:	18ca      	adds	r2, r1, r3
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80127d6:	2300      	movs	r3, #0
}
 80127d8:	4618      	mov	r0, r3
 80127da:	3718      	adds	r7, #24
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}

080127e0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b086      	sub	sp, #24
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
 80127e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80127f0:	2100      	movs	r1, #0
 80127f2:	6878      	ldr	r0, [r7, #4]
 80127f4:	f7ff fe95 	bl	8012522 <dir_sdi>
 80127f8:	4603      	mov	r3, r0
 80127fa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80127fc:	7dfb      	ldrb	r3, [r7, #23]
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d12b      	bne.n	801285a <dir_alloc+0x7a>
		n = 0;
 8012802:	2300      	movs	r3, #0
 8012804:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	69db      	ldr	r3, [r3, #28]
 801280a:	4619      	mov	r1, r3
 801280c:	68f8      	ldr	r0, [r7, #12]
 801280e:	f7ff faa9 	bl	8011d64 <move_window>
 8012812:	4603      	mov	r3, r0
 8012814:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012816:	7dfb      	ldrb	r3, [r7, #23]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d11d      	bne.n	8012858 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	6a1b      	ldr	r3, [r3, #32]
 8012820:	781b      	ldrb	r3, [r3, #0]
 8012822:	2be5      	cmp	r3, #229	@ 0xe5
 8012824:	d004      	beq.n	8012830 <dir_alloc+0x50>
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	6a1b      	ldr	r3, [r3, #32]
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d107      	bne.n	8012840 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012830:	693b      	ldr	r3, [r7, #16]
 8012832:	3301      	adds	r3, #1
 8012834:	613b      	str	r3, [r7, #16]
 8012836:	693a      	ldr	r2, [r7, #16]
 8012838:	683b      	ldr	r3, [r7, #0]
 801283a:	429a      	cmp	r2, r3
 801283c:	d102      	bne.n	8012844 <dir_alloc+0x64>
 801283e:	e00c      	b.n	801285a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012840:	2300      	movs	r3, #0
 8012842:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012844:	2101      	movs	r1, #1
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f7ff fef4 	bl	8012634 <dir_next>
 801284c:	4603      	mov	r3, r0
 801284e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012850:	7dfb      	ldrb	r3, [r7, #23]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d0d7      	beq.n	8012806 <dir_alloc+0x26>
 8012856:	e000      	b.n	801285a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012858:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801285a:	7dfb      	ldrb	r3, [r7, #23]
 801285c:	2b04      	cmp	r3, #4
 801285e:	d101      	bne.n	8012864 <dir_alloc+0x84>
 8012860:	2307      	movs	r3, #7
 8012862:	75fb      	strb	r3, [r7, #23]
	return res;
 8012864:	7dfb      	ldrb	r3, [r7, #23]
}
 8012866:	4618      	mov	r0, r3
 8012868:	3718      	adds	r7, #24
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}

0801286e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801286e:	b580      	push	{r7, lr}
 8012870:	b084      	sub	sp, #16
 8012872:	af00      	add	r7, sp, #0
 8012874:	6078      	str	r0, [r7, #4]
 8012876:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012878:	683b      	ldr	r3, [r7, #0]
 801287a:	331a      	adds	r3, #26
 801287c:	4618      	mov	r0, r3
 801287e:	f7fe ffbf 	bl	8011800 <ld_word>
 8012882:	4603      	mov	r3, r0
 8012884:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	2b03      	cmp	r3, #3
 801288c:	d109      	bne.n	80128a2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	3314      	adds	r3, #20
 8012892:	4618      	mov	r0, r3
 8012894:	f7fe ffb4 	bl	8011800 <ld_word>
 8012898:	4603      	mov	r3, r0
 801289a:	041b      	lsls	r3, r3, #16
 801289c:	68fa      	ldr	r2, [r7, #12]
 801289e:	4313      	orrs	r3, r2
 80128a0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80128a2:	68fb      	ldr	r3, [r7, #12]
}
 80128a4:	4618      	mov	r0, r3
 80128a6:	3710      	adds	r7, #16
 80128a8:	46bd      	mov	sp, r7
 80128aa:	bd80      	pop	{r7, pc}

080128ac <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b084      	sub	sp, #16
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	60f8      	str	r0, [r7, #12]
 80128b4:	60b9      	str	r1, [r7, #8]
 80128b6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80128b8:	68bb      	ldr	r3, [r7, #8]
 80128ba:	331a      	adds	r3, #26
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	b292      	uxth	r2, r2
 80128c0:	4611      	mov	r1, r2
 80128c2:	4618      	mov	r0, r3
 80128c4:	f7fe ffd8 	bl	8011878 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	2b03      	cmp	r3, #3
 80128ce:	d109      	bne.n	80128e4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	f103 0214 	add.w	r2, r3, #20
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	0c1b      	lsrs	r3, r3, #16
 80128da:	b29b      	uxth	r3, r3
 80128dc:	4619      	mov	r1, r3
 80128de:	4610      	mov	r0, r2
 80128e0:	f7fe ffca 	bl	8011878 <st_word>
	}
}
 80128e4:	bf00      	nop
 80128e6:	3710      	adds	r7, #16
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd80      	pop	{r7, pc}

080128ec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80128ec:	b590      	push	{r4, r7, lr}
 80128ee:	b087      	sub	sp, #28
 80128f0:	af00      	add	r7, sp, #0
 80128f2:	6078      	str	r0, [r7, #4]
 80128f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	331a      	adds	r3, #26
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7fe ff80 	bl	8011800 <ld_word>
 8012900:	4603      	mov	r3, r0
 8012902:	2b00      	cmp	r3, #0
 8012904:	d001      	beq.n	801290a <cmp_lfn+0x1e>
 8012906:	2300      	movs	r3, #0
 8012908:	e059      	b.n	80129be <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801290a:	683b      	ldr	r3, [r7, #0]
 801290c:	781b      	ldrb	r3, [r3, #0]
 801290e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012912:	1e5a      	subs	r2, r3, #1
 8012914:	4613      	mov	r3, r2
 8012916:	005b      	lsls	r3, r3, #1
 8012918:	4413      	add	r3, r2
 801291a:	009b      	lsls	r3, r3, #2
 801291c:	4413      	add	r3, r2
 801291e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012920:	2301      	movs	r3, #1
 8012922:	81fb      	strh	r3, [r7, #14]
 8012924:	2300      	movs	r3, #0
 8012926:	613b      	str	r3, [r7, #16]
 8012928:	e033      	b.n	8012992 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801292a:	4a27      	ldr	r2, [pc, #156]	@ (80129c8 <cmp_lfn+0xdc>)
 801292c:	693b      	ldr	r3, [r7, #16]
 801292e:	4413      	add	r3, r2
 8012930:	781b      	ldrb	r3, [r3, #0]
 8012932:	461a      	mov	r2, r3
 8012934:	683b      	ldr	r3, [r7, #0]
 8012936:	4413      	add	r3, r2
 8012938:	4618      	mov	r0, r3
 801293a:	f7fe ff61 	bl	8011800 <ld_word>
 801293e:	4603      	mov	r3, r0
 8012940:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012942:	89fb      	ldrh	r3, [r7, #14]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d01a      	beq.n	801297e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012948:	697b      	ldr	r3, [r7, #20]
 801294a:	2bfe      	cmp	r3, #254	@ 0xfe
 801294c:	d812      	bhi.n	8012974 <cmp_lfn+0x88>
 801294e:	89bb      	ldrh	r3, [r7, #12]
 8012950:	4618      	mov	r0, r3
 8012952:	f002 f8ad 	bl	8014ab0 <ff_wtoupper>
 8012956:	4603      	mov	r3, r0
 8012958:	461c      	mov	r4, r3
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	1c5a      	adds	r2, r3, #1
 801295e:	617a      	str	r2, [r7, #20]
 8012960:	005b      	lsls	r3, r3, #1
 8012962:	687a      	ldr	r2, [r7, #4]
 8012964:	4413      	add	r3, r2
 8012966:	881b      	ldrh	r3, [r3, #0]
 8012968:	4618      	mov	r0, r3
 801296a:	f002 f8a1 	bl	8014ab0 <ff_wtoupper>
 801296e:	4603      	mov	r3, r0
 8012970:	429c      	cmp	r4, r3
 8012972:	d001      	beq.n	8012978 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8012974:	2300      	movs	r3, #0
 8012976:	e022      	b.n	80129be <cmp_lfn+0xd2>
			}
			wc = uc;
 8012978:	89bb      	ldrh	r3, [r7, #12]
 801297a:	81fb      	strh	r3, [r7, #14]
 801297c:	e006      	b.n	801298c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801297e:	89bb      	ldrh	r3, [r7, #12]
 8012980:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012984:	4293      	cmp	r3, r2
 8012986:	d001      	beq.n	801298c <cmp_lfn+0xa0>
 8012988:	2300      	movs	r3, #0
 801298a:	e018      	b.n	80129be <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801298c:	693b      	ldr	r3, [r7, #16]
 801298e:	3301      	adds	r3, #1
 8012990:	613b      	str	r3, [r7, #16]
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	2b0c      	cmp	r3, #12
 8012996:	d9c8      	bls.n	801292a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012998:	683b      	ldr	r3, [r7, #0]
 801299a:	781b      	ldrb	r3, [r3, #0]
 801299c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d00b      	beq.n	80129bc <cmp_lfn+0xd0>
 80129a4:	89fb      	ldrh	r3, [r7, #14]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d008      	beq.n	80129bc <cmp_lfn+0xd0>
 80129aa:	697b      	ldr	r3, [r7, #20]
 80129ac:	005b      	lsls	r3, r3, #1
 80129ae:	687a      	ldr	r2, [r7, #4]
 80129b0:	4413      	add	r3, r2
 80129b2:	881b      	ldrh	r3, [r3, #0]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d001      	beq.n	80129bc <cmp_lfn+0xd0>
 80129b8:	2300      	movs	r3, #0
 80129ba:	e000      	b.n	80129be <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80129bc:	2301      	movs	r3, #1
}
 80129be:	4618      	mov	r0, r3
 80129c0:	371c      	adds	r7, #28
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd90      	pop	{r4, r7, pc}
 80129c6:	bf00      	nop
 80129c8:	08018f54 	.word	0x08018f54

080129cc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b088      	sub	sp, #32
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	60f8      	str	r0, [r7, #12]
 80129d4:	60b9      	str	r1, [r7, #8]
 80129d6:	4611      	mov	r1, r2
 80129d8:	461a      	mov	r2, r3
 80129da:	460b      	mov	r3, r1
 80129dc:	71fb      	strb	r3, [r7, #7]
 80129de:	4613      	mov	r3, r2
 80129e0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	330d      	adds	r3, #13
 80129e6:	79ba      	ldrb	r2, [r7, #6]
 80129e8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	330b      	adds	r3, #11
 80129ee:	220f      	movs	r2, #15
 80129f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	330c      	adds	r3, #12
 80129f6:	2200      	movs	r2, #0
 80129f8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80129fa:	68bb      	ldr	r3, [r7, #8]
 80129fc:	331a      	adds	r3, #26
 80129fe:	2100      	movs	r1, #0
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7fe ff39 	bl	8011878 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8012a06:	79fb      	ldrb	r3, [r7, #7]
 8012a08:	1e5a      	subs	r2, r3, #1
 8012a0a:	4613      	mov	r3, r2
 8012a0c:	005b      	lsls	r3, r3, #1
 8012a0e:	4413      	add	r3, r2
 8012a10:	009b      	lsls	r3, r3, #2
 8012a12:	4413      	add	r3, r2
 8012a14:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8012a16:	2300      	movs	r3, #0
 8012a18:	82fb      	strh	r3, [r7, #22]
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012a1e:	8afb      	ldrh	r3, [r7, #22]
 8012a20:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012a24:	4293      	cmp	r3, r2
 8012a26:	d007      	beq.n	8012a38 <put_lfn+0x6c>
 8012a28:	69fb      	ldr	r3, [r7, #28]
 8012a2a:	1c5a      	adds	r2, r3, #1
 8012a2c:	61fa      	str	r2, [r7, #28]
 8012a2e:	005b      	lsls	r3, r3, #1
 8012a30:	68fa      	ldr	r2, [r7, #12]
 8012a32:	4413      	add	r3, r2
 8012a34:	881b      	ldrh	r3, [r3, #0]
 8012a36:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012a38:	4a17      	ldr	r2, [pc, #92]	@ (8012a98 <put_lfn+0xcc>)
 8012a3a:	69bb      	ldr	r3, [r7, #24]
 8012a3c:	4413      	add	r3, r2
 8012a3e:	781b      	ldrb	r3, [r3, #0]
 8012a40:	461a      	mov	r2, r3
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	4413      	add	r3, r2
 8012a46:	8afa      	ldrh	r2, [r7, #22]
 8012a48:	4611      	mov	r1, r2
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7fe ff14 	bl	8011878 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012a50:	8afb      	ldrh	r3, [r7, #22]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d102      	bne.n	8012a5c <put_lfn+0x90>
 8012a56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012a5a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012a5c:	69bb      	ldr	r3, [r7, #24]
 8012a5e:	3301      	adds	r3, #1
 8012a60:	61bb      	str	r3, [r7, #24]
 8012a62:	69bb      	ldr	r3, [r7, #24]
 8012a64:	2b0c      	cmp	r3, #12
 8012a66:	d9da      	bls.n	8012a1e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012a68:	8afb      	ldrh	r3, [r7, #22]
 8012a6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012a6e:	4293      	cmp	r3, r2
 8012a70:	d006      	beq.n	8012a80 <put_lfn+0xb4>
 8012a72:	69fb      	ldr	r3, [r7, #28]
 8012a74:	005b      	lsls	r3, r3, #1
 8012a76:	68fa      	ldr	r2, [r7, #12]
 8012a78:	4413      	add	r3, r2
 8012a7a:	881b      	ldrh	r3, [r3, #0]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d103      	bne.n	8012a88 <put_lfn+0xbc>
 8012a80:	79fb      	ldrb	r3, [r7, #7]
 8012a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a86:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012a88:	68bb      	ldr	r3, [r7, #8]
 8012a8a:	79fa      	ldrb	r2, [r7, #7]
 8012a8c:	701a      	strb	r2, [r3, #0]
}
 8012a8e:	bf00      	nop
 8012a90:	3720      	adds	r7, #32
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}
 8012a96:	bf00      	nop
 8012a98:	08018f54 	.word	0x08018f54

08012a9c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b08c      	sub	sp, #48	@ 0x30
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	60f8      	str	r0, [r7, #12]
 8012aa4:	60b9      	str	r1, [r7, #8]
 8012aa6:	607a      	str	r2, [r7, #4]
 8012aa8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8012aaa:	220b      	movs	r2, #11
 8012aac:	68b9      	ldr	r1, [r7, #8]
 8012aae:	68f8      	ldr	r0, [r7, #12]
 8012ab0:	f7fe ff29 	bl	8011906 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	2b05      	cmp	r3, #5
 8012ab8:	d929      	bls.n	8012b0e <gen_numname+0x72>
		sr = seq;
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8012abe:	e020      	b.n	8012b02 <gen_numname+0x66>
			wc = *lfn++;
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	1c9a      	adds	r2, r3, #2
 8012ac4:	607a      	str	r2, [r7, #4]
 8012ac6:	881b      	ldrh	r3, [r3, #0]
 8012ac8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8012aca:	2300      	movs	r3, #0
 8012acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012ace:	e015      	b.n	8012afc <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8012ad0:	69fb      	ldr	r3, [r7, #28]
 8012ad2:	005a      	lsls	r2, r3, #1
 8012ad4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012ad6:	f003 0301 	and.w	r3, r3, #1
 8012ada:	4413      	add	r3, r2
 8012adc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8012ade:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012ae0:	085b      	lsrs	r3, r3, #1
 8012ae2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8012ae4:	69fb      	ldr	r3, [r7, #28]
 8012ae6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d003      	beq.n	8012af6 <gen_numname+0x5a>
 8012aee:	69fa      	ldr	r2, [r7, #28]
 8012af0:	4b30      	ldr	r3, [pc, #192]	@ (8012bb4 <gen_numname+0x118>)
 8012af2:	4053      	eors	r3, r2
 8012af4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8012af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012af8:	3301      	adds	r3, #1
 8012afa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012afe:	2b0f      	cmp	r3, #15
 8012b00:	d9e6      	bls.n	8012ad0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	881b      	ldrh	r3, [r3, #0]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d1da      	bne.n	8012ac0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8012b0a:	69fb      	ldr	r3, [r7, #28]
 8012b0c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8012b0e:	2307      	movs	r3, #7
 8012b10:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	b2db      	uxtb	r3, r3
 8012b16:	f003 030f 	and.w	r3, r3, #15
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	3330      	adds	r3, #48	@ 0x30
 8012b1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8012b22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012b26:	2b39      	cmp	r3, #57	@ 0x39
 8012b28:	d904      	bls.n	8012b34 <gen_numname+0x98>
 8012b2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012b2e:	3307      	adds	r3, #7
 8012b30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8012b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b36:	1e5a      	subs	r2, r3, #1
 8012b38:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012b3a:	3330      	adds	r3, #48	@ 0x30
 8012b3c:	443b      	add	r3, r7
 8012b3e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8012b42:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012b46:	683b      	ldr	r3, [r7, #0]
 8012b48:	091b      	lsrs	r3, r3, #4
 8012b4a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d1df      	bne.n	8012b12 <gen_numname+0x76>
	ns[i] = '~';
 8012b52:	f107 0214 	add.w	r2, r7, #20
 8012b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b58:	4413      	add	r3, r2
 8012b5a:	227e      	movs	r2, #126	@ 0x7e
 8012b5c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012b5e:	2300      	movs	r3, #0
 8012b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b62:	e002      	b.n	8012b6a <gen_numname+0xce>
 8012b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b66:	3301      	adds	r3, #1
 8012b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d205      	bcs.n	8012b7e <gen_numname+0xe2>
 8012b72:	68fa      	ldr	r2, [r7, #12]
 8012b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b76:	4413      	add	r3, r2
 8012b78:	781b      	ldrb	r3, [r3, #0]
 8012b7a:	2b20      	cmp	r3, #32
 8012b7c:	d1f2      	bne.n	8012b64 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b80:	2b07      	cmp	r3, #7
 8012b82:	d807      	bhi.n	8012b94 <gen_numname+0xf8>
 8012b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b86:	1c5a      	adds	r2, r3, #1
 8012b88:	62ba      	str	r2, [r7, #40]	@ 0x28
 8012b8a:	3330      	adds	r3, #48	@ 0x30
 8012b8c:	443b      	add	r3, r7
 8012b8e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8012b92:	e000      	b.n	8012b96 <gen_numname+0xfa>
 8012b94:	2120      	movs	r1, #32
 8012b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b98:	1c5a      	adds	r2, r3, #1
 8012b9a:	627a      	str	r2, [r7, #36]	@ 0x24
 8012b9c:	68fa      	ldr	r2, [r7, #12]
 8012b9e:	4413      	add	r3, r2
 8012ba0:	460a      	mov	r2, r1
 8012ba2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8012ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ba6:	2b07      	cmp	r3, #7
 8012ba8:	d9e9      	bls.n	8012b7e <gen_numname+0xe2>
}
 8012baa:	bf00      	nop
 8012bac:	bf00      	nop
 8012bae:	3730      	adds	r7, #48	@ 0x30
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}
 8012bb4:	00011021 	.word	0x00011021

08012bb8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8012bb8:	b480      	push	{r7}
 8012bba:	b085      	sub	sp, #20
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8012bc4:	230b      	movs	r3, #11
 8012bc6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012bc8:	7bfb      	ldrb	r3, [r7, #15]
 8012bca:	b2da      	uxtb	r2, r3
 8012bcc:	0852      	lsrs	r2, r2, #1
 8012bce:	01db      	lsls	r3, r3, #7
 8012bd0:	4313      	orrs	r3, r2
 8012bd2:	b2da      	uxtb	r2, r3
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	1c59      	adds	r1, r3, #1
 8012bd8:	6079      	str	r1, [r7, #4]
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	4413      	add	r3, r2
 8012bde:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012be0:	68bb      	ldr	r3, [r7, #8]
 8012be2:	3b01      	subs	r3, #1
 8012be4:	60bb      	str	r3, [r7, #8]
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d1ed      	bne.n	8012bc8 <sum_sfn+0x10>
	return sum;
 8012bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	3714      	adds	r7, #20
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf8:	4770      	bx	lr

08012bfa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012bfa:	b580      	push	{r7, lr}
 8012bfc:	b086      	sub	sp, #24
 8012bfe:	af00      	add	r7, sp, #0
 8012c00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012c08:	2100      	movs	r1, #0
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f7ff fc89 	bl	8012522 <dir_sdi>
 8012c10:	4603      	mov	r3, r0
 8012c12:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012c14:	7dfb      	ldrb	r3, [r7, #23]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d001      	beq.n	8012c1e <dir_find+0x24>
 8012c1a:	7dfb      	ldrb	r3, [r7, #23]
 8012c1c:	e0a9      	b.n	8012d72 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012c1e:	23ff      	movs	r3, #255	@ 0xff
 8012c20:	753b      	strb	r3, [r7, #20]
 8012c22:	7d3b      	ldrb	r3, [r7, #20]
 8012c24:	757b      	strb	r3, [r7, #21]
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012c2c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	69db      	ldr	r3, [r3, #28]
 8012c32:	4619      	mov	r1, r3
 8012c34:	6938      	ldr	r0, [r7, #16]
 8012c36:	f7ff f895 	bl	8011d64 <move_window>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012c3e:	7dfb      	ldrb	r3, [r7, #23]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	f040 8090 	bne.w	8012d66 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	6a1b      	ldr	r3, [r3, #32]
 8012c4a:	781b      	ldrb	r3, [r3, #0]
 8012c4c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012c4e:	7dbb      	ldrb	r3, [r7, #22]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d102      	bne.n	8012c5a <dir_find+0x60>
 8012c54:	2304      	movs	r3, #4
 8012c56:	75fb      	strb	r3, [r7, #23]
 8012c58:	e08a      	b.n	8012d70 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	6a1b      	ldr	r3, [r3, #32]
 8012c5e:	330b      	adds	r3, #11
 8012c60:	781b      	ldrb	r3, [r3, #0]
 8012c62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012c66:	73fb      	strb	r3, [r7, #15]
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	7bfa      	ldrb	r2, [r7, #15]
 8012c6c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8012c6e:	7dbb      	ldrb	r3, [r7, #22]
 8012c70:	2be5      	cmp	r3, #229	@ 0xe5
 8012c72:	d007      	beq.n	8012c84 <dir_find+0x8a>
 8012c74:	7bfb      	ldrb	r3, [r7, #15]
 8012c76:	f003 0308 	and.w	r3, r3, #8
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d009      	beq.n	8012c92 <dir_find+0x98>
 8012c7e:	7bfb      	ldrb	r3, [r7, #15]
 8012c80:	2b0f      	cmp	r3, #15
 8012c82:	d006      	beq.n	8012c92 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012c84:	23ff      	movs	r3, #255	@ 0xff
 8012c86:	757b      	strb	r3, [r7, #21]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012c8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8012c90:	e05e      	b.n	8012d50 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012c92:	7bfb      	ldrb	r3, [r7, #15]
 8012c94:	2b0f      	cmp	r3, #15
 8012c96:	d136      	bne.n	8012d06 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d154      	bne.n	8012d50 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012ca6:	7dbb      	ldrb	r3, [r7, #22]
 8012ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d00d      	beq.n	8012ccc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6a1b      	ldr	r3, [r3, #32]
 8012cb4:	7b5b      	ldrb	r3, [r3, #13]
 8012cb6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012cb8:	7dbb      	ldrb	r3, [r7, #22]
 8012cba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8012cbe:	75bb      	strb	r3, [r7, #22]
 8012cc0:	7dbb      	ldrb	r3, [r7, #22]
 8012cc2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	695a      	ldr	r2, [r3, #20]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012ccc:	7dba      	ldrb	r2, [r7, #22]
 8012cce:	7d7b      	ldrb	r3, [r7, #21]
 8012cd0:	429a      	cmp	r2, r3
 8012cd2:	d115      	bne.n	8012d00 <dir_find+0x106>
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6a1b      	ldr	r3, [r3, #32]
 8012cd8:	330d      	adds	r3, #13
 8012cda:	781b      	ldrb	r3, [r3, #0]
 8012cdc:	7d3a      	ldrb	r2, [r7, #20]
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d10e      	bne.n	8012d00 <dir_find+0x106>
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	691a      	ldr	r2, [r3, #16]
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	6a1b      	ldr	r3, [r3, #32]
 8012cea:	4619      	mov	r1, r3
 8012cec:	4610      	mov	r0, r2
 8012cee:	f7ff fdfd 	bl	80128ec <cmp_lfn>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d003      	beq.n	8012d00 <dir_find+0x106>
 8012cf8:	7d7b      	ldrb	r3, [r7, #21]
 8012cfa:	3b01      	subs	r3, #1
 8012cfc:	b2db      	uxtb	r3, r3
 8012cfe:	e000      	b.n	8012d02 <dir_find+0x108>
 8012d00:	23ff      	movs	r3, #255	@ 0xff
 8012d02:	757b      	strb	r3, [r7, #21]
 8012d04:	e024      	b.n	8012d50 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012d06:	7d7b      	ldrb	r3, [r7, #21]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d109      	bne.n	8012d20 <dir_find+0x126>
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	6a1b      	ldr	r3, [r3, #32]
 8012d10:	4618      	mov	r0, r3
 8012d12:	f7ff ff51 	bl	8012bb8 <sum_sfn>
 8012d16:	4603      	mov	r3, r0
 8012d18:	461a      	mov	r2, r3
 8012d1a:	7d3b      	ldrb	r3, [r7, #20]
 8012d1c:	4293      	cmp	r3, r2
 8012d1e:	d024      	beq.n	8012d6a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012d26:	f003 0301 	and.w	r3, r3, #1
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d10a      	bne.n	8012d44 <dir_find+0x14a>
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6a18      	ldr	r0, [r3, #32]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	3324      	adds	r3, #36	@ 0x24
 8012d36:	220b      	movs	r2, #11
 8012d38:	4619      	mov	r1, r3
 8012d3a:	f7fe fe20 	bl	801197e <mem_cmp>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d014      	beq.n	8012d6e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012d44:	23ff      	movs	r3, #255	@ 0xff
 8012d46:	757b      	strb	r3, [r7, #21]
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012d4e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012d50:	2100      	movs	r1, #0
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f7ff fc6e 	bl	8012634 <dir_next>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012d5c:	7dfb      	ldrb	r3, [r7, #23]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	f43f af65 	beq.w	8012c2e <dir_find+0x34>
 8012d64:	e004      	b.n	8012d70 <dir_find+0x176>
		if (res != FR_OK) break;
 8012d66:	bf00      	nop
 8012d68:	e002      	b.n	8012d70 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012d6a:	bf00      	nop
 8012d6c:	e000      	b.n	8012d70 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012d6e:	bf00      	nop

	return res;
 8012d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3718      	adds	r7, #24
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}
	...

08012d7c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b08c      	sub	sp, #48	@ 0x30
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8012d90:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d001      	beq.n	8012d9c <dir_register+0x20>
 8012d98:	2306      	movs	r3, #6
 8012d9a:	e0e0      	b.n	8012f5e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012da0:	e002      	b.n	8012da8 <dir_register+0x2c>
 8012da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012da4:	3301      	adds	r3, #1
 8012da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8012da8:	69fb      	ldr	r3, [r7, #28]
 8012daa:	691a      	ldr	r2, [r3, #16]
 8012dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dae:	005b      	lsls	r3, r3, #1
 8012db0:	4413      	add	r3, r2
 8012db2:	881b      	ldrh	r3, [r3, #0]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d1f4      	bne.n	8012da2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8012dbe:	f107 030c 	add.w	r3, r7, #12
 8012dc2:	220c      	movs	r2, #12
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7fe fd9e 	bl	8011906 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012dca:	7dfb      	ldrb	r3, [r7, #23]
 8012dcc:	f003 0301 	and.w	r3, r3, #1
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d032      	beq.n	8012e3a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2240      	movs	r2, #64	@ 0x40
 8012dd8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8012ddc:	2301      	movs	r3, #1
 8012dde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012de0:	e016      	b.n	8012e10 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8012de8:	69fb      	ldr	r3, [r7, #28]
 8012dea:	691a      	ldr	r2, [r3, #16]
 8012dec:	f107 010c 	add.w	r1, r7, #12
 8012df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012df2:	f7ff fe53 	bl	8012a9c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f7ff feff 	bl	8012bfa <dir_find>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8012e02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d106      	bne.n	8012e18 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8012e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e0c:	3301      	adds	r3, #1
 8012e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e12:	2b63      	cmp	r3, #99	@ 0x63
 8012e14:	d9e5      	bls.n	8012de2 <dir_register+0x66>
 8012e16:	e000      	b.n	8012e1a <dir_register+0x9e>
			if (res != FR_OK) break;
 8012e18:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8012e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e1c:	2b64      	cmp	r3, #100	@ 0x64
 8012e1e:	d101      	bne.n	8012e24 <dir_register+0xa8>
 8012e20:	2307      	movs	r3, #7
 8012e22:	e09c      	b.n	8012f5e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8012e24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012e28:	2b04      	cmp	r3, #4
 8012e2a:	d002      	beq.n	8012e32 <dir_register+0xb6>
 8012e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012e30:	e095      	b.n	8012f5e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8012e32:	7dfa      	ldrb	r2, [r7, #23]
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8012e3a:	7dfb      	ldrb	r3, [r7, #23]
 8012e3c:	f003 0302 	and.w	r3, r3, #2
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d007      	beq.n	8012e54 <dir_register+0xd8>
 8012e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e46:	330c      	adds	r3, #12
 8012e48:	4a47      	ldr	r2, [pc, #284]	@ (8012f68 <dir_register+0x1ec>)
 8012e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8012e4e:	089b      	lsrs	r3, r3, #2
 8012e50:	3301      	adds	r3, #1
 8012e52:	e000      	b.n	8012e56 <dir_register+0xda>
 8012e54:	2301      	movs	r3, #1
 8012e56:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8012e58:	6a39      	ldr	r1, [r7, #32]
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f7ff fcc0 	bl	80127e0 <dir_alloc>
 8012e60:	4603      	mov	r3, r0
 8012e62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8012e66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d148      	bne.n	8012f00 <dir_register+0x184>
 8012e6e:	6a3b      	ldr	r3, [r7, #32]
 8012e70:	3b01      	subs	r3, #1
 8012e72:	623b      	str	r3, [r7, #32]
 8012e74:	6a3b      	ldr	r3, [r7, #32]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d042      	beq.n	8012f00 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	695a      	ldr	r2, [r3, #20]
 8012e7e:	6a3b      	ldr	r3, [r7, #32]
 8012e80:	015b      	lsls	r3, r3, #5
 8012e82:	1ad3      	subs	r3, r2, r3
 8012e84:	4619      	mov	r1, r3
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f7ff fb4b 	bl	8012522 <dir_sdi>
 8012e8c:	4603      	mov	r3, r0
 8012e8e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8012e92:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d132      	bne.n	8012f00 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	3324      	adds	r3, #36	@ 0x24
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f7ff fe8a 	bl	8012bb8 <sum_sfn>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	69db      	ldr	r3, [r3, #28]
 8012eac:	4619      	mov	r1, r3
 8012eae:	69f8      	ldr	r0, [r7, #28]
 8012eb0:	f7fe ff58 	bl	8011d64 <move_window>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8012eba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d11d      	bne.n	8012efe <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012ec2:	69fb      	ldr	r3, [r7, #28]
 8012ec4:	6918      	ldr	r0, [r3, #16]
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	6a19      	ldr	r1, [r3, #32]
 8012eca:	6a3b      	ldr	r3, [r7, #32]
 8012ecc:	b2da      	uxtb	r2, r3
 8012ece:	7efb      	ldrb	r3, [r7, #27]
 8012ed0:	f7ff fd7c 	bl	80129cc <put_lfn>
				fs->wflag = 1;
 8012ed4:	69fb      	ldr	r3, [r7, #28]
 8012ed6:	2201      	movs	r2, #1
 8012ed8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8012eda:	2100      	movs	r1, #0
 8012edc:	6878      	ldr	r0, [r7, #4]
 8012ede:	f7ff fba9 	bl	8012634 <dir_next>
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8012ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d107      	bne.n	8012f00 <dir_register+0x184>
 8012ef0:	6a3b      	ldr	r3, [r7, #32]
 8012ef2:	3b01      	subs	r3, #1
 8012ef4:	623b      	str	r3, [r7, #32]
 8012ef6:	6a3b      	ldr	r3, [r7, #32]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d1d5      	bne.n	8012ea8 <dir_register+0x12c>
 8012efc:	e000      	b.n	8012f00 <dir_register+0x184>
				if (res != FR_OK) break;
 8012efe:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012f00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d128      	bne.n	8012f5a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	69db      	ldr	r3, [r3, #28]
 8012f0c:	4619      	mov	r1, r3
 8012f0e:	69f8      	ldr	r0, [r7, #28]
 8012f10:	f7fe ff28 	bl	8011d64 <move_window>
 8012f14:	4603      	mov	r3, r0
 8012f16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8012f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d11b      	bne.n	8012f5a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	6a1b      	ldr	r3, [r3, #32]
 8012f26:	2220      	movs	r2, #32
 8012f28:	2100      	movs	r1, #0
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	f7fe fd0c 	bl	8011948 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6a18      	ldr	r0, [r3, #32]
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	3324      	adds	r3, #36	@ 0x24
 8012f38:	220b      	movs	r2, #11
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	f7fe fce3 	bl	8011906 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	6a1b      	ldr	r3, [r3, #32]
 8012f4a:	330c      	adds	r3, #12
 8012f4c:	f002 0218 	and.w	r2, r2, #24
 8012f50:	b2d2      	uxtb	r2, r2
 8012f52:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8012f54:	69fb      	ldr	r3, [r7, #28]
 8012f56:	2201      	movs	r2, #1
 8012f58:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8012f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3730      	adds	r7, #48	@ 0x30
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}
 8012f66:	bf00      	nop
 8012f68:	4ec4ec4f 	.word	0x4ec4ec4f

08012f6c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b088      	sub	sp, #32
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8012f7c:	683b      	ldr	r3, [r7, #0]
 8012f7e:	2200      	movs	r2, #0
 8012f80:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	69db      	ldr	r3, [r3, #28]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	f000 80ca 	beq.w	8013120 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012f94:	d032      	beq.n	8012ffc <get_fileinfo+0x90>
			i = j = 0;
 8012f96:	2300      	movs	r3, #0
 8012f98:	61bb      	str	r3, [r7, #24]
 8012f9a:	69bb      	ldr	r3, [r7, #24]
 8012f9c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012f9e:	e01b      	b.n	8012fd8 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8012fa0:	89fb      	ldrh	r3, [r7, #14]
 8012fa2:	2100      	movs	r1, #0
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f001 fd47 	bl	8014a38 <ff_convert>
 8012faa:	4603      	mov	r3, r0
 8012fac:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8012fae:	89fb      	ldrh	r3, [r7, #14]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d102      	bne.n	8012fba <get_fileinfo+0x4e>
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	61fb      	str	r3, [r7, #28]
 8012fb8:	e01a      	b.n	8012ff0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8012fba:	69fb      	ldr	r3, [r7, #28]
 8012fbc:	2bfe      	cmp	r3, #254	@ 0xfe
 8012fbe:	d902      	bls.n	8012fc6 <get_fileinfo+0x5a>
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	61fb      	str	r3, [r7, #28]
 8012fc4:	e014      	b.n	8012ff0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8012fc6:	69fb      	ldr	r3, [r7, #28]
 8012fc8:	1c5a      	adds	r2, r3, #1
 8012fca:	61fa      	str	r2, [r7, #28]
 8012fcc:	89fa      	ldrh	r2, [r7, #14]
 8012fce:	b2d1      	uxtb	r1, r2
 8012fd0:	683a      	ldr	r2, [r7, #0]
 8012fd2:	4413      	add	r3, r2
 8012fd4:	460a      	mov	r2, r1
 8012fd6:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012fd8:	693b      	ldr	r3, [r7, #16]
 8012fda:	691a      	ldr	r2, [r3, #16]
 8012fdc:	69bb      	ldr	r3, [r7, #24]
 8012fde:	1c59      	adds	r1, r3, #1
 8012fe0:	61b9      	str	r1, [r7, #24]
 8012fe2:	005b      	lsls	r3, r3, #1
 8012fe4:	4413      	add	r3, r2
 8012fe6:	881b      	ldrh	r3, [r3, #0]
 8012fe8:	81fb      	strh	r3, [r7, #14]
 8012fea:	89fb      	ldrh	r3, [r7, #14]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d1d7      	bne.n	8012fa0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8012ff0:	683a      	ldr	r2, [r7, #0]
 8012ff2:	69fb      	ldr	r3, [r7, #28]
 8012ff4:	4413      	add	r3, r2
 8012ff6:	3316      	adds	r3, #22
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	61bb      	str	r3, [r7, #24]
 8013000:	69bb      	ldr	r3, [r7, #24]
 8013002:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8013004:	683a      	ldr	r2, [r7, #0]
 8013006:	69fb      	ldr	r3, [r7, #28]
 8013008:	4413      	add	r3, r2
 801300a:	3316      	adds	r3, #22
 801300c:	781b      	ldrb	r3, [r3, #0]
 801300e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8013010:	e04d      	b.n	80130ae <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	6a1a      	ldr	r2, [r3, #32]
 8013016:	69fb      	ldr	r3, [r7, #28]
 8013018:	1c59      	adds	r1, r3, #1
 801301a:	61f9      	str	r1, [r7, #28]
 801301c:	4413      	add	r3, r2
 801301e:	781b      	ldrb	r3, [r3, #0]
 8013020:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8013022:	7dfb      	ldrb	r3, [r7, #23]
 8013024:	2b20      	cmp	r3, #32
 8013026:	d041      	beq.n	80130ac <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8013028:	7dfb      	ldrb	r3, [r7, #23]
 801302a:	2b05      	cmp	r3, #5
 801302c:	d101      	bne.n	8013032 <get_fileinfo+0xc6>
 801302e:	23e5      	movs	r3, #229	@ 0xe5
 8013030:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8013032:	69fb      	ldr	r3, [r7, #28]
 8013034:	2b09      	cmp	r3, #9
 8013036:	d10f      	bne.n	8013058 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8013038:	89bb      	ldrh	r3, [r7, #12]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d105      	bne.n	801304a <get_fileinfo+0xde>
 801303e:	683a      	ldr	r2, [r7, #0]
 8013040:	69bb      	ldr	r3, [r7, #24]
 8013042:	4413      	add	r3, r2
 8013044:	3316      	adds	r3, #22
 8013046:	222e      	movs	r2, #46	@ 0x2e
 8013048:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801304a:	69bb      	ldr	r3, [r7, #24]
 801304c:	1c5a      	adds	r2, r3, #1
 801304e:	61ba      	str	r2, [r7, #24]
 8013050:	683a      	ldr	r2, [r7, #0]
 8013052:	4413      	add	r3, r2
 8013054:	222e      	movs	r2, #46	@ 0x2e
 8013056:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8013058:	683a      	ldr	r2, [r7, #0]
 801305a:	69bb      	ldr	r3, [r7, #24]
 801305c:	4413      	add	r3, r2
 801305e:	3309      	adds	r3, #9
 8013060:	7dfa      	ldrb	r2, [r7, #23]
 8013062:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8013064:	89bb      	ldrh	r3, [r7, #12]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d11c      	bne.n	80130a4 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801306a:	7dfb      	ldrb	r3, [r7, #23]
 801306c:	2b40      	cmp	r3, #64	@ 0x40
 801306e:	d913      	bls.n	8013098 <get_fileinfo+0x12c>
 8013070:	7dfb      	ldrb	r3, [r7, #23]
 8013072:	2b5a      	cmp	r3, #90	@ 0x5a
 8013074:	d810      	bhi.n	8013098 <get_fileinfo+0x12c>
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	6a1b      	ldr	r3, [r3, #32]
 801307a:	330c      	adds	r3, #12
 801307c:	781b      	ldrb	r3, [r3, #0]
 801307e:	461a      	mov	r2, r3
 8013080:	69fb      	ldr	r3, [r7, #28]
 8013082:	2b08      	cmp	r3, #8
 8013084:	d901      	bls.n	801308a <get_fileinfo+0x11e>
 8013086:	2310      	movs	r3, #16
 8013088:	e000      	b.n	801308c <get_fileinfo+0x120>
 801308a:	2308      	movs	r3, #8
 801308c:	4013      	ands	r3, r2
 801308e:	2b00      	cmp	r3, #0
 8013090:	d002      	beq.n	8013098 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8013092:	7dfb      	ldrb	r3, [r7, #23]
 8013094:	3320      	adds	r3, #32
 8013096:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8013098:	683a      	ldr	r2, [r7, #0]
 801309a:	69bb      	ldr	r3, [r7, #24]
 801309c:	4413      	add	r3, r2
 801309e:	3316      	adds	r3, #22
 80130a0:	7dfa      	ldrb	r2, [r7, #23]
 80130a2:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80130a4:	69bb      	ldr	r3, [r7, #24]
 80130a6:	3301      	adds	r3, #1
 80130a8:	61bb      	str	r3, [r7, #24]
 80130aa:	e000      	b.n	80130ae <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 80130ac:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80130ae:	69fb      	ldr	r3, [r7, #28]
 80130b0:	2b0a      	cmp	r3, #10
 80130b2:	d9ae      	bls.n	8013012 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80130b4:	89bb      	ldrh	r3, [r7, #12]
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d10d      	bne.n	80130d6 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 80130ba:	683a      	ldr	r2, [r7, #0]
 80130bc:	69bb      	ldr	r3, [r7, #24]
 80130be:	4413      	add	r3, r2
 80130c0:	3316      	adds	r3, #22
 80130c2:	2200      	movs	r2, #0
 80130c4:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	6a1b      	ldr	r3, [r3, #32]
 80130ca:	330c      	adds	r3, #12
 80130cc:	781b      	ldrb	r3, [r3, #0]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d101      	bne.n	80130d6 <get_fileinfo+0x16a>
 80130d2:	2300      	movs	r3, #0
 80130d4:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80130d6:	683a      	ldr	r2, [r7, #0]
 80130d8:	69bb      	ldr	r3, [r7, #24]
 80130da:	4413      	add	r3, r2
 80130dc:	3309      	adds	r3, #9
 80130de:	2200      	movs	r2, #0
 80130e0:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	6a1b      	ldr	r3, [r3, #32]
 80130e6:	7ada      	ldrb	r2, [r3, #11]
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	6a1b      	ldr	r3, [r3, #32]
 80130f0:	331c      	adds	r3, #28
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7fe fb9d 	bl	8011832 <ld_dword>
 80130f8:	4602      	mov	r2, r0
 80130fa:	683b      	ldr	r3, [r7, #0]
 80130fc:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	6a1b      	ldr	r3, [r3, #32]
 8013102:	3316      	adds	r3, #22
 8013104:	4618      	mov	r0, r3
 8013106:	f7fe fb94 	bl	8011832 <ld_dword>
 801310a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801310c:	68bb      	ldr	r3, [r7, #8]
 801310e:	b29a      	uxth	r2, r3
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	80da      	strh	r2, [r3, #6]
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	0c1b      	lsrs	r3, r3, #16
 8013118:	b29a      	uxth	r2, r3
 801311a:	683b      	ldr	r3, [r7, #0]
 801311c:	809a      	strh	r2, [r3, #4]
 801311e:	e000      	b.n	8013122 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013120:	bf00      	nop
}
 8013122:	3720      	adds	r7, #32
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}

08013128 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b08a      	sub	sp, #40	@ 0x28
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	613b      	str	r3, [r7, #16]
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	691b      	ldr	r3, [r3, #16]
 801313e:	60fb      	str	r3, [r7, #12]
 8013140:	2300      	movs	r3, #0
 8013142:	617b      	str	r3, [r7, #20]
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8013148:	69bb      	ldr	r3, [r7, #24]
 801314a:	1c5a      	adds	r2, r3, #1
 801314c:	61ba      	str	r2, [r7, #24]
 801314e:	693a      	ldr	r2, [r7, #16]
 8013150:	4413      	add	r3, r2
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8013156:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013158:	2b1f      	cmp	r3, #31
 801315a:	d940      	bls.n	80131de <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801315c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801315e:	2b2f      	cmp	r3, #47	@ 0x2f
 8013160:	d006      	beq.n	8013170 <create_name+0x48>
 8013162:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013164:	2b5c      	cmp	r3, #92	@ 0x5c
 8013166:	d110      	bne.n	801318a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013168:	e002      	b.n	8013170 <create_name+0x48>
 801316a:	69bb      	ldr	r3, [r7, #24]
 801316c:	3301      	adds	r3, #1
 801316e:	61bb      	str	r3, [r7, #24]
 8013170:	693a      	ldr	r2, [r7, #16]
 8013172:	69bb      	ldr	r3, [r7, #24]
 8013174:	4413      	add	r3, r2
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	2b2f      	cmp	r3, #47	@ 0x2f
 801317a:	d0f6      	beq.n	801316a <create_name+0x42>
 801317c:	693a      	ldr	r2, [r7, #16]
 801317e:	69bb      	ldr	r3, [r7, #24]
 8013180:	4413      	add	r3, r2
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	2b5c      	cmp	r3, #92	@ 0x5c
 8013186:	d0f0      	beq.n	801316a <create_name+0x42>
			break;
 8013188:	e02a      	b.n	80131e0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	2bfe      	cmp	r3, #254	@ 0xfe
 801318e:	d901      	bls.n	8013194 <create_name+0x6c>
 8013190:	2306      	movs	r3, #6
 8013192:	e17d      	b.n	8013490 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8013194:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013196:	b2db      	uxtb	r3, r3
 8013198:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801319a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801319c:	2101      	movs	r1, #1
 801319e:	4618      	mov	r0, r3
 80131a0:	f001 fc4a 	bl	8014a38 <ff_convert>
 80131a4:	4603      	mov	r3, r0
 80131a6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80131a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d101      	bne.n	80131b2 <create_name+0x8a>
 80131ae:	2306      	movs	r3, #6
 80131b0:	e16e      	b.n	8013490 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80131b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80131b6:	d809      	bhi.n	80131cc <create_name+0xa4>
 80131b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131ba:	4619      	mov	r1, r3
 80131bc:	488d      	ldr	r0, [pc, #564]	@ (80133f4 <create_name+0x2cc>)
 80131be:	f7fe fc05 	bl	80119cc <chk_chr>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d001      	beq.n	80131cc <create_name+0xa4>
 80131c8:	2306      	movs	r3, #6
 80131ca:	e161      	b.n	8013490 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	1c5a      	adds	r2, r3, #1
 80131d0:	617a      	str	r2, [r7, #20]
 80131d2:	005b      	lsls	r3, r3, #1
 80131d4:	68fa      	ldr	r2, [r7, #12]
 80131d6:	4413      	add	r3, r2
 80131d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80131da:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80131dc:	e7b4      	b.n	8013148 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80131de:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80131e0:	693a      	ldr	r2, [r7, #16]
 80131e2:	69bb      	ldr	r3, [r7, #24]
 80131e4:	441a      	add	r2, r3
 80131e6:	683b      	ldr	r3, [r7, #0]
 80131e8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80131ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80131ec:	2b1f      	cmp	r3, #31
 80131ee:	d801      	bhi.n	80131f4 <create_name+0xcc>
 80131f0:	2304      	movs	r3, #4
 80131f2:	e000      	b.n	80131f6 <create_name+0xce>
 80131f4:	2300      	movs	r3, #0
 80131f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80131fa:	e011      	b.n	8013220 <create_name+0xf8>
		w = lfn[di - 1];
 80131fc:	697a      	ldr	r2, [r7, #20]
 80131fe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8013202:	4413      	add	r3, r2
 8013204:	005b      	lsls	r3, r3, #1
 8013206:	68fa      	ldr	r2, [r7, #12]
 8013208:	4413      	add	r3, r2
 801320a:	881b      	ldrh	r3, [r3, #0]
 801320c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 801320e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013210:	2b20      	cmp	r3, #32
 8013212:	d002      	beq.n	801321a <create_name+0xf2>
 8013214:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013216:	2b2e      	cmp	r3, #46	@ 0x2e
 8013218:	d106      	bne.n	8013228 <create_name+0x100>
		di--;
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	3b01      	subs	r3, #1
 801321e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d1ea      	bne.n	80131fc <create_name+0xd4>
 8013226:	e000      	b.n	801322a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8013228:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801322a:	697b      	ldr	r3, [r7, #20]
 801322c:	005b      	lsls	r3, r3, #1
 801322e:	68fa      	ldr	r2, [r7, #12]
 8013230:	4413      	add	r3, r2
 8013232:	2200      	movs	r2, #0
 8013234:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013236:	697b      	ldr	r3, [r7, #20]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d101      	bne.n	8013240 <create_name+0x118>
 801323c:	2306      	movs	r3, #6
 801323e:	e127      	b.n	8013490 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	3324      	adds	r3, #36	@ 0x24
 8013244:	220b      	movs	r2, #11
 8013246:	2120      	movs	r1, #32
 8013248:	4618      	mov	r0, r3
 801324a:	f7fe fb7d 	bl	8011948 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801324e:	2300      	movs	r3, #0
 8013250:	61bb      	str	r3, [r7, #24]
 8013252:	e002      	b.n	801325a <create_name+0x132>
 8013254:	69bb      	ldr	r3, [r7, #24]
 8013256:	3301      	adds	r3, #1
 8013258:	61bb      	str	r3, [r7, #24]
 801325a:	69bb      	ldr	r3, [r7, #24]
 801325c:	005b      	lsls	r3, r3, #1
 801325e:	68fa      	ldr	r2, [r7, #12]
 8013260:	4413      	add	r3, r2
 8013262:	881b      	ldrh	r3, [r3, #0]
 8013264:	2b20      	cmp	r3, #32
 8013266:	d0f5      	beq.n	8013254 <create_name+0x12c>
 8013268:	69bb      	ldr	r3, [r7, #24]
 801326a:	005b      	lsls	r3, r3, #1
 801326c:	68fa      	ldr	r2, [r7, #12]
 801326e:	4413      	add	r3, r2
 8013270:	881b      	ldrh	r3, [r3, #0]
 8013272:	2b2e      	cmp	r3, #46	@ 0x2e
 8013274:	d0ee      	beq.n	8013254 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8013276:	69bb      	ldr	r3, [r7, #24]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d009      	beq.n	8013290 <create_name+0x168>
 801327c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013280:	f043 0303 	orr.w	r3, r3, #3
 8013284:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8013288:	e002      	b.n	8013290 <create_name+0x168>
 801328a:	697b      	ldr	r3, [r7, #20]
 801328c:	3b01      	subs	r3, #1
 801328e:	617b      	str	r3, [r7, #20]
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d009      	beq.n	80132aa <create_name+0x182>
 8013296:	697a      	ldr	r2, [r7, #20]
 8013298:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801329c:	4413      	add	r3, r2
 801329e:	005b      	lsls	r3, r3, #1
 80132a0:	68fa      	ldr	r2, [r7, #12]
 80132a2:	4413      	add	r3, r2
 80132a4:	881b      	ldrh	r3, [r3, #0]
 80132a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80132a8:	d1ef      	bne.n	801328a <create_name+0x162>

	i = b = 0; ni = 8;
 80132aa:	2300      	movs	r3, #0
 80132ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80132b0:	2300      	movs	r3, #0
 80132b2:	623b      	str	r3, [r7, #32]
 80132b4:	2308      	movs	r3, #8
 80132b6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80132b8:	69bb      	ldr	r3, [r7, #24]
 80132ba:	1c5a      	adds	r2, r3, #1
 80132bc:	61ba      	str	r2, [r7, #24]
 80132be:	005b      	lsls	r3, r3, #1
 80132c0:	68fa      	ldr	r2, [r7, #12]
 80132c2:	4413      	add	r3, r2
 80132c4:	881b      	ldrh	r3, [r3, #0]
 80132c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80132c8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	f000 8090 	beq.w	80133f0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80132d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80132d2:	2b20      	cmp	r3, #32
 80132d4:	d006      	beq.n	80132e4 <create_name+0x1bc>
 80132d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80132d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80132da:	d10a      	bne.n	80132f2 <create_name+0x1ca>
 80132dc:	69ba      	ldr	r2, [r7, #24]
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	429a      	cmp	r2, r3
 80132e2:	d006      	beq.n	80132f2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80132e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80132e8:	f043 0303 	orr.w	r3, r3, #3
 80132ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80132f0:	e07d      	b.n	80133ee <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80132f2:	6a3a      	ldr	r2, [r7, #32]
 80132f4:	69fb      	ldr	r3, [r7, #28]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d203      	bcs.n	8013302 <create_name+0x1da>
 80132fa:	69ba      	ldr	r2, [r7, #24]
 80132fc:	697b      	ldr	r3, [r7, #20]
 80132fe:	429a      	cmp	r2, r3
 8013300:	d123      	bne.n	801334a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8013302:	69fb      	ldr	r3, [r7, #28]
 8013304:	2b0b      	cmp	r3, #11
 8013306:	d106      	bne.n	8013316 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8013308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801330c:	f043 0303 	orr.w	r3, r3, #3
 8013310:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013314:	e075      	b.n	8013402 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013316:	69ba      	ldr	r2, [r7, #24]
 8013318:	697b      	ldr	r3, [r7, #20]
 801331a:	429a      	cmp	r2, r3
 801331c:	d005      	beq.n	801332a <create_name+0x202>
 801331e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013322:	f043 0303 	orr.w	r3, r3, #3
 8013326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 801332a:	69ba      	ldr	r2, [r7, #24]
 801332c:	697b      	ldr	r3, [r7, #20]
 801332e:	429a      	cmp	r2, r3
 8013330:	d866      	bhi.n	8013400 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013332:	697b      	ldr	r3, [r7, #20]
 8013334:	61bb      	str	r3, [r7, #24]
 8013336:	2308      	movs	r3, #8
 8013338:	623b      	str	r3, [r7, #32]
 801333a:	230b      	movs	r3, #11
 801333c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801333e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013342:	009b      	lsls	r3, r3, #2
 8013344:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013348:	e051      	b.n	80133ee <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801334a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801334c:	2b7f      	cmp	r3, #127	@ 0x7f
 801334e:	d914      	bls.n	801337a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013350:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013352:	2100      	movs	r1, #0
 8013354:	4618      	mov	r0, r3
 8013356:	f001 fb6f 	bl	8014a38 <ff_convert>
 801335a:	4603      	mov	r3, r0
 801335c:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801335e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013360:	2b00      	cmp	r3, #0
 8013362:	d004      	beq.n	801336e <create_name+0x246>
 8013364:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013366:	3b80      	subs	r3, #128	@ 0x80
 8013368:	4a23      	ldr	r2, [pc, #140]	@ (80133f8 <create_name+0x2d0>)
 801336a:	5cd3      	ldrb	r3, [r2, r3]
 801336c:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801336e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013372:	f043 0302 	orr.w	r3, r3, #2
 8013376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801337a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801337c:	2b00      	cmp	r3, #0
 801337e:	d007      	beq.n	8013390 <create_name+0x268>
 8013380:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013382:	4619      	mov	r1, r3
 8013384:	481d      	ldr	r0, [pc, #116]	@ (80133fc <create_name+0x2d4>)
 8013386:	f7fe fb21 	bl	80119cc <chk_chr>
 801338a:	4603      	mov	r3, r0
 801338c:	2b00      	cmp	r3, #0
 801338e:	d008      	beq.n	80133a2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8013390:	235f      	movs	r3, #95	@ 0x5f
 8013392:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8013394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013398:	f043 0303 	orr.w	r3, r3, #3
 801339c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80133a0:	e01b      	b.n	80133da <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80133a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133a4:	2b40      	cmp	r3, #64	@ 0x40
 80133a6:	d909      	bls.n	80133bc <create_name+0x294>
 80133a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133aa:	2b5a      	cmp	r3, #90	@ 0x5a
 80133ac:	d806      	bhi.n	80133bc <create_name+0x294>
					b |= 2;
 80133ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80133b2:	f043 0302 	orr.w	r3, r3, #2
 80133b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80133ba:	e00e      	b.n	80133da <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80133bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133be:	2b60      	cmp	r3, #96	@ 0x60
 80133c0:	d90b      	bls.n	80133da <create_name+0x2b2>
 80133c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133c4:	2b7a      	cmp	r3, #122	@ 0x7a
 80133c6:	d808      	bhi.n	80133da <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80133c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80133cc:	f043 0301 	orr.w	r3, r3, #1
 80133d0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80133d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80133d6:	3b20      	subs	r3, #32
 80133d8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80133da:	6a3b      	ldr	r3, [r7, #32]
 80133dc:	1c5a      	adds	r2, r3, #1
 80133de:	623a      	str	r2, [r7, #32]
 80133e0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80133e2:	b2d1      	uxtb	r1, r2
 80133e4:	687a      	ldr	r2, [r7, #4]
 80133e6:	4413      	add	r3, r2
 80133e8:	460a      	mov	r2, r1
 80133ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 80133ee:	e763      	b.n	80132b8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80133f0:	bf00      	nop
 80133f2:	e006      	b.n	8013402 <create_name+0x2da>
 80133f4:	08018614 	.word	0x08018614
 80133f8:	08018ed4 	.word	0x08018ed4
 80133fc:	08018620 	.word	0x08018620
			if (si > di) break;			/* No extension */
 8013400:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8013408:	2be5      	cmp	r3, #229	@ 0xe5
 801340a:	d103      	bne.n	8013414 <create_name+0x2ec>
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2205      	movs	r2, #5
 8013410:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8013414:	69fb      	ldr	r3, [r7, #28]
 8013416:	2b08      	cmp	r3, #8
 8013418:	d104      	bne.n	8013424 <create_name+0x2fc>
 801341a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801341e:	009b      	lsls	r3, r3, #2
 8013420:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013424:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013428:	f003 030c 	and.w	r3, r3, #12
 801342c:	2b0c      	cmp	r3, #12
 801342e:	d005      	beq.n	801343c <create_name+0x314>
 8013430:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013434:	f003 0303 	and.w	r3, r3, #3
 8013438:	2b03      	cmp	r3, #3
 801343a:	d105      	bne.n	8013448 <create_name+0x320>
 801343c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013440:	f043 0302 	orr.w	r3, r3, #2
 8013444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801344c:	f003 0302 	and.w	r3, r3, #2
 8013450:	2b00      	cmp	r3, #0
 8013452:	d117      	bne.n	8013484 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013454:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013458:	f003 0303 	and.w	r3, r3, #3
 801345c:	2b01      	cmp	r3, #1
 801345e:	d105      	bne.n	801346c <create_name+0x344>
 8013460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013464:	f043 0310 	orr.w	r3, r3, #16
 8013468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801346c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013470:	f003 030c 	and.w	r3, r3, #12
 8013474:	2b04      	cmp	r3, #4
 8013476:	d105      	bne.n	8013484 <create_name+0x35c>
 8013478:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801347c:	f043 0308 	orr.w	r3, r3, #8
 8013480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801348a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 801348e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8013490:	4618      	mov	r0, r3
 8013492:	3728      	adds	r7, #40	@ 0x28
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}

08013498 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b086      	sub	sp, #24
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
 80134a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80134ac:	e002      	b.n	80134b4 <follow_path+0x1c>
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	3301      	adds	r3, #1
 80134b2:	603b      	str	r3, [r7, #0]
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	781b      	ldrb	r3, [r3, #0]
 80134b8:	2b2f      	cmp	r3, #47	@ 0x2f
 80134ba:	d0f8      	beq.n	80134ae <follow_path+0x16>
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	781b      	ldrb	r3, [r3, #0]
 80134c0:	2b5c      	cmp	r3, #92	@ 0x5c
 80134c2:	d0f4      	beq.n	80134ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	2200      	movs	r2, #0
 80134c8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	781b      	ldrb	r3, [r3, #0]
 80134ce:	2b1f      	cmp	r3, #31
 80134d0:	d80a      	bhi.n	80134e8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	2280      	movs	r2, #128	@ 0x80
 80134d6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 80134da:	2100      	movs	r1, #0
 80134dc:	6878      	ldr	r0, [r7, #4]
 80134de:	f7ff f820 	bl	8012522 <dir_sdi>
 80134e2:	4603      	mov	r3, r0
 80134e4:	75fb      	strb	r3, [r7, #23]
 80134e6:	e048      	b.n	801357a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80134e8:	463b      	mov	r3, r7
 80134ea:	4619      	mov	r1, r3
 80134ec:	6878      	ldr	r0, [r7, #4]
 80134ee:	f7ff fe1b 	bl	8013128 <create_name>
 80134f2:	4603      	mov	r3, r0
 80134f4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80134f6:	7dfb      	ldrb	r3, [r7, #23]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d139      	bne.n	8013570 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80134fc:	6878      	ldr	r0, [r7, #4]
 80134fe:	f7ff fb7c 	bl	8012bfa <dir_find>
 8013502:	4603      	mov	r3, r0
 8013504:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801350c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801350e:	7dfb      	ldrb	r3, [r7, #23]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d00a      	beq.n	801352a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013514:	7dfb      	ldrb	r3, [r7, #23]
 8013516:	2b04      	cmp	r3, #4
 8013518:	d12c      	bne.n	8013574 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801351a:	7afb      	ldrb	r3, [r7, #11]
 801351c:	f003 0304 	and.w	r3, r3, #4
 8013520:	2b00      	cmp	r3, #0
 8013522:	d127      	bne.n	8013574 <follow_path+0xdc>
 8013524:	2305      	movs	r3, #5
 8013526:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013528:	e024      	b.n	8013574 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801352a:	7afb      	ldrb	r3, [r7, #11]
 801352c:	f003 0304 	and.w	r3, r3, #4
 8013530:	2b00      	cmp	r3, #0
 8013532:	d121      	bne.n	8013578 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013534:	693b      	ldr	r3, [r7, #16]
 8013536:	799b      	ldrb	r3, [r3, #6]
 8013538:	f003 0310 	and.w	r3, r3, #16
 801353c:	2b00      	cmp	r3, #0
 801353e:	d102      	bne.n	8013546 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013540:	2305      	movs	r3, #5
 8013542:	75fb      	strb	r3, [r7, #23]
 8013544:	e019      	b.n	801357a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	695b      	ldr	r3, [r3, #20]
 8013550:	68fa      	ldr	r2, [r7, #12]
 8013552:	8992      	ldrh	r2, [r2, #12]
 8013554:	fbb3 f0f2 	udiv	r0, r3, r2
 8013558:	fb00 f202 	mul.w	r2, r0, r2
 801355c:	1a9b      	subs	r3, r3, r2
 801355e:	440b      	add	r3, r1
 8013560:	4619      	mov	r1, r3
 8013562:	68f8      	ldr	r0, [r7, #12]
 8013564:	f7ff f983 	bl	801286e <ld_clust>
 8013568:	4602      	mov	r2, r0
 801356a:	693b      	ldr	r3, [r7, #16]
 801356c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801356e:	e7bb      	b.n	80134e8 <follow_path+0x50>
			if (res != FR_OK) break;
 8013570:	bf00      	nop
 8013572:	e002      	b.n	801357a <follow_path+0xe2>
				break;
 8013574:	bf00      	nop
 8013576:	e000      	b.n	801357a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013578:	bf00      	nop
			}
		}
	}

	return res;
 801357a:	7dfb      	ldrb	r3, [r7, #23]
}
 801357c:	4618      	mov	r0, r3
 801357e:	3718      	adds	r7, #24
 8013580:	46bd      	mov	sp, r7
 8013582:	bd80      	pop	{r7, pc}

08013584 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013584:	b480      	push	{r7}
 8013586:	b087      	sub	sp, #28
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801358c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013590:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d031      	beq.n	80135fe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	617b      	str	r3, [r7, #20]
 80135a0:	e002      	b.n	80135a8 <get_ldnumber+0x24>
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	3301      	adds	r3, #1
 80135a6:	617b      	str	r3, [r7, #20]
 80135a8:	697b      	ldr	r3, [r7, #20]
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	2b1f      	cmp	r3, #31
 80135ae:	d903      	bls.n	80135b8 <get_ldnumber+0x34>
 80135b0:	697b      	ldr	r3, [r7, #20]
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	2b3a      	cmp	r3, #58	@ 0x3a
 80135b6:	d1f4      	bne.n	80135a2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80135b8:	697b      	ldr	r3, [r7, #20]
 80135ba:	781b      	ldrb	r3, [r3, #0]
 80135bc:	2b3a      	cmp	r3, #58	@ 0x3a
 80135be:	d11c      	bne.n	80135fa <get_ldnumber+0x76>
			tp = *path;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	1c5a      	adds	r2, r3, #1
 80135ca:	60fa      	str	r2, [r7, #12]
 80135cc:	781b      	ldrb	r3, [r3, #0]
 80135ce:	3b30      	subs	r3, #48	@ 0x30
 80135d0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80135d2:	68bb      	ldr	r3, [r7, #8]
 80135d4:	2b09      	cmp	r3, #9
 80135d6:	d80e      	bhi.n	80135f6 <get_ldnumber+0x72>
 80135d8:	68fa      	ldr	r2, [r7, #12]
 80135da:	697b      	ldr	r3, [r7, #20]
 80135dc:	429a      	cmp	r2, r3
 80135de:	d10a      	bne.n	80135f6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d107      	bne.n	80135f6 <get_ldnumber+0x72>
					vol = (int)i;
 80135e6:	68bb      	ldr	r3, [r7, #8]
 80135e8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	3301      	adds	r3, #1
 80135ee:	617b      	str	r3, [r7, #20]
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	697a      	ldr	r2, [r7, #20]
 80135f4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	e002      	b.n	8013600 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80135fa:	2300      	movs	r3, #0
 80135fc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80135fe:	693b      	ldr	r3, [r7, #16]
}
 8013600:	4618      	mov	r0, r3
 8013602:	371c      	adds	r7, #28
 8013604:	46bd      	mov	sp, r7
 8013606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360a:	4770      	bx	lr

0801360c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2200      	movs	r2, #0
 801361a:	70da      	strb	r2, [r3, #3]
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013622:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013624:	6839      	ldr	r1, [r7, #0]
 8013626:	6878      	ldr	r0, [r7, #4]
 8013628:	f7fe fb9c 	bl	8011d64 <move_window>
 801362c:	4603      	mov	r3, r0
 801362e:	2b00      	cmp	r3, #0
 8013630:	d001      	beq.n	8013636 <check_fs+0x2a>
 8013632:	2304      	movs	r3, #4
 8013634:	e038      	b.n	80136a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	3338      	adds	r3, #56	@ 0x38
 801363a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 801363e:	4618      	mov	r0, r3
 8013640:	f7fe f8de 	bl	8011800 <ld_word>
 8013644:	4603      	mov	r3, r0
 8013646:	461a      	mov	r2, r3
 8013648:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 801364c:	429a      	cmp	r2, r3
 801364e:	d001      	beq.n	8013654 <check_fs+0x48>
 8013650:	2303      	movs	r3, #3
 8013652:	e029      	b.n	80136a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801365a:	2be9      	cmp	r3, #233	@ 0xe9
 801365c:	d009      	beq.n	8013672 <check_fs+0x66>
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013664:	2beb      	cmp	r3, #235	@ 0xeb
 8013666:	d11e      	bne.n	80136a6 <check_fs+0x9a>
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801366e:	2b90      	cmp	r3, #144	@ 0x90
 8013670:	d119      	bne.n	80136a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	3338      	adds	r3, #56	@ 0x38
 8013676:	3336      	adds	r3, #54	@ 0x36
 8013678:	4618      	mov	r0, r3
 801367a:	f7fe f8da 	bl	8011832 <ld_dword>
 801367e:	4603      	mov	r3, r0
 8013680:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8013684:	4a0a      	ldr	r2, [pc, #40]	@ (80136b0 <check_fs+0xa4>)
 8013686:	4293      	cmp	r3, r2
 8013688:	d101      	bne.n	801368e <check_fs+0x82>
 801368a:	2300      	movs	r3, #0
 801368c:	e00c      	b.n	80136a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	3338      	adds	r3, #56	@ 0x38
 8013692:	3352      	adds	r3, #82	@ 0x52
 8013694:	4618      	mov	r0, r3
 8013696:	f7fe f8cc 	bl	8011832 <ld_dword>
 801369a:	4603      	mov	r3, r0
 801369c:	4a05      	ldr	r2, [pc, #20]	@ (80136b4 <check_fs+0xa8>)
 801369e:	4293      	cmp	r3, r2
 80136a0:	d101      	bne.n	80136a6 <check_fs+0x9a>
 80136a2:	2300      	movs	r3, #0
 80136a4:	e000      	b.n	80136a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80136a6:	2302      	movs	r3, #2
}
 80136a8:	4618      	mov	r0, r3
 80136aa:	3708      	adds	r7, #8
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}
 80136b0:	00544146 	.word	0x00544146
 80136b4:	33544146 	.word	0x33544146

080136b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b096      	sub	sp, #88	@ 0x58
 80136bc:	af00      	add	r7, sp, #0
 80136be:	60f8      	str	r0, [r7, #12]
 80136c0:	60b9      	str	r1, [r7, #8]
 80136c2:	4613      	mov	r3, r2
 80136c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80136c6:	68bb      	ldr	r3, [r7, #8]
 80136c8:	2200      	movs	r2, #0
 80136ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80136cc:	68f8      	ldr	r0, [r7, #12]
 80136ce:	f7ff ff59 	bl	8013584 <get_ldnumber>
 80136d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80136d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	da01      	bge.n	80136de <find_volume+0x26>
 80136da:	230b      	movs	r3, #11
 80136dc:	e265      	b.n	8013baa <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80136de:	4a9f      	ldr	r2, [pc, #636]	@ (801395c <find_volume+0x2a4>)
 80136e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80136e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80136e6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80136e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d101      	bne.n	80136f2 <find_volume+0x3a>
 80136ee:	230c      	movs	r3, #12
 80136f0:	e25b      	b.n	8013baa <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80136f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80136f8:	79fb      	ldrb	r3, [r7, #7]
 80136fa:	f023 0301 	bic.w	r3, r3, #1
 80136fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013702:	781b      	ldrb	r3, [r3, #0]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d01a      	beq.n	801373e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801370a:	785b      	ldrb	r3, [r3, #1]
 801370c:	4618      	mov	r0, r3
 801370e:	f7fd ffd7 	bl	80116c0 <disk_status>
 8013712:	4603      	mov	r3, r0
 8013714:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013718:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801371c:	f003 0301 	and.w	r3, r3, #1
 8013720:	2b00      	cmp	r3, #0
 8013722:	d10c      	bne.n	801373e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013724:	79fb      	ldrb	r3, [r7, #7]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d007      	beq.n	801373a <find_volume+0x82>
 801372a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801372e:	f003 0304 	and.w	r3, r3, #4
 8013732:	2b00      	cmp	r3, #0
 8013734:	d001      	beq.n	801373a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013736:	230a      	movs	r3, #10
 8013738:	e237      	b.n	8013baa <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801373a:	2300      	movs	r3, #0
 801373c:	e235      	b.n	8013baa <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801373e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013740:	2200      	movs	r2, #0
 8013742:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013746:	b2da      	uxtb	r2, r3
 8013748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801374a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801374c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801374e:	785b      	ldrb	r3, [r3, #1]
 8013750:	4618      	mov	r0, r3
 8013752:	f7fd ffcf 	bl	80116f4 <disk_initialize>
 8013756:	4603      	mov	r3, r0
 8013758:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801375c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013760:	f003 0301 	and.w	r3, r3, #1
 8013764:	2b00      	cmp	r3, #0
 8013766:	d001      	beq.n	801376c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013768:	2303      	movs	r3, #3
 801376a:	e21e      	b.n	8013baa <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801376c:	79fb      	ldrb	r3, [r7, #7]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d007      	beq.n	8013782 <find_volume+0xca>
 8013772:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8013776:	f003 0304 	and.w	r3, r3, #4
 801377a:	2b00      	cmp	r3, #0
 801377c:	d001      	beq.n	8013782 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801377e:	230a      	movs	r3, #10
 8013780:	e213      	b.n	8013baa <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8013782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013784:	7858      	ldrb	r0, [r3, #1]
 8013786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013788:	330c      	adds	r3, #12
 801378a:	461a      	mov	r2, r3
 801378c:	2102      	movs	r1, #2
 801378e:	f7fe f819 	bl	80117c4 <disk_ioctl>
 8013792:	4603      	mov	r3, r0
 8013794:	2b00      	cmp	r3, #0
 8013796:	d001      	beq.n	801379c <find_volume+0xe4>
 8013798:	2301      	movs	r3, #1
 801379a:	e206      	b.n	8013baa <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801379c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801379e:	899b      	ldrh	r3, [r3, #12]
 80137a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80137a4:	d80d      	bhi.n	80137c2 <find_volume+0x10a>
 80137a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137a8:	899b      	ldrh	r3, [r3, #12]
 80137aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80137ae:	d308      	bcc.n	80137c2 <find_volume+0x10a>
 80137b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137b2:	899b      	ldrh	r3, [r3, #12]
 80137b4:	461a      	mov	r2, r3
 80137b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137b8:	899b      	ldrh	r3, [r3, #12]
 80137ba:	3b01      	subs	r3, #1
 80137bc:	4013      	ands	r3, r2
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d001      	beq.n	80137c6 <find_volume+0x10e>
 80137c2:	2301      	movs	r3, #1
 80137c4:	e1f1      	b.n	8013baa <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80137c6:	2300      	movs	r3, #0
 80137c8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80137ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80137cc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80137ce:	f7ff ff1d 	bl	801360c <check_fs>
 80137d2:	4603      	mov	r3, r0
 80137d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80137d8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80137dc:	2b02      	cmp	r3, #2
 80137de:	d149      	bne.n	8013874 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80137e0:	2300      	movs	r3, #0
 80137e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80137e4:	e01e      	b.n	8013824 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80137e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137e8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80137ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80137ee:	011b      	lsls	r3, r3, #4
 80137f0:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80137f4:	4413      	add	r3, r2
 80137f6:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80137f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137fa:	3304      	adds	r3, #4
 80137fc:	781b      	ldrb	r3, [r3, #0]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d006      	beq.n	8013810 <find_volume+0x158>
 8013802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013804:	3308      	adds	r3, #8
 8013806:	4618      	mov	r0, r3
 8013808:	f7fe f813 	bl	8011832 <ld_dword>
 801380c:	4602      	mov	r2, r0
 801380e:	e000      	b.n	8013812 <find_volume+0x15a>
 8013810:	2200      	movs	r2, #0
 8013812:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013814:	009b      	lsls	r3, r3, #2
 8013816:	3358      	adds	r3, #88	@ 0x58
 8013818:	443b      	add	r3, r7
 801381a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801381e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013820:	3301      	adds	r3, #1
 8013822:	643b      	str	r3, [r7, #64]	@ 0x40
 8013824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013826:	2b03      	cmp	r3, #3
 8013828:	d9dd      	bls.n	80137e6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801382a:	2300      	movs	r3, #0
 801382c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 801382e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013830:	2b00      	cmp	r3, #0
 8013832:	d002      	beq.n	801383a <find_volume+0x182>
 8013834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013836:	3b01      	subs	r3, #1
 8013838:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801383a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801383c:	009b      	lsls	r3, r3, #2
 801383e:	3358      	adds	r3, #88	@ 0x58
 8013840:	443b      	add	r3, r7
 8013842:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013846:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801384a:	2b00      	cmp	r3, #0
 801384c:	d005      	beq.n	801385a <find_volume+0x1a2>
 801384e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8013850:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013852:	f7ff fedb 	bl	801360c <check_fs>
 8013856:	4603      	mov	r3, r0
 8013858:	e000      	b.n	801385c <find_volume+0x1a4>
 801385a:	2303      	movs	r3, #3
 801385c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013860:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013864:	2b01      	cmp	r3, #1
 8013866:	d905      	bls.n	8013874 <find_volume+0x1bc>
 8013868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801386a:	3301      	adds	r3, #1
 801386c:	643b      	str	r3, [r7, #64]	@ 0x40
 801386e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013870:	2b03      	cmp	r3, #3
 8013872:	d9e2      	bls.n	801383a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013874:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013878:	2b04      	cmp	r3, #4
 801387a:	d101      	bne.n	8013880 <find_volume+0x1c8>
 801387c:	2301      	movs	r3, #1
 801387e:	e194      	b.n	8013baa <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013880:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013884:	2b01      	cmp	r3, #1
 8013886:	d901      	bls.n	801388c <find_volume+0x1d4>
 8013888:	230d      	movs	r3, #13
 801388a:	e18e      	b.n	8013baa <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801388c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801388e:	3338      	adds	r3, #56	@ 0x38
 8013890:	330b      	adds	r3, #11
 8013892:	4618      	mov	r0, r3
 8013894:	f7fd ffb4 	bl	8011800 <ld_word>
 8013898:	4603      	mov	r3, r0
 801389a:	461a      	mov	r2, r3
 801389c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801389e:	899b      	ldrh	r3, [r3, #12]
 80138a0:	429a      	cmp	r2, r3
 80138a2:	d001      	beq.n	80138a8 <find_volume+0x1f0>
 80138a4:	230d      	movs	r3, #13
 80138a6:	e180      	b.n	8013baa <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80138a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138aa:	3338      	adds	r3, #56	@ 0x38
 80138ac:	3316      	adds	r3, #22
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7fd ffa6 	bl	8011800 <ld_word>
 80138b4:	4603      	mov	r3, r0
 80138b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80138b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d106      	bne.n	80138cc <find_volume+0x214>
 80138be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138c0:	3338      	adds	r3, #56	@ 0x38
 80138c2:	3324      	adds	r3, #36	@ 0x24
 80138c4:	4618      	mov	r0, r3
 80138c6:	f7fd ffb4 	bl	8011832 <ld_dword>
 80138ca:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80138cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80138d0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80138d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138d4:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80138d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80138dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138de:	789b      	ldrb	r3, [r3, #2]
 80138e0:	2b01      	cmp	r3, #1
 80138e2:	d005      	beq.n	80138f0 <find_volume+0x238>
 80138e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138e6:	789b      	ldrb	r3, [r3, #2]
 80138e8:	2b02      	cmp	r3, #2
 80138ea:	d001      	beq.n	80138f0 <find_volume+0x238>
 80138ec:	230d      	movs	r3, #13
 80138ee:	e15c      	b.n	8013baa <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80138f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f2:	789b      	ldrb	r3, [r3, #2]
 80138f4:	461a      	mov	r2, r3
 80138f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80138f8:	fb02 f303 	mul.w	r3, r2, r3
 80138fc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80138fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013900:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8013904:	461a      	mov	r2, r3
 8013906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013908:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801390a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801390c:	895b      	ldrh	r3, [r3, #10]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d008      	beq.n	8013924 <find_volume+0x26c>
 8013912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013914:	895b      	ldrh	r3, [r3, #10]
 8013916:	461a      	mov	r2, r3
 8013918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801391a:	895b      	ldrh	r3, [r3, #10]
 801391c:	3b01      	subs	r3, #1
 801391e:	4013      	ands	r3, r2
 8013920:	2b00      	cmp	r3, #0
 8013922:	d001      	beq.n	8013928 <find_volume+0x270>
 8013924:	230d      	movs	r3, #13
 8013926:	e140      	b.n	8013baa <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801392a:	3338      	adds	r3, #56	@ 0x38
 801392c:	3311      	adds	r3, #17
 801392e:	4618      	mov	r0, r3
 8013930:	f7fd ff66 	bl	8011800 <ld_word>
 8013934:	4603      	mov	r3, r0
 8013936:	461a      	mov	r2, r3
 8013938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801393a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801393c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801393e:	891b      	ldrh	r3, [r3, #8]
 8013940:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013942:	8992      	ldrh	r2, [r2, #12]
 8013944:	0952      	lsrs	r2, r2, #5
 8013946:	b292      	uxth	r2, r2
 8013948:	fbb3 f1f2 	udiv	r1, r3, r2
 801394c:	fb01 f202 	mul.w	r2, r1, r2
 8013950:	1a9b      	subs	r3, r3, r2
 8013952:	b29b      	uxth	r3, r3
 8013954:	2b00      	cmp	r3, #0
 8013956:	d003      	beq.n	8013960 <find_volume+0x2a8>
 8013958:	230d      	movs	r3, #13
 801395a:	e126      	b.n	8013baa <find_volume+0x4f2>
 801395c:	240005d8 	.word	0x240005d8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013962:	3338      	adds	r3, #56	@ 0x38
 8013964:	3313      	adds	r3, #19
 8013966:	4618      	mov	r0, r3
 8013968:	f7fd ff4a 	bl	8011800 <ld_word>
 801396c:	4603      	mov	r3, r0
 801396e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013970:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013972:	2b00      	cmp	r3, #0
 8013974:	d106      	bne.n	8013984 <find_volume+0x2cc>
 8013976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013978:	3338      	adds	r3, #56	@ 0x38
 801397a:	3320      	adds	r3, #32
 801397c:	4618      	mov	r0, r3
 801397e:	f7fd ff58 	bl	8011832 <ld_dword>
 8013982:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013986:	3338      	adds	r3, #56	@ 0x38
 8013988:	330e      	adds	r3, #14
 801398a:	4618      	mov	r0, r3
 801398c:	f7fd ff38 	bl	8011800 <ld_word>
 8013990:	4603      	mov	r3, r0
 8013992:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013994:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8013996:	2b00      	cmp	r3, #0
 8013998:	d101      	bne.n	801399e <find_volume+0x2e6>
 801399a:	230d      	movs	r3, #13
 801399c:	e105      	b.n	8013baa <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801399e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80139a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80139a2:	4413      	add	r3, r2
 80139a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80139a6:	8911      	ldrh	r1, [r2, #8]
 80139a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80139aa:	8992      	ldrh	r2, [r2, #12]
 80139ac:	0952      	lsrs	r2, r2, #5
 80139ae:	b292      	uxth	r2, r2
 80139b0:	fbb1 f2f2 	udiv	r2, r1, r2
 80139b4:	b292      	uxth	r2, r2
 80139b6:	4413      	add	r3, r2
 80139b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80139ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80139bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139be:	429a      	cmp	r2, r3
 80139c0:	d201      	bcs.n	80139c6 <find_volume+0x30e>
 80139c2:	230d      	movs	r3, #13
 80139c4:	e0f1      	b.n	8013baa <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80139c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80139c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139ca:	1ad3      	subs	r3, r2, r3
 80139cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80139ce:	8952      	ldrh	r2, [r2, #10]
 80139d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80139d4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80139d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d101      	bne.n	80139e0 <find_volume+0x328>
 80139dc:	230d      	movs	r3, #13
 80139de:	e0e4      	b.n	8013baa <find_volume+0x4f2>
		fmt = FS_FAT32;
 80139e0:	2303      	movs	r3, #3
 80139e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80139e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139e8:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80139ec:	4293      	cmp	r3, r2
 80139ee:	d802      	bhi.n	80139f6 <find_volume+0x33e>
 80139f0:	2302      	movs	r3, #2
 80139f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80139f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139f8:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80139fc:	4293      	cmp	r3, r2
 80139fe:	d802      	bhi.n	8013a06 <find_volume+0x34e>
 8013a00:	2301      	movs	r3, #1
 8013a02:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a08:	1c9a      	adds	r2, r3, #2
 8013a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a0c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8013a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a12:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013a14:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8013a16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013a18:	441a      	add	r2, r3
 8013a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a1c:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8013a1e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a22:	441a      	add	r2, r3
 8013a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a26:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8013a28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013a2c:	2b03      	cmp	r3, #3
 8013a2e:	d11e      	bne.n	8013a6e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a32:	3338      	adds	r3, #56	@ 0x38
 8013a34:	332a      	adds	r3, #42	@ 0x2a
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7fd fee2 	bl	8011800 <ld_word>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d001      	beq.n	8013a46 <find_volume+0x38e>
 8013a42:	230d      	movs	r3, #13
 8013a44:	e0b1      	b.n	8013baa <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a48:	891b      	ldrh	r3, [r3, #8]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d001      	beq.n	8013a52 <find_volume+0x39a>
 8013a4e:	230d      	movs	r3, #13
 8013a50:	e0ab      	b.n	8013baa <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013a52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a54:	3338      	adds	r3, #56	@ 0x38
 8013a56:	332c      	adds	r3, #44	@ 0x2c
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f7fd feea 	bl	8011832 <ld_dword>
 8013a5e:	4602      	mov	r2, r0
 8013a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a62:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013a64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a66:	69db      	ldr	r3, [r3, #28]
 8013a68:	009b      	lsls	r3, r3, #2
 8013a6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8013a6c:	e01f      	b.n	8013aae <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a70:	891b      	ldrh	r3, [r3, #8]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d101      	bne.n	8013a7a <find_volume+0x3c2>
 8013a76:	230d      	movs	r3, #13
 8013a78:	e097      	b.n	8013baa <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a80:	441a      	add	r2, r3
 8013a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a84:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013a86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013a8a:	2b02      	cmp	r3, #2
 8013a8c:	d103      	bne.n	8013a96 <find_volume+0x3de>
 8013a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a90:	69db      	ldr	r3, [r3, #28]
 8013a92:	005b      	lsls	r3, r3, #1
 8013a94:	e00a      	b.n	8013aac <find_volume+0x3f4>
 8013a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a98:	69da      	ldr	r2, [r3, #28]
 8013a9a:	4613      	mov	r3, r2
 8013a9c:	005b      	lsls	r3, r3, #1
 8013a9e:	4413      	add	r3, r2
 8013aa0:	085a      	lsrs	r2, r3, #1
 8013aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aa4:	69db      	ldr	r3, [r3, #28]
 8013aa6:	f003 0301 	and.w	r3, r3, #1
 8013aaa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013aac:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013aae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ab0:	6a1a      	ldr	r2, [r3, #32]
 8013ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ab4:	899b      	ldrh	r3, [r3, #12]
 8013ab6:	4619      	mov	r1, r3
 8013ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013aba:	440b      	add	r3, r1
 8013abc:	3b01      	subs	r3, #1
 8013abe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013ac0:	8989      	ldrh	r1, [r1, #12]
 8013ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d201      	bcs.n	8013ace <find_volume+0x416>
 8013aca:	230d      	movs	r3, #13
 8013acc:	e06d      	b.n	8013baa <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ad0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013ad4:	619a      	str	r2, [r3, #24]
 8013ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ad8:	699a      	ldr	r2, [r3, #24]
 8013ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013adc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8013ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ae0:	2280      	movs	r2, #128	@ 0x80
 8013ae2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013ae4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8013ae8:	2b03      	cmp	r3, #3
 8013aea:	d149      	bne.n	8013b80 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aee:	3338      	adds	r3, #56	@ 0x38
 8013af0:	3330      	adds	r3, #48	@ 0x30
 8013af2:	4618      	mov	r0, r3
 8013af4:	f7fd fe84 	bl	8011800 <ld_word>
 8013af8:	4603      	mov	r3, r0
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d140      	bne.n	8013b80 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013afe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b00:	3301      	adds	r3, #1
 8013b02:	4619      	mov	r1, r3
 8013b04:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013b06:	f7fe f92d 	bl	8011d64 <move_window>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d137      	bne.n	8013b80 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8013b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b12:	2200      	movs	r2, #0
 8013b14:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b18:	3338      	adds	r3, #56	@ 0x38
 8013b1a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f7fd fe6e 	bl	8011800 <ld_word>
 8013b24:	4603      	mov	r3, r0
 8013b26:	461a      	mov	r2, r3
 8013b28:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d127      	bne.n	8013b80 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b32:	3338      	adds	r3, #56	@ 0x38
 8013b34:	4618      	mov	r0, r3
 8013b36:	f7fd fe7c 	bl	8011832 <ld_dword>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	4a1d      	ldr	r2, [pc, #116]	@ (8013bb4 <find_volume+0x4fc>)
 8013b3e:	4293      	cmp	r3, r2
 8013b40:	d11e      	bne.n	8013b80 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b44:	3338      	adds	r3, #56	@ 0x38
 8013b46:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7fd fe71 	bl	8011832 <ld_dword>
 8013b50:	4603      	mov	r3, r0
 8013b52:	4a19      	ldr	r2, [pc, #100]	@ (8013bb8 <find_volume+0x500>)
 8013b54:	4293      	cmp	r3, r2
 8013b56:	d113      	bne.n	8013b80 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b5a:	3338      	adds	r3, #56	@ 0x38
 8013b5c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8013b60:	4618      	mov	r0, r3
 8013b62:	f7fd fe66 	bl	8011832 <ld_dword>
 8013b66:	4602      	mov	r2, r0
 8013b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b6a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b6e:	3338      	adds	r3, #56	@ 0x38
 8013b70:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8013b74:	4618      	mov	r0, r3
 8013b76:	f7fd fe5c 	bl	8011832 <ld_dword>
 8013b7a:	4602      	mov	r2, r0
 8013b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b7e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b82:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8013b86:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013b88:	4b0c      	ldr	r3, [pc, #48]	@ (8013bbc <find_volume+0x504>)
 8013b8a:	881b      	ldrh	r3, [r3, #0]
 8013b8c:	3301      	adds	r3, #1
 8013b8e:	b29a      	uxth	r2, r3
 8013b90:	4b0a      	ldr	r3, [pc, #40]	@ (8013bbc <find_volume+0x504>)
 8013b92:	801a      	strh	r2, [r3, #0]
 8013b94:	4b09      	ldr	r3, [pc, #36]	@ (8013bbc <find_volume+0x504>)
 8013b96:	881a      	ldrh	r2, [r3, #0]
 8013b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b9a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8013b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b9e:	4a08      	ldr	r2, [pc, #32]	@ (8013bc0 <find_volume+0x508>)
 8013ba0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013ba2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013ba4:	f7fe f876 	bl	8011c94 <clear_lock>
#endif
	return FR_OK;
 8013ba8:	2300      	movs	r3, #0
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	3758      	adds	r7, #88	@ 0x58
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd80      	pop	{r7, pc}
 8013bb2:	bf00      	nop
 8013bb4:	41615252 	.word	0x41615252
 8013bb8:	61417272 	.word	0x61417272
 8013bbc:	240005dc 	.word	0x240005dc
 8013bc0:	24000600 	.word	0x24000600

08013bc4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b084      	sub	sp, #16
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
 8013bcc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013bce:	2309      	movs	r3, #9
 8013bd0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d01c      	beq.n	8013c12 <validate+0x4e>
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d018      	beq.n	8013c12 <validate+0x4e>
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	781b      	ldrb	r3, [r3, #0]
 8013be6:	2b00      	cmp	r3, #0
 8013be8:	d013      	beq.n	8013c12 <validate+0x4e>
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	889a      	ldrh	r2, [r3, #4]
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	88db      	ldrh	r3, [r3, #6]
 8013bf4:	429a      	cmp	r2, r3
 8013bf6:	d10c      	bne.n	8013c12 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	785b      	ldrb	r3, [r3, #1]
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f7fd fd5e 	bl	80116c0 <disk_status>
 8013c04:	4603      	mov	r3, r0
 8013c06:	f003 0301 	and.w	r3, r3, #1
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d101      	bne.n	8013c12 <validate+0x4e>
			res = FR_OK;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013c12:	7bfb      	ldrb	r3, [r7, #15]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d102      	bne.n	8013c1e <validate+0x5a>
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	e000      	b.n	8013c20 <validate+0x5c>
 8013c1e:	2300      	movs	r3, #0
 8013c20:	683a      	ldr	r2, [r7, #0]
 8013c22:	6013      	str	r3, [r2, #0]
	return res;
 8013c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c26:	4618      	mov	r0, r3
 8013c28:	3710      	adds	r7, #16
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}
	...

08013c30 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b088      	sub	sp, #32
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	60f8      	str	r0, [r7, #12]
 8013c38:	60b9      	str	r1, [r7, #8]
 8013c3a:	4613      	mov	r3, r2
 8013c3c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013c3e:	68bb      	ldr	r3, [r7, #8]
 8013c40:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013c42:	f107 0310 	add.w	r3, r7, #16
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7ff fc9c 	bl	8013584 <get_ldnumber>
 8013c4c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013c4e:	69fb      	ldr	r3, [r7, #28]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	da01      	bge.n	8013c58 <f_mount+0x28>
 8013c54:	230b      	movs	r3, #11
 8013c56:	e02b      	b.n	8013cb0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013c58:	4a17      	ldr	r2, [pc, #92]	@ (8013cb8 <f_mount+0x88>)
 8013c5a:	69fb      	ldr	r3, [r7, #28]
 8013c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c60:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013c62:	69bb      	ldr	r3, [r7, #24]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d005      	beq.n	8013c74 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013c68:	69b8      	ldr	r0, [r7, #24]
 8013c6a:	f7fe f813 	bl	8011c94 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013c6e:	69bb      	ldr	r3, [r7, #24]
 8013c70:	2200      	movs	r2, #0
 8013c72:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d002      	beq.n	8013c80 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013c80:	68fa      	ldr	r2, [r7, #12]
 8013c82:	490d      	ldr	r1, [pc, #52]	@ (8013cb8 <f_mount+0x88>)
 8013c84:	69fb      	ldr	r3, [r7, #28]
 8013c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d002      	beq.n	8013c96 <f_mount+0x66>
 8013c90:	79fb      	ldrb	r3, [r7, #7]
 8013c92:	2b01      	cmp	r3, #1
 8013c94:	d001      	beq.n	8013c9a <f_mount+0x6a>
 8013c96:	2300      	movs	r3, #0
 8013c98:	e00a      	b.n	8013cb0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013c9a:	f107 010c 	add.w	r1, r7, #12
 8013c9e:	f107 0308 	add.w	r3, r7, #8
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	4618      	mov	r0, r3
 8013ca6:	f7ff fd07 	bl	80136b8 <find_volume>
 8013caa:	4603      	mov	r3, r0
 8013cac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	3720      	adds	r7, #32
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}
 8013cb8:	240005d8 	.word	0x240005d8

08013cbc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b09a      	sub	sp, #104	@ 0x68
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	60f8      	str	r0, [r7, #12]
 8013cc4:	60b9      	str	r1, [r7, #8]
 8013cc6:	4613      	mov	r3, r2
 8013cc8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d101      	bne.n	8013cd4 <f_open+0x18>
 8013cd0:	2309      	movs	r3, #9
 8013cd2:	e1b7      	b.n	8014044 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013cd4:	79fb      	ldrb	r3, [r7, #7]
 8013cd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013cda:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013cdc:	79fa      	ldrb	r2, [r7, #7]
 8013cde:	f107 0114 	add.w	r1, r7, #20
 8013ce2:	f107 0308 	add.w	r3, r7, #8
 8013ce6:	4618      	mov	r0, r3
 8013ce8:	f7ff fce6 	bl	80136b8 <find_volume>
 8013cec:	4603      	mov	r3, r0
 8013cee:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8013cf2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	f040 819b 	bne.w	8014032 <f_open+0x376>
		dj.obj.fs = fs;
 8013cfc:	697b      	ldr	r3, [r7, #20]
 8013cfe:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013d00:	68ba      	ldr	r2, [r7, #8]
 8013d02:	f107 0318 	add.w	r3, r7, #24
 8013d06:	4611      	mov	r1, r2
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f7ff fbc5 	bl	8013498 <follow_path>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013d14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d118      	bne.n	8013d4e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013d1c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013d20:	b25b      	sxtb	r3, r3
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	da03      	bge.n	8013d2e <f_open+0x72>
				res = FR_INVALID_NAME;
 8013d26:	2306      	movs	r3, #6
 8013d28:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013d2c:	e00f      	b.n	8013d4e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013d2e:	79fb      	ldrb	r3, [r7, #7]
 8013d30:	2b01      	cmp	r3, #1
 8013d32:	bf8c      	ite	hi
 8013d34:	2301      	movhi	r3, #1
 8013d36:	2300      	movls	r3, #0
 8013d38:	b2db      	uxtb	r3, r3
 8013d3a:	461a      	mov	r2, r3
 8013d3c:	f107 0318 	add.w	r3, r7, #24
 8013d40:	4611      	mov	r1, r2
 8013d42:	4618      	mov	r0, r3
 8013d44:	f7fd fe5e 	bl	8011a04 <chk_lock>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013d4e:	79fb      	ldrb	r3, [r7, #7]
 8013d50:	f003 031c 	and.w	r3, r3, #28
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d07f      	beq.n	8013e58 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8013d58:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d017      	beq.n	8013d90 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013d60:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013d64:	2b04      	cmp	r3, #4
 8013d66:	d10e      	bne.n	8013d86 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013d68:	f7fd fea8 	bl	8011abc <enq_lock>
 8013d6c:	4603      	mov	r3, r0
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d006      	beq.n	8013d80 <f_open+0xc4>
 8013d72:	f107 0318 	add.w	r3, r7, #24
 8013d76:	4618      	mov	r0, r3
 8013d78:	f7ff f800 	bl	8012d7c <dir_register>
 8013d7c:	4603      	mov	r3, r0
 8013d7e:	e000      	b.n	8013d82 <f_open+0xc6>
 8013d80:	2312      	movs	r3, #18
 8013d82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013d86:	79fb      	ldrb	r3, [r7, #7]
 8013d88:	f043 0308 	orr.w	r3, r3, #8
 8013d8c:	71fb      	strb	r3, [r7, #7]
 8013d8e:	e010      	b.n	8013db2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013d90:	7fbb      	ldrb	r3, [r7, #30]
 8013d92:	f003 0311 	and.w	r3, r3, #17
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d003      	beq.n	8013da2 <f_open+0xe6>
					res = FR_DENIED;
 8013d9a:	2307      	movs	r3, #7
 8013d9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013da0:	e007      	b.n	8013db2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013da2:	79fb      	ldrb	r3, [r7, #7]
 8013da4:	f003 0304 	and.w	r3, r3, #4
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d002      	beq.n	8013db2 <f_open+0xf6>
 8013dac:	2308      	movs	r3, #8
 8013dae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013db2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d168      	bne.n	8013e8c <f_open+0x1d0>
 8013dba:	79fb      	ldrb	r3, [r7, #7]
 8013dbc:	f003 0308 	and.w	r3, r3, #8
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d063      	beq.n	8013e8c <f_open+0x1d0>
				dw = GET_FATTIME();
 8013dc4:	f7fb faec 	bl	800f3a0 <get_fattime>
 8013dc8:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dcc:	330e      	adds	r3, #14
 8013dce:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	f7fd fd6c 	bl	80118ae <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013dd8:	3316      	adds	r3, #22
 8013dda:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7fd fd66 	bl	80118ae <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013de4:	330b      	adds	r3, #11
 8013de6:	2220      	movs	r2, #32
 8013de8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013dea:	697b      	ldr	r3, [r7, #20]
 8013dec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013dee:	4611      	mov	r1, r2
 8013df0:	4618      	mov	r0, r3
 8013df2:	f7fe fd3c 	bl	801286e <ld_clust>
 8013df6:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013df8:	697b      	ldr	r3, [r7, #20]
 8013dfa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7fe fd54 	bl	80128ac <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013e06:	331c      	adds	r3, #28
 8013e08:	2100      	movs	r1, #0
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	f7fd fd4f 	bl	80118ae <st_dword>
					fs->wflag = 1;
 8013e10:	697b      	ldr	r3, [r7, #20]
 8013e12:	2201      	movs	r2, #1
 8013e14:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d037      	beq.n	8013e8c <f_open+0x1d0>
						dw = fs->winsect;
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013e20:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8013e22:	f107 0318 	add.w	r3, r7, #24
 8013e26:	2200      	movs	r2, #0
 8013e28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f7fe fa44 	bl	80122b8 <remove_chain>
 8013e30:	4603      	mov	r3, r0
 8013e32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8013e36:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d126      	bne.n	8013e8c <f_open+0x1d0>
							res = move_window(fs, dw);
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8013e42:	4618      	mov	r0, r3
 8013e44:	f7fd ff8e 	bl	8011d64 <move_window>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013e4e:	697b      	ldr	r3, [r7, #20]
 8013e50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013e52:	3a01      	subs	r2, #1
 8013e54:	615a      	str	r2, [r3, #20]
 8013e56:	e019      	b.n	8013e8c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013e58:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d115      	bne.n	8013e8c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013e60:	7fbb      	ldrb	r3, [r7, #30]
 8013e62:	f003 0310 	and.w	r3, r3, #16
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d003      	beq.n	8013e72 <f_open+0x1b6>
					res = FR_NO_FILE;
 8013e6a:	2304      	movs	r3, #4
 8013e6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013e70:	e00c      	b.n	8013e8c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013e72:	79fb      	ldrb	r3, [r7, #7]
 8013e74:	f003 0302 	and.w	r3, r3, #2
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d007      	beq.n	8013e8c <f_open+0x1d0>
 8013e7c:	7fbb      	ldrb	r3, [r7, #30]
 8013e7e:	f003 0301 	and.w	r3, r3, #1
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d002      	beq.n	8013e8c <f_open+0x1d0>
						res = FR_DENIED;
 8013e86:	2307      	movs	r3, #7
 8013e88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8013e8c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d126      	bne.n	8013ee2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013e94:	79fb      	ldrb	r3, [r7, #7]
 8013e96:	f003 0308 	and.w	r3, r3, #8
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d003      	beq.n	8013ea6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8013e9e:	79fb      	ldrb	r3, [r7, #7]
 8013ea0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ea4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013ea6:	697b      	ldr	r3, [r7, #20]
 8013ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8013eae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013eb4:	79fb      	ldrb	r3, [r7, #7]
 8013eb6:	2b01      	cmp	r3, #1
 8013eb8:	bf8c      	ite	hi
 8013eba:	2301      	movhi	r3, #1
 8013ebc:	2300      	movls	r3, #0
 8013ebe:	b2db      	uxtb	r3, r3
 8013ec0:	461a      	mov	r2, r3
 8013ec2:	f107 0318 	add.w	r3, r7, #24
 8013ec6:	4611      	mov	r1, r2
 8013ec8:	4618      	mov	r0, r3
 8013eca:	f7fd fe19 	bl	8011b00 <inc_lock>
 8013ece:	4602      	mov	r2, r0
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	691b      	ldr	r3, [r3, #16]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d102      	bne.n	8013ee2 <f_open+0x226>
 8013edc:	2302      	movs	r3, #2
 8013ede:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013ee2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	f040 80a3 	bne.w	8014032 <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013ef0:	4611      	mov	r1, r2
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f7fe fcbb 	bl	801286e <ld_clust>
 8013ef8:	4602      	mov	r2, r0
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f00:	331c      	adds	r3, #28
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7fd fc95 	bl	8011832 <ld_dword>
 8013f08:	4602      	mov	r2, r0
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	2200      	movs	r2, #0
 8013f12:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013f14:	697a      	ldr	r2, [r7, #20]
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013f1a:	697b      	ldr	r3, [r7, #20]
 8013f1c:	88da      	ldrh	r2, [r3, #6]
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	79fa      	ldrb	r2, [r7, #7]
 8013f26:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	2200      	movs	r2, #0
 8013f32:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	2200      	movs	r2, #0
 8013f38:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	3330      	adds	r3, #48	@ 0x30
 8013f3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8013f42:	2100      	movs	r1, #0
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7fd fcff 	bl	8011948 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013f4a:	79fb      	ldrb	r3, [r7, #7]
 8013f4c:	f003 0320 	and.w	r3, r3, #32
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d06e      	beq.n	8014032 <f_open+0x376>
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	68db      	ldr	r3, [r3, #12]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d06a      	beq.n	8014032 <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	68da      	ldr	r2, [r3, #12]
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013f64:	697b      	ldr	r3, [r7, #20]
 8013f66:	895b      	ldrh	r3, [r3, #10]
 8013f68:	461a      	mov	r2, r3
 8013f6a:	697b      	ldr	r3, [r7, #20]
 8013f6c:	899b      	ldrh	r3, [r3, #12]
 8013f6e:	fb02 f303 	mul.w	r3, r2, r3
 8013f72:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	689b      	ldr	r3, [r3, #8]
 8013f78:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	68db      	ldr	r3, [r3, #12]
 8013f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013f80:	e016      	b.n	8013fb0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013f86:	4618      	mov	r0, r3
 8013f88:	f7fd ffa9 	bl	8011ede <get_fat>
 8013f8c:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8013f8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013f90:	2b01      	cmp	r3, #1
 8013f92:	d802      	bhi.n	8013f9a <f_open+0x2de>
 8013f94:	2302      	movs	r3, #2
 8013f96:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013f9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013f9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013fa0:	d102      	bne.n	8013fa8 <f_open+0x2ec>
 8013fa2:	2301      	movs	r3, #1
 8013fa4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013fa8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013faa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fac:	1ad3      	subs	r3, r2, r3
 8013fae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8013fb0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d103      	bne.n	8013fc0 <f_open+0x304>
 8013fb8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8013fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013fbc:	429a      	cmp	r2, r3
 8013fbe:	d8e0      	bhi.n	8013f82 <f_open+0x2c6>
				}
				fp->clust = clst;
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8013fc4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013fc6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d131      	bne.n	8014032 <f_open+0x376>
 8013fce:	697b      	ldr	r3, [r7, #20]
 8013fd0:	899b      	ldrh	r3, [r3, #12]
 8013fd2:	461a      	mov	r2, r3
 8013fd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013fd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8013fda:	fb01 f202 	mul.w	r2, r1, r2
 8013fde:	1a9b      	subs	r3, r3, r2
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d026      	beq.n	8014032 <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013fe4:	697b      	ldr	r3, [r7, #20]
 8013fe6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8013fe8:	4618      	mov	r0, r3
 8013fea:	f7fd ff59 	bl	8011ea0 <clust2sect>
 8013fee:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8013ff0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d103      	bne.n	8013ffe <f_open+0x342>
						res = FR_INT_ERR;
 8013ff6:	2302      	movs	r3, #2
 8013ff8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8013ffc:	e019      	b.n	8014032 <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013ffe:	697b      	ldr	r3, [r7, #20]
 8014000:	899b      	ldrh	r3, [r3, #12]
 8014002:	461a      	mov	r2, r3
 8014004:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014006:	fbb3 f2f2 	udiv	r2, r3, r2
 801400a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801400c:	441a      	add	r2, r3
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014012:	697b      	ldr	r3, [r7, #20]
 8014014:	7858      	ldrb	r0, [r3, #1]
 8014016:	68fb      	ldr	r3, [r7, #12]
 8014018:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	6a1a      	ldr	r2, [r3, #32]
 8014020:	2301      	movs	r3, #1
 8014022:	f7fd fb8f 	bl	8011744 <disk_read>
 8014026:	4603      	mov	r3, r0
 8014028:	2b00      	cmp	r3, #0
 801402a:	d002      	beq.n	8014032 <f_open+0x376>
 801402c:	2301      	movs	r3, #1
 801402e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014032:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8014036:	2b00      	cmp	r3, #0
 8014038:	d002      	beq.n	8014040 <f_open+0x384>
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	2200      	movs	r2, #0
 801403e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014040:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8014044:	4618      	mov	r0, r3
 8014046:	3768      	adds	r7, #104	@ 0x68
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}

0801404c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b08c      	sub	sp, #48	@ 0x30
 8014050:	af00      	add	r7, sp, #0
 8014052:	60f8      	str	r0, [r7, #12]
 8014054:	60b9      	str	r1, [r7, #8]
 8014056:	607a      	str	r2, [r7, #4]
 8014058:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	2200      	movs	r2, #0
 8014062:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	f107 0210 	add.w	r2, r7, #16
 801406a:	4611      	mov	r1, r2
 801406c:	4618      	mov	r0, r3
 801406e:	f7ff fda9 	bl	8013bc4 <validate>
 8014072:	4603      	mov	r3, r0
 8014074:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014078:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801407c:	2b00      	cmp	r3, #0
 801407e:	d107      	bne.n	8014090 <f_write+0x44>
 8014080:	68fb      	ldr	r3, [r7, #12]
 8014082:	7d5b      	ldrb	r3, [r3, #21]
 8014084:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8014088:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801408c:	2b00      	cmp	r3, #0
 801408e:	d002      	beq.n	8014096 <f_write+0x4a>
 8014090:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8014094:	e16a      	b.n	801436c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	7d1b      	ldrb	r3, [r3, #20]
 801409a:	f003 0302 	and.w	r3, r3, #2
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d101      	bne.n	80140a6 <f_write+0x5a>
 80140a2:	2307      	movs	r3, #7
 80140a4:	e162      	b.n	801436c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	699a      	ldr	r2, [r3, #24]
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	441a      	add	r2, r3
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	699b      	ldr	r3, [r3, #24]
 80140b2:	429a      	cmp	r2, r3
 80140b4:	f080 814c 	bcs.w	8014350 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	699b      	ldr	r3, [r3, #24]
 80140bc:	43db      	mvns	r3, r3
 80140be:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80140c0:	e146      	b.n	8014350 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	699b      	ldr	r3, [r3, #24]
 80140c6:	693a      	ldr	r2, [r7, #16]
 80140c8:	8992      	ldrh	r2, [r2, #12]
 80140ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80140ce:	fb01 f202 	mul.w	r2, r1, r2
 80140d2:	1a9b      	subs	r3, r3, r2
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	f040 80f1 	bne.w	80142bc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	699b      	ldr	r3, [r3, #24]
 80140de:	693a      	ldr	r2, [r7, #16]
 80140e0:	8992      	ldrh	r2, [r2, #12]
 80140e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80140e6:	693a      	ldr	r2, [r7, #16]
 80140e8:	8952      	ldrh	r2, [r2, #10]
 80140ea:	3a01      	subs	r2, #1
 80140ec:	4013      	ands	r3, r2
 80140ee:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80140f0:	69bb      	ldr	r3, [r7, #24]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d143      	bne.n	801417e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	699b      	ldr	r3, [r3, #24]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d10c      	bne.n	8014118 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	689b      	ldr	r3, [r3, #8]
 8014102:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014106:	2b00      	cmp	r3, #0
 8014108:	d11a      	bne.n	8014140 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	2100      	movs	r1, #0
 801410e:	4618      	mov	r0, r3
 8014110:	f7fe f937 	bl	8012382 <create_chain>
 8014114:	62b8      	str	r0, [r7, #40]	@ 0x28
 8014116:	e013      	b.n	8014140 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014118:	68fb      	ldr	r3, [r7, #12]
 801411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801411c:	2b00      	cmp	r3, #0
 801411e:	d007      	beq.n	8014130 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	699b      	ldr	r3, [r3, #24]
 8014124:	4619      	mov	r1, r3
 8014126:	68f8      	ldr	r0, [r7, #12]
 8014128:	f7fe f9c3 	bl	80124b2 <clmt_clust>
 801412c:	62b8      	str	r0, [r7, #40]	@ 0x28
 801412e:	e007      	b.n	8014140 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014130:	68fa      	ldr	r2, [r7, #12]
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	69db      	ldr	r3, [r3, #28]
 8014136:	4619      	mov	r1, r3
 8014138:	4610      	mov	r0, r2
 801413a:	f7fe f922 	bl	8012382 <create_chain>
 801413e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014142:	2b00      	cmp	r3, #0
 8014144:	f000 8109 	beq.w	801435a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801414a:	2b01      	cmp	r3, #1
 801414c:	d104      	bne.n	8014158 <f_write+0x10c>
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	2202      	movs	r2, #2
 8014152:	755a      	strb	r2, [r3, #21]
 8014154:	2302      	movs	r3, #2
 8014156:	e109      	b.n	801436c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801415a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801415e:	d104      	bne.n	801416a <f_write+0x11e>
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	2201      	movs	r2, #1
 8014164:	755a      	strb	r2, [r3, #21]
 8014166:	2301      	movs	r3, #1
 8014168:	e100      	b.n	801436c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801416e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014170:	68fb      	ldr	r3, [r7, #12]
 8014172:	689b      	ldr	r3, [r3, #8]
 8014174:	2b00      	cmp	r3, #0
 8014176:	d102      	bne.n	801417e <f_write+0x132>
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801417c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	7d1b      	ldrb	r3, [r3, #20]
 8014182:	b25b      	sxtb	r3, r3
 8014184:	2b00      	cmp	r3, #0
 8014186:	da18      	bge.n	80141ba <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014188:	693b      	ldr	r3, [r7, #16]
 801418a:	7858      	ldrb	r0, [r3, #1]
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	6a1a      	ldr	r2, [r3, #32]
 8014196:	2301      	movs	r3, #1
 8014198:	f7fd faf4 	bl	8011784 <disk_write>
 801419c:	4603      	mov	r3, r0
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d004      	beq.n	80141ac <f_write+0x160>
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	2201      	movs	r2, #1
 80141a6:	755a      	strb	r2, [r3, #21]
 80141a8:	2301      	movs	r3, #1
 80141aa:	e0df      	b.n	801436c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	7d1b      	ldrb	r3, [r3, #20]
 80141b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80141b4:	b2da      	uxtb	r2, r3
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80141ba:	693a      	ldr	r2, [r7, #16]
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	69db      	ldr	r3, [r3, #28]
 80141c0:	4619      	mov	r1, r3
 80141c2:	4610      	mov	r0, r2
 80141c4:	f7fd fe6c 	bl	8011ea0 <clust2sect>
 80141c8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80141ca:	697b      	ldr	r3, [r7, #20]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d104      	bne.n	80141da <f_write+0x18e>
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	2202      	movs	r2, #2
 80141d4:	755a      	strb	r2, [r3, #21]
 80141d6:	2302      	movs	r3, #2
 80141d8:	e0c8      	b.n	801436c <f_write+0x320>
			sect += csect;
 80141da:	697a      	ldr	r2, [r7, #20]
 80141dc:	69bb      	ldr	r3, [r7, #24]
 80141de:	4413      	add	r3, r2
 80141e0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80141e2:	693b      	ldr	r3, [r7, #16]
 80141e4:	899b      	ldrh	r3, [r3, #12]
 80141e6:	461a      	mov	r2, r3
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80141ee:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80141f0:	6a3b      	ldr	r3, [r7, #32]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d043      	beq.n	801427e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80141f6:	69ba      	ldr	r2, [r7, #24]
 80141f8:	6a3b      	ldr	r3, [r7, #32]
 80141fa:	4413      	add	r3, r2
 80141fc:	693a      	ldr	r2, [r7, #16]
 80141fe:	8952      	ldrh	r2, [r2, #10]
 8014200:	4293      	cmp	r3, r2
 8014202:	d905      	bls.n	8014210 <f_write+0x1c4>
					cc = fs->csize - csect;
 8014204:	693b      	ldr	r3, [r7, #16]
 8014206:	895b      	ldrh	r3, [r3, #10]
 8014208:	461a      	mov	r2, r3
 801420a:	69bb      	ldr	r3, [r7, #24]
 801420c:	1ad3      	subs	r3, r2, r3
 801420e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014210:	693b      	ldr	r3, [r7, #16]
 8014212:	7858      	ldrb	r0, [r3, #1]
 8014214:	6a3b      	ldr	r3, [r7, #32]
 8014216:	697a      	ldr	r2, [r7, #20]
 8014218:	69f9      	ldr	r1, [r7, #28]
 801421a:	f7fd fab3 	bl	8011784 <disk_write>
 801421e:	4603      	mov	r3, r0
 8014220:	2b00      	cmp	r3, #0
 8014222:	d004      	beq.n	801422e <f_write+0x1e2>
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	2201      	movs	r2, #1
 8014228:	755a      	strb	r2, [r3, #21]
 801422a:	2301      	movs	r3, #1
 801422c:	e09e      	b.n	801436c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	6a1a      	ldr	r2, [r3, #32]
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	1ad3      	subs	r3, r2, r3
 8014236:	6a3a      	ldr	r2, [r7, #32]
 8014238:	429a      	cmp	r2, r3
 801423a:	d918      	bls.n	801426e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	6a1a      	ldr	r2, [r3, #32]
 8014246:	697b      	ldr	r3, [r7, #20]
 8014248:	1ad3      	subs	r3, r2, r3
 801424a:	693a      	ldr	r2, [r7, #16]
 801424c:	8992      	ldrh	r2, [r2, #12]
 801424e:	fb02 f303 	mul.w	r3, r2, r3
 8014252:	69fa      	ldr	r2, [r7, #28]
 8014254:	18d1      	adds	r1, r2, r3
 8014256:	693b      	ldr	r3, [r7, #16]
 8014258:	899b      	ldrh	r3, [r3, #12]
 801425a:	461a      	mov	r2, r3
 801425c:	f7fd fb53 	bl	8011906 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	7d1b      	ldrb	r3, [r3, #20]
 8014264:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014268:	b2da      	uxtb	r2, r3
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801426e:	693b      	ldr	r3, [r7, #16]
 8014270:	899b      	ldrh	r3, [r3, #12]
 8014272:	461a      	mov	r2, r3
 8014274:	6a3b      	ldr	r3, [r7, #32]
 8014276:	fb02 f303 	mul.w	r3, r2, r3
 801427a:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 801427c:	e04b      	b.n	8014316 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	6a1b      	ldr	r3, [r3, #32]
 8014282:	697a      	ldr	r2, [r7, #20]
 8014284:	429a      	cmp	r2, r3
 8014286:	d016      	beq.n	80142b6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	699a      	ldr	r2, [r3, #24]
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014290:	429a      	cmp	r2, r3
 8014292:	d210      	bcs.n	80142b6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014294:	693b      	ldr	r3, [r7, #16]
 8014296:	7858      	ldrb	r0, [r3, #1]
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801429e:	2301      	movs	r3, #1
 80142a0:	697a      	ldr	r2, [r7, #20]
 80142a2:	f7fd fa4f 	bl	8011744 <disk_read>
 80142a6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d004      	beq.n	80142b6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	2201      	movs	r2, #1
 80142b0:	755a      	strb	r2, [r3, #21]
 80142b2:	2301      	movs	r3, #1
 80142b4:	e05a      	b.n	801436c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	697a      	ldr	r2, [r7, #20]
 80142ba:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80142bc:	693b      	ldr	r3, [r7, #16]
 80142be:	899b      	ldrh	r3, [r3, #12]
 80142c0:	4618      	mov	r0, r3
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	699b      	ldr	r3, [r3, #24]
 80142c6:	693a      	ldr	r2, [r7, #16]
 80142c8:	8992      	ldrh	r2, [r2, #12]
 80142ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80142ce:	fb01 f202 	mul.w	r2, r1, r2
 80142d2:	1a9b      	subs	r3, r3, r2
 80142d4:	1ac3      	subs	r3, r0, r3
 80142d6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80142d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	429a      	cmp	r2, r3
 80142de:	d901      	bls.n	80142e4 <f_write+0x298>
 80142e0:	687b      	ldr	r3, [r7, #4]
 80142e2:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	699b      	ldr	r3, [r3, #24]
 80142ee:	693a      	ldr	r2, [r7, #16]
 80142f0:	8992      	ldrh	r2, [r2, #12]
 80142f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80142f6:	fb00 f202 	mul.w	r2, r0, r2
 80142fa:	1a9b      	subs	r3, r3, r2
 80142fc:	440b      	add	r3, r1
 80142fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014300:	69f9      	ldr	r1, [r7, #28]
 8014302:	4618      	mov	r0, r3
 8014304:	f7fd faff 	bl	8011906 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	7d1b      	ldrb	r3, [r3, #20]
 801430c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8014310:	b2da      	uxtb	r2, r3
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014316:	69fa      	ldr	r2, [r7, #28]
 8014318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801431a:	4413      	add	r3, r2
 801431c:	61fb      	str	r3, [r7, #28]
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	699a      	ldr	r2, [r3, #24]
 8014322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014324:	441a      	add	r2, r3
 8014326:	68fb      	ldr	r3, [r7, #12]
 8014328:	619a      	str	r2, [r3, #24]
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	68da      	ldr	r2, [r3, #12]
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	699b      	ldr	r3, [r3, #24]
 8014332:	429a      	cmp	r2, r3
 8014334:	bf38      	it	cc
 8014336:	461a      	movcc	r2, r3
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	60da      	str	r2, [r3, #12]
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	681a      	ldr	r2, [r3, #0]
 8014340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014342:	441a      	add	r2, r3
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	601a      	str	r2, [r3, #0]
 8014348:	687a      	ldr	r2, [r7, #4]
 801434a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801434c:	1ad3      	subs	r3, r2, r3
 801434e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	2b00      	cmp	r3, #0
 8014354:	f47f aeb5 	bne.w	80140c2 <f_write+0x76>
 8014358:	e000      	b.n	801435c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801435a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	7d1b      	ldrb	r3, [r3, #20]
 8014360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014364:	b2da      	uxtb	r2, r3
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801436a:	2300      	movs	r3, #0
}
 801436c:	4618      	mov	r0, r3
 801436e:	3730      	adds	r7, #48	@ 0x30
 8014370:	46bd      	mov	sp, r7
 8014372:	bd80      	pop	{r7, pc}

08014374 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b086      	sub	sp, #24
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	f107 0208 	add.w	r2, r7, #8
 8014382:	4611      	mov	r1, r2
 8014384:	4618      	mov	r0, r3
 8014386:	f7ff fc1d 	bl	8013bc4 <validate>
 801438a:	4603      	mov	r3, r0
 801438c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801438e:	7dfb      	ldrb	r3, [r7, #23]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d168      	bne.n	8014466 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	7d1b      	ldrb	r3, [r3, #20]
 8014398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801439c:	2b00      	cmp	r3, #0
 801439e:	d062      	beq.n	8014466 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	7d1b      	ldrb	r3, [r3, #20]
 80143a4:	b25b      	sxtb	r3, r3
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	da15      	bge.n	80143d6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	7858      	ldrb	r0, [r3, #1]
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	6a1a      	ldr	r2, [r3, #32]
 80143b8:	2301      	movs	r3, #1
 80143ba:	f7fd f9e3 	bl	8011784 <disk_write>
 80143be:	4603      	mov	r3, r0
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d001      	beq.n	80143c8 <f_sync+0x54>
 80143c4:	2301      	movs	r3, #1
 80143c6:	e04f      	b.n	8014468 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	7d1b      	ldrb	r3, [r3, #20]
 80143cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80143d0:	b2da      	uxtb	r2, r3
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80143d6:	f7fa ffe3 	bl	800f3a0 <get_fattime>
 80143da:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80143dc:	68ba      	ldr	r2, [r7, #8]
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143e2:	4619      	mov	r1, r3
 80143e4:	4610      	mov	r0, r2
 80143e6:	f7fd fcbd 	bl	8011d64 <move_window>
 80143ea:	4603      	mov	r3, r0
 80143ec:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80143ee:	7dfb      	ldrb	r3, [r7, #23]
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d138      	bne.n	8014466 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143f8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	330b      	adds	r3, #11
 80143fe:	781a      	ldrb	r2, [r3, #0]
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	330b      	adds	r3, #11
 8014404:	f042 0220 	orr.w	r2, r2, #32
 8014408:	b2d2      	uxtb	r2, r2
 801440a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	6818      	ldr	r0, [r3, #0]
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	689b      	ldr	r3, [r3, #8]
 8014414:	461a      	mov	r2, r3
 8014416:	68f9      	ldr	r1, [r7, #12]
 8014418:	f7fe fa48 	bl	80128ac <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	f103 021c 	add.w	r2, r3, #28
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	68db      	ldr	r3, [r3, #12]
 8014426:	4619      	mov	r1, r3
 8014428:	4610      	mov	r0, r2
 801442a:	f7fd fa40 	bl	80118ae <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	3316      	adds	r3, #22
 8014432:	6939      	ldr	r1, [r7, #16]
 8014434:	4618      	mov	r0, r3
 8014436:	f7fd fa3a 	bl	80118ae <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	3312      	adds	r3, #18
 801443e:	2100      	movs	r1, #0
 8014440:	4618      	mov	r0, r3
 8014442:	f7fd fa19 	bl	8011878 <st_word>
					fs->wflag = 1;
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	2201      	movs	r2, #1
 801444a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801444c:	68bb      	ldr	r3, [r7, #8]
 801444e:	4618      	mov	r0, r3
 8014450:	f7fd fcb6 	bl	8011dc0 <sync_fs>
 8014454:	4603      	mov	r3, r0
 8014456:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	7d1b      	ldrb	r3, [r3, #20]
 801445c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8014460:	b2da      	uxtb	r2, r3
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014466:	7dfb      	ldrb	r3, [r7, #23]
}
 8014468:	4618      	mov	r0, r3
 801446a:	3718      	adds	r7, #24
 801446c:	46bd      	mov	sp, r7
 801446e:	bd80      	pop	{r7, pc}

08014470 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b084      	sub	sp, #16
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014478:	6878      	ldr	r0, [r7, #4]
 801447a:	f7ff ff7b 	bl	8014374 <f_sync>
 801447e:	4603      	mov	r3, r0
 8014480:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014482:	7bfb      	ldrb	r3, [r7, #15]
 8014484:	2b00      	cmp	r3, #0
 8014486:	d118      	bne.n	80144ba <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f107 0208 	add.w	r2, r7, #8
 801448e:	4611      	mov	r1, r2
 8014490:	4618      	mov	r0, r3
 8014492:	f7ff fb97 	bl	8013bc4 <validate>
 8014496:	4603      	mov	r3, r0
 8014498:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801449a:	7bfb      	ldrb	r3, [r7, #15]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d10c      	bne.n	80144ba <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	691b      	ldr	r3, [r3, #16]
 80144a4:	4618      	mov	r0, r3
 80144a6:	f7fd fbb9 	bl	8011c1c <dec_lock>
 80144aa:	4603      	mov	r3, r0
 80144ac:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80144ae:	7bfb      	ldrb	r3, [r7, #15]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d102      	bne.n	80144ba <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	2200      	movs	r2, #0
 80144b8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80144ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80144bc:	4618      	mov	r0, r3
 80144be:	3710      	adds	r7, #16
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bd80      	pop	{r7, pc}

080144c4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b090      	sub	sp, #64	@ 0x40
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
 80144cc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	f107 0208 	add.w	r2, r7, #8
 80144d4:	4611      	mov	r1, r2
 80144d6:	4618      	mov	r0, r3
 80144d8:	f7ff fb74 	bl	8013bc4 <validate>
 80144dc:	4603      	mov	r3, r0
 80144de:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80144e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d103      	bne.n	80144f2 <f_lseek+0x2e>
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	7d5b      	ldrb	r3, [r3, #21]
 80144ee:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80144f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d002      	beq.n	8014500 <f_lseek+0x3c>
 80144fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80144fe:	e201      	b.n	8014904 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014504:	2b00      	cmp	r3, #0
 8014506:	f000 80d9 	beq.w	80146bc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8014510:	d15a      	bne.n	80145c8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014516:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801451a:	1d1a      	adds	r2, r3, #4
 801451c:	627a      	str	r2, [r7, #36]	@ 0x24
 801451e:	681b      	ldr	r3, [r3, #0]
 8014520:	617b      	str	r3, [r7, #20]
 8014522:	2302      	movs	r3, #2
 8014524:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	689b      	ldr	r3, [r3, #8]
 801452a:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 801452c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801452e:	2b00      	cmp	r3, #0
 8014530:	d03a      	beq.n	80145a8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014534:	613b      	str	r3, [r7, #16]
 8014536:	2300      	movs	r3, #0
 8014538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801453c:	3302      	adds	r3, #2
 801453e:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8014540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014542:	60fb      	str	r3, [r7, #12]
 8014544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014546:	3301      	adds	r3, #1
 8014548:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801454e:	4618      	mov	r0, r3
 8014550:	f7fd fcc5 	bl	8011ede <get_fat>
 8014554:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014558:	2b01      	cmp	r3, #1
 801455a:	d804      	bhi.n	8014566 <f_lseek+0xa2>
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	2202      	movs	r2, #2
 8014560:	755a      	strb	r2, [r3, #21]
 8014562:	2302      	movs	r3, #2
 8014564:	e1ce      	b.n	8014904 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014568:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801456c:	d104      	bne.n	8014578 <f_lseek+0xb4>
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	2201      	movs	r2, #1
 8014572:	755a      	strb	r2, [r3, #21]
 8014574:	2301      	movs	r3, #1
 8014576:	e1c5      	b.n	8014904 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	3301      	adds	r3, #1
 801457c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801457e:	429a      	cmp	r2, r3
 8014580:	d0de      	beq.n	8014540 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014582:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014584:	697b      	ldr	r3, [r7, #20]
 8014586:	429a      	cmp	r2, r3
 8014588:	d809      	bhi.n	801459e <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801458c:	1d1a      	adds	r2, r3, #4
 801458e:	627a      	str	r2, [r7, #36]	@ 0x24
 8014590:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014592:	601a      	str	r2, [r3, #0]
 8014594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014596:	1d1a      	adds	r2, r3, #4
 8014598:	627a      	str	r2, [r7, #36]	@ 0x24
 801459a:	693a      	ldr	r2, [r7, #16]
 801459c:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801459e:	68bb      	ldr	r3, [r7, #8]
 80145a0:	69db      	ldr	r3, [r3, #28]
 80145a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80145a4:	429a      	cmp	r2, r3
 80145a6:	d3c4      	bcc.n	8014532 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80145ae:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80145b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80145b2:	697b      	ldr	r3, [r7, #20]
 80145b4:	429a      	cmp	r2, r3
 80145b6:	d803      	bhi.n	80145c0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80145b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145ba:	2200      	movs	r2, #0
 80145bc:	601a      	str	r2, [r3, #0]
 80145be:	e19f      	b.n	8014900 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80145c0:	2311      	movs	r3, #17
 80145c2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80145c6:	e19b      	b.n	8014900 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	68db      	ldr	r3, [r3, #12]
 80145cc:	683a      	ldr	r2, [r7, #0]
 80145ce:	429a      	cmp	r2, r3
 80145d0:	d902      	bls.n	80145d8 <f_lseek+0x114>
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	68db      	ldr	r3, [r3, #12]
 80145d6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	683a      	ldr	r2, [r7, #0]
 80145dc:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80145de:	683b      	ldr	r3, [r7, #0]
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	f000 818d 	beq.w	8014900 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	3b01      	subs	r3, #1
 80145ea:	4619      	mov	r1, r3
 80145ec:	6878      	ldr	r0, [r7, #4]
 80145ee:	f7fd ff60 	bl	80124b2 <clmt_clust>
 80145f2:	4602      	mov	r2, r0
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80145f8:	68ba      	ldr	r2, [r7, #8]
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	69db      	ldr	r3, [r3, #28]
 80145fe:	4619      	mov	r1, r3
 8014600:	4610      	mov	r0, r2
 8014602:	f7fd fc4d 	bl	8011ea0 <clust2sect>
 8014606:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014608:	69bb      	ldr	r3, [r7, #24]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d104      	bne.n	8014618 <f_lseek+0x154>
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	2202      	movs	r2, #2
 8014612:	755a      	strb	r2, [r3, #21]
 8014614:	2302      	movs	r3, #2
 8014616:	e175      	b.n	8014904 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014618:	683b      	ldr	r3, [r7, #0]
 801461a:	3b01      	subs	r3, #1
 801461c:	68ba      	ldr	r2, [r7, #8]
 801461e:	8992      	ldrh	r2, [r2, #12]
 8014620:	fbb3 f3f2 	udiv	r3, r3, r2
 8014624:	68ba      	ldr	r2, [r7, #8]
 8014626:	8952      	ldrh	r2, [r2, #10]
 8014628:	3a01      	subs	r2, #1
 801462a:	4013      	ands	r3, r2
 801462c:	69ba      	ldr	r2, [r7, #24]
 801462e:	4413      	add	r3, r2
 8014630:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	699b      	ldr	r3, [r3, #24]
 8014636:	68ba      	ldr	r2, [r7, #8]
 8014638:	8992      	ldrh	r2, [r2, #12]
 801463a:	fbb3 f1f2 	udiv	r1, r3, r2
 801463e:	fb01 f202 	mul.w	r2, r1, r2
 8014642:	1a9b      	subs	r3, r3, r2
 8014644:	2b00      	cmp	r3, #0
 8014646:	f000 815b 	beq.w	8014900 <f_lseek+0x43c>
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	6a1b      	ldr	r3, [r3, #32]
 801464e:	69ba      	ldr	r2, [r7, #24]
 8014650:	429a      	cmp	r2, r3
 8014652:	f000 8155 	beq.w	8014900 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	7d1b      	ldrb	r3, [r3, #20]
 801465a:	b25b      	sxtb	r3, r3
 801465c:	2b00      	cmp	r3, #0
 801465e:	da18      	bge.n	8014692 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014660:	68bb      	ldr	r3, [r7, #8]
 8014662:	7858      	ldrb	r0, [r3, #1]
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	6a1a      	ldr	r2, [r3, #32]
 801466e:	2301      	movs	r3, #1
 8014670:	f7fd f888 	bl	8011784 <disk_write>
 8014674:	4603      	mov	r3, r0
 8014676:	2b00      	cmp	r3, #0
 8014678:	d004      	beq.n	8014684 <f_lseek+0x1c0>
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2201      	movs	r2, #1
 801467e:	755a      	strb	r2, [r3, #21]
 8014680:	2301      	movs	r3, #1
 8014682:	e13f      	b.n	8014904 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	7d1b      	ldrb	r3, [r3, #20]
 8014688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801468c:	b2da      	uxtb	r2, r3
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014692:	68bb      	ldr	r3, [r7, #8]
 8014694:	7858      	ldrb	r0, [r3, #1]
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801469c:	2301      	movs	r3, #1
 801469e:	69ba      	ldr	r2, [r7, #24]
 80146a0:	f7fd f850 	bl	8011744 <disk_read>
 80146a4:	4603      	mov	r3, r0
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d004      	beq.n	80146b4 <f_lseek+0x1f0>
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	2201      	movs	r2, #1
 80146ae:	755a      	strb	r2, [r3, #21]
 80146b0:	2301      	movs	r3, #1
 80146b2:	e127      	b.n	8014904 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	69ba      	ldr	r2, [r7, #24]
 80146b8:	621a      	str	r2, [r3, #32]
 80146ba:	e121      	b.n	8014900 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	68db      	ldr	r3, [r3, #12]
 80146c0:	683a      	ldr	r2, [r7, #0]
 80146c2:	429a      	cmp	r2, r3
 80146c4:	d908      	bls.n	80146d8 <f_lseek+0x214>
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	7d1b      	ldrb	r3, [r3, #20]
 80146ca:	f003 0302 	and.w	r3, r3, #2
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d102      	bne.n	80146d8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	68db      	ldr	r3, [r3, #12]
 80146d6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	699b      	ldr	r3, [r3, #24]
 80146dc:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80146de:	2300      	movs	r3, #0
 80146e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80146e6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	f000 80b5 	beq.w	801485a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	895b      	ldrh	r3, [r3, #10]
 80146f4:	461a      	mov	r2, r3
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	899b      	ldrh	r3, [r3, #12]
 80146fa:	fb02 f303 	mul.w	r3, r2, r3
 80146fe:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014700:	6a3b      	ldr	r3, [r7, #32]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d01b      	beq.n	801473e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014706:	683b      	ldr	r3, [r7, #0]
 8014708:	1e5a      	subs	r2, r3, #1
 801470a:	69fb      	ldr	r3, [r7, #28]
 801470c:	fbb2 f2f3 	udiv	r2, r2, r3
 8014710:	6a3b      	ldr	r3, [r7, #32]
 8014712:	1e59      	subs	r1, r3, #1
 8014714:	69fb      	ldr	r3, [r7, #28]
 8014716:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801471a:	429a      	cmp	r2, r3
 801471c:	d30f      	bcc.n	801473e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801471e:	6a3b      	ldr	r3, [r7, #32]
 8014720:	1e5a      	subs	r2, r3, #1
 8014722:	69fb      	ldr	r3, [r7, #28]
 8014724:	425b      	negs	r3, r3
 8014726:	401a      	ands	r2, r3
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	699b      	ldr	r3, [r3, #24]
 8014730:	683a      	ldr	r2, [r7, #0]
 8014732:	1ad3      	subs	r3, r2, r3
 8014734:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	69db      	ldr	r3, [r3, #28]
 801473a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801473c:	e022      	b.n	8014784 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	689b      	ldr	r3, [r3, #8]
 8014742:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014746:	2b00      	cmp	r3, #0
 8014748:	d119      	bne.n	801477e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	2100      	movs	r1, #0
 801474e:	4618      	mov	r0, r3
 8014750:	f7fd fe17 	bl	8012382 <create_chain>
 8014754:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014758:	2b01      	cmp	r3, #1
 801475a:	d104      	bne.n	8014766 <f_lseek+0x2a2>
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	2202      	movs	r2, #2
 8014760:	755a      	strb	r2, [r3, #21]
 8014762:	2302      	movs	r3, #2
 8014764:	e0ce      	b.n	8014904 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014768:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801476c:	d104      	bne.n	8014778 <f_lseek+0x2b4>
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	2201      	movs	r2, #1
 8014772:	755a      	strb	r2, [r3, #21]
 8014774:	2301      	movs	r3, #1
 8014776:	e0c5      	b.n	8014904 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801477c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014782:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014786:	2b00      	cmp	r3, #0
 8014788:	d067      	beq.n	801485a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801478a:	e03a      	b.n	8014802 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801478c:	683a      	ldr	r2, [r7, #0]
 801478e:	69fb      	ldr	r3, [r7, #28]
 8014790:	1ad3      	subs	r3, r2, r3
 8014792:	603b      	str	r3, [r7, #0]
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	699a      	ldr	r2, [r3, #24]
 8014798:	69fb      	ldr	r3, [r7, #28]
 801479a:	441a      	add	r2, r3
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	7d1b      	ldrb	r3, [r3, #20]
 80147a4:	f003 0302 	and.w	r3, r3, #2
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d00b      	beq.n	80147c4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80147b0:	4618      	mov	r0, r3
 80147b2:	f7fd fde6 	bl	8012382 <create_chain>
 80147b6:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80147b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d108      	bne.n	80147d0 <f_lseek+0x30c>
							ofs = 0; break;
 80147be:	2300      	movs	r3, #0
 80147c0:	603b      	str	r3, [r7, #0]
 80147c2:	e022      	b.n	801480a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80147c8:	4618      	mov	r0, r3
 80147ca:	f7fd fb88 	bl	8011ede <get_fat>
 80147ce:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80147d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80147d6:	d104      	bne.n	80147e2 <f_lseek+0x31e>
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2201      	movs	r2, #1
 80147dc:	755a      	strb	r2, [r3, #21]
 80147de:	2301      	movs	r3, #1
 80147e0:	e090      	b.n	8014904 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80147e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147e4:	2b01      	cmp	r3, #1
 80147e6:	d904      	bls.n	80147f2 <f_lseek+0x32e>
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	69db      	ldr	r3, [r3, #28]
 80147ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80147ee:	429a      	cmp	r2, r3
 80147f0:	d304      	bcc.n	80147fc <f_lseek+0x338>
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	2202      	movs	r2, #2
 80147f6:	755a      	strb	r2, [r3, #21]
 80147f8:	2302      	movs	r3, #2
 80147fa:	e083      	b.n	8014904 <f_lseek+0x440>
					fp->clust = clst;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014800:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014802:	683a      	ldr	r2, [r7, #0]
 8014804:	69fb      	ldr	r3, [r7, #28]
 8014806:	429a      	cmp	r2, r3
 8014808:	d8c0      	bhi.n	801478c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	699a      	ldr	r2, [r3, #24]
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	441a      	add	r2, r3
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	899b      	ldrh	r3, [r3, #12]
 801481a:	461a      	mov	r2, r3
 801481c:	683b      	ldr	r3, [r7, #0]
 801481e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014822:	fb01 f202 	mul.w	r2, r1, r2
 8014826:	1a9b      	subs	r3, r3, r2
 8014828:	2b00      	cmp	r3, #0
 801482a:	d016      	beq.n	801485a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8014830:	4618      	mov	r0, r3
 8014832:	f7fd fb35 	bl	8011ea0 <clust2sect>
 8014836:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801483a:	2b00      	cmp	r3, #0
 801483c:	d104      	bne.n	8014848 <f_lseek+0x384>
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	2202      	movs	r2, #2
 8014842:	755a      	strb	r2, [r3, #21]
 8014844:	2302      	movs	r3, #2
 8014846:	e05d      	b.n	8014904 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014848:	68bb      	ldr	r3, [r7, #8]
 801484a:	899b      	ldrh	r3, [r3, #12]
 801484c:	461a      	mov	r2, r3
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	fbb3 f3f2 	udiv	r3, r3, r2
 8014854:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014856:	4413      	add	r3, r2
 8014858:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	699a      	ldr	r2, [r3, #24]
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	68db      	ldr	r3, [r3, #12]
 8014862:	429a      	cmp	r2, r3
 8014864:	d90a      	bls.n	801487c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	699a      	ldr	r2, [r3, #24]
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	7d1b      	ldrb	r3, [r3, #20]
 8014872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014876:	b2da      	uxtb	r2, r3
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	699b      	ldr	r3, [r3, #24]
 8014880:	68ba      	ldr	r2, [r7, #8]
 8014882:	8992      	ldrh	r2, [r2, #12]
 8014884:	fbb3 f1f2 	udiv	r1, r3, r2
 8014888:	fb01 f202 	mul.w	r2, r1, r2
 801488c:	1a9b      	subs	r3, r3, r2
 801488e:	2b00      	cmp	r3, #0
 8014890:	d036      	beq.n	8014900 <f_lseek+0x43c>
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	6a1b      	ldr	r3, [r3, #32]
 8014896:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014898:	429a      	cmp	r2, r3
 801489a:	d031      	beq.n	8014900 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	7d1b      	ldrb	r3, [r3, #20]
 80148a0:	b25b      	sxtb	r3, r3
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	da18      	bge.n	80148d8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80148a6:	68bb      	ldr	r3, [r7, #8]
 80148a8:	7858      	ldrb	r0, [r3, #1]
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	6a1a      	ldr	r2, [r3, #32]
 80148b4:	2301      	movs	r3, #1
 80148b6:	f7fc ff65 	bl	8011784 <disk_write>
 80148ba:	4603      	mov	r3, r0
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d004      	beq.n	80148ca <f_lseek+0x406>
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	2201      	movs	r2, #1
 80148c4:	755a      	strb	r2, [r3, #21]
 80148c6:	2301      	movs	r3, #1
 80148c8:	e01c      	b.n	8014904 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	7d1b      	ldrb	r3, [r3, #20]
 80148ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80148d2:	b2da      	uxtb	r2, r3
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	7858      	ldrb	r0, [r3, #1]
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80148e2:	2301      	movs	r3, #1
 80148e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80148e6:	f7fc ff2d 	bl	8011744 <disk_read>
 80148ea:	4603      	mov	r3, r0
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d004      	beq.n	80148fa <f_lseek+0x436>
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	2201      	movs	r2, #1
 80148f4:	755a      	strb	r2, [r3, #21]
 80148f6:	2301      	movs	r3, #1
 80148f8:	e004      	b.n	8014904 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80148fe:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014900:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014904:	4618      	mov	r0, r3
 8014906:	3740      	adds	r7, #64	@ 0x40
 8014908:	46bd      	mov	sp, r7
 801490a:	bd80      	pop	{r7, pc}

0801490c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b090      	sub	sp, #64	@ 0x40
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
 8014914:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8014916:	f107 0108 	add.w	r1, r7, #8
 801491a:	1d3b      	adds	r3, r7, #4
 801491c:	2200      	movs	r2, #0
 801491e:	4618      	mov	r0, r3
 8014920:	f7fe feca 	bl	80136b8 <find_volume>
 8014924:	4603      	mov	r3, r0
 8014926:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) {
 801492a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801492e:	2b00      	cmp	r3, #0
 8014930:	d11f      	bne.n	8014972 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014932:	687a      	ldr	r2, [r7, #4]
 8014934:	f107 0308 	add.w	r3, r7, #8
 8014938:	4611      	mov	r1, r2
 801493a:	4618      	mov	r0, r3
 801493c:	f7fe fdac 	bl	8013498 <follow_path>
 8014940:	4603      	mov	r3, r0
 8014942:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8014946:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801494a:	2b00      	cmp	r3, #0
 801494c:	d111      	bne.n	8014972 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801494e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8014952:	b25b      	sxtb	r3, r3
 8014954:	2b00      	cmp	r3, #0
 8014956:	da03      	bge.n	8014960 <f_stat+0x54>
				res = FR_INVALID_NAME;
 8014958:	2306      	movs	r3, #6
 801495a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801495e:	e008      	b.n	8014972 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d005      	beq.n	8014972 <f_stat+0x66>
 8014966:	f107 0308 	add.w	r3, r7, #8
 801496a:	6839      	ldr	r1, [r7, #0]
 801496c:	4618      	mov	r0, r3
 801496e:	f7fe fafd 	bl	8012f6c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8014972:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014976:	4618      	mov	r0, r3
 8014978:	3740      	adds	r7, #64	@ 0x40
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}
	...

08014980 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014980:	b480      	push	{r7}
 8014982:	b087      	sub	sp, #28
 8014984:	af00      	add	r7, sp, #0
 8014986:	60f8      	str	r0, [r7, #12]
 8014988:	60b9      	str	r1, [r7, #8]
 801498a:	4613      	mov	r3, r2
 801498c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801498e:	2301      	movs	r3, #1
 8014990:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014992:	2300      	movs	r3, #0
 8014994:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014996:	4b1f      	ldr	r3, [pc, #124]	@ (8014a14 <FATFS_LinkDriverEx+0x94>)
 8014998:	7a5b      	ldrb	r3, [r3, #9]
 801499a:	b2db      	uxtb	r3, r3
 801499c:	2b00      	cmp	r3, #0
 801499e:	d131      	bne.n	8014a04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80149a0:	4b1c      	ldr	r3, [pc, #112]	@ (8014a14 <FATFS_LinkDriverEx+0x94>)
 80149a2:	7a5b      	ldrb	r3, [r3, #9]
 80149a4:	b2db      	uxtb	r3, r3
 80149a6:	461a      	mov	r2, r3
 80149a8:	4b1a      	ldr	r3, [pc, #104]	@ (8014a14 <FATFS_LinkDriverEx+0x94>)
 80149aa:	2100      	movs	r1, #0
 80149ac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80149ae:	4b19      	ldr	r3, [pc, #100]	@ (8014a14 <FATFS_LinkDriverEx+0x94>)
 80149b0:	7a5b      	ldrb	r3, [r3, #9]
 80149b2:	b2db      	uxtb	r3, r3
 80149b4:	4a17      	ldr	r2, [pc, #92]	@ (8014a14 <FATFS_LinkDriverEx+0x94>)
 80149b6:	009b      	lsls	r3, r3, #2
 80149b8:	4413      	add	r3, r2
 80149ba:	68fa      	ldr	r2, [r7, #12]
 80149bc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80149be:	4b15      	ldr	r3, [pc, #84]	@ (8014a14 <FATFS_LinkDriverEx+0x94>)
 80149c0:	7a5b      	ldrb	r3, [r3, #9]
 80149c2:	b2db      	uxtb	r3, r3
 80149c4:	461a      	mov	r2, r3
 80149c6:	4b13      	ldr	r3, [pc, #76]	@ (8014a14 <FATFS_LinkDriverEx+0x94>)
 80149c8:	4413      	add	r3, r2
 80149ca:	79fa      	ldrb	r2, [r7, #7]
 80149cc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80149ce:	4b11      	ldr	r3, [pc, #68]	@ (8014a14 <FATFS_LinkDriverEx+0x94>)
 80149d0:	7a5b      	ldrb	r3, [r3, #9]
 80149d2:	b2db      	uxtb	r3, r3
 80149d4:	1c5a      	adds	r2, r3, #1
 80149d6:	b2d1      	uxtb	r1, r2
 80149d8:	4a0e      	ldr	r2, [pc, #56]	@ (8014a14 <FATFS_LinkDriverEx+0x94>)
 80149da:	7251      	strb	r1, [r2, #9]
 80149dc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80149de:	7dbb      	ldrb	r3, [r7, #22]
 80149e0:	3330      	adds	r3, #48	@ 0x30
 80149e2:	b2da      	uxtb	r2, r3
 80149e4:	68bb      	ldr	r3, [r7, #8]
 80149e6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80149e8:	68bb      	ldr	r3, [r7, #8]
 80149ea:	3301      	adds	r3, #1
 80149ec:	223a      	movs	r2, #58	@ 0x3a
 80149ee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80149f0:	68bb      	ldr	r3, [r7, #8]
 80149f2:	3302      	adds	r3, #2
 80149f4:	222f      	movs	r2, #47	@ 0x2f
 80149f6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80149f8:	68bb      	ldr	r3, [r7, #8]
 80149fa:	3303      	adds	r3, #3
 80149fc:	2200      	movs	r2, #0
 80149fe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014a00:	2300      	movs	r3, #0
 8014a02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a06:	4618      	mov	r0, r3
 8014a08:	371c      	adds	r7, #28
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a10:	4770      	bx	lr
 8014a12:	bf00      	nop
 8014a14:	24000800 	.word	0x24000800

08014a18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b082      	sub	sp, #8
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
 8014a20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014a22:	2200      	movs	r2, #0
 8014a24:	6839      	ldr	r1, [r7, #0]
 8014a26:	6878      	ldr	r0, [r7, #4]
 8014a28:	f7ff ffaa 	bl	8014980 <FATFS_LinkDriverEx>
 8014a2c:	4603      	mov	r3, r0
}
 8014a2e:	4618      	mov	r0, r3
 8014a30:	3708      	adds	r7, #8
 8014a32:	46bd      	mov	sp, r7
 8014a34:	bd80      	pop	{r7, pc}
	...

08014a38 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8014a38:	b480      	push	{r7}
 8014a3a:	b085      	sub	sp, #20
 8014a3c:	af00      	add	r7, sp, #0
 8014a3e:	4603      	mov	r3, r0
 8014a40:	6039      	str	r1, [r7, #0]
 8014a42:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8014a44:	88fb      	ldrh	r3, [r7, #6]
 8014a46:	2b7f      	cmp	r3, #127	@ 0x7f
 8014a48:	d802      	bhi.n	8014a50 <ff_convert+0x18>
		c = chr;
 8014a4a:	88fb      	ldrh	r3, [r7, #6]
 8014a4c:	81fb      	strh	r3, [r7, #14]
 8014a4e:	e025      	b.n	8014a9c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8014a50:	683b      	ldr	r3, [r7, #0]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d00b      	beq.n	8014a6e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8014a56:	88fb      	ldrh	r3, [r7, #6]
 8014a58:	2bff      	cmp	r3, #255	@ 0xff
 8014a5a:	d805      	bhi.n	8014a68 <ff_convert+0x30>
 8014a5c:	88fb      	ldrh	r3, [r7, #6]
 8014a5e:	3b80      	subs	r3, #128	@ 0x80
 8014a60:	4a12      	ldr	r2, [pc, #72]	@ (8014aac <ff_convert+0x74>)
 8014a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a66:	e000      	b.n	8014a6a <ff_convert+0x32>
 8014a68:	2300      	movs	r3, #0
 8014a6a:	81fb      	strh	r3, [r7, #14]
 8014a6c:	e016      	b.n	8014a9c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8014a6e:	2300      	movs	r3, #0
 8014a70:	81fb      	strh	r3, [r7, #14]
 8014a72:	e009      	b.n	8014a88 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8014a74:	89fb      	ldrh	r3, [r7, #14]
 8014a76:	4a0d      	ldr	r2, [pc, #52]	@ (8014aac <ff_convert+0x74>)
 8014a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a7c:	88fa      	ldrh	r2, [r7, #6]
 8014a7e:	429a      	cmp	r2, r3
 8014a80:	d006      	beq.n	8014a90 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8014a82:	89fb      	ldrh	r3, [r7, #14]
 8014a84:	3301      	adds	r3, #1
 8014a86:	81fb      	strh	r3, [r7, #14]
 8014a88:	89fb      	ldrh	r3, [r7, #14]
 8014a8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8014a8c:	d9f2      	bls.n	8014a74 <ff_convert+0x3c>
 8014a8e:	e000      	b.n	8014a92 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8014a90:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8014a92:	89fb      	ldrh	r3, [r7, #14]
 8014a94:	3380      	adds	r3, #128	@ 0x80
 8014a96:	b29b      	uxth	r3, r3
 8014a98:	b2db      	uxtb	r3, r3
 8014a9a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8014a9c:	89fb      	ldrh	r3, [r7, #14]
}
 8014a9e:	4618      	mov	r0, r3
 8014aa0:	3714      	adds	r7, #20
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa8:	4770      	bx	lr
 8014aaa:	bf00      	nop
 8014aac:	08018f64 	.word	0x08018f64

08014ab0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8014ab0:	b480      	push	{r7}
 8014ab2:	b087      	sub	sp, #28
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8014aba:	88fb      	ldrh	r3, [r7, #6]
 8014abc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014ac0:	d201      	bcs.n	8014ac6 <ff_wtoupper+0x16>
 8014ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8014bbc <ff_wtoupper+0x10c>)
 8014ac4:	e000      	b.n	8014ac8 <ff_wtoupper+0x18>
 8014ac6:	4b3e      	ldr	r3, [pc, #248]	@ (8014bc0 <ff_wtoupper+0x110>)
 8014ac8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8014aca:	697b      	ldr	r3, [r7, #20]
 8014acc:	1c9a      	adds	r2, r3, #2
 8014ace:	617a      	str	r2, [r7, #20]
 8014ad0:	881b      	ldrh	r3, [r3, #0]
 8014ad2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8014ad4:	8a7b      	ldrh	r3, [r7, #18]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d068      	beq.n	8014bac <ff_wtoupper+0xfc>
 8014ada:	88fa      	ldrh	r2, [r7, #6]
 8014adc:	8a7b      	ldrh	r3, [r7, #18]
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d364      	bcc.n	8014bac <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8014ae2:	697b      	ldr	r3, [r7, #20]
 8014ae4:	1c9a      	adds	r2, r3, #2
 8014ae6:	617a      	str	r2, [r7, #20]
 8014ae8:	881b      	ldrh	r3, [r3, #0]
 8014aea:	823b      	strh	r3, [r7, #16]
 8014aec:	8a3b      	ldrh	r3, [r7, #16]
 8014aee:	0a1b      	lsrs	r3, r3, #8
 8014af0:	81fb      	strh	r3, [r7, #14]
 8014af2:	8a3b      	ldrh	r3, [r7, #16]
 8014af4:	b2db      	uxtb	r3, r3
 8014af6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8014af8:	88fa      	ldrh	r2, [r7, #6]
 8014afa:	8a79      	ldrh	r1, [r7, #18]
 8014afc:	8a3b      	ldrh	r3, [r7, #16]
 8014afe:	440b      	add	r3, r1
 8014b00:	429a      	cmp	r2, r3
 8014b02:	da49      	bge.n	8014b98 <ff_wtoupper+0xe8>
			switch (cmd) {
 8014b04:	89fb      	ldrh	r3, [r7, #14]
 8014b06:	2b08      	cmp	r3, #8
 8014b08:	d84f      	bhi.n	8014baa <ff_wtoupper+0xfa>
 8014b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8014b10 <ff_wtoupper+0x60>)
 8014b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b10:	08014b35 	.word	0x08014b35
 8014b14:	08014b47 	.word	0x08014b47
 8014b18:	08014b5d 	.word	0x08014b5d
 8014b1c:	08014b65 	.word	0x08014b65
 8014b20:	08014b6d 	.word	0x08014b6d
 8014b24:	08014b75 	.word	0x08014b75
 8014b28:	08014b7d 	.word	0x08014b7d
 8014b2c:	08014b85 	.word	0x08014b85
 8014b30:	08014b8d 	.word	0x08014b8d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8014b34:	88fa      	ldrh	r2, [r7, #6]
 8014b36:	8a7b      	ldrh	r3, [r7, #18]
 8014b38:	1ad3      	subs	r3, r2, r3
 8014b3a:	005b      	lsls	r3, r3, #1
 8014b3c:	697a      	ldr	r2, [r7, #20]
 8014b3e:	4413      	add	r3, r2
 8014b40:	881b      	ldrh	r3, [r3, #0]
 8014b42:	80fb      	strh	r3, [r7, #6]
 8014b44:	e027      	b.n	8014b96 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8014b46:	88fa      	ldrh	r2, [r7, #6]
 8014b48:	8a7b      	ldrh	r3, [r7, #18]
 8014b4a:	1ad3      	subs	r3, r2, r3
 8014b4c:	b29b      	uxth	r3, r3
 8014b4e:	f003 0301 	and.w	r3, r3, #1
 8014b52:	b29b      	uxth	r3, r3
 8014b54:	88fa      	ldrh	r2, [r7, #6]
 8014b56:	1ad3      	subs	r3, r2, r3
 8014b58:	80fb      	strh	r3, [r7, #6]
 8014b5a:	e01c      	b.n	8014b96 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8014b5c:	88fb      	ldrh	r3, [r7, #6]
 8014b5e:	3b10      	subs	r3, #16
 8014b60:	80fb      	strh	r3, [r7, #6]
 8014b62:	e018      	b.n	8014b96 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8014b64:	88fb      	ldrh	r3, [r7, #6]
 8014b66:	3b20      	subs	r3, #32
 8014b68:	80fb      	strh	r3, [r7, #6]
 8014b6a:	e014      	b.n	8014b96 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8014b6c:	88fb      	ldrh	r3, [r7, #6]
 8014b6e:	3b30      	subs	r3, #48	@ 0x30
 8014b70:	80fb      	strh	r3, [r7, #6]
 8014b72:	e010      	b.n	8014b96 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014b74:	88fb      	ldrh	r3, [r7, #6]
 8014b76:	3b1a      	subs	r3, #26
 8014b78:	80fb      	strh	r3, [r7, #6]
 8014b7a:	e00c      	b.n	8014b96 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8014b7c:	88fb      	ldrh	r3, [r7, #6]
 8014b7e:	3308      	adds	r3, #8
 8014b80:	80fb      	strh	r3, [r7, #6]
 8014b82:	e008      	b.n	8014b96 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014b84:	88fb      	ldrh	r3, [r7, #6]
 8014b86:	3b50      	subs	r3, #80	@ 0x50
 8014b88:	80fb      	strh	r3, [r7, #6]
 8014b8a:	e004      	b.n	8014b96 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8014b8c:	88fb      	ldrh	r3, [r7, #6]
 8014b8e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8014b92:	80fb      	strh	r3, [r7, #6]
 8014b94:	bf00      	nop
			}
			break;
 8014b96:	e008      	b.n	8014baa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014b98:	89fb      	ldrh	r3, [r7, #14]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d195      	bne.n	8014aca <ff_wtoupper+0x1a>
 8014b9e:	8a3b      	ldrh	r3, [r7, #16]
 8014ba0:	005b      	lsls	r3, r3, #1
 8014ba2:	697a      	ldr	r2, [r7, #20]
 8014ba4:	4413      	add	r3, r2
 8014ba6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8014ba8:	e78f      	b.n	8014aca <ff_wtoupper+0x1a>
			break;
 8014baa:	bf00      	nop
	}

	return chr;
 8014bac:	88fb      	ldrh	r3, [r7, #6]
}
 8014bae:	4618      	mov	r0, r3
 8014bb0:	371c      	adds	r7, #28
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb8:	4770      	bx	lr
 8014bba:	bf00      	nop
 8014bbc:	08019064 	.word	0x08019064
 8014bc0:	08019258 	.word	0x08019258

08014bc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014bc4:	b580      	push	{r7, lr}
 8014bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014bc8:	2200      	movs	r2, #0
 8014bca:	4913      	ldr	r1, [pc, #76]	@ (8014c18 <MX_USB_DEVICE_Init+0x54>)
 8014bcc:	4813      	ldr	r0, [pc, #76]	@ (8014c1c <MX_USB_DEVICE_Init+0x58>)
 8014bce:	f7fb fa4b 	bl	8010068 <USBD_Init>
 8014bd2:	4603      	mov	r3, r0
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	d001      	beq.n	8014bdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014bd8:	f7ed f8a8 	bl	8001d2c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014bdc:	4910      	ldr	r1, [pc, #64]	@ (8014c20 <MX_USB_DEVICE_Init+0x5c>)
 8014bde:	480f      	ldr	r0, [pc, #60]	@ (8014c1c <MX_USB_DEVICE_Init+0x58>)
 8014be0:	f7fb fa72 	bl	80100c8 <USBD_RegisterClass>
 8014be4:	4603      	mov	r3, r0
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d001      	beq.n	8014bee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014bea:	f7ed f89f 	bl	8001d2c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014bee:	490d      	ldr	r1, [pc, #52]	@ (8014c24 <MX_USB_DEVICE_Init+0x60>)
 8014bf0:	480a      	ldr	r0, [pc, #40]	@ (8014c1c <MX_USB_DEVICE_Init+0x58>)
 8014bf2:	f7fb f969 	bl	800fec8 <USBD_CDC_RegisterInterface>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d001      	beq.n	8014c00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014bfc:	f7ed f896 	bl	8001d2c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014c00:	4806      	ldr	r0, [pc, #24]	@ (8014c1c <MX_USB_DEVICE_Init+0x58>)
 8014c02:	f7fb fa97 	bl	8010134 <USBD_Start>
 8014c06:	4603      	mov	r3, r0
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d001      	beq.n	8014c10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014c0c:	f7ed f88e 	bl	8001d2c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014c10:	f7f0 ff9e 	bl	8005b50 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014c14:	bf00      	nop
 8014c16:	bd80      	pop	{r7, pc}
 8014c18:	240000b8 	.word	0x240000b8
 8014c1c:	2400080c 	.word	0x2400080c
 8014c20:	24000024 	.word	0x24000024
 8014c24:	240000a4 	.word	0x240000a4

08014c28 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014c28:	b580      	push	{r7, lr}
 8014c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	4905      	ldr	r1, [pc, #20]	@ (8014c44 <CDC_Init_FS+0x1c>)
 8014c30:	4805      	ldr	r0, [pc, #20]	@ (8014c48 <CDC_Init_FS+0x20>)
 8014c32:	f7fb f963 	bl	800fefc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014c36:	4905      	ldr	r1, [pc, #20]	@ (8014c4c <CDC_Init_FS+0x24>)
 8014c38:	4803      	ldr	r0, [pc, #12]	@ (8014c48 <CDC_Init_FS+0x20>)
 8014c3a:	f7fb f981 	bl	800ff40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014c3e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	bd80      	pop	{r7, pc}
 8014c44:	240012e8 	.word	0x240012e8
 8014c48:	2400080c 	.word	0x2400080c
 8014c4c:	24000ae8 	.word	0x24000ae8

08014c50 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014c50:	b480      	push	{r7}
 8014c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014c54:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014c56:	4618      	mov	r0, r3
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5e:	4770      	bx	lr

08014c60 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014c60:	b480      	push	{r7}
 8014c62:	b083      	sub	sp, #12
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	4603      	mov	r3, r0
 8014c68:	6039      	str	r1, [r7, #0]
 8014c6a:	71fb      	strb	r3, [r7, #7]
 8014c6c:	4613      	mov	r3, r2
 8014c6e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014c70:	79fb      	ldrb	r3, [r7, #7]
 8014c72:	2b23      	cmp	r3, #35	@ 0x23
 8014c74:	d84a      	bhi.n	8014d0c <CDC_Control_FS+0xac>
 8014c76:	a201      	add	r2, pc, #4	@ (adr r2, 8014c7c <CDC_Control_FS+0x1c>)
 8014c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c7c:	08014d0d 	.word	0x08014d0d
 8014c80:	08014d0d 	.word	0x08014d0d
 8014c84:	08014d0d 	.word	0x08014d0d
 8014c88:	08014d0d 	.word	0x08014d0d
 8014c8c:	08014d0d 	.word	0x08014d0d
 8014c90:	08014d0d 	.word	0x08014d0d
 8014c94:	08014d0d 	.word	0x08014d0d
 8014c98:	08014d0d 	.word	0x08014d0d
 8014c9c:	08014d0d 	.word	0x08014d0d
 8014ca0:	08014d0d 	.word	0x08014d0d
 8014ca4:	08014d0d 	.word	0x08014d0d
 8014ca8:	08014d0d 	.word	0x08014d0d
 8014cac:	08014d0d 	.word	0x08014d0d
 8014cb0:	08014d0d 	.word	0x08014d0d
 8014cb4:	08014d0d 	.word	0x08014d0d
 8014cb8:	08014d0d 	.word	0x08014d0d
 8014cbc:	08014d0d 	.word	0x08014d0d
 8014cc0:	08014d0d 	.word	0x08014d0d
 8014cc4:	08014d0d 	.word	0x08014d0d
 8014cc8:	08014d0d 	.word	0x08014d0d
 8014ccc:	08014d0d 	.word	0x08014d0d
 8014cd0:	08014d0d 	.word	0x08014d0d
 8014cd4:	08014d0d 	.word	0x08014d0d
 8014cd8:	08014d0d 	.word	0x08014d0d
 8014cdc:	08014d0d 	.word	0x08014d0d
 8014ce0:	08014d0d 	.word	0x08014d0d
 8014ce4:	08014d0d 	.word	0x08014d0d
 8014ce8:	08014d0d 	.word	0x08014d0d
 8014cec:	08014d0d 	.word	0x08014d0d
 8014cf0:	08014d0d 	.word	0x08014d0d
 8014cf4:	08014d0d 	.word	0x08014d0d
 8014cf8:	08014d0d 	.word	0x08014d0d
 8014cfc:	08014d0d 	.word	0x08014d0d
 8014d00:	08014d0d 	.word	0x08014d0d
 8014d04:	08014d0d 	.word	0x08014d0d
 8014d08:	08014d0d 	.word	0x08014d0d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014d0c:	bf00      	nop
  }

  return (USBD_OK);
 8014d0e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	370c      	adds	r7, #12
 8014d14:	46bd      	mov	sp, r7
 8014d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1a:	4770      	bx	lr

08014d1c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b082      	sub	sp, #8
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
 8014d24:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014d26:	6879      	ldr	r1, [r7, #4]
 8014d28:	4805      	ldr	r0, [pc, #20]	@ (8014d40 <CDC_Receive_FS+0x24>)
 8014d2a:	f7fb f909 	bl	800ff40 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014d2e:	4804      	ldr	r0, [pc, #16]	@ (8014d40 <CDC_Receive_FS+0x24>)
 8014d30:	f7fb f964 	bl	800fffc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014d34:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014d36:	4618      	mov	r0, r3
 8014d38:	3708      	adds	r7, #8
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	bd80      	pop	{r7, pc}
 8014d3e:	bf00      	nop
 8014d40:	2400080c 	.word	0x2400080c

08014d44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b084      	sub	sp, #16
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
 8014d4c:	460b      	mov	r3, r1
 8014d4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014d50:	2300      	movs	r3, #0
 8014d52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014d54:	4b0d      	ldr	r3, [pc, #52]	@ (8014d8c <CDC_Transmit_FS+0x48>)
 8014d56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014d5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014d5c:	68bb      	ldr	r3, [r7, #8]
 8014d5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d001      	beq.n	8014d6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014d66:	2301      	movs	r3, #1
 8014d68:	e00b      	b.n	8014d82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014d6a:	887b      	ldrh	r3, [r7, #2]
 8014d6c:	461a      	mov	r2, r3
 8014d6e:	6879      	ldr	r1, [r7, #4]
 8014d70:	4806      	ldr	r0, [pc, #24]	@ (8014d8c <CDC_Transmit_FS+0x48>)
 8014d72:	f7fb f8c3 	bl	800fefc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014d76:	4805      	ldr	r0, [pc, #20]	@ (8014d8c <CDC_Transmit_FS+0x48>)
 8014d78:	f7fb f900 	bl	800ff7c <USBD_CDC_TransmitPacket>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d82:	4618      	mov	r0, r3
 8014d84:	3710      	adds	r7, #16
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}
 8014d8a:	bf00      	nop
 8014d8c:	2400080c 	.word	0x2400080c

08014d90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014d90:	b480      	push	{r7}
 8014d92:	b087      	sub	sp, #28
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	60f8      	str	r0, [r7, #12]
 8014d98:	60b9      	str	r1, [r7, #8]
 8014d9a:	4613      	mov	r3, r2
 8014d9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014d9e:	2300      	movs	r3, #0
 8014da0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014da2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014da6:	4618      	mov	r0, r3
 8014da8:	371c      	adds	r7, #28
 8014daa:	46bd      	mov	sp, r7
 8014dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db0:	4770      	bx	lr
	...

08014db4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014db4:	b480      	push	{r7}
 8014db6:	b083      	sub	sp, #12
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	4603      	mov	r3, r0
 8014dbc:	6039      	str	r1, [r7, #0]
 8014dbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	2212      	movs	r2, #18
 8014dc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014dc6:	4b03      	ldr	r3, [pc, #12]	@ (8014dd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014dc8:	4618      	mov	r0, r3
 8014dca:	370c      	adds	r7, #12
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd2:	4770      	bx	lr
 8014dd4:	240000d8 	.word	0x240000d8

08014dd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014dd8:	b480      	push	{r7}
 8014dda:	b083      	sub	sp, #12
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	4603      	mov	r3, r0
 8014de0:	6039      	str	r1, [r7, #0]
 8014de2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	2204      	movs	r2, #4
 8014de8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014dea:	4b03      	ldr	r3, [pc, #12]	@ (8014df8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	370c      	adds	r7, #12
 8014df0:	46bd      	mov	sp, r7
 8014df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df6:	4770      	bx	lr
 8014df8:	240000ec 	.word	0x240000ec

08014dfc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b082      	sub	sp, #8
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	4603      	mov	r3, r0
 8014e04:	6039      	str	r1, [r7, #0]
 8014e06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014e08:	79fb      	ldrb	r3, [r7, #7]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d105      	bne.n	8014e1a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014e0e:	683a      	ldr	r2, [r7, #0]
 8014e10:	4907      	ldr	r1, [pc, #28]	@ (8014e30 <USBD_FS_ProductStrDescriptor+0x34>)
 8014e12:	4808      	ldr	r0, [pc, #32]	@ (8014e34 <USBD_FS_ProductStrDescriptor+0x38>)
 8014e14:	f7fc fb68 	bl	80114e8 <USBD_GetString>
 8014e18:	e004      	b.n	8014e24 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014e1a:	683a      	ldr	r2, [r7, #0]
 8014e1c:	4904      	ldr	r1, [pc, #16]	@ (8014e30 <USBD_FS_ProductStrDescriptor+0x34>)
 8014e1e:	4805      	ldr	r0, [pc, #20]	@ (8014e34 <USBD_FS_ProductStrDescriptor+0x38>)
 8014e20:	f7fc fb62 	bl	80114e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014e24:	4b02      	ldr	r3, [pc, #8]	@ (8014e30 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014e26:	4618      	mov	r0, r3
 8014e28:	3708      	adds	r7, #8
 8014e2a:	46bd      	mov	sp, r7
 8014e2c:	bd80      	pop	{r7, pc}
 8014e2e:	bf00      	nop
 8014e30:	24001ae8 	.word	0x24001ae8
 8014e34:	0801865c 	.word	0x0801865c

08014e38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	4603      	mov	r3, r0
 8014e40:	6039      	str	r1, [r7, #0]
 8014e42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014e44:	683a      	ldr	r2, [r7, #0]
 8014e46:	4904      	ldr	r1, [pc, #16]	@ (8014e58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014e48:	4804      	ldr	r0, [pc, #16]	@ (8014e5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014e4a:	f7fc fb4d 	bl	80114e8 <USBD_GetString>
  return USBD_StrDesc;
 8014e4e:	4b02      	ldr	r3, [pc, #8]	@ (8014e58 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3708      	adds	r7, #8
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}
 8014e58:	24001ae8 	.word	0x24001ae8
 8014e5c:	08018674 	.word	0x08018674

08014e60 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b082      	sub	sp, #8
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	4603      	mov	r3, r0
 8014e68:	6039      	str	r1, [r7, #0]
 8014e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014e6c:	683b      	ldr	r3, [r7, #0]
 8014e6e:	221a      	movs	r2, #26
 8014e70:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014e72:	f000 f843 	bl	8014efc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014e76:	4b02      	ldr	r3, [pc, #8]	@ (8014e80 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014e78:	4618      	mov	r0, r3
 8014e7a:	3708      	adds	r7, #8
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}
 8014e80:	240000f0 	.word	0x240000f0

08014e84 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b082      	sub	sp, #8
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	6039      	str	r1, [r7, #0]
 8014e8e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014e90:	79fb      	ldrb	r3, [r7, #7]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d105      	bne.n	8014ea2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014e96:	683a      	ldr	r2, [r7, #0]
 8014e98:	4907      	ldr	r1, [pc, #28]	@ (8014eb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014e9a:	4808      	ldr	r0, [pc, #32]	@ (8014ebc <USBD_FS_ConfigStrDescriptor+0x38>)
 8014e9c:	f7fc fb24 	bl	80114e8 <USBD_GetString>
 8014ea0:	e004      	b.n	8014eac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014ea2:	683a      	ldr	r2, [r7, #0]
 8014ea4:	4904      	ldr	r1, [pc, #16]	@ (8014eb8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014ea6:	4805      	ldr	r0, [pc, #20]	@ (8014ebc <USBD_FS_ConfigStrDescriptor+0x38>)
 8014ea8:	f7fc fb1e 	bl	80114e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014eac:	4b02      	ldr	r3, [pc, #8]	@ (8014eb8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3708      	adds	r7, #8
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd80      	pop	{r7, pc}
 8014eb6:	bf00      	nop
 8014eb8:	24001ae8 	.word	0x24001ae8
 8014ebc:	08018688 	.word	0x08018688

08014ec0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b082      	sub	sp, #8
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	6039      	str	r1, [r7, #0]
 8014eca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014ecc:	79fb      	ldrb	r3, [r7, #7]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d105      	bne.n	8014ede <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014ed2:	683a      	ldr	r2, [r7, #0]
 8014ed4:	4907      	ldr	r1, [pc, #28]	@ (8014ef4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014ed6:	4808      	ldr	r0, [pc, #32]	@ (8014ef8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014ed8:	f7fc fb06 	bl	80114e8 <USBD_GetString>
 8014edc:	e004      	b.n	8014ee8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014ede:	683a      	ldr	r2, [r7, #0]
 8014ee0:	4904      	ldr	r1, [pc, #16]	@ (8014ef4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014ee2:	4805      	ldr	r0, [pc, #20]	@ (8014ef8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014ee4:	f7fc fb00 	bl	80114e8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014ee8:	4b02      	ldr	r3, [pc, #8]	@ (8014ef4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014eea:	4618      	mov	r0, r3
 8014eec:	3708      	adds	r7, #8
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	bd80      	pop	{r7, pc}
 8014ef2:	bf00      	nop
 8014ef4:	24001ae8 	.word	0x24001ae8
 8014ef8:	08018694 	.word	0x08018694

08014efc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b084      	sub	sp, #16
 8014f00:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014f02:	4b0f      	ldr	r3, [pc, #60]	@ (8014f40 <Get_SerialNum+0x44>)
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014f08:	4b0e      	ldr	r3, [pc, #56]	@ (8014f44 <Get_SerialNum+0x48>)
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8014f48 <Get_SerialNum+0x4c>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014f14:	68fa      	ldr	r2, [r7, #12]
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	4413      	add	r3, r2
 8014f1a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d009      	beq.n	8014f36 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014f22:	2208      	movs	r2, #8
 8014f24:	4909      	ldr	r1, [pc, #36]	@ (8014f4c <Get_SerialNum+0x50>)
 8014f26:	68f8      	ldr	r0, [r7, #12]
 8014f28:	f000 f814 	bl	8014f54 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014f2c:	2204      	movs	r2, #4
 8014f2e:	4908      	ldr	r1, [pc, #32]	@ (8014f50 <Get_SerialNum+0x54>)
 8014f30:	68b8      	ldr	r0, [r7, #8]
 8014f32:	f000 f80f 	bl	8014f54 <IntToUnicode>
  }
}
 8014f36:	bf00      	nop
 8014f38:	3710      	adds	r7, #16
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bd80      	pop	{r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	1ff1e800 	.word	0x1ff1e800
 8014f44:	1ff1e804 	.word	0x1ff1e804
 8014f48:	1ff1e808 	.word	0x1ff1e808
 8014f4c:	240000f2 	.word	0x240000f2
 8014f50:	24000102 	.word	0x24000102

08014f54 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014f54:	b480      	push	{r7}
 8014f56:	b087      	sub	sp, #28
 8014f58:	af00      	add	r7, sp, #0
 8014f5a:	60f8      	str	r0, [r7, #12]
 8014f5c:	60b9      	str	r1, [r7, #8]
 8014f5e:	4613      	mov	r3, r2
 8014f60:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014f62:	2300      	movs	r3, #0
 8014f64:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014f66:	2300      	movs	r3, #0
 8014f68:	75fb      	strb	r3, [r7, #23]
 8014f6a:	e027      	b.n	8014fbc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	0f1b      	lsrs	r3, r3, #28
 8014f70:	2b09      	cmp	r3, #9
 8014f72:	d80b      	bhi.n	8014f8c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	0f1b      	lsrs	r3, r3, #28
 8014f78:	b2da      	uxtb	r2, r3
 8014f7a:	7dfb      	ldrb	r3, [r7, #23]
 8014f7c:	005b      	lsls	r3, r3, #1
 8014f7e:	4619      	mov	r1, r3
 8014f80:	68bb      	ldr	r3, [r7, #8]
 8014f82:	440b      	add	r3, r1
 8014f84:	3230      	adds	r2, #48	@ 0x30
 8014f86:	b2d2      	uxtb	r2, r2
 8014f88:	701a      	strb	r2, [r3, #0]
 8014f8a:	e00a      	b.n	8014fa2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	0f1b      	lsrs	r3, r3, #28
 8014f90:	b2da      	uxtb	r2, r3
 8014f92:	7dfb      	ldrb	r3, [r7, #23]
 8014f94:	005b      	lsls	r3, r3, #1
 8014f96:	4619      	mov	r1, r3
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	440b      	add	r3, r1
 8014f9c:	3237      	adds	r2, #55	@ 0x37
 8014f9e:	b2d2      	uxtb	r2, r2
 8014fa0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	011b      	lsls	r3, r3, #4
 8014fa6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014fa8:	7dfb      	ldrb	r3, [r7, #23]
 8014faa:	005b      	lsls	r3, r3, #1
 8014fac:	3301      	adds	r3, #1
 8014fae:	68ba      	ldr	r2, [r7, #8]
 8014fb0:	4413      	add	r3, r2
 8014fb2:	2200      	movs	r2, #0
 8014fb4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014fb6:	7dfb      	ldrb	r3, [r7, #23]
 8014fb8:	3301      	adds	r3, #1
 8014fba:	75fb      	strb	r3, [r7, #23]
 8014fbc:	7dfa      	ldrb	r2, [r7, #23]
 8014fbe:	79fb      	ldrb	r3, [r7, #7]
 8014fc0:	429a      	cmp	r2, r3
 8014fc2:	d3d3      	bcc.n	8014f6c <IntToUnicode+0x18>
  }
}
 8014fc4:	bf00      	nop
 8014fc6:	bf00      	nop
 8014fc8:	371c      	adds	r7, #28
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd0:	4770      	bx	lr
	...

08014fd4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b0ba      	sub	sp, #232	@ 0xe8
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014fdc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8014fe0:	2200      	movs	r2, #0
 8014fe2:	601a      	str	r2, [r3, #0]
 8014fe4:	605a      	str	r2, [r3, #4]
 8014fe6:	609a      	str	r2, [r3, #8]
 8014fe8:	60da      	str	r2, [r3, #12]
 8014fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014fec:	f107 0310 	add.w	r3, r7, #16
 8014ff0:	22c0      	movs	r2, #192	@ 0xc0
 8014ff2:	2100      	movs	r1, #0
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f001 f938 	bl	801626a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	4a2c      	ldr	r2, [pc, #176]	@ (80150b0 <HAL_PCD_MspInit+0xdc>)
 8015000:	4293      	cmp	r3, r2
 8015002:	d151      	bne.n	80150a8 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015004:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8015008:	f04f 0300 	mov.w	r3, #0
 801500c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8015010:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8015014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015018:	f107 0310 	add.w	r3, r7, #16
 801501c:	4618      	mov	r0, r3
 801501e:	f7f1 fd8d 	bl	8006b3c <HAL_RCCEx_PeriphCLKConfig>
 8015022:	4603      	mov	r3, r0
 8015024:	2b00      	cmp	r3, #0
 8015026:	d001      	beq.n	801502c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8015028:	f7ec fe80 	bl	8001d2c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801502c:	f7f0 fd90 	bl	8005b50 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015030:	4b20      	ldr	r3, [pc, #128]	@ (80150b4 <HAL_PCD_MspInit+0xe0>)
 8015032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015036:	4a1f      	ldr	r2, [pc, #124]	@ (80150b4 <HAL_PCD_MspInit+0xe0>)
 8015038:	f043 0301 	orr.w	r3, r3, #1
 801503c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8015040:	4b1c      	ldr	r3, [pc, #112]	@ (80150b4 <HAL_PCD_MspInit+0xe0>)
 8015042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8015046:	f003 0301 	and.w	r3, r3, #1
 801504a:	60fb      	str	r3, [r7, #12]
 801504c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801504e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8015052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015056:	2302      	movs	r3, #2
 8015058:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801505c:	2300      	movs	r3, #0
 801505e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015062:	2300      	movs	r3, #0
 8015064:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8015068:	230a      	movs	r3, #10
 801506a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801506e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8015072:	4619      	mov	r1, r3
 8015074:	4810      	ldr	r0, [pc, #64]	@ (80150b8 <HAL_PCD_MspInit+0xe4>)
 8015076:	f7ef f8af 	bl	80041d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801507a:	4b0e      	ldr	r3, [pc, #56]	@ (80150b4 <HAL_PCD_MspInit+0xe0>)
 801507c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015080:	4a0c      	ldr	r2, [pc, #48]	@ (80150b4 <HAL_PCD_MspInit+0xe0>)
 8015082:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8015086:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801508a:	4b0a      	ldr	r3, [pc, #40]	@ (80150b4 <HAL_PCD_MspInit+0xe0>)
 801508c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8015090:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8015094:	60bb      	str	r3, [r7, #8]
 8015096:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015098:	2200      	movs	r2, #0
 801509a:	2100      	movs	r1, #0
 801509c:	2065      	movs	r0, #101	@ 0x65
 801509e:	f7ee ffee 	bl	800407e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80150a2:	2065      	movs	r0, #101	@ 0x65
 80150a4:	f7ef f805 	bl	80040b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80150a8:	bf00      	nop
 80150aa:	37e8      	adds	r7, #232	@ 0xe8
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}
 80150b0:	40080000 	.word	0x40080000
 80150b4:	58024400 	.word	0x58024400
 80150b8:	58020000 	.word	0x58020000

080150bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b082      	sub	sp, #8
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80150d0:	4619      	mov	r1, r3
 80150d2:	4610      	mov	r0, r2
 80150d4:	f7fb f87b 	bl	80101ce <USBD_LL_SetupStage>
}
 80150d8:	bf00      	nop
 80150da:	3708      	adds	r7, #8
 80150dc:	46bd      	mov	sp, r7
 80150de:	bd80      	pop	{r7, pc}

080150e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b082      	sub	sp, #8
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
 80150e8:	460b      	mov	r3, r1
 80150ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80150f2:	78fa      	ldrb	r2, [r7, #3]
 80150f4:	6879      	ldr	r1, [r7, #4]
 80150f6:	4613      	mov	r3, r2
 80150f8:	00db      	lsls	r3, r3, #3
 80150fa:	4413      	add	r3, r2
 80150fc:	009b      	lsls	r3, r3, #2
 80150fe:	440b      	add	r3, r1
 8015100:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8015104:	681a      	ldr	r2, [r3, #0]
 8015106:	78fb      	ldrb	r3, [r7, #3]
 8015108:	4619      	mov	r1, r3
 801510a:	f7fb f8b5 	bl	8010278 <USBD_LL_DataOutStage>
}
 801510e:	bf00      	nop
 8015110:	3708      	adds	r7, #8
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}

08015116 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015116:	b580      	push	{r7, lr}
 8015118:	b082      	sub	sp, #8
 801511a:	af00      	add	r7, sp, #0
 801511c:	6078      	str	r0, [r7, #4]
 801511e:	460b      	mov	r3, r1
 8015120:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8015128:	78fa      	ldrb	r2, [r7, #3]
 801512a:	6879      	ldr	r1, [r7, #4]
 801512c:	4613      	mov	r3, r2
 801512e:	00db      	lsls	r3, r3, #3
 8015130:	4413      	add	r3, r2
 8015132:	009b      	lsls	r3, r3, #2
 8015134:	440b      	add	r3, r1
 8015136:	3320      	adds	r3, #32
 8015138:	681a      	ldr	r2, [r3, #0]
 801513a:	78fb      	ldrb	r3, [r7, #3]
 801513c:	4619      	mov	r1, r3
 801513e:	f7fb f94e 	bl	80103de <USBD_LL_DataInStage>
}
 8015142:	bf00      	nop
 8015144:	3708      	adds	r7, #8
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}

0801514a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801514a:	b580      	push	{r7, lr}
 801514c:	b082      	sub	sp, #8
 801514e:	af00      	add	r7, sp, #0
 8015150:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015158:	4618      	mov	r0, r3
 801515a:	f7fb fa88 	bl	801066e <USBD_LL_SOF>
}
 801515e:	bf00      	nop
 8015160:	3708      	adds	r7, #8
 8015162:	46bd      	mov	sp, r7
 8015164:	bd80      	pop	{r7, pc}

08015166 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015166:	b580      	push	{r7, lr}
 8015168:	b084      	sub	sp, #16
 801516a:	af00      	add	r7, sp, #0
 801516c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801516e:	2301      	movs	r3, #1
 8015170:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	79db      	ldrb	r3, [r3, #7]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d102      	bne.n	8015180 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801517a:	2300      	movs	r3, #0
 801517c:	73fb      	strb	r3, [r7, #15]
 801517e:	e008      	b.n	8015192 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	79db      	ldrb	r3, [r3, #7]
 8015184:	2b02      	cmp	r3, #2
 8015186:	d102      	bne.n	801518e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015188:	2301      	movs	r3, #1
 801518a:	73fb      	strb	r3, [r7, #15]
 801518c:	e001      	b.n	8015192 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801518e:	f7ec fdcd 	bl	8001d2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015198:	7bfa      	ldrb	r2, [r7, #15]
 801519a:	4611      	mov	r1, r2
 801519c:	4618      	mov	r0, r3
 801519e:	f7fb fa22 	bl	80105e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80151a8:	4618      	mov	r0, r3
 80151aa:	f7fb f9ca 	bl	8010542 <USBD_LL_Reset>
}
 80151ae:	bf00      	nop
 80151b0:	3710      	adds	r7, #16
 80151b2:	46bd      	mov	sp, r7
 80151b4:	bd80      	pop	{r7, pc}
	...

080151b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b082      	sub	sp, #8
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7fb fa1d 	bl	8010606 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	687a      	ldr	r2, [r7, #4]
 80151d8:	6812      	ldr	r2, [r2, #0]
 80151da:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80151de:	f043 0301 	orr.w	r3, r3, #1
 80151e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	7adb      	ldrb	r3, [r3, #11]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d005      	beq.n	80151f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80151ec:	4b04      	ldr	r3, [pc, #16]	@ (8015200 <HAL_PCD_SuspendCallback+0x48>)
 80151ee:	691b      	ldr	r3, [r3, #16]
 80151f0:	4a03      	ldr	r2, [pc, #12]	@ (8015200 <HAL_PCD_SuspendCallback+0x48>)
 80151f2:	f043 0306 	orr.w	r3, r3, #6
 80151f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80151f8:	bf00      	nop
 80151fa:	3708      	adds	r7, #8
 80151fc:	46bd      	mov	sp, r7
 80151fe:	bd80      	pop	{r7, pc}
 8015200:	e000ed00 	.word	0xe000ed00

08015204 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b082      	sub	sp, #8
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015212:	4618      	mov	r0, r3
 8015214:	f7fb fa13 	bl	801063e <USBD_LL_Resume>
}
 8015218:	bf00      	nop
 801521a:	3708      	adds	r7, #8
 801521c:	46bd      	mov	sp, r7
 801521e:	bd80      	pop	{r7, pc}

08015220 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b082      	sub	sp, #8
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
 8015228:	460b      	mov	r3, r1
 801522a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015232:	78fa      	ldrb	r2, [r7, #3]
 8015234:	4611      	mov	r1, r2
 8015236:	4618      	mov	r0, r3
 8015238:	f7fb fa6b 	bl	8010712 <USBD_LL_IsoOUTIncomplete>
}
 801523c:	bf00      	nop
 801523e:	3708      	adds	r7, #8
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}

08015244 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b082      	sub	sp, #8
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
 801524c:	460b      	mov	r3, r1
 801524e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015256:	78fa      	ldrb	r2, [r7, #3]
 8015258:	4611      	mov	r1, r2
 801525a:	4618      	mov	r0, r3
 801525c:	f7fb fa27 	bl	80106ae <USBD_LL_IsoINIncomplete>
}
 8015260:	bf00      	nop
 8015262:	3708      	adds	r7, #8
 8015264:	46bd      	mov	sp, r7
 8015266:	bd80      	pop	{r7, pc}

08015268 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b082      	sub	sp, #8
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015276:	4618      	mov	r0, r3
 8015278:	f7fb fa7d 	bl	8010776 <USBD_LL_DevConnected>
}
 801527c:	bf00      	nop
 801527e:	3708      	adds	r7, #8
 8015280:	46bd      	mov	sp, r7
 8015282:	bd80      	pop	{r7, pc}

08015284 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b082      	sub	sp, #8
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8015292:	4618      	mov	r0, r3
 8015294:	f7fb fa7a 	bl	801078c <USBD_LL_DevDisconnected>
}
 8015298:	bf00      	nop
 801529a:	3708      	adds	r7, #8
 801529c:	46bd      	mov	sp, r7
 801529e:	bd80      	pop	{r7, pc}

080152a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b082      	sub	sp, #8
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	781b      	ldrb	r3, [r3, #0]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d13e      	bne.n	801532e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80152b0:	4a21      	ldr	r2, [pc, #132]	@ (8015338 <USBD_LL_Init+0x98>)
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	4a1f      	ldr	r2, [pc, #124]	@ (8015338 <USBD_LL_Init+0x98>)
 80152bc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80152c0:	4b1d      	ldr	r3, [pc, #116]	@ (8015338 <USBD_LL_Init+0x98>)
 80152c2:	4a1e      	ldr	r2, [pc, #120]	@ (801533c <USBD_LL_Init+0x9c>)
 80152c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80152c6:	4b1c      	ldr	r3, [pc, #112]	@ (8015338 <USBD_LL_Init+0x98>)
 80152c8:	2209      	movs	r2, #9
 80152ca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80152cc:	4b1a      	ldr	r3, [pc, #104]	@ (8015338 <USBD_LL_Init+0x98>)
 80152ce:	2202      	movs	r2, #2
 80152d0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80152d2:	4b19      	ldr	r3, [pc, #100]	@ (8015338 <USBD_LL_Init+0x98>)
 80152d4:	2200      	movs	r2, #0
 80152d6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80152d8:	4b17      	ldr	r3, [pc, #92]	@ (8015338 <USBD_LL_Init+0x98>)
 80152da:	2202      	movs	r2, #2
 80152dc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80152de:	4b16      	ldr	r3, [pc, #88]	@ (8015338 <USBD_LL_Init+0x98>)
 80152e0:	2200      	movs	r2, #0
 80152e2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80152e4:	4b14      	ldr	r3, [pc, #80]	@ (8015338 <USBD_LL_Init+0x98>)
 80152e6:	2200      	movs	r2, #0
 80152e8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80152ea:	4b13      	ldr	r3, [pc, #76]	@ (8015338 <USBD_LL_Init+0x98>)
 80152ec:	2200      	movs	r2, #0
 80152ee:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80152f0:	4b11      	ldr	r3, [pc, #68]	@ (8015338 <USBD_LL_Init+0x98>)
 80152f2:	2200      	movs	r2, #0
 80152f4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80152f6:	4b10      	ldr	r3, [pc, #64]	@ (8015338 <USBD_LL_Init+0x98>)
 80152f8:	2200      	movs	r2, #0
 80152fa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80152fc:	4b0e      	ldr	r3, [pc, #56]	@ (8015338 <USBD_LL_Init+0x98>)
 80152fe:	2200      	movs	r2, #0
 8015300:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015302:	480d      	ldr	r0, [pc, #52]	@ (8015338 <USBD_LL_Init+0x98>)
 8015304:	f7ef f949 	bl	800459a <HAL_PCD_Init>
 8015308:	4603      	mov	r3, r0
 801530a:	2b00      	cmp	r3, #0
 801530c:	d001      	beq.n	8015312 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801530e:	f7ec fd0d 	bl	8001d2c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015312:	2180      	movs	r1, #128	@ 0x80
 8015314:	4808      	ldr	r0, [pc, #32]	@ (8015338 <USBD_LL_Init+0x98>)
 8015316:	f7f0 fba0 	bl	8005a5a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801531a:	2240      	movs	r2, #64	@ 0x40
 801531c:	2100      	movs	r1, #0
 801531e:	4806      	ldr	r0, [pc, #24]	@ (8015338 <USBD_LL_Init+0x98>)
 8015320:	f7f0 fb54 	bl	80059cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015324:	2280      	movs	r2, #128	@ 0x80
 8015326:	2101      	movs	r1, #1
 8015328:	4803      	ldr	r0, [pc, #12]	@ (8015338 <USBD_LL_Init+0x98>)
 801532a:	f7f0 fb4f 	bl	80059cc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 801532e:	2300      	movs	r3, #0
}
 8015330:	4618      	mov	r0, r3
 8015332:	3708      	adds	r7, #8
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}
 8015338:	24001ce8 	.word	0x24001ce8
 801533c:	40080000 	.word	0x40080000

08015340 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b084      	sub	sp, #16
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015348:	2300      	movs	r3, #0
 801534a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801534c:	2300      	movs	r3, #0
 801534e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015356:	4618      	mov	r0, r3
 8015358:	f7ef fa2b 	bl	80047b2 <HAL_PCD_Start>
 801535c:	4603      	mov	r3, r0
 801535e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015360:	7bfb      	ldrb	r3, [r7, #15]
 8015362:	4618      	mov	r0, r3
 8015364:	f000 f942 	bl	80155ec <USBD_Get_USB_Status>
 8015368:	4603      	mov	r3, r0
 801536a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801536c:	7bbb      	ldrb	r3, [r7, #14]
}
 801536e:	4618      	mov	r0, r3
 8015370:	3710      	adds	r7, #16
 8015372:	46bd      	mov	sp, r7
 8015374:	bd80      	pop	{r7, pc}

08015376 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015376:	b580      	push	{r7, lr}
 8015378:	b084      	sub	sp, #16
 801537a:	af00      	add	r7, sp, #0
 801537c:	6078      	str	r0, [r7, #4]
 801537e:	4608      	mov	r0, r1
 8015380:	4611      	mov	r1, r2
 8015382:	461a      	mov	r2, r3
 8015384:	4603      	mov	r3, r0
 8015386:	70fb      	strb	r3, [r7, #3]
 8015388:	460b      	mov	r3, r1
 801538a:	70bb      	strb	r3, [r7, #2]
 801538c:	4613      	mov	r3, r2
 801538e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015390:	2300      	movs	r3, #0
 8015392:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015394:	2300      	movs	r3, #0
 8015396:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801539e:	78bb      	ldrb	r3, [r7, #2]
 80153a0:	883a      	ldrh	r2, [r7, #0]
 80153a2:	78f9      	ldrb	r1, [r7, #3]
 80153a4:	f7ef ff2c 	bl	8005200 <HAL_PCD_EP_Open>
 80153a8:	4603      	mov	r3, r0
 80153aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80153ac:	7bfb      	ldrb	r3, [r7, #15]
 80153ae:	4618      	mov	r0, r3
 80153b0:	f000 f91c 	bl	80155ec <USBD_Get_USB_Status>
 80153b4:	4603      	mov	r3, r0
 80153b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80153b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80153ba:	4618      	mov	r0, r3
 80153bc:	3710      	adds	r7, #16
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}

080153c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80153c2:	b580      	push	{r7, lr}
 80153c4:	b084      	sub	sp, #16
 80153c6:	af00      	add	r7, sp, #0
 80153c8:	6078      	str	r0, [r7, #4]
 80153ca:	460b      	mov	r3, r1
 80153cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80153ce:	2300      	movs	r3, #0
 80153d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80153d2:	2300      	movs	r3, #0
 80153d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80153dc:	78fa      	ldrb	r2, [r7, #3]
 80153de:	4611      	mov	r1, r2
 80153e0:	4618      	mov	r0, r3
 80153e2:	f7ef ff77 	bl	80052d4 <HAL_PCD_EP_Close>
 80153e6:	4603      	mov	r3, r0
 80153e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80153ea:	7bfb      	ldrb	r3, [r7, #15]
 80153ec:	4618      	mov	r0, r3
 80153ee:	f000 f8fd 	bl	80155ec <USBD_Get_USB_Status>
 80153f2:	4603      	mov	r3, r0
 80153f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80153f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80153f8:	4618      	mov	r0, r3
 80153fa:	3710      	adds	r7, #16
 80153fc:	46bd      	mov	sp, r7
 80153fe:	bd80      	pop	{r7, pc}

08015400 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b084      	sub	sp, #16
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	460b      	mov	r3, r1
 801540a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801540c:	2300      	movs	r3, #0
 801540e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015410:	2300      	movs	r3, #0
 8015412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801541a:	78fa      	ldrb	r2, [r7, #3]
 801541c:	4611      	mov	r1, r2
 801541e:	4618      	mov	r0, r3
 8015420:	f7f0 f82f 	bl	8005482 <HAL_PCD_EP_SetStall>
 8015424:	4603      	mov	r3, r0
 8015426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015428:	7bfb      	ldrb	r3, [r7, #15]
 801542a:	4618      	mov	r0, r3
 801542c:	f000 f8de 	bl	80155ec <USBD_Get_USB_Status>
 8015430:	4603      	mov	r3, r0
 8015432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015434:	7bbb      	ldrb	r3, [r7, #14]
}
 8015436:	4618      	mov	r0, r3
 8015438:	3710      	adds	r7, #16
 801543a:	46bd      	mov	sp, r7
 801543c:	bd80      	pop	{r7, pc}

0801543e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801543e:	b580      	push	{r7, lr}
 8015440:	b084      	sub	sp, #16
 8015442:	af00      	add	r7, sp, #0
 8015444:	6078      	str	r0, [r7, #4]
 8015446:	460b      	mov	r3, r1
 8015448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801544a:	2300      	movs	r3, #0
 801544c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801544e:	2300      	movs	r3, #0
 8015450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015458:	78fa      	ldrb	r2, [r7, #3]
 801545a:	4611      	mov	r1, r2
 801545c:	4618      	mov	r0, r3
 801545e:	f7f0 f873 	bl	8005548 <HAL_PCD_EP_ClrStall>
 8015462:	4603      	mov	r3, r0
 8015464:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015466:	7bfb      	ldrb	r3, [r7, #15]
 8015468:	4618      	mov	r0, r3
 801546a:	f000 f8bf 	bl	80155ec <USBD_Get_USB_Status>
 801546e:	4603      	mov	r3, r0
 8015470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015472:	7bbb      	ldrb	r3, [r7, #14]
}
 8015474:	4618      	mov	r0, r3
 8015476:	3710      	adds	r7, #16
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}

0801547c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801547c:	b480      	push	{r7}
 801547e:	b085      	sub	sp, #20
 8015480:	af00      	add	r7, sp, #0
 8015482:	6078      	str	r0, [r7, #4]
 8015484:	460b      	mov	r3, r1
 8015486:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801548e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015494:	2b00      	cmp	r3, #0
 8015496:	da0b      	bge.n	80154b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015498:	78fb      	ldrb	r3, [r7, #3]
 801549a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801549e:	68f9      	ldr	r1, [r7, #12]
 80154a0:	4613      	mov	r3, r2
 80154a2:	00db      	lsls	r3, r3, #3
 80154a4:	4413      	add	r3, r2
 80154a6:	009b      	lsls	r3, r3, #2
 80154a8:	440b      	add	r3, r1
 80154aa:	3316      	adds	r3, #22
 80154ac:	781b      	ldrb	r3, [r3, #0]
 80154ae:	e00b      	b.n	80154c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80154b0:	78fb      	ldrb	r3, [r7, #3]
 80154b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80154b6:	68f9      	ldr	r1, [r7, #12]
 80154b8:	4613      	mov	r3, r2
 80154ba:	00db      	lsls	r3, r3, #3
 80154bc:	4413      	add	r3, r2
 80154be:	009b      	lsls	r3, r3, #2
 80154c0:	440b      	add	r3, r1
 80154c2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80154c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80154c8:	4618      	mov	r0, r3
 80154ca:	3714      	adds	r7, #20
 80154cc:	46bd      	mov	sp, r7
 80154ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d2:	4770      	bx	lr

080154d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b084      	sub	sp, #16
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
 80154dc:	460b      	mov	r3, r1
 80154de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80154e0:	2300      	movs	r3, #0
 80154e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154e4:	2300      	movs	r3, #0
 80154e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80154ee:	78fa      	ldrb	r2, [r7, #3]
 80154f0:	4611      	mov	r1, r2
 80154f2:	4618      	mov	r0, r3
 80154f4:	f7ef fe60 	bl	80051b8 <HAL_PCD_SetAddress>
 80154f8:	4603      	mov	r3, r0
 80154fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80154fc:	7bfb      	ldrb	r3, [r7, #15]
 80154fe:	4618      	mov	r0, r3
 8015500:	f000 f874 	bl	80155ec <USBD_Get_USB_Status>
 8015504:	4603      	mov	r3, r0
 8015506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015508:	7bbb      	ldrb	r3, [r7, #14]
}
 801550a:	4618      	mov	r0, r3
 801550c:	3710      	adds	r7, #16
 801550e:	46bd      	mov	sp, r7
 8015510:	bd80      	pop	{r7, pc}

08015512 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015512:	b580      	push	{r7, lr}
 8015514:	b086      	sub	sp, #24
 8015516:	af00      	add	r7, sp, #0
 8015518:	60f8      	str	r0, [r7, #12]
 801551a:	607a      	str	r2, [r7, #4]
 801551c:	603b      	str	r3, [r7, #0]
 801551e:	460b      	mov	r3, r1
 8015520:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015522:	2300      	movs	r3, #0
 8015524:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015526:	2300      	movs	r3, #0
 8015528:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801552a:	68fb      	ldr	r3, [r7, #12]
 801552c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015530:	7af9      	ldrb	r1, [r7, #11]
 8015532:	683b      	ldr	r3, [r7, #0]
 8015534:	687a      	ldr	r2, [r7, #4]
 8015536:	f7ef ff6a 	bl	800540e <HAL_PCD_EP_Transmit>
 801553a:	4603      	mov	r3, r0
 801553c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801553e:	7dfb      	ldrb	r3, [r7, #23]
 8015540:	4618      	mov	r0, r3
 8015542:	f000 f853 	bl	80155ec <USBD_Get_USB_Status>
 8015546:	4603      	mov	r3, r0
 8015548:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801554a:	7dbb      	ldrb	r3, [r7, #22]
}
 801554c:	4618      	mov	r0, r3
 801554e:	3718      	adds	r7, #24
 8015550:	46bd      	mov	sp, r7
 8015552:	bd80      	pop	{r7, pc}

08015554 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b086      	sub	sp, #24
 8015558:	af00      	add	r7, sp, #0
 801555a:	60f8      	str	r0, [r7, #12]
 801555c:	607a      	str	r2, [r7, #4]
 801555e:	603b      	str	r3, [r7, #0]
 8015560:	460b      	mov	r3, r1
 8015562:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015564:	2300      	movs	r3, #0
 8015566:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015568:	2300      	movs	r3, #0
 801556a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015572:	7af9      	ldrb	r1, [r7, #11]
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	687a      	ldr	r2, [r7, #4]
 8015578:	f7ef fef6 	bl	8005368 <HAL_PCD_EP_Receive>
 801557c:	4603      	mov	r3, r0
 801557e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015580:	7dfb      	ldrb	r3, [r7, #23]
 8015582:	4618      	mov	r0, r3
 8015584:	f000 f832 	bl	80155ec <USBD_Get_USB_Status>
 8015588:	4603      	mov	r3, r0
 801558a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801558c:	7dbb      	ldrb	r3, [r7, #22]
}
 801558e:	4618      	mov	r0, r3
 8015590:	3718      	adds	r7, #24
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}

08015596 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015596:	b580      	push	{r7, lr}
 8015598:	b082      	sub	sp, #8
 801559a:	af00      	add	r7, sp, #0
 801559c:	6078      	str	r0, [r7, #4]
 801559e:	460b      	mov	r3, r1
 80155a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80155a8:	78fa      	ldrb	r2, [r7, #3]
 80155aa:	4611      	mov	r1, r2
 80155ac:	4618      	mov	r0, r3
 80155ae:	f7ef ff16 	bl	80053de <HAL_PCD_EP_GetRxCount>
 80155b2:	4603      	mov	r3, r0
}
 80155b4:	4618      	mov	r0, r3
 80155b6:	3708      	adds	r7, #8
 80155b8:	46bd      	mov	sp, r7
 80155ba:	bd80      	pop	{r7, pc}

080155bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80155bc:	b480      	push	{r7}
 80155be:	b083      	sub	sp, #12
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80155c4:	4b03      	ldr	r3, [pc, #12]	@ (80155d4 <USBD_static_malloc+0x18>)
}
 80155c6:	4618      	mov	r0, r3
 80155c8:	370c      	adds	r7, #12
 80155ca:	46bd      	mov	sp, r7
 80155cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d0:	4770      	bx	lr
 80155d2:	bf00      	nop
 80155d4:	240021cc 	.word	0x240021cc

080155d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80155d8:	b480      	push	{r7}
 80155da:	b083      	sub	sp, #12
 80155dc:	af00      	add	r7, sp, #0
 80155de:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80155e0:	bf00      	nop
 80155e2:	370c      	adds	r7, #12
 80155e4:	46bd      	mov	sp, r7
 80155e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ea:	4770      	bx	lr

080155ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80155ec:	b480      	push	{r7}
 80155ee:	b085      	sub	sp, #20
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	4603      	mov	r3, r0
 80155f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155f6:	2300      	movs	r3, #0
 80155f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80155fa:	79fb      	ldrb	r3, [r7, #7]
 80155fc:	2b03      	cmp	r3, #3
 80155fe:	d817      	bhi.n	8015630 <USBD_Get_USB_Status+0x44>
 8015600:	a201      	add	r2, pc, #4	@ (adr r2, 8015608 <USBD_Get_USB_Status+0x1c>)
 8015602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015606:	bf00      	nop
 8015608:	08015619 	.word	0x08015619
 801560c:	0801561f 	.word	0x0801561f
 8015610:	08015625 	.word	0x08015625
 8015614:	0801562b 	.word	0x0801562b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015618:	2300      	movs	r3, #0
 801561a:	73fb      	strb	r3, [r7, #15]
    break;
 801561c:	e00b      	b.n	8015636 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801561e:	2303      	movs	r3, #3
 8015620:	73fb      	strb	r3, [r7, #15]
    break;
 8015622:	e008      	b.n	8015636 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015624:	2301      	movs	r3, #1
 8015626:	73fb      	strb	r3, [r7, #15]
    break;
 8015628:	e005      	b.n	8015636 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801562a:	2303      	movs	r3, #3
 801562c:	73fb      	strb	r3, [r7, #15]
    break;
 801562e:	e002      	b.n	8015636 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015630:	2303      	movs	r3, #3
 8015632:	73fb      	strb	r3, [r7, #15]
    break;
 8015634:	bf00      	nop
  }
  return usb_status;
 8015636:	7bfb      	ldrb	r3, [r7, #15]
}
 8015638:	4618      	mov	r0, r3
 801563a:	3714      	adds	r7, #20
 801563c:	46bd      	mov	sp, r7
 801563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015642:	4770      	bx	lr

08015644 <malloc>:
 8015644:	4b02      	ldr	r3, [pc, #8]	@ (8015650 <malloc+0xc>)
 8015646:	4601      	mov	r1, r0
 8015648:	6818      	ldr	r0, [r3, #0]
 801564a:	f000 b825 	b.w	8015698 <_malloc_r>
 801564e:	bf00      	nop
 8015650:	24000118 	.word	0x24000118

08015654 <sbrk_aligned>:
 8015654:	b570      	push	{r4, r5, r6, lr}
 8015656:	4e0f      	ldr	r6, [pc, #60]	@ (8015694 <sbrk_aligned+0x40>)
 8015658:	460c      	mov	r4, r1
 801565a:	6831      	ldr	r1, [r6, #0]
 801565c:	4605      	mov	r5, r0
 801565e:	b911      	cbnz	r1, 8015666 <sbrk_aligned+0x12>
 8015660:	f000 fe44 	bl	80162ec <_sbrk_r>
 8015664:	6030      	str	r0, [r6, #0]
 8015666:	4621      	mov	r1, r4
 8015668:	4628      	mov	r0, r5
 801566a:	f000 fe3f 	bl	80162ec <_sbrk_r>
 801566e:	1c43      	adds	r3, r0, #1
 8015670:	d103      	bne.n	801567a <sbrk_aligned+0x26>
 8015672:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8015676:	4620      	mov	r0, r4
 8015678:	bd70      	pop	{r4, r5, r6, pc}
 801567a:	1cc4      	adds	r4, r0, #3
 801567c:	f024 0403 	bic.w	r4, r4, #3
 8015680:	42a0      	cmp	r0, r4
 8015682:	d0f8      	beq.n	8015676 <sbrk_aligned+0x22>
 8015684:	1a21      	subs	r1, r4, r0
 8015686:	4628      	mov	r0, r5
 8015688:	f000 fe30 	bl	80162ec <_sbrk_r>
 801568c:	3001      	adds	r0, #1
 801568e:	d1f2      	bne.n	8015676 <sbrk_aligned+0x22>
 8015690:	e7ef      	b.n	8015672 <sbrk_aligned+0x1e>
 8015692:	bf00      	nop
 8015694:	240023ec 	.word	0x240023ec

08015698 <_malloc_r>:
 8015698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801569c:	1ccd      	adds	r5, r1, #3
 801569e:	f025 0503 	bic.w	r5, r5, #3
 80156a2:	3508      	adds	r5, #8
 80156a4:	2d0c      	cmp	r5, #12
 80156a6:	bf38      	it	cc
 80156a8:	250c      	movcc	r5, #12
 80156aa:	2d00      	cmp	r5, #0
 80156ac:	4606      	mov	r6, r0
 80156ae:	db01      	blt.n	80156b4 <_malloc_r+0x1c>
 80156b0:	42a9      	cmp	r1, r5
 80156b2:	d904      	bls.n	80156be <_malloc_r+0x26>
 80156b4:	230c      	movs	r3, #12
 80156b6:	6033      	str	r3, [r6, #0]
 80156b8:	2000      	movs	r0, #0
 80156ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8015794 <_malloc_r+0xfc>
 80156c2:	f000 f869 	bl	8015798 <__malloc_lock>
 80156c6:	f8d8 3000 	ldr.w	r3, [r8]
 80156ca:	461c      	mov	r4, r3
 80156cc:	bb44      	cbnz	r4, 8015720 <_malloc_r+0x88>
 80156ce:	4629      	mov	r1, r5
 80156d0:	4630      	mov	r0, r6
 80156d2:	f7ff ffbf 	bl	8015654 <sbrk_aligned>
 80156d6:	1c43      	adds	r3, r0, #1
 80156d8:	4604      	mov	r4, r0
 80156da:	d158      	bne.n	801578e <_malloc_r+0xf6>
 80156dc:	f8d8 4000 	ldr.w	r4, [r8]
 80156e0:	4627      	mov	r7, r4
 80156e2:	2f00      	cmp	r7, #0
 80156e4:	d143      	bne.n	801576e <_malloc_r+0xd6>
 80156e6:	2c00      	cmp	r4, #0
 80156e8:	d04b      	beq.n	8015782 <_malloc_r+0xea>
 80156ea:	6823      	ldr	r3, [r4, #0]
 80156ec:	4639      	mov	r1, r7
 80156ee:	4630      	mov	r0, r6
 80156f0:	eb04 0903 	add.w	r9, r4, r3
 80156f4:	f000 fdfa 	bl	80162ec <_sbrk_r>
 80156f8:	4581      	cmp	r9, r0
 80156fa:	d142      	bne.n	8015782 <_malloc_r+0xea>
 80156fc:	6821      	ldr	r1, [r4, #0]
 80156fe:	1a6d      	subs	r5, r5, r1
 8015700:	4629      	mov	r1, r5
 8015702:	4630      	mov	r0, r6
 8015704:	f7ff ffa6 	bl	8015654 <sbrk_aligned>
 8015708:	3001      	adds	r0, #1
 801570a:	d03a      	beq.n	8015782 <_malloc_r+0xea>
 801570c:	6823      	ldr	r3, [r4, #0]
 801570e:	442b      	add	r3, r5
 8015710:	6023      	str	r3, [r4, #0]
 8015712:	f8d8 3000 	ldr.w	r3, [r8]
 8015716:	685a      	ldr	r2, [r3, #4]
 8015718:	bb62      	cbnz	r2, 8015774 <_malloc_r+0xdc>
 801571a:	f8c8 7000 	str.w	r7, [r8]
 801571e:	e00f      	b.n	8015740 <_malloc_r+0xa8>
 8015720:	6822      	ldr	r2, [r4, #0]
 8015722:	1b52      	subs	r2, r2, r5
 8015724:	d420      	bmi.n	8015768 <_malloc_r+0xd0>
 8015726:	2a0b      	cmp	r2, #11
 8015728:	d917      	bls.n	801575a <_malloc_r+0xc2>
 801572a:	1961      	adds	r1, r4, r5
 801572c:	42a3      	cmp	r3, r4
 801572e:	6025      	str	r5, [r4, #0]
 8015730:	bf18      	it	ne
 8015732:	6059      	strne	r1, [r3, #4]
 8015734:	6863      	ldr	r3, [r4, #4]
 8015736:	bf08      	it	eq
 8015738:	f8c8 1000 	streq.w	r1, [r8]
 801573c:	5162      	str	r2, [r4, r5]
 801573e:	604b      	str	r3, [r1, #4]
 8015740:	4630      	mov	r0, r6
 8015742:	f000 f82f 	bl	80157a4 <__malloc_unlock>
 8015746:	f104 000b 	add.w	r0, r4, #11
 801574a:	1d23      	adds	r3, r4, #4
 801574c:	f020 0007 	bic.w	r0, r0, #7
 8015750:	1ac2      	subs	r2, r0, r3
 8015752:	bf1c      	itt	ne
 8015754:	1a1b      	subne	r3, r3, r0
 8015756:	50a3      	strne	r3, [r4, r2]
 8015758:	e7af      	b.n	80156ba <_malloc_r+0x22>
 801575a:	6862      	ldr	r2, [r4, #4]
 801575c:	42a3      	cmp	r3, r4
 801575e:	bf0c      	ite	eq
 8015760:	f8c8 2000 	streq.w	r2, [r8]
 8015764:	605a      	strne	r2, [r3, #4]
 8015766:	e7eb      	b.n	8015740 <_malloc_r+0xa8>
 8015768:	4623      	mov	r3, r4
 801576a:	6864      	ldr	r4, [r4, #4]
 801576c:	e7ae      	b.n	80156cc <_malloc_r+0x34>
 801576e:	463c      	mov	r4, r7
 8015770:	687f      	ldr	r7, [r7, #4]
 8015772:	e7b6      	b.n	80156e2 <_malloc_r+0x4a>
 8015774:	461a      	mov	r2, r3
 8015776:	685b      	ldr	r3, [r3, #4]
 8015778:	42a3      	cmp	r3, r4
 801577a:	d1fb      	bne.n	8015774 <_malloc_r+0xdc>
 801577c:	2300      	movs	r3, #0
 801577e:	6053      	str	r3, [r2, #4]
 8015780:	e7de      	b.n	8015740 <_malloc_r+0xa8>
 8015782:	230c      	movs	r3, #12
 8015784:	6033      	str	r3, [r6, #0]
 8015786:	4630      	mov	r0, r6
 8015788:	f000 f80c 	bl	80157a4 <__malloc_unlock>
 801578c:	e794      	b.n	80156b8 <_malloc_r+0x20>
 801578e:	6005      	str	r5, [r0, #0]
 8015790:	e7d6      	b.n	8015740 <_malloc_r+0xa8>
 8015792:	bf00      	nop
 8015794:	240023f0 	.word	0x240023f0

08015798 <__malloc_lock>:
 8015798:	4801      	ldr	r0, [pc, #4]	@ (80157a0 <__malloc_lock+0x8>)
 801579a:	f000 bdf4 	b.w	8016386 <__retarget_lock_acquire_recursive>
 801579e:	bf00      	nop
 80157a0:	24002534 	.word	0x24002534

080157a4 <__malloc_unlock>:
 80157a4:	4801      	ldr	r0, [pc, #4]	@ (80157ac <__malloc_unlock+0x8>)
 80157a6:	f000 bdef 	b.w	8016388 <__retarget_lock_release_recursive>
 80157aa:	bf00      	nop
 80157ac:	24002534 	.word	0x24002534

080157b0 <__cvt>:
 80157b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157b2:	ed2d 8b02 	vpush	{d8}
 80157b6:	eeb0 8b40 	vmov.f64	d8, d0
 80157ba:	b085      	sub	sp, #20
 80157bc:	4617      	mov	r7, r2
 80157be:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80157c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80157c2:	ee18 2a90 	vmov	r2, s17
 80157c6:	f025 0520 	bic.w	r5, r5, #32
 80157ca:	2a00      	cmp	r2, #0
 80157cc:	bfb6      	itet	lt
 80157ce:	222d      	movlt	r2, #45	@ 0x2d
 80157d0:	2200      	movge	r2, #0
 80157d2:	eeb1 8b40 	vneglt.f64	d8, d0
 80157d6:	2d46      	cmp	r5, #70	@ 0x46
 80157d8:	460c      	mov	r4, r1
 80157da:	701a      	strb	r2, [r3, #0]
 80157dc:	d004      	beq.n	80157e8 <__cvt+0x38>
 80157de:	2d45      	cmp	r5, #69	@ 0x45
 80157e0:	d100      	bne.n	80157e4 <__cvt+0x34>
 80157e2:	3401      	adds	r4, #1
 80157e4:	2102      	movs	r1, #2
 80157e6:	e000      	b.n	80157ea <__cvt+0x3a>
 80157e8:	2103      	movs	r1, #3
 80157ea:	ab03      	add	r3, sp, #12
 80157ec:	9301      	str	r3, [sp, #4]
 80157ee:	ab02      	add	r3, sp, #8
 80157f0:	9300      	str	r3, [sp, #0]
 80157f2:	4622      	mov	r2, r4
 80157f4:	4633      	mov	r3, r6
 80157f6:	eeb0 0b48 	vmov.f64	d0, d8
 80157fa:	f000 fe51 	bl	80164a0 <_dtoa_r>
 80157fe:	2d47      	cmp	r5, #71	@ 0x47
 8015800:	d114      	bne.n	801582c <__cvt+0x7c>
 8015802:	07fb      	lsls	r3, r7, #31
 8015804:	d50a      	bpl.n	801581c <__cvt+0x6c>
 8015806:	1902      	adds	r2, r0, r4
 8015808:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801580c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015810:	bf08      	it	eq
 8015812:	9203      	streq	r2, [sp, #12]
 8015814:	2130      	movs	r1, #48	@ 0x30
 8015816:	9b03      	ldr	r3, [sp, #12]
 8015818:	4293      	cmp	r3, r2
 801581a:	d319      	bcc.n	8015850 <__cvt+0xa0>
 801581c:	9b03      	ldr	r3, [sp, #12]
 801581e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015820:	1a1b      	subs	r3, r3, r0
 8015822:	6013      	str	r3, [r2, #0]
 8015824:	b005      	add	sp, #20
 8015826:	ecbd 8b02 	vpop	{d8}
 801582a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801582c:	2d46      	cmp	r5, #70	@ 0x46
 801582e:	eb00 0204 	add.w	r2, r0, r4
 8015832:	d1e9      	bne.n	8015808 <__cvt+0x58>
 8015834:	7803      	ldrb	r3, [r0, #0]
 8015836:	2b30      	cmp	r3, #48	@ 0x30
 8015838:	d107      	bne.n	801584a <__cvt+0x9a>
 801583a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801583e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015842:	bf1c      	itt	ne
 8015844:	f1c4 0401 	rsbne	r4, r4, #1
 8015848:	6034      	strne	r4, [r6, #0]
 801584a:	6833      	ldr	r3, [r6, #0]
 801584c:	441a      	add	r2, r3
 801584e:	e7db      	b.n	8015808 <__cvt+0x58>
 8015850:	1c5c      	adds	r4, r3, #1
 8015852:	9403      	str	r4, [sp, #12]
 8015854:	7019      	strb	r1, [r3, #0]
 8015856:	e7de      	b.n	8015816 <__cvt+0x66>

08015858 <__exponent>:
 8015858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801585a:	2900      	cmp	r1, #0
 801585c:	bfba      	itte	lt
 801585e:	4249      	neglt	r1, r1
 8015860:	232d      	movlt	r3, #45	@ 0x2d
 8015862:	232b      	movge	r3, #43	@ 0x2b
 8015864:	2909      	cmp	r1, #9
 8015866:	7002      	strb	r2, [r0, #0]
 8015868:	7043      	strb	r3, [r0, #1]
 801586a:	dd29      	ble.n	80158c0 <__exponent+0x68>
 801586c:	f10d 0307 	add.w	r3, sp, #7
 8015870:	461d      	mov	r5, r3
 8015872:	270a      	movs	r7, #10
 8015874:	461a      	mov	r2, r3
 8015876:	fbb1 f6f7 	udiv	r6, r1, r7
 801587a:	fb07 1416 	mls	r4, r7, r6, r1
 801587e:	3430      	adds	r4, #48	@ 0x30
 8015880:	f802 4c01 	strb.w	r4, [r2, #-1]
 8015884:	460c      	mov	r4, r1
 8015886:	2c63      	cmp	r4, #99	@ 0x63
 8015888:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801588c:	4631      	mov	r1, r6
 801588e:	dcf1      	bgt.n	8015874 <__exponent+0x1c>
 8015890:	3130      	adds	r1, #48	@ 0x30
 8015892:	1e94      	subs	r4, r2, #2
 8015894:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015898:	1c41      	adds	r1, r0, #1
 801589a:	4623      	mov	r3, r4
 801589c:	42ab      	cmp	r3, r5
 801589e:	d30a      	bcc.n	80158b6 <__exponent+0x5e>
 80158a0:	f10d 0309 	add.w	r3, sp, #9
 80158a4:	1a9b      	subs	r3, r3, r2
 80158a6:	42ac      	cmp	r4, r5
 80158a8:	bf88      	it	hi
 80158aa:	2300      	movhi	r3, #0
 80158ac:	3302      	adds	r3, #2
 80158ae:	4403      	add	r3, r0
 80158b0:	1a18      	subs	r0, r3, r0
 80158b2:	b003      	add	sp, #12
 80158b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80158ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80158be:	e7ed      	b.n	801589c <__exponent+0x44>
 80158c0:	2330      	movs	r3, #48	@ 0x30
 80158c2:	3130      	adds	r1, #48	@ 0x30
 80158c4:	7083      	strb	r3, [r0, #2]
 80158c6:	70c1      	strb	r1, [r0, #3]
 80158c8:	1d03      	adds	r3, r0, #4
 80158ca:	e7f1      	b.n	80158b0 <__exponent+0x58>
 80158cc:	0000      	movs	r0, r0
	...

080158d0 <_printf_float>:
 80158d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158d4:	b08d      	sub	sp, #52	@ 0x34
 80158d6:	460c      	mov	r4, r1
 80158d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80158dc:	4616      	mov	r6, r2
 80158de:	461f      	mov	r7, r3
 80158e0:	4605      	mov	r5, r0
 80158e2:	f000 fccb 	bl	801627c <_localeconv_r>
 80158e6:	f8d0 b000 	ldr.w	fp, [r0]
 80158ea:	4658      	mov	r0, fp
 80158ec:	f7ea fd48 	bl	8000380 <strlen>
 80158f0:	2300      	movs	r3, #0
 80158f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80158f4:	f8d8 3000 	ldr.w	r3, [r8]
 80158f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80158fc:	6822      	ldr	r2, [r4, #0]
 80158fe:	9005      	str	r0, [sp, #20]
 8015900:	3307      	adds	r3, #7
 8015902:	f023 0307 	bic.w	r3, r3, #7
 8015906:	f103 0108 	add.w	r1, r3, #8
 801590a:	f8c8 1000 	str.w	r1, [r8]
 801590e:	ed93 0b00 	vldr	d0, [r3]
 8015912:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8015b70 <_printf_float+0x2a0>
 8015916:	eeb0 7bc0 	vabs.f64	d7, d0
 801591a:	eeb4 7b46 	vcmp.f64	d7, d6
 801591e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015922:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8015926:	dd24      	ble.n	8015972 <_printf_float+0xa2>
 8015928:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801592c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015930:	d502      	bpl.n	8015938 <_printf_float+0x68>
 8015932:	232d      	movs	r3, #45	@ 0x2d
 8015934:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015938:	498f      	ldr	r1, [pc, #572]	@ (8015b78 <_printf_float+0x2a8>)
 801593a:	4b90      	ldr	r3, [pc, #576]	@ (8015b7c <_printf_float+0x2ac>)
 801593c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8015940:	bf8c      	ite	hi
 8015942:	4688      	movhi	r8, r1
 8015944:	4698      	movls	r8, r3
 8015946:	f022 0204 	bic.w	r2, r2, #4
 801594a:	2303      	movs	r3, #3
 801594c:	6123      	str	r3, [r4, #16]
 801594e:	6022      	str	r2, [r4, #0]
 8015950:	f04f 0a00 	mov.w	sl, #0
 8015954:	9700      	str	r7, [sp, #0]
 8015956:	4633      	mov	r3, r6
 8015958:	aa0b      	add	r2, sp, #44	@ 0x2c
 801595a:	4621      	mov	r1, r4
 801595c:	4628      	mov	r0, r5
 801595e:	f000 f9d1 	bl	8015d04 <_printf_common>
 8015962:	3001      	adds	r0, #1
 8015964:	f040 8089 	bne.w	8015a7a <_printf_float+0x1aa>
 8015968:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801596c:	b00d      	add	sp, #52	@ 0x34
 801596e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015972:	eeb4 0b40 	vcmp.f64	d0, d0
 8015976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801597a:	d709      	bvc.n	8015990 <_printf_float+0xc0>
 801597c:	ee10 3a90 	vmov	r3, s1
 8015980:	2b00      	cmp	r3, #0
 8015982:	bfbc      	itt	lt
 8015984:	232d      	movlt	r3, #45	@ 0x2d
 8015986:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801598a:	497d      	ldr	r1, [pc, #500]	@ (8015b80 <_printf_float+0x2b0>)
 801598c:	4b7d      	ldr	r3, [pc, #500]	@ (8015b84 <_printf_float+0x2b4>)
 801598e:	e7d5      	b.n	801593c <_printf_float+0x6c>
 8015990:	6863      	ldr	r3, [r4, #4]
 8015992:	1c59      	adds	r1, r3, #1
 8015994:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8015998:	d139      	bne.n	8015a0e <_printf_float+0x13e>
 801599a:	2306      	movs	r3, #6
 801599c:	6063      	str	r3, [r4, #4]
 801599e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80159a2:	2300      	movs	r3, #0
 80159a4:	6022      	str	r2, [r4, #0]
 80159a6:	9303      	str	r3, [sp, #12]
 80159a8:	ab0a      	add	r3, sp, #40	@ 0x28
 80159aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80159ae:	ab09      	add	r3, sp, #36	@ 0x24
 80159b0:	9300      	str	r3, [sp, #0]
 80159b2:	6861      	ldr	r1, [r4, #4]
 80159b4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80159b8:	4628      	mov	r0, r5
 80159ba:	f7ff fef9 	bl	80157b0 <__cvt>
 80159be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80159c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80159c4:	4680      	mov	r8, r0
 80159c6:	d129      	bne.n	8015a1c <_printf_float+0x14c>
 80159c8:	1cc8      	adds	r0, r1, #3
 80159ca:	db02      	blt.n	80159d2 <_printf_float+0x102>
 80159cc:	6863      	ldr	r3, [r4, #4]
 80159ce:	4299      	cmp	r1, r3
 80159d0:	dd41      	ble.n	8015a56 <_printf_float+0x186>
 80159d2:	f1a9 0902 	sub.w	r9, r9, #2
 80159d6:	fa5f f989 	uxtb.w	r9, r9
 80159da:	3901      	subs	r1, #1
 80159dc:	464a      	mov	r2, r9
 80159de:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80159e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80159e4:	f7ff ff38 	bl	8015858 <__exponent>
 80159e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80159ea:	1813      	adds	r3, r2, r0
 80159ec:	2a01      	cmp	r2, #1
 80159ee:	4682      	mov	sl, r0
 80159f0:	6123      	str	r3, [r4, #16]
 80159f2:	dc02      	bgt.n	80159fa <_printf_float+0x12a>
 80159f4:	6822      	ldr	r2, [r4, #0]
 80159f6:	07d2      	lsls	r2, r2, #31
 80159f8:	d501      	bpl.n	80159fe <_printf_float+0x12e>
 80159fa:	3301      	adds	r3, #1
 80159fc:	6123      	str	r3, [r4, #16]
 80159fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d0a6      	beq.n	8015954 <_printf_float+0x84>
 8015a06:	232d      	movs	r3, #45	@ 0x2d
 8015a08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015a0c:	e7a2      	b.n	8015954 <_printf_float+0x84>
 8015a0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8015a12:	d1c4      	bne.n	801599e <_printf_float+0xce>
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d1c2      	bne.n	801599e <_printf_float+0xce>
 8015a18:	2301      	movs	r3, #1
 8015a1a:	e7bf      	b.n	801599c <_printf_float+0xcc>
 8015a1c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8015a20:	d9db      	bls.n	80159da <_printf_float+0x10a>
 8015a22:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8015a26:	d118      	bne.n	8015a5a <_printf_float+0x18a>
 8015a28:	2900      	cmp	r1, #0
 8015a2a:	6863      	ldr	r3, [r4, #4]
 8015a2c:	dd0b      	ble.n	8015a46 <_printf_float+0x176>
 8015a2e:	6121      	str	r1, [r4, #16]
 8015a30:	b913      	cbnz	r3, 8015a38 <_printf_float+0x168>
 8015a32:	6822      	ldr	r2, [r4, #0]
 8015a34:	07d0      	lsls	r0, r2, #31
 8015a36:	d502      	bpl.n	8015a3e <_printf_float+0x16e>
 8015a38:	3301      	adds	r3, #1
 8015a3a:	440b      	add	r3, r1
 8015a3c:	6123      	str	r3, [r4, #16]
 8015a3e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8015a40:	f04f 0a00 	mov.w	sl, #0
 8015a44:	e7db      	b.n	80159fe <_printf_float+0x12e>
 8015a46:	b913      	cbnz	r3, 8015a4e <_printf_float+0x17e>
 8015a48:	6822      	ldr	r2, [r4, #0]
 8015a4a:	07d2      	lsls	r2, r2, #31
 8015a4c:	d501      	bpl.n	8015a52 <_printf_float+0x182>
 8015a4e:	3302      	adds	r3, #2
 8015a50:	e7f4      	b.n	8015a3c <_printf_float+0x16c>
 8015a52:	2301      	movs	r3, #1
 8015a54:	e7f2      	b.n	8015a3c <_printf_float+0x16c>
 8015a56:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8015a5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015a5c:	4299      	cmp	r1, r3
 8015a5e:	db05      	blt.n	8015a6c <_printf_float+0x19c>
 8015a60:	6823      	ldr	r3, [r4, #0]
 8015a62:	6121      	str	r1, [r4, #16]
 8015a64:	07d8      	lsls	r0, r3, #31
 8015a66:	d5ea      	bpl.n	8015a3e <_printf_float+0x16e>
 8015a68:	1c4b      	adds	r3, r1, #1
 8015a6a:	e7e7      	b.n	8015a3c <_printf_float+0x16c>
 8015a6c:	2900      	cmp	r1, #0
 8015a6e:	bfd4      	ite	le
 8015a70:	f1c1 0202 	rsble	r2, r1, #2
 8015a74:	2201      	movgt	r2, #1
 8015a76:	4413      	add	r3, r2
 8015a78:	e7e0      	b.n	8015a3c <_printf_float+0x16c>
 8015a7a:	6823      	ldr	r3, [r4, #0]
 8015a7c:	055a      	lsls	r2, r3, #21
 8015a7e:	d407      	bmi.n	8015a90 <_printf_float+0x1c0>
 8015a80:	6923      	ldr	r3, [r4, #16]
 8015a82:	4642      	mov	r2, r8
 8015a84:	4631      	mov	r1, r6
 8015a86:	4628      	mov	r0, r5
 8015a88:	47b8      	blx	r7
 8015a8a:	3001      	adds	r0, #1
 8015a8c:	d12a      	bne.n	8015ae4 <_printf_float+0x214>
 8015a8e:	e76b      	b.n	8015968 <_printf_float+0x98>
 8015a90:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8015a94:	f240 80e0 	bls.w	8015c58 <_printf_float+0x388>
 8015a98:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8015a9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aa4:	d133      	bne.n	8015b0e <_printf_float+0x23e>
 8015aa6:	4a38      	ldr	r2, [pc, #224]	@ (8015b88 <_printf_float+0x2b8>)
 8015aa8:	2301      	movs	r3, #1
 8015aaa:	4631      	mov	r1, r6
 8015aac:	4628      	mov	r0, r5
 8015aae:	47b8      	blx	r7
 8015ab0:	3001      	adds	r0, #1
 8015ab2:	f43f af59 	beq.w	8015968 <_printf_float+0x98>
 8015ab6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8015aba:	4543      	cmp	r3, r8
 8015abc:	db02      	blt.n	8015ac4 <_printf_float+0x1f4>
 8015abe:	6823      	ldr	r3, [r4, #0]
 8015ac0:	07d8      	lsls	r0, r3, #31
 8015ac2:	d50f      	bpl.n	8015ae4 <_printf_float+0x214>
 8015ac4:	9b05      	ldr	r3, [sp, #20]
 8015ac6:	465a      	mov	r2, fp
 8015ac8:	4631      	mov	r1, r6
 8015aca:	4628      	mov	r0, r5
 8015acc:	47b8      	blx	r7
 8015ace:	3001      	adds	r0, #1
 8015ad0:	f43f af4a 	beq.w	8015968 <_printf_float+0x98>
 8015ad4:	f04f 0900 	mov.w	r9, #0
 8015ad8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8015adc:	f104 0a1a 	add.w	sl, r4, #26
 8015ae0:	45c8      	cmp	r8, r9
 8015ae2:	dc09      	bgt.n	8015af8 <_printf_float+0x228>
 8015ae4:	6823      	ldr	r3, [r4, #0]
 8015ae6:	079b      	lsls	r3, r3, #30
 8015ae8:	f100 8107 	bmi.w	8015cfa <_printf_float+0x42a>
 8015aec:	68e0      	ldr	r0, [r4, #12]
 8015aee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8015af0:	4298      	cmp	r0, r3
 8015af2:	bfb8      	it	lt
 8015af4:	4618      	movlt	r0, r3
 8015af6:	e739      	b.n	801596c <_printf_float+0x9c>
 8015af8:	2301      	movs	r3, #1
 8015afa:	4652      	mov	r2, sl
 8015afc:	4631      	mov	r1, r6
 8015afe:	4628      	mov	r0, r5
 8015b00:	47b8      	blx	r7
 8015b02:	3001      	adds	r0, #1
 8015b04:	f43f af30 	beq.w	8015968 <_printf_float+0x98>
 8015b08:	f109 0901 	add.w	r9, r9, #1
 8015b0c:	e7e8      	b.n	8015ae0 <_printf_float+0x210>
 8015b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	dc3b      	bgt.n	8015b8c <_printf_float+0x2bc>
 8015b14:	4a1c      	ldr	r2, [pc, #112]	@ (8015b88 <_printf_float+0x2b8>)
 8015b16:	2301      	movs	r3, #1
 8015b18:	4631      	mov	r1, r6
 8015b1a:	4628      	mov	r0, r5
 8015b1c:	47b8      	blx	r7
 8015b1e:	3001      	adds	r0, #1
 8015b20:	f43f af22 	beq.w	8015968 <_printf_float+0x98>
 8015b24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8015b28:	ea59 0303 	orrs.w	r3, r9, r3
 8015b2c:	d102      	bne.n	8015b34 <_printf_float+0x264>
 8015b2e:	6823      	ldr	r3, [r4, #0]
 8015b30:	07d9      	lsls	r1, r3, #31
 8015b32:	d5d7      	bpl.n	8015ae4 <_printf_float+0x214>
 8015b34:	9b05      	ldr	r3, [sp, #20]
 8015b36:	465a      	mov	r2, fp
 8015b38:	4631      	mov	r1, r6
 8015b3a:	4628      	mov	r0, r5
 8015b3c:	47b8      	blx	r7
 8015b3e:	3001      	adds	r0, #1
 8015b40:	f43f af12 	beq.w	8015968 <_printf_float+0x98>
 8015b44:	f04f 0a00 	mov.w	sl, #0
 8015b48:	f104 0b1a 	add.w	fp, r4, #26
 8015b4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b4e:	425b      	negs	r3, r3
 8015b50:	4553      	cmp	r3, sl
 8015b52:	dc01      	bgt.n	8015b58 <_printf_float+0x288>
 8015b54:	464b      	mov	r3, r9
 8015b56:	e794      	b.n	8015a82 <_printf_float+0x1b2>
 8015b58:	2301      	movs	r3, #1
 8015b5a:	465a      	mov	r2, fp
 8015b5c:	4631      	mov	r1, r6
 8015b5e:	4628      	mov	r0, r5
 8015b60:	47b8      	blx	r7
 8015b62:	3001      	adds	r0, #1
 8015b64:	f43f af00 	beq.w	8015968 <_printf_float+0x98>
 8015b68:	f10a 0a01 	add.w	sl, sl, #1
 8015b6c:	e7ee      	b.n	8015b4c <_printf_float+0x27c>
 8015b6e:	bf00      	nop
 8015b70:	ffffffff 	.word	0xffffffff
 8015b74:	7fefffff 	.word	0x7fefffff
 8015b78:	08019318 	.word	0x08019318
 8015b7c:	08019314 	.word	0x08019314
 8015b80:	08019320 	.word	0x08019320
 8015b84:	0801931c 	.word	0x0801931c
 8015b88:	08019324 	.word	0x08019324
 8015b8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015b8e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8015b92:	4553      	cmp	r3, sl
 8015b94:	bfa8      	it	ge
 8015b96:	4653      	movge	r3, sl
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	4699      	mov	r9, r3
 8015b9c:	dc37      	bgt.n	8015c0e <_printf_float+0x33e>
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	9307      	str	r3, [sp, #28]
 8015ba2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015ba6:	f104 021a 	add.w	r2, r4, #26
 8015baa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8015bac:	9907      	ldr	r1, [sp, #28]
 8015bae:	9306      	str	r3, [sp, #24]
 8015bb0:	eba3 0309 	sub.w	r3, r3, r9
 8015bb4:	428b      	cmp	r3, r1
 8015bb6:	dc31      	bgt.n	8015c1c <_printf_float+0x34c>
 8015bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015bba:	459a      	cmp	sl, r3
 8015bbc:	dc3b      	bgt.n	8015c36 <_printf_float+0x366>
 8015bbe:	6823      	ldr	r3, [r4, #0]
 8015bc0:	07da      	lsls	r2, r3, #31
 8015bc2:	d438      	bmi.n	8015c36 <_printf_float+0x366>
 8015bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015bc6:	ebaa 0903 	sub.w	r9, sl, r3
 8015bca:	9b06      	ldr	r3, [sp, #24]
 8015bcc:	ebaa 0303 	sub.w	r3, sl, r3
 8015bd0:	4599      	cmp	r9, r3
 8015bd2:	bfa8      	it	ge
 8015bd4:	4699      	movge	r9, r3
 8015bd6:	f1b9 0f00 	cmp.w	r9, #0
 8015bda:	dc34      	bgt.n	8015c46 <_printf_float+0x376>
 8015bdc:	f04f 0800 	mov.w	r8, #0
 8015be0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015be4:	f104 0b1a 	add.w	fp, r4, #26
 8015be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015bea:	ebaa 0303 	sub.w	r3, sl, r3
 8015bee:	eba3 0309 	sub.w	r3, r3, r9
 8015bf2:	4543      	cmp	r3, r8
 8015bf4:	f77f af76 	ble.w	8015ae4 <_printf_float+0x214>
 8015bf8:	2301      	movs	r3, #1
 8015bfa:	465a      	mov	r2, fp
 8015bfc:	4631      	mov	r1, r6
 8015bfe:	4628      	mov	r0, r5
 8015c00:	47b8      	blx	r7
 8015c02:	3001      	adds	r0, #1
 8015c04:	f43f aeb0 	beq.w	8015968 <_printf_float+0x98>
 8015c08:	f108 0801 	add.w	r8, r8, #1
 8015c0c:	e7ec      	b.n	8015be8 <_printf_float+0x318>
 8015c0e:	4642      	mov	r2, r8
 8015c10:	4631      	mov	r1, r6
 8015c12:	4628      	mov	r0, r5
 8015c14:	47b8      	blx	r7
 8015c16:	3001      	adds	r0, #1
 8015c18:	d1c1      	bne.n	8015b9e <_printf_float+0x2ce>
 8015c1a:	e6a5      	b.n	8015968 <_printf_float+0x98>
 8015c1c:	2301      	movs	r3, #1
 8015c1e:	4631      	mov	r1, r6
 8015c20:	4628      	mov	r0, r5
 8015c22:	9206      	str	r2, [sp, #24]
 8015c24:	47b8      	blx	r7
 8015c26:	3001      	adds	r0, #1
 8015c28:	f43f ae9e 	beq.w	8015968 <_printf_float+0x98>
 8015c2c:	9b07      	ldr	r3, [sp, #28]
 8015c2e:	9a06      	ldr	r2, [sp, #24]
 8015c30:	3301      	adds	r3, #1
 8015c32:	9307      	str	r3, [sp, #28]
 8015c34:	e7b9      	b.n	8015baa <_printf_float+0x2da>
 8015c36:	9b05      	ldr	r3, [sp, #20]
 8015c38:	465a      	mov	r2, fp
 8015c3a:	4631      	mov	r1, r6
 8015c3c:	4628      	mov	r0, r5
 8015c3e:	47b8      	blx	r7
 8015c40:	3001      	adds	r0, #1
 8015c42:	d1bf      	bne.n	8015bc4 <_printf_float+0x2f4>
 8015c44:	e690      	b.n	8015968 <_printf_float+0x98>
 8015c46:	9a06      	ldr	r2, [sp, #24]
 8015c48:	464b      	mov	r3, r9
 8015c4a:	4442      	add	r2, r8
 8015c4c:	4631      	mov	r1, r6
 8015c4e:	4628      	mov	r0, r5
 8015c50:	47b8      	blx	r7
 8015c52:	3001      	adds	r0, #1
 8015c54:	d1c2      	bne.n	8015bdc <_printf_float+0x30c>
 8015c56:	e687      	b.n	8015968 <_printf_float+0x98>
 8015c58:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8015c5c:	f1b9 0f01 	cmp.w	r9, #1
 8015c60:	dc01      	bgt.n	8015c66 <_printf_float+0x396>
 8015c62:	07db      	lsls	r3, r3, #31
 8015c64:	d536      	bpl.n	8015cd4 <_printf_float+0x404>
 8015c66:	2301      	movs	r3, #1
 8015c68:	4642      	mov	r2, r8
 8015c6a:	4631      	mov	r1, r6
 8015c6c:	4628      	mov	r0, r5
 8015c6e:	47b8      	blx	r7
 8015c70:	3001      	adds	r0, #1
 8015c72:	f43f ae79 	beq.w	8015968 <_printf_float+0x98>
 8015c76:	9b05      	ldr	r3, [sp, #20]
 8015c78:	465a      	mov	r2, fp
 8015c7a:	4631      	mov	r1, r6
 8015c7c:	4628      	mov	r0, r5
 8015c7e:	47b8      	blx	r7
 8015c80:	3001      	adds	r0, #1
 8015c82:	f43f ae71 	beq.w	8015968 <_printf_float+0x98>
 8015c86:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8015c8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8015c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c92:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8015c96:	d018      	beq.n	8015cca <_printf_float+0x3fa>
 8015c98:	464b      	mov	r3, r9
 8015c9a:	f108 0201 	add.w	r2, r8, #1
 8015c9e:	4631      	mov	r1, r6
 8015ca0:	4628      	mov	r0, r5
 8015ca2:	47b8      	blx	r7
 8015ca4:	3001      	adds	r0, #1
 8015ca6:	d10c      	bne.n	8015cc2 <_printf_float+0x3f2>
 8015ca8:	e65e      	b.n	8015968 <_printf_float+0x98>
 8015caa:	2301      	movs	r3, #1
 8015cac:	465a      	mov	r2, fp
 8015cae:	4631      	mov	r1, r6
 8015cb0:	4628      	mov	r0, r5
 8015cb2:	47b8      	blx	r7
 8015cb4:	3001      	adds	r0, #1
 8015cb6:	f43f ae57 	beq.w	8015968 <_printf_float+0x98>
 8015cba:	f108 0801 	add.w	r8, r8, #1
 8015cbe:	45c8      	cmp	r8, r9
 8015cc0:	dbf3      	blt.n	8015caa <_printf_float+0x3da>
 8015cc2:	4653      	mov	r3, sl
 8015cc4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8015cc8:	e6dc      	b.n	8015a84 <_printf_float+0x1b4>
 8015cca:	f04f 0800 	mov.w	r8, #0
 8015cce:	f104 0b1a 	add.w	fp, r4, #26
 8015cd2:	e7f4      	b.n	8015cbe <_printf_float+0x3ee>
 8015cd4:	2301      	movs	r3, #1
 8015cd6:	4642      	mov	r2, r8
 8015cd8:	e7e1      	b.n	8015c9e <_printf_float+0x3ce>
 8015cda:	2301      	movs	r3, #1
 8015cdc:	464a      	mov	r2, r9
 8015cde:	4631      	mov	r1, r6
 8015ce0:	4628      	mov	r0, r5
 8015ce2:	47b8      	blx	r7
 8015ce4:	3001      	adds	r0, #1
 8015ce6:	f43f ae3f 	beq.w	8015968 <_printf_float+0x98>
 8015cea:	f108 0801 	add.w	r8, r8, #1
 8015cee:	68e3      	ldr	r3, [r4, #12]
 8015cf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015cf2:	1a5b      	subs	r3, r3, r1
 8015cf4:	4543      	cmp	r3, r8
 8015cf6:	dcf0      	bgt.n	8015cda <_printf_float+0x40a>
 8015cf8:	e6f8      	b.n	8015aec <_printf_float+0x21c>
 8015cfa:	f04f 0800 	mov.w	r8, #0
 8015cfe:	f104 0919 	add.w	r9, r4, #25
 8015d02:	e7f4      	b.n	8015cee <_printf_float+0x41e>

08015d04 <_printf_common>:
 8015d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d08:	4616      	mov	r6, r2
 8015d0a:	4698      	mov	r8, r3
 8015d0c:	688a      	ldr	r2, [r1, #8]
 8015d0e:	690b      	ldr	r3, [r1, #16]
 8015d10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015d14:	4293      	cmp	r3, r2
 8015d16:	bfb8      	it	lt
 8015d18:	4613      	movlt	r3, r2
 8015d1a:	6033      	str	r3, [r6, #0]
 8015d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8015d20:	4607      	mov	r7, r0
 8015d22:	460c      	mov	r4, r1
 8015d24:	b10a      	cbz	r2, 8015d2a <_printf_common+0x26>
 8015d26:	3301      	adds	r3, #1
 8015d28:	6033      	str	r3, [r6, #0]
 8015d2a:	6823      	ldr	r3, [r4, #0]
 8015d2c:	0699      	lsls	r1, r3, #26
 8015d2e:	bf42      	ittt	mi
 8015d30:	6833      	ldrmi	r3, [r6, #0]
 8015d32:	3302      	addmi	r3, #2
 8015d34:	6033      	strmi	r3, [r6, #0]
 8015d36:	6825      	ldr	r5, [r4, #0]
 8015d38:	f015 0506 	ands.w	r5, r5, #6
 8015d3c:	d106      	bne.n	8015d4c <_printf_common+0x48>
 8015d3e:	f104 0a19 	add.w	sl, r4, #25
 8015d42:	68e3      	ldr	r3, [r4, #12]
 8015d44:	6832      	ldr	r2, [r6, #0]
 8015d46:	1a9b      	subs	r3, r3, r2
 8015d48:	42ab      	cmp	r3, r5
 8015d4a:	dc26      	bgt.n	8015d9a <_printf_common+0x96>
 8015d4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8015d50:	6822      	ldr	r2, [r4, #0]
 8015d52:	3b00      	subs	r3, #0
 8015d54:	bf18      	it	ne
 8015d56:	2301      	movne	r3, #1
 8015d58:	0692      	lsls	r2, r2, #26
 8015d5a:	d42b      	bmi.n	8015db4 <_printf_common+0xb0>
 8015d5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8015d60:	4641      	mov	r1, r8
 8015d62:	4638      	mov	r0, r7
 8015d64:	47c8      	blx	r9
 8015d66:	3001      	adds	r0, #1
 8015d68:	d01e      	beq.n	8015da8 <_printf_common+0xa4>
 8015d6a:	6823      	ldr	r3, [r4, #0]
 8015d6c:	6922      	ldr	r2, [r4, #16]
 8015d6e:	f003 0306 	and.w	r3, r3, #6
 8015d72:	2b04      	cmp	r3, #4
 8015d74:	bf02      	ittt	eq
 8015d76:	68e5      	ldreq	r5, [r4, #12]
 8015d78:	6833      	ldreq	r3, [r6, #0]
 8015d7a:	1aed      	subeq	r5, r5, r3
 8015d7c:	68a3      	ldr	r3, [r4, #8]
 8015d7e:	bf0c      	ite	eq
 8015d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015d84:	2500      	movne	r5, #0
 8015d86:	4293      	cmp	r3, r2
 8015d88:	bfc4      	itt	gt
 8015d8a:	1a9b      	subgt	r3, r3, r2
 8015d8c:	18ed      	addgt	r5, r5, r3
 8015d8e:	2600      	movs	r6, #0
 8015d90:	341a      	adds	r4, #26
 8015d92:	42b5      	cmp	r5, r6
 8015d94:	d11a      	bne.n	8015dcc <_printf_common+0xc8>
 8015d96:	2000      	movs	r0, #0
 8015d98:	e008      	b.n	8015dac <_printf_common+0xa8>
 8015d9a:	2301      	movs	r3, #1
 8015d9c:	4652      	mov	r2, sl
 8015d9e:	4641      	mov	r1, r8
 8015da0:	4638      	mov	r0, r7
 8015da2:	47c8      	blx	r9
 8015da4:	3001      	adds	r0, #1
 8015da6:	d103      	bne.n	8015db0 <_printf_common+0xac>
 8015da8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015db0:	3501      	adds	r5, #1
 8015db2:	e7c6      	b.n	8015d42 <_printf_common+0x3e>
 8015db4:	18e1      	adds	r1, r4, r3
 8015db6:	1c5a      	adds	r2, r3, #1
 8015db8:	2030      	movs	r0, #48	@ 0x30
 8015dba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8015dbe:	4422      	add	r2, r4
 8015dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8015dc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8015dc8:	3302      	adds	r3, #2
 8015dca:	e7c7      	b.n	8015d5c <_printf_common+0x58>
 8015dcc:	2301      	movs	r3, #1
 8015dce:	4622      	mov	r2, r4
 8015dd0:	4641      	mov	r1, r8
 8015dd2:	4638      	mov	r0, r7
 8015dd4:	47c8      	blx	r9
 8015dd6:	3001      	adds	r0, #1
 8015dd8:	d0e6      	beq.n	8015da8 <_printf_common+0xa4>
 8015dda:	3601      	adds	r6, #1
 8015ddc:	e7d9      	b.n	8015d92 <_printf_common+0x8e>
	...

08015de0 <_printf_i>:
 8015de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015de4:	7e0f      	ldrb	r7, [r1, #24]
 8015de6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8015de8:	2f78      	cmp	r7, #120	@ 0x78
 8015dea:	4691      	mov	r9, r2
 8015dec:	4680      	mov	r8, r0
 8015dee:	460c      	mov	r4, r1
 8015df0:	469a      	mov	sl, r3
 8015df2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8015df6:	d807      	bhi.n	8015e08 <_printf_i+0x28>
 8015df8:	2f62      	cmp	r7, #98	@ 0x62
 8015dfa:	d80a      	bhi.n	8015e12 <_printf_i+0x32>
 8015dfc:	2f00      	cmp	r7, #0
 8015dfe:	f000 80d1 	beq.w	8015fa4 <_printf_i+0x1c4>
 8015e02:	2f58      	cmp	r7, #88	@ 0x58
 8015e04:	f000 80b8 	beq.w	8015f78 <_printf_i+0x198>
 8015e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015e0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8015e10:	e03a      	b.n	8015e88 <_printf_i+0xa8>
 8015e12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8015e16:	2b15      	cmp	r3, #21
 8015e18:	d8f6      	bhi.n	8015e08 <_printf_i+0x28>
 8015e1a:	a101      	add	r1, pc, #4	@ (adr r1, 8015e20 <_printf_i+0x40>)
 8015e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015e20:	08015e79 	.word	0x08015e79
 8015e24:	08015e8d 	.word	0x08015e8d
 8015e28:	08015e09 	.word	0x08015e09
 8015e2c:	08015e09 	.word	0x08015e09
 8015e30:	08015e09 	.word	0x08015e09
 8015e34:	08015e09 	.word	0x08015e09
 8015e38:	08015e8d 	.word	0x08015e8d
 8015e3c:	08015e09 	.word	0x08015e09
 8015e40:	08015e09 	.word	0x08015e09
 8015e44:	08015e09 	.word	0x08015e09
 8015e48:	08015e09 	.word	0x08015e09
 8015e4c:	08015f8b 	.word	0x08015f8b
 8015e50:	08015eb7 	.word	0x08015eb7
 8015e54:	08015f45 	.word	0x08015f45
 8015e58:	08015e09 	.word	0x08015e09
 8015e5c:	08015e09 	.word	0x08015e09
 8015e60:	08015fad 	.word	0x08015fad
 8015e64:	08015e09 	.word	0x08015e09
 8015e68:	08015eb7 	.word	0x08015eb7
 8015e6c:	08015e09 	.word	0x08015e09
 8015e70:	08015e09 	.word	0x08015e09
 8015e74:	08015f4d 	.word	0x08015f4d
 8015e78:	6833      	ldr	r3, [r6, #0]
 8015e7a:	1d1a      	adds	r2, r3, #4
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	6032      	str	r2, [r6, #0]
 8015e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8015e84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8015e88:	2301      	movs	r3, #1
 8015e8a:	e09c      	b.n	8015fc6 <_printf_i+0x1e6>
 8015e8c:	6833      	ldr	r3, [r6, #0]
 8015e8e:	6820      	ldr	r0, [r4, #0]
 8015e90:	1d19      	adds	r1, r3, #4
 8015e92:	6031      	str	r1, [r6, #0]
 8015e94:	0606      	lsls	r6, r0, #24
 8015e96:	d501      	bpl.n	8015e9c <_printf_i+0xbc>
 8015e98:	681d      	ldr	r5, [r3, #0]
 8015e9a:	e003      	b.n	8015ea4 <_printf_i+0xc4>
 8015e9c:	0645      	lsls	r5, r0, #25
 8015e9e:	d5fb      	bpl.n	8015e98 <_printf_i+0xb8>
 8015ea0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8015ea4:	2d00      	cmp	r5, #0
 8015ea6:	da03      	bge.n	8015eb0 <_printf_i+0xd0>
 8015ea8:	232d      	movs	r3, #45	@ 0x2d
 8015eaa:	426d      	negs	r5, r5
 8015eac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015eb0:	4858      	ldr	r0, [pc, #352]	@ (8016014 <_printf_i+0x234>)
 8015eb2:	230a      	movs	r3, #10
 8015eb4:	e011      	b.n	8015eda <_printf_i+0xfa>
 8015eb6:	6821      	ldr	r1, [r4, #0]
 8015eb8:	6833      	ldr	r3, [r6, #0]
 8015eba:	0608      	lsls	r0, r1, #24
 8015ebc:	f853 5b04 	ldr.w	r5, [r3], #4
 8015ec0:	d402      	bmi.n	8015ec8 <_printf_i+0xe8>
 8015ec2:	0649      	lsls	r1, r1, #25
 8015ec4:	bf48      	it	mi
 8015ec6:	b2ad      	uxthmi	r5, r5
 8015ec8:	2f6f      	cmp	r7, #111	@ 0x6f
 8015eca:	4852      	ldr	r0, [pc, #328]	@ (8016014 <_printf_i+0x234>)
 8015ecc:	6033      	str	r3, [r6, #0]
 8015ece:	bf14      	ite	ne
 8015ed0:	230a      	movne	r3, #10
 8015ed2:	2308      	moveq	r3, #8
 8015ed4:	2100      	movs	r1, #0
 8015ed6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8015eda:	6866      	ldr	r6, [r4, #4]
 8015edc:	60a6      	str	r6, [r4, #8]
 8015ede:	2e00      	cmp	r6, #0
 8015ee0:	db05      	blt.n	8015eee <_printf_i+0x10e>
 8015ee2:	6821      	ldr	r1, [r4, #0]
 8015ee4:	432e      	orrs	r6, r5
 8015ee6:	f021 0104 	bic.w	r1, r1, #4
 8015eea:	6021      	str	r1, [r4, #0]
 8015eec:	d04b      	beq.n	8015f86 <_printf_i+0x1a6>
 8015eee:	4616      	mov	r6, r2
 8015ef0:	fbb5 f1f3 	udiv	r1, r5, r3
 8015ef4:	fb03 5711 	mls	r7, r3, r1, r5
 8015ef8:	5dc7      	ldrb	r7, [r0, r7]
 8015efa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8015efe:	462f      	mov	r7, r5
 8015f00:	42bb      	cmp	r3, r7
 8015f02:	460d      	mov	r5, r1
 8015f04:	d9f4      	bls.n	8015ef0 <_printf_i+0x110>
 8015f06:	2b08      	cmp	r3, #8
 8015f08:	d10b      	bne.n	8015f22 <_printf_i+0x142>
 8015f0a:	6823      	ldr	r3, [r4, #0]
 8015f0c:	07df      	lsls	r7, r3, #31
 8015f0e:	d508      	bpl.n	8015f22 <_printf_i+0x142>
 8015f10:	6923      	ldr	r3, [r4, #16]
 8015f12:	6861      	ldr	r1, [r4, #4]
 8015f14:	4299      	cmp	r1, r3
 8015f16:	bfde      	ittt	le
 8015f18:	2330      	movle	r3, #48	@ 0x30
 8015f1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8015f1e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8015f22:	1b92      	subs	r2, r2, r6
 8015f24:	6122      	str	r2, [r4, #16]
 8015f26:	f8cd a000 	str.w	sl, [sp]
 8015f2a:	464b      	mov	r3, r9
 8015f2c:	aa03      	add	r2, sp, #12
 8015f2e:	4621      	mov	r1, r4
 8015f30:	4640      	mov	r0, r8
 8015f32:	f7ff fee7 	bl	8015d04 <_printf_common>
 8015f36:	3001      	adds	r0, #1
 8015f38:	d14a      	bne.n	8015fd0 <_printf_i+0x1f0>
 8015f3a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8015f3e:	b004      	add	sp, #16
 8015f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f44:	6823      	ldr	r3, [r4, #0]
 8015f46:	f043 0320 	orr.w	r3, r3, #32
 8015f4a:	6023      	str	r3, [r4, #0]
 8015f4c:	4832      	ldr	r0, [pc, #200]	@ (8016018 <_printf_i+0x238>)
 8015f4e:	2778      	movs	r7, #120	@ 0x78
 8015f50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8015f54:	6823      	ldr	r3, [r4, #0]
 8015f56:	6831      	ldr	r1, [r6, #0]
 8015f58:	061f      	lsls	r7, r3, #24
 8015f5a:	f851 5b04 	ldr.w	r5, [r1], #4
 8015f5e:	d402      	bmi.n	8015f66 <_printf_i+0x186>
 8015f60:	065f      	lsls	r7, r3, #25
 8015f62:	bf48      	it	mi
 8015f64:	b2ad      	uxthmi	r5, r5
 8015f66:	6031      	str	r1, [r6, #0]
 8015f68:	07d9      	lsls	r1, r3, #31
 8015f6a:	bf44      	itt	mi
 8015f6c:	f043 0320 	orrmi.w	r3, r3, #32
 8015f70:	6023      	strmi	r3, [r4, #0]
 8015f72:	b11d      	cbz	r5, 8015f7c <_printf_i+0x19c>
 8015f74:	2310      	movs	r3, #16
 8015f76:	e7ad      	b.n	8015ed4 <_printf_i+0xf4>
 8015f78:	4826      	ldr	r0, [pc, #152]	@ (8016014 <_printf_i+0x234>)
 8015f7a:	e7e9      	b.n	8015f50 <_printf_i+0x170>
 8015f7c:	6823      	ldr	r3, [r4, #0]
 8015f7e:	f023 0320 	bic.w	r3, r3, #32
 8015f82:	6023      	str	r3, [r4, #0]
 8015f84:	e7f6      	b.n	8015f74 <_printf_i+0x194>
 8015f86:	4616      	mov	r6, r2
 8015f88:	e7bd      	b.n	8015f06 <_printf_i+0x126>
 8015f8a:	6833      	ldr	r3, [r6, #0]
 8015f8c:	6825      	ldr	r5, [r4, #0]
 8015f8e:	6961      	ldr	r1, [r4, #20]
 8015f90:	1d18      	adds	r0, r3, #4
 8015f92:	6030      	str	r0, [r6, #0]
 8015f94:	062e      	lsls	r6, r5, #24
 8015f96:	681b      	ldr	r3, [r3, #0]
 8015f98:	d501      	bpl.n	8015f9e <_printf_i+0x1be>
 8015f9a:	6019      	str	r1, [r3, #0]
 8015f9c:	e002      	b.n	8015fa4 <_printf_i+0x1c4>
 8015f9e:	0668      	lsls	r0, r5, #25
 8015fa0:	d5fb      	bpl.n	8015f9a <_printf_i+0x1ba>
 8015fa2:	8019      	strh	r1, [r3, #0]
 8015fa4:	2300      	movs	r3, #0
 8015fa6:	6123      	str	r3, [r4, #16]
 8015fa8:	4616      	mov	r6, r2
 8015faa:	e7bc      	b.n	8015f26 <_printf_i+0x146>
 8015fac:	6833      	ldr	r3, [r6, #0]
 8015fae:	1d1a      	adds	r2, r3, #4
 8015fb0:	6032      	str	r2, [r6, #0]
 8015fb2:	681e      	ldr	r6, [r3, #0]
 8015fb4:	6862      	ldr	r2, [r4, #4]
 8015fb6:	2100      	movs	r1, #0
 8015fb8:	4630      	mov	r0, r6
 8015fba:	f7ea f991 	bl	80002e0 <memchr>
 8015fbe:	b108      	cbz	r0, 8015fc4 <_printf_i+0x1e4>
 8015fc0:	1b80      	subs	r0, r0, r6
 8015fc2:	6060      	str	r0, [r4, #4]
 8015fc4:	6863      	ldr	r3, [r4, #4]
 8015fc6:	6123      	str	r3, [r4, #16]
 8015fc8:	2300      	movs	r3, #0
 8015fca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8015fce:	e7aa      	b.n	8015f26 <_printf_i+0x146>
 8015fd0:	6923      	ldr	r3, [r4, #16]
 8015fd2:	4632      	mov	r2, r6
 8015fd4:	4649      	mov	r1, r9
 8015fd6:	4640      	mov	r0, r8
 8015fd8:	47d0      	blx	sl
 8015fda:	3001      	adds	r0, #1
 8015fdc:	d0ad      	beq.n	8015f3a <_printf_i+0x15a>
 8015fde:	6823      	ldr	r3, [r4, #0]
 8015fe0:	079b      	lsls	r3, r3, #30
 8015fe2:	d413      	bmi.n	801600c <_printf_i+0x22c>
 8015fe4:	68e0      	ldr	r0, [r4, #12]
 8015fe6:	9b03      	ldr	r3, [sp, #12]
 8015fe8:	4298      	cmp	r0, r3
 8015fea:	bfb8      	it	lt
 8015fec:	4618      	movlt	r0, r3
 8015fee:	e7a6      	b.n	8015f3e <_printf_i+0x15e>
 8015ff0:	2301      	movs	r3, #1
 8015ff2:	4632      	mov	r2, r6
 8015ff4:	4649      	mov	r1, r9
 8015ff6:	4640      	mov	r0, r8
 8015ff8:	47d0      	blx	sl
 8015ffa:	3001      	adds	r0, #1
 8015ffc:	d09d      	beq.n	8015f3a <_printf_i+0x15a>
 8015ffe:	3501      	adds	r5, #1
 8016000:	68e3      	ldr	r3, [r4, #12]
 8016002:	9903      	ldr	r1, [sp, #12]
 8016004:	1a5b      	subs	r3, r3, r1
 8016006:	42ab      	cmp	r3, r5
 8016008:	dcf2      	bgt.n	8015ff0 <_printf_i+0x210>
 801600a:	e7eb      	b.n	8015fe4 <_printf_i+0x204>
 801600c:	2500      	movs	r5, #0
 801600e:	f104 0619 	add.w	r6, r4, #25
 8016012:	e7f5      	b.n	8016000 <_printf_i+0x220>
 8016014:	08019326 	.word	0x08019326
 8016018:	08019337 	.word	0x08019337

0801601c <std>:
 801601c:	2300      	movs	r3, #0
 801601e:	b510      	push	{r4, lr}
 8016020:	4604      	mov	r4, r0
 8016022:	e9c0 3300 	strd	r3, r3, [r0]
 8016026:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801602a:	6083      	str	r3, [r0, #8]
 801602c:	8181      	strh	r1, [r0, #12]
 801602e:	6643      	str	r3, [r0, #100]	@ 0x64
 8016030:	81c2      	strh	r2, [r0, #14]
 8016032:	6183      	str	r3, [r0, #24]
 8016034:	4619      	mov	r1, r3
 8016036:	2208      	movs	r2, #8
 8016038:	305c      	adds	r0, #92	@ 0x5c
 801603a:	f000 f916 	bl	801626a <memset>
 801603e:	4b0d      	ldr	r3, [pc, #52]	@ (8016074 <std+0x58>)
 8016040:	6263      	str	r3, [r4, #36]	@ 0x24
 8016042:	4b0d      	ldr	r3, [pc, #52]	@ (8016078 <std+0x5c>)
 8016044:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016046:	4b0d      	ldr	r3, [pc, #52]	@ (801607c <std+0x60>)
 8016048:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801604a:	4b0d      	ldr	r3, [pc, #52]	@ (8016080 <std+0x64>)
 801604c:	6323      	str	r3, [r4, #48]	@ 0x30
 801604e:	4b0d      	ldr	r3, [pc, #52]	@ (8016084 <std+0x68>)
 8016050:	6224      	str	r4, [r4, #32]
 8016052:	429c      	cmp	r4, r3
 8016054:	d006      	beq.n	8016064 <std+0x48>
 8016056:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801605a:	4294      	cmp	r4, r2
 801605c:	d002      	beq.n	8016064 <std+0x48>
 801605e:	33d0      	adds	r3, #208	@ 0xd0
 8016060:	429c      	cmp	r4, r3
 8016062:	d105      	bne.n	8016070 <std+0x54>
 8016064:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801606c:	f000 b98a 	b.w	8016384 <__retarget_lock_init_recursive>
 8016070:	bd10      	pop	{r4, pc}
 8016072:	bf00      	nop
 8016074:	080161e5 	.word	0x080161e5
 8016078:	08016207 	.word	0x08016207
 801607c:	0801623f 	.word	0x0801623f
 8016080:	08016263 	.word	0x08016263
 8016084:	240023f4 	.word	0x240023f4

08016088 <stdio_exit_handler>:
 8016088:	4a02      	ldr	r2, [pc, #8]	@ (8016094 <stdio_exit_handler+0xc>)
 801608a:	4903      	ldr	r1, [pc, #12]	@ (8016098 <stdio_exit_handler+0x10>)
 801608c:	4803      	ldr	r0, [pc, #12]	@ (801609c <stdio_exit_handler+0x14>)
 801608e:	f000 b869 	b.w	8016164 <_fwalk_sglue>
 8016092:	bf00      	nop
 8016094:	2400010c 	.word	0x2400010c
 8016098:	08017a9d 	.word	0x08017a9d
 801609c:	2400011c 	.word	0x2400011c

080160a0 <cleanup_stdio>:
 80160a0:	6841      	ldr	r1, [r0, #4]
 80160a2:	4b0c      	ldr	r3, [pc, #48]	@ (80160d4 <cleanup_stdio+0x34>)
 80160a4:	4299      	cmp	r1, r3
 80160a6:	b510      	push	{r4, lr}
 80160a8:	4604      	mov	r4, r0
 80160aa:	d001      	beq.n	80160b0 <cleanup_stdio+0x10>
 80160ac:	f001 fcf6 	bl	8017a9c <_fflush_r>
 80160b0:	68a1      	ldr	r1, [r4, #8]
 80160b2:	4b09      	ldr	r3, [pc, #36]	@ (80160d8 <cleanup_stdio+0x38>)
 80160b4:	4299      	cmp	r1, r3
 80160b6:	d002      	beq.n	80160be <cleanup_stdio+0x1e>
 80160b8:	4620      	mov	r0, r4
 80160ba:	f001 fcef 	bl	8017a9c <_fflush_r>
 80160be:	68e1      	ldr	r1, [r4, #12]
 80160c0:	4b06      	ldr	r3, [pc, #24]	@ (80160dc <cleanup_stdio+0x3c>)
 80160c2:	4299      	cmp	r1, r3
 80160c4:	d004      	beq.n	80160d0 <cleanup_stdio+0x30>
 80160c6:	4620      	mov	r0, r4
 80160c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160cc:	f001 bce6 	b.w	8017a9c <_fflush_r>
 80160d0:	bd10      	pop	{r4, pc}
 80160d2:	bf00      	nop
 80160d4:	240023f4 	.word	0x240023f4
 80160d8:	2400245c 	.word	0x2400245c
 80160dc:	240024c4 	.word	0x240024c4

080160e0 <global_stdio_init.part.0>:
 80160e0:	b510      	push	{r4, lr}
 80160e2:	4b0b      	ldr	r3, [pc, #44]	@ (8016110 <global_stdio_init.part.0+0x30>)
 80160e4:	4c0b      	ldr	r4, [pc, #44]	@ (8016114 <global_stdio_init.part.0+0x34>)
 80160e6:	4a0c      	ldr	r2, [pc, #48]	@ (8016118 <global_stdio_init.part.0+0x38>)
 80160e8:	601a      	str	r2, [r3, #0]
 80160ea:	4620      	mov	r0, r4
 80160ec:	2200      	movs	r2, #0
 80160ee:	2104      	movs	r1, #4
 80160f0:	f7ff ff94 	bl	801601c <std>
 80160f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80160f8:	2201      	movs	r2, #1
 80160fa:	2109      	movs	r1, #9
 80160fc:	f7ff ff8e 	bl	801601c <std>
 8016100:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016104:	2202      	movs	r2, #2
 8016106:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801610a:	2112      	movs	r1, #18
 801610c:	f7ff bf86 	b.w	801601c <std>
 8016110:	2400252c 	.word	0x2400252c
 8016114:	240023f4 	.word	0x240023f4
 8016118:	08016089 	.word	0x08016089

0801611c <__sfp_lock_acquire>:
 801611c:	4801      	ldr	r0, [pc, #4]	@ (8016124 <__sfp_lock_acquire+0x8>)
 801611e:	f000 b932 	b.w	8016386 <__retarget_lock_acquire_recursive>
 8016122:	bf00      	nop
 8016124:	24002535 	.word	0x24002535

08016128 <__sfp_lock_release>:
 8016128:	4801      	ldr	r0, [pc, #4]	@ (8016130 <__sfp_lock_release+0x8>)
 801612a:	f000 b92d 	b.w	8016388 <__retarget_lock_release_recursive>
 801612e:	bf00      	nop
 8016130:	24002535 	.word	0x24002535

08016134 <__sinit>:
 8016134:	b510      	push	{r4, lr}
 8016136:	4604      	mov	r4, r0
 8016138:	f7ff fff0 	bl	801611c <__sfp_lock_acquire>
 801613c:	6a23      	ldr	r3, [r4, #32]
 801613e:	b11b      	cbz	r3, 8016148 <__sinit+0x14>
 8016140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016144:	f7ff bff0 	b.w	8016128 <__sfp_lock_release>
 8016148:	4b04      	ldr	r3, [pc, #16]	@ (801615c <__sinit+0x28>)
 801614a:	6223      	str	r3, [r4, #32]
 801614c:	4b04      	ldr	r3, [pc, #16]	@ (8016160 <__sinit+0x2c>)
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	2b00      	cmp	r3, #0
 8016152:	d1f5      	bne.n	8016140 <__sinit+0xc>
 8016154:	f7ff ffc4 	bl	80160e0 <global_stdio_init.part.0>
 8016158:	e7f2      	b.n	8016140 <__sinit+0xc>
 801615a:	bf00      	nop
 801615c:	080160a1 	.word	0x080160a1
 8016160:	2400252c 	.word	0x2400252c

08016164 <_fwalk_sglue>:
 8016164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016168:	4607      	mov	r7, r0
 801616a:	4688      	mov	r8, r1
 801616c:	4614      	mov	r4, r2
 801616e:	2600      	movs	r6, #0
 8016170:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016174:	f1b9 0901 	subs.w	r9, r9, #1
 8016178:	d505      	bpl.n	8016186 <_fwalk_sglue+0x22>
 801617a:	6824      	ldr	r4, [r4, #0]
 801617c:	2c00      	cmp	r4, #0
 801617e:	d1f7      	bne.n	8016170 <_fwalk_sglue+0xc>
 8016180:	4630      	mov	r0, r6
 8016182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016186:	89ab      	ldrh	r3, [r5, #12]
 8016188:	2b01      	cmp	r3, #1
 801618a:	d907      	bls.n	801619c <_fwalk_sglue+0x38>
 801618c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016190:	3301      	adds	r3, #1
 8016192:	d003      	beq.n	801619c <_fwalk_sglue+0x38>
 8016194:	4629      	mov	r1, r5
 8016196:	4638      	mov	r0, r7
 8016198:	47c0      	blx	r8
 801619a:	4306      	orrs	r6, r0
 801619c:	3568      	adds	r5, #104	@ 0x68
 801619e:	e7e9      	b.n	8016174 <_fwalk_sglue+0x10>

080161a0 <siprintf>:
 80161a0:	b40e      	push	{r1, r2, r3}
 80161a2:	b510      	push	{r4, lr}
 80161a4:	b09d      	sub	sp, #116	@ 0x74
 80161a6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80161a8:	9002      	str	r0, [sp, #8]
 80161aa:	9006      	str	r0, [sp, #24]
 80161ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80161b0:	480a      	ldr	r0, [pc, #40]	@ (80161dc <siprintf+0x3c>)
 80161b2:	9107      	str	r1, [sp, #28]
 80161b4:	9104      	str	r1, [sp, #16]
 80161b6:	490a      	ldr	r1, [pc, #40]	@ (80161e0 <siprintf+0x40>)
 80161b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80161bc:	9105      	str	r1, [sp, #20]
 80161be:	2400      	movs	r4, #0
 80161c0:	a902      	add	r1, sp, #8
 80161c2:	6800      	ldr	r0, [r0, #0]
 80161c4:	9301      	str	r3, [sp, #4]
 80161c6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80161c8:	f001 fae8 	bl	801779c <_svfiprintf_r>
 80161cc:	9b02      	ldr	r3, [sp, #8]
 80161ce:	701c      	strb	r4, [r3, #0]
 80161d0:	b01d      	add	sp, #116	@ 0x74
 80161d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80161d6:	b003      	add	sp, #12
 80161d8:	4770      	bx	lr
 80161da:	bf00      	nop
 80161dc:	24000118 	.word	0x24000118
 80161e0:	ffff0208 	.word	0xffff0208

080161e4 <__sread>:
 80161e4:	b510      	push	{r4, lr}
 80161e6:	460c      	mov	r4, r1
 80161e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161ec:	f000 f86c 	bl	80162c8 <_read_r>
 80161f0:	2800      	cmp	r0, #0
 80161f2:	bfab      	itete	ge
 80161f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80161f6:	89a3      	ldrhlt	r3, [r4, #12]
 80161f8:	181b      	addge	r3, r3, r0
 80161fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80161fe:	bfac      	ite	ge
 8016200:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016202:	81a3      	strhlt	r3, [r4, #12]
 8016204:	bd10      	pop	{r4, pc}

08016206 <__swrite>:
 8016206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801620a:	461f      	mov	r7, r3
 801620c:	898b      	ldrh	r3, [r1, #12]
 801620e:	05db      	lsls	r3, r3, #23
 8016210:	4605      	mov	r5, r0
 8016212:	460c      	mov	r4, r1
 8016214:	4616      	mov	r6, r2
 8016216:	d505      	bpl.n	8016224 <__swrite+0x1e>
 8016218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801621c:	2302      	movs	r3, #2
 801621e:	2200      	movs	r2, #0
 8016220:	f000 f840 	bl	80162a4 <_lseek_r>
 8016224:	89a3      	ldrh	r3, [r4, #12]
 8016226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801622a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801622e:	81a3      	strh	r3, [r4, #12]
 8016230:	4632      	mov	r2, r6
 8016232:	463b      	mov	r3, r7
 8016234:	4628      	mov	r0, r5
 8016236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801623a:	f000 b867 	b.w	801630c <_write_r>

0801623e <__sseek>:
 801623e:	b510      	push	{r4, lr}
 8016240:	460c      	mov	r4, r1
 8016242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016246:	f000 f82d 	bl	80162a4 <_lseek_r>
 801624a:	1c43      	adds	r3, r0, #1
 801624c:	89a3      	ldrh	r3, [r4, #12]
 801624e:	bf15      	itete	ne
 8016250:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016252:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016256:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801625a:	81a3      	strheq	r3, [r4, #12]
 801625c:	bf18      	it	ne
 801625e:	81a3      	strhne	r3, [r4, #12]
 8016260:	bd10      	pop	{r4, pc}

08016262 <__sclose>:
 8016262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016266:	f000 b80d 	b.w	8016284 <_close_r>

0801626a <memset>:
 801626a:	4402      	add	r2, r0
 801626c:	4603      	mov	r3, r0
 801626e:	4293      	cmp	r3, r2
 8016270:	d100      	bne.n	8016274 <memset+0xa>
 8016272:	4770      	bx	lr
 8016274:	f803 1b01 	strb.w	r1, [r3], #1
 8016278:	e7f9      	b.n	801626e <memset+0x4>
	...

0801627c <_localeconv_r>:
 801627c:	4800      	ldr	r0, [pc, #0]	@ (8016280 <_localeconv_r+0x4>)
 801627e:	4770      	bx	lr
 8016280:	24000258 	.word	0x24000258

08016284 <_close_r>:
 8016284:	b538      	push	{r3, r4, r5, lr}
 8016286:	4d06      	ldr	r5, [pc, #24]	@ (80162a0 <_close_r+0x1c>)
 8016288:	2300      	movs	r3, #0
 801628a:	4604      	mov	r4, r0
 801628c:	4608      	mov	r0, r1
 801628e:	602b      	str	r3, [r5, #0]
 8016290:	f7eb ffde 	bl	8002250 <_close>
 8016294:	1c43      	adds	r3, r0, #1
 8016296:	d102      	bne.n	801629e <_close_r+0x1a>
 8016298:	682b      	ldr	r3, [r5, #0]
 801629a:	b103      	cbz	r3, 801629e <_close_r+0x1a>
 801629c:	6023      	str	r3, [r4, #0]
 801629e:	bd38      	pop	{r3, r4, r5, pc}
 80162a0:	24002530 	.word	0x24002530

080162a4 <_lseek_r>:
 80162a4:	b538      	push	{r3, r4, r5, lr}
 80162a6:	4d07      	ldr	r5, [pc, #28]	@ (80162c4 <_lseek_r+0x20>)
 80162a8:	4604      	mov	r4, r0
 80162aa:	4608      	mov	r0, r1
 80162ac:	4611      	mov	r1, r2
 80162ae:	2200      	movs	r2, #0
 80162b0:	602a      	str	r2, [r5, #0]
 80162b2:	461a      	mov	r2, r3
 80162b4:	f7eb fff3 	bl	800229e <_lseek>
 80162b8:	1c43      	adds	r3, r0, #1
 80162ba:	d102      	bne.n	80162c2 <_lseek_r+0x1e>
 80162bc:	682b      	ldr	r3, [r5, #0]
 80162be:	b103      	cbz	r3, 80162c2 <_lseek_r+0x1e>
 80162c0:	6023      	str	r3, [r4, #0]
 80162c2:	bd38      	pop	{r3, r4, r5, pc}
 80162c4:	24002530 	.word	0x24002530

080162c8 <_read_r>:
 80162c8:	b538      	push	{r3, r4, r5, lr}
 80162ca:	4d07      	ldr	r5, [pc, #28]	@ (80162e8 <_read_r+0x20>)
 80162cc:	4604      	mov	r4, r0
 80162ce:	4608      	mov	r0, r1
 80162d0:	4611      	mov	r1, r2
 80162d2:	2200      	movs	r2, #0
 80162d4:	602a      	str	r2, [r5, #0]
 80162d6:	461a      	mov	r2, r3
 80162d8:	f7eb ff81 	bl	80021de <_read>
 80162dc:	1c43      	adds	r3, r0, #1
 80162de:	d102      	bne.n	80162e6 <_read_r+0x1e>
 80162e0:	682b      	ldr	r3, [r5, #0]
 80162e2:	b103      	cbz	r3, 80162e6 <_read_r+0x1e>
 80162e4:	6023      	str	r3, [r4, #0]
 80162e6:	bd38      	pop	{r3, r4, r5, pc}
 80162e8:	24002530 	.word	0x24002530

080162ec <_sbrk_r>:
 80162ec:	b538      	push	{r3, r4, r5, lr}
 80162ee:	4d06      	ldr	r5, [pc, #24]	@ (8016308 <_sbrk_r+0x1c>)
 80162f0:	2300      	movs	r3, #0
 80162f2:	4604      	mov	r4, r0
 80162f4:	4608      	mov	r0, r1
 80162f6:	602b      	str	r3, [r5, #0]
 80162f8:	f7eb ffde 	bl	80022b8 <_sbrk>
 80162fc:	1c43      	adds	r3, r0, #1
 80162fe:	d102      	bne.n	8016306 <_sbrk_r+0x1a>
 8016300:	682b      	ldr	r3, [r5, #0]
 8016302:	b103      	cbz	r3, 8016306 <_sbrk_r+0x1a>
 8016304:	6023      	str	r3, [r4, #0]
 8016306:	bd38      	pop	{r3, r4, r5, pc}
 8016308:	24002530 	.word	0x24002530

0801630c <_write_r>:
 801630c:	b538      	push	{r3, r4, r5, lr}
 801630e:	4d07      	ldr	r5, [pc, #28]	@ (801632c <_write_r+0x20>)
 8016310:	4604      	mov	r4, r0
 8016312:	4608      	mov	r0, r1
 8016314:	4611      	mov	r1, r2
 8016316:	2200      	movs	r2, #0
 8016318:	602a      	str	r2, [r5, #0]
 801631a:	461a      	mov	r2, r3
 801631c:	f7eb ff7c 	bl	8002218 <_write>
 8016320:	1c43      	adds	r3, r0, #1
 8016322:	d102      	bne.n	801632a <_write_r+0x1e>
 8016324:	682b      	ldr	r3, [r5, #0]
 8016326:	b103      	cbz	r3, 801632a <_write_r+0x1e>
 8016328:	6023      	str	r3, [r4, #0]
 801632a:	bd38      	pop	{r3, r4, r5, pc}
 801632c:	24002530 	.word	0x24002530

08016330 <__errno>:
 8016330:	4b01      	ldr	r3, [pc, #4]	@ (8016338 <__errno+0x8>)
 8016332:	6818      	ldr	r0, [r3, #0]
 8016334:	4770      	bx	lr
 8016336:	bf00      	nop
 8016338:	24000118 	.word	0x24000118

0801633c <__libc_init_array>:
 801633c:	b570      	push	{r4, r5, r6, lr}
 801633e:	4d0d      	ldr	r5, [pc, #52]	@ (8016374 <__libc_init_array+0x38>)
 8016340:	4c0d      	ldr	r4, [pc, #52]	@ (8016378 <__libc_init_array+0x3c>)
 8016342:	1b64      	subs	r4, r4, r5
 8016344:	10a4      	asrs	r4, r4, #2
 8016346:	2600      	movs	r6, #0
 8016348:	42a6      	cmp	r6, r4
 801634a:	d109      	bne.n	8016360 <__libc_init_array+0x24>
 801634c:	4d0b      	ldr	r5, [pc, #44]	@ (801637c <__libc_init_array+0x40>)
 801634e:	4c0c      	ldr	r4, [pc, #48]	@ (8016380 <__libc_init_array+0x44>)
 8016350:	f001 ff32 	bl	80181b8 <_init>
 8016354:	1b64      	subs	r4, r4, r5
 8016356:	10a4      	asrs	r4, r4, #2
 8016358:	2600      	movs	r6, #0
 801635a:	42a6      	cmp	r6, r4
 801635c:	d105      	bne.n	801636a <__libc_init_array+0x2e>
 801635e:	bd70      	pop	{r4, r5, r6, pc}
 8016360:	f855 3b04 	ldr.w	r3, [r5], #4
 8016364:	4798      	blx	r3
 8016366:	3601      	adds	r6, #1
 8016368:	e7ee      	b.n	8016348 <__libc_init_array+0xc>
 801636a:	f855 3b04 	ldr.w	r3, [r5], #4
 801636e:	4798      	blx	r3
 8016370:	3601      	adds	r6, #1
 8016372:	e7f2      	b.n	801635a <__libc_init_array+0x1e>
 8016374:	08019694 	.word	0x08019694
 8016378:	08019694 	.word	0x08019694
 801637c:	08019694 	.word	0x08019694
 8016380:	08019698 	.word	0x08019698

08016384 <__retarget_lock_init_recursive>:
 8016384:	4770      	bx	lr

08016386 <__retarget_lock_acquire_recursive>:
 8016386:	4770      	bx	lr

08016388 <__retarget_lock_release_recursive>:
 8016388:	4770      	bx	lr

0801638a <quorem>:
 801638a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801638e:	6903      	ldr	r3, [r0, #16]
 8016390:	690c      	ldr	r4, [r1, #16]
 8016392:	42a3      	cmp	r3, r4
 8016394:	4607      	mov	r7, r0
 8016396:	db7e      	blt.n	8016496 <quorem+0x10c>
 8016398:	3c01      	subs	r4, #1
 801639a:	f101 0814 	add.w	r8, r1, #20
 801639e:	00a3      	lsls	r3, r4, #2
 80163a0:	f100 0514 	add.w	r5, r0, #20
 80163a4:	9300      	str	r3, [sp, #0]
 80163a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80163aa:	9301      	str	r3, [sp, #4]
 80163ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80163b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80163b4:	3301      	adds	r3, #1
 80163b6:	429a      	cmp	r2, r3
 80163b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80163bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80163c0:	d32e      	bcc.n	8016420 <quorem+0x96>
 80163c2:	f04f 0a00 	mov.w	sl, #0
 80163c6:	46c4      	mov	ip, r8
 80163c8:	46ae      	mov	lr, r5
 80163ca:	46d3      	mov	fp, sl
 80163cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80163d0:	b298      	uxth	r0, r3
 80163d2:	fb06 a000 	mla	r0, r6, r0, sl
 80163d6:	0c02      	lsrs	r2, r0, #16
 80163d8:	0c1b      	lsrs	r3, r3, #16
 80163da:	fb06 2303 	mla	r3, r6, r3, r2
 80163de:	f8de 2000 	ldr.w	r2, [lr]
 80163e2:	b280      	uxth	r0, r0
 80163e4:	b292      	uxth	r2, r2
 80163e6:	1a12      	subs	r2, r2, r0
 80163e8:	445a      	add	r2, fp
 80163ea:	f8de 0000 	ldr.w	r0, [lr]
 80163ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80163f2:	b29b      	uxth	r3, r3
 80163f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80163f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80163fc:	b292      	uxth	r2, r2
 80163fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8016402:	45e1      	cmp	r9, ip
 8016404:	f84e 2b04 	str.w	r2, [lr], #4
 8016408:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801640c:	d2de      	bcs.n	80163cc <quorem+0x42>
 801640e:	9b00      	ldr	r3, [sp, #0]
 8016410:	58eb      	ldr	r3, [r5, r3]
 8016412:	b92b      	cbnz	r3, 8016420 <quorem+0x96>
 8016414:	9b01      	ldr	r3, [sp, #4]
 8016416:	3b04      	subs	r3, #4
 8016418:	429d      	cmp	r5, r3
 801641a:	461a      	mov	r2, r3
 801641c:	d32f      	bcc.n	801647e <quorem+0xf4>
 801641e:	613c      	str	r4, [r7, #16]
 8016420:	4638      	mov	r0, r7
 8016422:	f001 f857 	bl	80174d4 <__mcmp>
 8016426:	2800      	cmp	r0, #0
 8016428:	db25      	blt.n	8016476 <quorem+0xec>
 801642a:	4629      	mov	r1, r5
 801642c:	2000      	movs	r0, #0
 801642e:	f858 2b04 	ldr.w	r2, [r8], #4
 8016432:	f8d1 c000 	ldr.w	ip, [r1]
 8016436:	fa1f fe82 	uxth.w	lr, r2
 801643a:	fa1f f38c 	uxth.w	r3, ip
 801643e:	eba3 030e 	sub.w	r3, r3, lr
 8016442:	4403      	add	r3, r0
 8016444:	0c12      	lsrs	r2, r2, #16
 8016446:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801644a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801644e:	b29b      	uxth	r3, r3
 8016450:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016454:	45c1      	cmp	r9, r8
 8016456:	f841 3b04 	str.w	r3, [r1], #4
 801645a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801645e:	d2e6      	bcs.n	801642e <quorem+0xa4>
 8016460:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016464:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016468:	b922      	cbnz	r2, 8016474 <quorem+0xea>
 801646a:	3b04      	subs	r3, #4
 801646c:	429d      	cmp	r5, r3
 801646e:	461a      	mov	r2, r3
 8016470:	d30b      	bcc.n	801648a <quorem+0x100>
 8016472:	613c      	str	r4, [r7, #16]
 8016474:	3601      	adds	r6, #1
 8016476:	4630      	mov	r0, r6
 8016478:	b003      	add	sp, #12
 801647a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801647e:	6812      	ldr	r2, [r2, #0]
 8016480:	3b04      	subs	r3, #4
 8016482:	2a00      	cmp	r2, #0
 8016484:	d1cb      	bne.n	801641e <quorem+0x94>
 8016486:	3c01      	subs	r4, #1
 8016488:	e7c6      	b.n	8016418 <quorem+0x8e>
 801648a:	6812      	ldr	r2, [r2, #0]
 801648c:	3b04      	subs	r3, #4
 801648e:	2a00      	cmp	r2, #0
 8016490:	d1ef      	bne.n	8016472 <quorem+0xe8>
 8016492:	3c01      	subs	r4, #1
 8016494:	e7ea      	b.n	801646c <quorem+0xe2>
 8016496:	2000      	movs	r0, #0
 8016498:	e7ee      	b.n	8016478 <quorem+0xee>
 801649a:	0000      	movs	r0, r0
 801649c:	0000      	movs	r0, r0
	...

080164a0 <_dtoa_r>:
 80164a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164a4:	ed2d 8b02 	vpush	{d8}
 80164a8:	69c7      	ldr	r7, [r0, #28]
 80164aa:	b091      	sub	sp, #68	@ 0x44
 80164ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80164b0:	ec55 4b10 	vmov	r4, r5, d0
 80164b4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80164b6:	9107      	str	r1, [sp, #28]
 80164b8:	4681      	mov	r9, r0
 80164ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80164bc:	930d      	str	r3, [sp, #52]	@ 0x34
 80164be:	b97f      	cbnz	r7, 80164e0 <_dtoa_r+0x40>
 80164c0:	2010      	movs	r0, #16
 80164c2:	f7ff f8bf 	bl	8015644 <malloc>
 80164c6:	4602      	mov	r2, r0
 80164c8:	f8c9 001c 	str.w	r0, [r9, #28]
 80164cc:	b920      	cbnz	r0, 80164d8 <_dtoa_r+0x38>
 80164ce:	4ba0      	ldr	r3, [pc, #640]	@ (8016750 <_dtoa_r+0x2b0>)
 80164d0:	21ef      	movs	r1, #239	@ 0xef
 80164d2:	48a0      	ldr	r0, [pc, #640]	@ (8016754 <_dtoa_r+0x2b4>)
 80164d4:	f001 fb32 	bl	8017b3c <__assert_func>
 80164d8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80164dc:	6007      	str	r7, [r0, #0]
 80164de:	60c7      	str	r7, [r0, #12]
 80164e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80164e4:	6819      	ldr	r1, [r3, #0]
 80164e6:	b159      	cbz	r1, 8016500 <_dtoa_r+0x60>
 80164e8:	685a      	ldr	r2, [r3, #4]
 80164ea:	604a      	str	r2, [r1, #4]
 80164ec:	2301      	movs	r3, #1
 80164ee:	4093      	lsls	r3, r2
 80164f0:	608b      	str	r3, [r1, #8]
 80164f2:	4648      	mov	r0, r9
 80164f4:	f000 fdbc 	bl	8017070 <_Bfree>
 80164f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80164fc:	2200      	movs	r2, #0
 80164fe:	601a      	str	r2, [r3, #0]
 8016500:	1e2b      	subs	r3, r5, #0
 8016502:	bfbb      	ittet	lt
 8016504:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8016508:	9303      	strlt	r3, [sp, #12]
 801650a:	2300      	movge	r3, #0
 801650c:	2201      	movlt	r2, #1
 801650e:	bfac      	ite	ge
 8016510:	6033      	strge	r3, [r6, #0]
 8016512:	6032      	strlt	r2, [r6, #0]
 8016514:	4b90      	ldr	r3, [pc, #576]	@ (8016758 <_dtoa_r+0x2b8>)
 8016516:	9e03      	ldr	r6, [sp, #12]
 8016518:	43b3      	bics	r3, r6
 801651a:	d110      	bne.n	801653e <_dtoa_r+0x9e>
 801651c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801651e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8016522:	6013      	str	r3, [r2, #0]
 8016524:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8016528:	4323      	orrs	r3, r4
 801652a:	f000 84e6 	beq.w	8016efa <_dtoa_r+0xa5a>
 801652e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016530:	4f8a      	ldr	r7, [pc, #552]	@ (801675c <_dtoa_r+0x2bc>)
 8016532:	2b00      	cmp	r3, #0
 8016534:	f000 84e8 	beq.w	8016f08 <_dtoa_r+0xa68>
 8016538:	1cfb      	adds	r3, r7, #3
 801653a:	f000 bce3 	b.w	8016f04 <_dtoa_r+0xa64>
 801653e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8016542:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801654a:	d10a      	bne.n	8016562 <_dtoa_r+0xc2>
 801654c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801654e:	2301      	movs	r3, #1
 8016550:	6013      	str	r3, [r2, #0]
 8016552:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016554:	b113      	cbz	r3, 801655c <_dtoa_r+0xbc>
 8016556:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8016558:	4b81      	ldr	r3, [pc, #516]	@ (8016760 <_dtoa_r+0x2c0>)
 801655a:	6013      	str	r3, [r2, #0]
 801655c:	4f81      	ldr	r7, [pc, #516]	@ (8016764 <_dtoa_r+0x2c4>)
 801655e:	f000 bcd3 	b.w	8016f08 <_dtoa_r+0xa68>
 8016562:	aa0e      	add	r2, sp, #56	@ 0x38
 8016564:	a90f      	add	r1, sp, #60	@ 0x3c
 8016566:	4648      	mov	r0, r9
 8016568:	eeb0 0b48 	vmov.f64	d0, d8
 801656c:	f001 f862 	bl	8017634 <__d2b>
 8016570:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8016574:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016576:	9001      	str	r0, [sp, #4]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d045      	beq.n	8016608 <_dtoa_r+0x168>
 801657c:	eeb0 7b48 	vmov.f64	d7, d8
 8016580:	ee18 1a90 	vmov	r1, s17
 8016584:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8016588:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801658c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8016590:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8016594:	2500      	movs	r5, #0
 8016596:	ee07 1a90 	vmov	s15, r1
 801659a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801659e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8016738 <_dtoa_r+0x298>
 80165a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80165a6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8016740 <_dtoa_r+0x2a0>
 80165aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 80165ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8016748 <_dtoa_r+0x2a8>
 80165b2:	ee07 3a90 	vmov	s15, r3
 80165b6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80165ba:	eeb0 7b46 	vmov.f64	d7, d6
 80165be:	eea4 7b05 	vfma.f64	d7, d4, d5
 80165c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80165c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80165ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165ce:	ee16 8a90 	vmov	r8, s13
 80165d2:	d508      	bpl.n	80165e6 <_dtoa_r+0x146>
 80165d4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80165d8:	eeb4 6b47 	vcmp.f64	d6, d7
 80165dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165e0:	bf18      	it	ne
 80165e2:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 80165e6:	f1b8 0f16 	cmp.w	r8, #22
 80165ea:	d82b      	bhi.n	8016644 <_dtoa_r+0x1a4>
 80165ec:	495e      	ldr	r1, [pc, #376]	@ (8016768 <_dtoa_r+0x2c8>)
 80165ee:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80165f2:	ed91 7b00 	vldr	d7, [r1]
 80165f6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80165fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165fe:	d501      	bpl.n	8016604 <_dtoa_r+0x164>
 8016600:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8016604:	2100      	movs	r1, #0
 8016606:	e01e      	b.n	8016646 <_dtoa_r+0x1a6>
 8016608:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801660a:	4413      	add	r3, r2
 801660c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8016610:	2920      	cmp	r1, #32
 8016612:	bfc1      	itttt	gt
 8016614:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8016618:	408e      	lslgt	r6, r1
 801661a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801661e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8016622:	bfd6      	itet	le
 8016624:	f1c1 0120 	rsble	r1, r1, #32
 8016628:	4331      	orrgt	r1, r6
 801662a:	fa04 f101 	lslle.w	r1, r4, r1
 801662e:	ee07 1a90 	vmov	s15, r1
 8016632:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8016636:	3b01      	subs	r3, #1
 8016638:	ee17 1a90 	vmov	r1, s15
 801663c:	2501      	movs	r5, #1
 801663e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8016642:	e7a8      	b.n	8016596 <_dtoa_r+0xf6>
 8016644:	2101      	movs	r1, #1
 8016646:	1ad2      	subs	r2, r2, r3
 8016648:	1e53      	subs	r3, r2, #1
 801664a:	9306      	str	r3, [sp, #24]
 801664c:	bf45      	ittet	mi
 801664e:	f1c2 0301 	rsbmi	r3, r2, #1
 8016652:	9304      	strmi	r3, [sp, #16]
 8016654:	2300      	movpl	r3, #0
 8016656:	2300      	movmi	r3, #0
 8016658:	bf4c      	ite	mi
 801665a:	9306      	strmi	r3, [sp, #24]
 801665c:	9304      	strpl	r3, [sp, #16]
 801665e:	f1b8 0f00 	cmp.w	r8, #0
 8016662:	910c      	str	r1, [sp, #48]	@ 0x30
 8016664:	db18      	blt.n	8016698 <_dtoa_r+0x1f8>
 8016666:	9b06      	ldr	r3, [sp, #24]
 8016668:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801666c:	4443      	add	r3, r8
 801666e:	9306      	str	r3, [sp, #24]
 8016670:	2300      	movs	r3, #0
 8016672:	9a07      	ldr	r2, [sp, #28]
 8016674:	2a09      	cmp	r2, #9
 8016676:	d845      	bhi.n	8016704 <_dtoa_r+0x264>
 8016678:	2a05      	cmp	r2, #5
 801667a:	bfc4      	itt	gt
 801667c:	3a04      	subgt	r2, #4
 801667e:	9207      	strgt	r2, [sp, #28]
 8016680:	9a07      	ldr	r2, [sp, #28]
 8016682:	f1a2 0202 	sub.w	r2, r2, #2
 8016686:	bfcc      	ite	gt
 8016688:	2400      	movgt	r4, #0
 801668a:	2401      	movle	r4, #1
 801668c:	2a03      	cmp	r2, #3
 801668e:	d844      	bhi.n	801671a <_dtoa_r+0x27a>
 8016690:	e8df f002 	tbb	[pc, r2]
 8016694:	0b173634 	.word	0x0b173634
 8016698:	9b04      	ldr	r3, [sp, #16]
 801669a:	2200      	movs	r2, #0
 801669c:	eba3 0308 	sub.w	r3, r3, r8
 80166a0:	9304      	str	r3, [sp, #16]
 80166a2:	920a      	str	r2, [sp, #40]	@ 0x28
 80166a4:	f1c8 0300 	rsb	r3, r8, #0
 80166a8:	e7e3      	b.n	8016672 <_dtoa_r+0x1d2>
 80166aa:	2201      	movs	r2, #1
 80166ac:	9208      	str	r2, [sp, #32]
 80166ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80166b0:	eb08 0b02 	add.w	fp, r8, r2
 80166b4:	f10b 0a01 	add.w	sl, fp, #1
 80166b8:	4652      	mov	r2, sl
 80166ba:	2a01      	cmp	r2, #1
 80166bc:	bfb8      	it	lt
 80166be:	2201      	movlt	r2, #1
 80166c0:	e006      	b.n	80166d0 <_dtoa_r+0x230>
 80166c2:	2201      	movs	r2, #1
 80166c4:	9208      	str	r2, [sp, #32]
 80166c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80166c8:	2a00      	cmp	r2, #0
 80166ca:	dd29      	ble.n	8016720 <_dtoa_r+0x280>
 80166cc:	4693      	mov	fp, r2
 80166ce:	4692      	mov	sl, r2
 80166d0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80166d4:	2100      	movs	r1, #0
 80166d6:	2004      	movs	r0, #4
 80166d8:	f100 0614 	add.w	r6, r0, #20
 80166dc:	4296      	cmp	r6, r2
 80166de:	d926      	bls.n	801672e <_dtoa_r+0x28e>
 80166e0:	6079      	str	r1, [r7, #4]
 80166e2:	4648      	mov	r0, r9
 80166e4:	9305      	str	r3, [sp, #20]
 80166e6:	f000 fc83 	bl	8016ff0 <_Balloc>
 80166ea:	9b05      	ldr	r3, [sp, #20]
 80166ec:	4607      	mov	r7, r0
 80166ee:	2800      	cmp	r0, #0
 80166f0:	d13e      	bne.n	8016770 <_dtoa_r+0x2d0>
 80166f2:	4b1e      	ldr	r3, [pc, #120]	@ (801676c <_dtoa_r+0x2cc>)
 80166f4:	4602      	mov	r2, r0
 80166f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80166fa:	e6ea      	b.n	80164d2 <_dtoa_r+0x32>
 80166fc:	2200      	movs	r2, #0
 80166fe:	e7e1      	b.n	80166c4 <_dtoa_r+0x224>
 8016700:	2200      	movs	r2, #0
 8016702:	e7d3      	b.n	80166ac <_dtoa_r+0x20c>
 8016704:	2401      	movs	r4, #1
 8016706:	2200      	movs	r2, #0
 8016708:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801670c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8016710:	2100      	movs	r1, #0
 8016712:	46da      	mov	sl, fp
 8016714:	2212      	movs	r2, #18
 8016716:	9109      	str	r1, [sp, #36]	@ 0x24
 8016718:	e7da      	b.n	80166d0 <_dtoa_r+0x230>
 801671a:	2201      	movs	r2, #1
 801671c:	9208      	str	r2, [sp, #32]
 801671e:	e7f5      	b.n	801670c <_dtoa_r+0x26c>
 8016720:	f04f 0b01 	mov.w	fp, #1
 8016724:	46da      	mov	sl, fp
 8016726:	465a      	mov	r2, fp
 8016728:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801672c:	e7d0      	b.n	80166d0 <_dtoa_r+0x230>
 801672e:	3101      	adds	r1, #1
 8016730:	0040      	lsls	r0, r0, #1
 8016732:	e7d1      	b.n	80166d8 <_dtoa_r+0x238>
 8016734:	f3af 8000 	nop.w
 8016738:	636f4361 	.word	0x636f4361
 801673c:	3fd287a7 	.word	0x3fd287a7
 8016740:	8b60c8b3 	.word	0x8b60c8b3
 8016744:	3fc68a28 	.word	0x3fc68a28
 8016748:	509f79fb 	.word	0x509f79fb
 801674c:	3fd34413 	.word	0x3fd34413
 8016750:	08019355 	.word	0x08019355
 8016754:	0801936c 	.word	0x0801936c
 8016758:	7ff00000 	.word	0x7ff00000
 801675c:	08019351 	.word	0x08019351
 8016760:	08019325 	.word	0x08019325
 8016764:	08019324 	.word	0x08019324
 8016768:	080194c0 	.word	0x080194c0
 801676c:	080193c4 	.word	0x080193c4
 8016770:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8016774:	f1ba 0f0e 	cmp.w	sl, #14
 8016778:	6010      	str	r0, [r2, #0]
 801677a:	d86e      	bhi.n	801685a <_dtoa_r+0x3ba>
 801677c:	2c00      	cmp	r4, #0
 801677e:	d06c      	beq.n	801685a <_dtoa_r+0x3ba>
 8016780:	f1b8 0f00 	cmp.w	r8, #0
 8016784:	f340 80b4 	ble.w	80168f0 <_dtoa_r+0x450>
 8016788:	4ac8      	ldr	r2, [pc, #800]	@ (8016aac <_dtoa_r+0x60c>)
 801678a:	f008 010f 	and.w	r1, r8, #15
 801678e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016792:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8016796:	ed92 7b00 	vldr	d7, [r2]
 801679a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801679e:	f000 809b 	beq.w	80168d8 <_dtoa_r+0x438>
 80167a2:	4ac3      	ldr	r2, [pc, #780]	@ (8016ab0 <_dtoa_r+0x610>)
 80167a4:	ed92 6b08 	vldr	d6, [r2, #32]
 80167a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80167ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 80167b0:	f001 010f 	and.w	r1, r1, #15
 80167b4:	2203      	movs	r2, #3
 80167b6:	48be      	ldr	r0, [pc, #760]	@ (8016ab0 <_dtoa_r+0x610>)
 80167b8:	2900      	cmp	r1, #0
 80167ba:	f040 808f 	bne.w	80168dc <_dtoa_r+0x43c>
 80167be:	ed9d 6b02 	vldr	d6, [sp, #8]
 80167c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80167c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80167ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80167cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80167d0:	2900      	cmp	r1, #0
 80167d2:	f000 80b3 	beq.w	801693c <_dtoa_r+0x49c>
 80167d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80167da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80167de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167e2:	f140 80ab 	bpl.w	801693c <_dtoa_r+0x49c>
 80167e6:	f1ba 0f00 	cmp.w	sl, #0
 80167ea:	f000 80a7 	beq.w	801693c <_dtoa_r+0x49c>
 80167ee:	f1bb 0f00 	cmp.w	fp, #0
 80167f2:	dd30      	ble.n	8016856 <_dtoa_r+0x3b6>
 80167f4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80167f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80167fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016800:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8016804:	9105      	str	r1, [sp, #20]
 8016806:	3201      	adds	r2, #1
 8016808:	465c      	mov	r4, fp
 801680a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801680e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8016812:	ee07 2a90 	vmov	s15, r2
 8016816:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801681a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801681e:	ee15 2a90 	vmov	r2, s11
 8016822:	ec51 0b15 	vmov	r0, r1, d5
 8016826:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801682a:	2c00      	cmp	r4, #0
 801682c:	f040 808a 	bne.w	8016944 <_dtoa_r+0x4a4>
 8016830:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8016834:	ee36 6b47 	vsub.f64	d6, d6, d7
 8016838:	ec41 0b17 	vmov	d7, r0, r1
 801683c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016844:	f300 826a 	bgt.w	8016d1c <_dtoa_r+0x87c>
 8016848:	eeb1 7b47 	vneg.f64	d7, d7
 801684c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016854:	d423      	bmi.n	801689e <_dtoa_r+0x3fe>
 8016856:	ed8d 8b02 	vstr	d8, [sp, #8]
 801685a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801685c:	2a00      	cmp	r2, #0
 801685e:	f2c0 8129 	blt.w	8016ab4 <_dtoa_r+0x614>
 8016862:	f1b8 0f0e 	cmp.w	r8, #14
 8016866:	f300 8125 	bgt.w	8016ab4 <_dtoa_r+0x614>
 801686a:	4b90      	ldr	r3, [pc, #576]	@ (8016aac <_dtoa_r+0x60c>)
 801686c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016870:	ed93 6b00 	vldr	d6, [r3]
 8016874:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016876:	2b00      	cmp	r3, #0
 8016878:	f280 80c8 	bge.w	8016a0c <_dtoa_r+0x56c>
 801687c:	f1ba 0f00 	cmp.w	sl, #0
 8016880:	f300 80c4 	bgt.w	8016a0c <_dtoa_r+0x56c>
 8016884:	d10b      	bne.n	801689e <_dtoa_r+0x3fe>
 8016886:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801688a:	ee26 6b07 	vmul.f64	d6, d6, d7
 801688e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016892:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801689a:	f2c0 823c 	blt.w	8016d16 <_dtoa_r+0x876>
 801689e:	2400      	movs	r4, #0
 80168a0:	4625      	mov	r5, r4
 80168a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80168a4:	43db      	mvns	r3, r3
 80168a6:	9305      	str	r3, [sp, #20]
 80168a8:	463e      	mov	r6, r7
 80168aa:	f04f 0800 	mov.w	r8, #0
 80168ae:	4621      	mov	r1, r4
 80168b0:	4648      	mov	r0, r9
 80168b2:	f000 fbdd 	bl	8017070 <_Bfree>
 80168b6:	2d00      	cmp	r5, #0
 80168b8:	f000 80a2 	beq.w	8016a00 <_dtoa_r+0x560>
 80168bc:	f1b8 0f00 	cmp.w	r8, #0
 80168c0:	d005      	beq.n	80168ce <_dtoa_r+0x42e>
 80168c2:	45a8      	cmp	r8, r5
 80168c4:	d003      	beq.n	80168ce <_dtoa_r+0x42e>
 80168c6:	4641      	mov	r1, r8
 80168c8:	4648      	mov	r0, r9
 80168ca:	f000 fbd1 	bl	8017070 <_Bfree>
 80168ce:	4629      	mov	r1, r5
 80168d0:	4648      	mov	r0, r9
 80168d2:	f000 fbcd 	bl	8017070 <_Bfree>
 80168d6:	e093      	b.n	8016a00 <_dtoa_r+0x560>
 80168d8:	2202      	movs	r2, #2
 80168da:	e76c      	b.n	80167b6 <_dtoa_r+0x316>
 80168dc:	07cc      	lsls	r4, r1, #31
 80168de:	d504      	bpl.n	80168ea <_dtoa_r+0x44a>
 80168e0:	ed90 6b00 	vldr	d6, [r0]
 80168e4:	3201      	adds	r2, #1
 80168e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80168ea:	1049      	asrs	r1, r1, #1
 80168ec:	3008      	adds	r0, #8
 80168ee:	e763      	b.n	80167b8 <_dtoa_r+0x318>
 80168f0:	d022      	beq.n	8016938 <_dtoa_r+0x498>
 80168f2:	f1c8 0100 	rsb	r1, r8, #0
 80168f6:	4a6d      	ldr	r2, [pc, #436]	@ (8016aac <_dtoa_r+0x60c>)
 80168f8:	f001 000f 	and.w	r0, r1, #15
 80168fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8016900:	ed92 7b00 	vldr	d7, [r2]
 8016904:	ee28 7b07 	vmul.f64	d7, d8, d7
 8016908:	ed8d 7b02 	vstr	d7, [sp, #8]
 801690c:	4868      	ldr	r0, [pc, #416]	@ (8016ab0 <_dtoa_r+0x610>)
 801690e:	1109      	asrs	r1, r1, #4
 8016910:	2400      	movs	r4, #0
 8016912:	2202      	movs	r2, #2
 8016914:	b929      	cbnz	r1, 8016922 <_dtoa_r+0x482>
 8016916:	2c00      	cmp	r4, #0
 8016918:	f43f af57 	beq.w	80167ca <_dtoa_r+0x32a>
 801691c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016920:	e753      	b.n	80167ca <_dtoa_r+0x32a>
 8016922:	07ce      	lsls	r6, r1, #31
 8016924:	d505      	bpl.n	8016932 <_dtoa_r+0x492>
 8016926:	ed90 6b00 	vldr	d6, [r0]
 801692a:	3201      	adds	r2, #1
 801692c:	2401      	movs	r4, #1
 801692e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016932:	1049      	asrs	r1, r1, #1
 8016934:	3008      	adds	r0, #8
 8016936:	e7ed      	b.n	8016914 <_dtoa_r+0x474>
 8016938:	2202      	movs	r2, #2
 801693a:	e746      	b.n	80167ca <_dtoa_r+0x32a>
 801693c:	f8cd 8014 	str.w	r8, [sp, #20]
 8016940:	4654      	mov	r4, sl
 8016942:	e762      	b.n	801680a <_dtoa_r+0x36a>
 8016944:	4a59      	ldr	r2, [pc, #356]	@ (8016aac <_dtoa_r+0x60c>)
 8016946:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801694a:	ed12 4b02 	vldr	d4, [r2, #-8]
 801694e:	9a08      	ldr	r2, [sp, #32]
 8016950:	ec41 0b17 	vmov	d7, r0, r1
 8016954:	443c      	add	r4, r7
 8016956:	b34a      	cbz	r2, 80169ac <_dtoa_r+0x50c>
 8016958:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801695c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8016960:	463e      	mov	r6, r7
 8016962:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8016966:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801696a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801696e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8016972:	ee14 2a90 	vmov	r2, s9
 8016976:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801697a:	3230      	adds	r2, #48	@ 0x30
 801697c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8016980:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8016984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016988:	f806 2b01 	strb.w	r2, [r6], #1
 801698c:	d438      	bmi.n	8016a00 <_dtoa_r+0x560>
 801698e:	ee32 5b46 	vsub.f64	d5, d2, d6
 8016992:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8016996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801699a:	d46e      	bmi.n	8016a7a <_dtoa_r+0x5da>
 801699c:	42a6      	cmp	r6, r4
 801699e:	f43f af5a 	beq.w	8016856 <_dtoa_r+0x3b6>
 80169a2:	ee27 7b03 	vmul.f64	d7, d7, d3
 80169a6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80169aa:	e7e0      	b.n	801696e <_dtoa_r+0x4ce>
 80169ac:	4621      	mov	r1, r4
 80169ae:	463e      	mov	r6, r7
 80169b0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80169b4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80169b8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80169bc:	ee14 2a90 	vmov	r2, s9
 80169c0:	3230      	adds	r2, #48	@ 0x30
 80169c2:	f806 2b01 	strb.w	r2, [r6], #1
 80169c6:	42a6      	cmp	r6, r4
 80169c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80169cc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80169d0:	d119      	bne.n	8016a06 <_dtoa_r+0x566>
 80169d2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80169d6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80169da:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80169de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169e2:	dc4a      	bgt.n	8016a7a <_dtoa_r+0x5da>
 80169e4:	ee35 5b47 	vsub.f64	d5, d5, d7
 80169e8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80169ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169f0:	f57f af31 	bpl.w	8016856 <_dtoa_r+0x3b6>
 80169f4:	460e      	mov	r6, r1
 80169f6:	3901      	subs	r1, #1
 80169f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80169fc:	2b30      	cmp	r3, #48	@ 0x30
 80169fe:	d0f9      	beq.n	80169f4 <_dtoa_r+0x554>
 8016a00:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016a04:	e027      	b.n	8016a56 <_dtoa_r+0x5b6>
 8016a06:	ee26 6b03 	vmul.f64	d6, d6, d3
 8016a0a:	e7d5      	b.n	80169b8 <_dtoa_r+0x518>
 8016a0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016a10:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8016a14:	463e      	mov	r6, r7
 8016a16:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8016a1a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8016a1e:	ee15 3a10 	vmov	r3, s10
 8016a22:	3330      	adds	r3, #48	@ 0x30
 8016a24:	f806 3b01 	strb.w	r3, [r6], #1
 8016a28:	1bf3      	subs	r3, r6, r7
 8016a2a:	459a      	cmp	sl, r3
 8016a2c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8016a30:	eea3 7b46 	vfms.f64	d7, d3, d6
 8016a34:	d132      	bne.n	8016a9c <_dtoa_r+0x5fc>
 8016a36:	ee37 7b07 	vadd.f64	d7, d7, d7
 8016a3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8016a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a42:	dc18      	bgt.n	8016a76 <_dtoa_r+0x5d6>
 8016a44:	eeb4 7b46 	vcmp.f64	d7, d6
 8016a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a4c:	d103      	bne.n	8016a56 <_dtoa_r+0x5b6>
 8016a4e:	ee15 3a10 	vmov	r3, s10
 8016a52:	07db      	lsls	r3, r3, #31
 8016a54:	d40f      	bmi.n	8016a76 <_dtoa_r+0x5d6>
 8016a56:	9901      	ldr	r1, [sp, #4]
 8016a58:	4648      	mov	r0, r9
 8016a5a:	f000 fb09 	bl	8017070 <_Bfree>
 8016a5e:	2300      	movs	r3, #0
 8016a60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016a62:	7033      	strb	r3, [r6, #0]
 8016a64:	f108 0301 	add.w	r3, r8, #1
 8016a68:	6013      	str	r3, [r2, #0]
 8016a6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	f000 824b 	beq.w	8016f08 <_dtoa_r+0xa68>
 8016a72:	601e      	str	r6, [r3, #0]
 8016a74:	e248      	b.n	8016f08 <_dtoa_r+0xa68>
 8016a76:	f8cd 8014 	str.w	r8, [sp, #20]
 8016a7a:	4633      	mov	r3, r6
 8016a7c:	461e      	mov	r6, r3
 8016a7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016a82:	2a39      	cmp	r2, #57	@ 0x39
 8016a84:	d106      	bne.n	8016a94 <_dtoa_r+0x5f4>
 8016a86:	429f      	cmp	r7, r3
 8016a88:	d1f8      	bne.n	8016a7c <_dtoa_r+0x5dc>
 8016a8a:	9a05      	ldr	r2, [sp, #20]
 8016a8c:	3201      	adds	r2, #1
 8016a8e:	9205      	str	r2, [sp, #20]
 8016a90:	2230      	movs	r2, #48	@ 0x30
 8016a92:	703a      	strb	r2, [r7, #0]
 8016a94:	781a      	ldrb	r2, [r3, #0]
 8016a96:	3201      	adds	r2, #1
 8016a98:	701a      	strb	r2, [r3, #0]
 8016a9a:	e7b1      	b.n	8016a00 <_dtoa_r+0x560>
 8016a9c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8016aa0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016aa8:	d1b5      	bne.n	8016a16 <_dtoa_r+0x576>
 8016aaa:	e7d4      	b.n	8016a56 <_dtoa_r+0x5b6>
 8016aac:	080194c0 	.word	0x080194c0
 8016ab0:	08019498 	.word	0x08019498
 8016ab4:	9908      	ldr	r1, [sp, #32]
 8016ab6:	2900      	cmp	r1, #0
 8016ab8:	f000 80e9 	beq.w	8016c8e <_dtoa_r+0x7ee>
 8016abc:	9907      	ldr	r1, [sp, #28]
 8016abe:	2901      	cmp	r1, #1
 8016ac0:	f300 80cb 	bgt.w	8016c5a <_dtoa_r+0x7ba>
 8016ac4:	2d00      	cmp	r5, #0
 8016ac6:	f000 80c4 	beq.w	8016c52 <_dtoa_r+0x7b2>
 8016aca:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8016ace:	9e04      	ldr	r6, [sp, #16]
 8016ad0:	461c      	mov	r4, r3
 8016ad2:	9305      	str	r3, [sp, #20]
 8016ad4:	9b04      	ldr	r3, [sp, #16]
 8016ad6:	4413      	add	r3, r2
 8016ad8:	9304      	str	r3, [sp, #16]
 8016ada:	9b06      	ldr	r3, [sp, #24]
 8016adc:	2101      	movs	r1, #1
 8016ade:	4413      	add	r3, r2
 8016ae0:	4648      	mov	r0, r9
 8016ae2:	9306      	str	r3, [sp, #24]
 8016ae4:	f000 fb78 	bl	80171d8 <__i2b>
 8016ae8:	9b05      	ldr	r3, [sp, #20]
 8016aea:	4605      	mov	r5, r0
 8016aec:	b166      	cbz	r6, 8016b08 <_dtoa_r+0x668>
 8016aee:	9a06      	ldr	r2, [sp, #24]
 8016af0:	2a00      	cmp	r2, #0
 8016af2:	dd09      	ble.n	8016b08 <_dtoa_r+0x668>
 8016af4:	42b2      	cmp	r2, r6
 8016af6:	9904      	ldr	r1, [sp, #16]
 8016af8:	bfa8      	it	ge
 8016afa:	4632      	movge	r2, r6
 8016afc:	1a89      	subs	r1, r1, r2
 8016afe:	9104      	str	r1, [sp, #16]
 8016b00:	9906      	ldr	r1, [sp, #24]
 8016b02:	1ab6      	subs	r6, r6, r2
 8016b04:	1a8a      	subs	r2, r1, r2
 8016b06:	9206      	str	r2, [sp, #24]
 8016b08:	b30b      	cbz	r3, 8016b4e <_dtoa_r+0x6ae>
 8016b0a:	9a08      	ldr	r2, [sp, #32]
 8016b0c:	2a00      	cmp	r2, #0
 8016b0e:	f000 80c5 	beq.w	8016c9c <_dtoa_r+0x7fc>
 8016b12:	2c00      	cmp	r4, #0
 8016b14:	f000 80bf 	beq.w	8016c96 <_dtoa_r+0x7f6>
 8016b18:	4629      	mov	r1, r5
 8016b1a:	4622      	mov	r2, r4
 8016b1c:	4648      	mov	r0, r9
 8016b1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016b20:	f000 fc12 	bl	8017348 <__pow5mult>
 8016b24:	9a01      	ldr	r2, [sp, #4]
 8016b26:	4601      	mov	r1, r0
 8016b28:	4605      	mov	r5, r0
 8016b2a:	4648      	mov	r0, r9
 8016b2c:	f000 fb6a 	bl	8017204 <__multiply>
 8016b30:	9901      	ldr	r1, [sp, #4]
 8016b32:	9005      	str	r0, [sp, #20]
 8016b34:	4648      	mov	r0, r9
 8016b36:	f000 fa9b 	bl	8017070 <_Bfree>
 8016b3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016b3c:	1b1b      	subs	r3, r3, r4
 8016b3e:	f000 80b0 	beq.w	8016ca2 <_dtoa_r+0x802>
 8016b42:	9905      	ldr	r1, [sp, #20]
 8016b44:	461a      	mov	r2, r3
 8016b46:	4648      	mov	r0, r9
 8016b48:	f000 fbfe 	bl	8017348 <__pow5mult>
 8016b4c:	9001      	str	r0, [sp, #4]
 8016b4e:	2101      	movs	r1, #1
 8016b50:	4648      	mov	r0, r9
 8016b52:	f000 fb41 	bl	80171d8 <__i2b>
 8016b56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016b58:	4604      	mov	r4, r0
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	f000 81da 	beq.w	8016f14 <_dtoa_r+0xa74>
 8016b60:	461a      	mov	r2, r3
 8016b62:	4601      	mov	r1, r0
 8016b64:	4648      	mov	r0, r9
 8016b66:	f000 fbef 	bl	8017348 <__pow5mult>
 8016b6a:	9b07      	ldr	r3, [sp, #28]
 8016b6c:	2b01      	cmp	r3, #1
 8016b6e:	4604      	mov	r4, r0
 8016b70:	f300 80a0 	bgt.w	8016cb4 <_dtoa_r+0x814>
 8016b74:	9b02      	ldr	r3, [sp, #8]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	f040 8096 	bne.w	8016ca8 <_dtoa_r+0x808>
 8016b7c:	9b03      	ldr	r3, [sp, #12]
 8016b7e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8016b82:	2a00      	cmp	r2, #0
 8016b84:	f040 8092 	bne.w	8016cac <_dtoa_r+0x80c>
 8016b88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8016b8c:	0d12      	lsrs	r2, r2, #20
 8016b8e:	0512      	lsls	r2, r2, #20
 8016b90:	2a00      	cmp	r2, #0
 8016b92:	f000 808d 	beq.w	8016cb0 <_dtoa_r+0x810>
 8016b96:	9b04      	ldr	r3, [sp, #16]
 8016b98:	3301      	adds	r3, #1
 8016b9a:	9304      	str	r3, [sp, #16]
 8016b9c:	9b06      	ldr	r3, [sp, #24]
 8016b9e:	3301      	adds	r3, #1
 8016ba0:	9306      	str	r3, [sp, #24]
 8016ba2:	2301      	movs	r3, #1
 8016ba4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016ba6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	f000 81b9 	beq.w	8016f20 <_dtoa_r+0xa80>
 8016bae:	6922      	ldr	r2, [r4, #16]
 8016bb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8016bb4:	6910      	ldr	r0, [r2, #16]
 8016bb6:	f000 fac3 	bl	8017140 <__hi0bits>
 8016bba:	f1c0 0020 	rsb	r0, r0, #32
 8016bbe:	9b06      	ldr	r3, [sp, #24]
 8016bc0:	4418      	add	r0, r3
 8016bc2:	f010 001f 	ands.w	r0, r0, #31
 8016bc6:	f000 8081 	beq.w	8016ccc <_dtoa_r+0x82c>
 8016bca:	f1c0 0220 	rsb	r2, r0, #32
 8016bce:	2a04      	cmp	r2, #4
 8016bd0:	dd73      	ble.n	8016cba <_dtoa_r+0x81a>
 8016bd2:	9b04      	ldr	r3, [sp, #16]
 8016bd4:	f1c0 001c 	rsb	r0, r0, #28
 8016bd8:	4403      	add	r3, r0
 8016bda:	9304      	str	r3, [sp, #16]
 8016bdc:	9b06      	ldr	r3, [sp, #24]
 8016bde:	4406      	add	r6, r0
 8016be0:	4403      	add	r3, r0
 8016be2:	9306      	str	r3, [sp, #24]
 8016be4:	9b04      	ldr	r3, [sp, #16]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	dd05      	ble.n	8016bf6 <_dtoa_r+0x756>
 8016bea:	9901      	ldr	r1, [sp, #4]
 8016bec:	461a      	mov	r2, r3
 8016bee:	4648      	mov	r0, r9
 8016bf0:	f000 fc04 	bl	80173fc <__lshift>
 8016bf4:	9001      	str	r0, [sp, #4]
 8016bf6:	9b06      	ldr	r3, [sp, #24]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	dd05      	ble.n	8016c08 <_dtoa_r+0x768>
 8016bfc:	4621      	mov	r1, r4
 8016bfe:	461a      	mov	r2, r3
 8016c00:	4648      	mov	r0, r9
 8016c02:	f000 fbfb 	bl	80173fc <__lshift>
 8016c06:	4604      	mov	r4, r0
 8016c08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d060      	beq.n	8016cd0 <_dtoa_r+0x830>
 8016c0e:	9801      	ldr	r0, [sp, #4]
 8016c10:	4621      	mov	r1, r4
 8016c12:	f000 fc5f 	bl	80174d4 <__mcmp>
 8016c16:	2800      	cmp	r0, #0
 8016c18:	da5a      	bge.n	8016cd0 <_dtoa_r+0x830>
 8016c1a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8016c1e:	9305      	str	r3, [sp, #20]
 8016c20:	9901      	ldr	r1, [sp, #4]
 8016c22:	2300      	movs	r3, #0
 8016c24:	220a      	movs	r2, #10
 8016c26:	4648      	mov	r0, r9
 8016c28:	f000 fa44 	bl	80170b4 <__multadd>
 8016c2c:	9b08      	ldr	r3, [sp, #32]
 8016c2e:	9001      	str	r0, [sp, #4]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	f000 8177 	beq.w	8016f24 <_dtoa_r+0xa84>
 8016c36:	4629      	mov	r1, r5
 8016c38:	2300      	movs	r3, #0
 8016c3a:	220a      	movs	r2, #10
 8016c3c:	4648      	mov	r0, r9
 8016c3e:	f000 fa39 	bl	80170b4 <__multadd>
 8016c42:	f1bb 0f00 	cmp.w	fp, #0
 8016c46:	4605      	mov	r5, r0
 8016c48:	dc6e      	bgt.n	8016d28 <_dtoa_r+0x888>
 8016c4a:	9b07      	ldr	r3, [sp, #28]
 8016c4c:	2b02      	cmp	r3, #2
 8016c4e:	dc48      	bgt.n	8016ce2 <_dtoa_r+0x842>
 8016c50:	e06a      	b.n	8016d28 <_dtoa_r+0x888>
 8016c52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016c54:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8016c58:	e739      	b.n	8016ace <_dtoa_r+0x62e>
 8016c5a:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8016c5e:	42a3      	cmp	r3, r4
 8016c60:	db07      	blt.n	8016c72 <_dtoa_r+0x7d2>
 8016c62:	f1ba 0f00 	cmp.w	sl, #0
 8016c66:	eba3 0404 	sub.w	r4, r3, r4
 8016c6a:	db0b      	blt.n	8016c84 <_dtoa_r+0x7e4>
 8016c6c:	9e04      	ldr	r6, [sp, #16]
 8016c6e:	4652      	mov	r2, sl
 8016c70:	e72f      	b.n	8016ad2 <_dtoa_r+0x632>
 8016c72:	1ae2      	subs	r2, r4, r3
 8016c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016c76:	9e04      	ldr	r6, [sp, #16]
 8016c78:	4413      	add	r3, r2
 8016c7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8016c7c:	4652      	mov	r2, sl
 8016c7e:	4623      	mov	r3, r4
 8016c80:	2400      	movs	r4, #0
 8016c82:	e726      	b.n	8016ad2 <_dtoa_r+0x632>
 8016c84:	9a04      	ldr	r2, [sp, #16]
 8016c86:	eba2 060a 	sub.w	r6, r2, sl
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	e721      	b.n	8016ad2 <_dtoa_r+0x632>
 8016c8e:	9e04      	ldr	r6, [sp, #16]
 8016c90:	9d08      	ldr	r5, [sp, #32]
 8016c92:	461c      	mov	r4, r3
 8016c94:	e72a      	b.n	8016aec <_dtoa_r+0x64c>
 8016c96:	9a01      	ldr	r2, [sp, #4]
 8016c98:	9205      	str	r2, [sp, #20]
 8016c9a:	e752      	b.n	8016b42 <_dtoa_r+0x6a2>
 8016c9c:	9901      	ldr	r1, [sp, #4]
 8016c9e:	461a      	mov	r2, r3
 8016ca0:	e751      	b.n	8016b46 <_dtoa_r+0x6a6>
 8016ca2:	9b05      	ldr	r3, [sp, #20]
 8016ca4:	9301      	str	r3, [sp, #4]
 8016ca6:	e752      	b.n	8016b4e <_dtoa_r+0x6ae>
 8016ca8:	2300      	movs	r3, #0
 8016caa:	e77b      	b.n	8016ba4 <_dtoa_r+0x704>
 8016cac:	9b02      	ldr	r3, [sp, #8]
 8016cae:	e779      	b.n	8016ba4 <_dtoa_r+0x704>
 8016cb0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016cb2:	e778      	b.n	8016ba6 <_dtoa_r+0x706>
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016cb8:	e779      	b.n	8016bae <_dtoa_r+0x70e>
 8016cba:	d093      	beq.n	8016be4 <_dtoa_r+0x744>
 8016cbc:	9b04      	ldr	r3, [sp, #16]
 8016cbe:	321c      	adds	r2, #28
 8016cc0:	4413      	add	r3, r2
 8016cc2:	9304      	str	r3, [sp, #16]
 8016cc4:	9b06      	ldr	r3, [sp, #24]
 8016cc6:	4416      	add	r6, r2
 8016cc8:	4413      	add	r3, r2
 8016cca:	e78a      	b.n	8016be2 <_dtoa_r+0x742>
 8016ccc:	4602      	mov	r2, r0
 8016cce:	e7f5      	b.n	8016cbc <_dtoa_r+0x81c>
 8016cd0:	f1ba 0f00 	cmp.w	sl, #0
 8016cd4:	f8cd 8014 	str.w	r8, [sp, #20]
 8016cd8:	46d3      	mov	fp, sl
 8016cda:	dc21      	bgt.n	8016d20 <_dtoa_r+0x880>
 8016cdc:	9b07      	ldr	r3, [sp, #28]
 8016cde:	2b02      	cmp	r3, #2
 8016ce0:	dd1e      	ble.n	8016d20 <_dtoa_r+0x880>
 8016ce2:	f1bb 0f00 	cmp.w	fp, #0
 8016ce6:	f47f addc 	bne.w	80168a2 <_dtoa_r+0x402>
 8016cea:	4621      	mov	r1, r4
 8016cec:	465b      	mov	r3, fp
 8016cee:	2205      	movs	r2, #5
 8016cf0:	4648      	mov	r0, r9
 8016cf2:	f000 f9df 	bl	80170b4 <__multadd>
 8016cf6:	4601      	mov	r1, r0
 8016cf8:	4604      	mov	r4, r0
 8016cfa:	9801      	ldr	r0, [sp, #4]
 8016cfc:	f000 fbea 	bl	80174d4 <__mcmp>
 8016d00:	2800      	cmp	r0, #0
 8016d02:	f77f adce 	ble.w	80168a2 <_dtoa_r+0x402>
 8016d06:	463e      	mov	r6, r7
 8016d08:	2331      	movs	r3, #49	@ 0x31
 8016d0a:	f806 3b01 	strb.w	r3, [r6], #1
 8016d0e:	9b05      	ldr	r3, [sp, #20]
 8016d10:	3301      	adds	r3, #1
 8016d12:	9305      	str	r3, [sp, #20]
 8016d14:	e5c9      	b.n	80168aa <_dtoa_r+0x40a>
 8016d16:	f8cd 8014 	str.w	r8, [sp, #20]
 8016d1a:	4654      	mov	r4, sl
 8016d1c:	4625      	mov	r5, r4
 8016d1e:	e7f2      	b.n	8016d06 <_dtoa_r+0x866>
 8016d20:	9b08      	ldr	r3, [sp, #32]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	f000 8102 	beq.w	8016f2c <_dtoa_r+0xa8c>
 8016d28:	2e00      	cmp	r6, #0
 8016d2a:	dd05      	ble.n	8016d38 <_dtoa_r+0x898>
 8016d2c:	4629      	mov	r1, r5
 8016d2e:	4632      	mov	r2, r6
 8016d30:	4648      	mov	r0, r9
 8016d32:	f000 fb63 	bl	80173fc <__lshift>
 8016d36:	4605      	mov	r5, r0
 8016d38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d058      	beq.n	8016df0 <_dtoa_r+0x950>
 8016d3e:	6869      	ldr	r1, [r5, #4]
 8016d40:	4648      	mov	r0, r9
 8016d42:	f000 f955 	bl	8016ff0 <_Balloc>
 8016d46:	4606      	mov	r6, r0
 8016d48:	b928      	cbnz	r0, 8016d56 <_dtoa_r+0x8b6>
 8016d4a:	4b82      	ldr	r3, [pc, #520]	@ (8016f54 <_dtoa_r+0xab4>)
 8016d4c:	4602      	mov	r2, r0
 8016d4e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8016d52:	f7ff bbbe 	b.w	80164d2 <_dtoa_r+0x32>
 8016d56:	692a      	ldr	r2, [r5, #16]
 8016d58:	3202      	adds	r2, #2
 8016d5a:	0092      	lsls	r2, r2, #2
 8016d5c:	f105 010c 	add.w	r1, r5, #12
 8016d60:	300c      	adds	r0, #12
 8016d62:	f000 fedd 	bl	8017b20 <memcpy>
 8016d66:	2201      	movs	r2, #1
 8016d68:	4631      	mov	r1, r6
 8016d6a:	4648      	mov	r0, r9
 8016d6c:	f000 fb46 	bl	80173fc <__lshift>
 8016d70:	1c7b      	adds	r3, r7, #1
 8016d72:	9304      	str	r3, [sp, #16]
 8016d74:	eb07 030b 	add.w	r3, r7, fp
 8016d78:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d7a:	9b02      	ldr	r3, [sp, #8]
 8016d7c:	f003 0301 	and.w	r3, r3, #1
 8016d80:	46a8      	mov	r8, r5
 8016d82:	9308      	str	r3, [sp, #32]
 8016d84:	4605      	mov	r5, r0
 8016d86:	9b04      	ldr	r3, [sp, #16]
 8016d88:	9801      	ldr	r0, [sp, #4]
 8016d8a:	4621      	mov	r1, r4
 8016d8c:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8016d90:	f7ff fafb 	bl	801638a <quorem>
 8016d94:	4641      	mov	r1, r8
 8016d96:	9002      	str	r0, [sp, #8]
 8016d98:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8016d9c:	9801      	ldr	r0, [sp, #4]
 8016d9e:	f000 fb99 	bl	80174d4 <__mcmp>
 8016da2:	462a      	mov	r2, r5
 8016da4:	9006      	str	r0, [sp, #24]
 8016da6:	4621      	mov	r1, r4
 8016da8:	4648      	mov	r0, r9
 8016daa:	f000 fbaf 	bl	801750c <__mdiff>
 8016dae:	68c2      	ldr	r2, [r0, #12]
 8016db0:	4606      	mov	r6, r0
 8016db2:	b9fa      	cbnz	r2, 8016df4 <_dtoa_r+0x954>
 8016db4:	4601      	mov	r1, r0
 8016db6:	9801      	ldr	r0, [sp, #4]
 8016db8:	f000 fb8c 	bl	80174d4 <__mcmp>
 8016dbc:	4602      	mov	r2, r0
 8016dbe:	4631      	mov	r1, r6
 8016dc0:	4648      	mov	r0, r9
 8016dc2:	920a      	str	r2, [sp, #40]	@ 0x28
 8016dc4:	f000 f954 	bl	8017070 <_Bfree>
 8016dc8:	9b07      	ldr	r3, [sp, #28]
 8016dca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8016dcc:	9e04      	ldr	r6, [sp, #16]
 8016dce:	ea42 0103 	orr.w	r1, r2, r3
 8016dd2:	9b08      	ldr	r3, [sp, #32]
 8016dd4:	4319      	orrs	r1, r3
 8016dd6:	d10f      	bne.n	8016df8 <_dtoa_r+0x958>
 8016dd8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016ddc:	d028      	beq.n	8016e30 <_dtoa_r+0x990>
 8016dde:	9b06      	ldr	r3, [sp, #24]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	dd02      	ble.n	8016dea <_dtoa_r+0x94a>
 8016de4:	9b02      	ldr	r3, [sp, #8]
 8016de6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8016dea:	f88b a000 	strb.w	sl, [fp]
 8016dee:	e55e      	b.n	80168ae <_dtoa_r+0x40e>
 8016df0:	4628      	mov	r0, r5
 8016df2:	e7bd      	b.n	8016d70 <_dtoa_r+0x8d0>
 8016df4:	2201      	movs	r2, #1
 8016df6:	e7e2      	b.n	8016dbe <_dtoa_r+0x91e>
 8016df8:	9b06      	ldr	r3, [sp, #24]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	db04      	blt.n	8016e08 <_dtoa_r+0x968>
 8016dfe:	9907      	ldr	r1, [sp, #28]
 8016e00:	430b      	orrs	r3, r1
 8016e02:	9908      	ldr	r1, [sp, #32]
 8016e04:	430b      	orrs	r3, r1
 8016e06:	d120      	bne.n	8016e4a <_dtoa_r+0x9aa>
 8016e08:	2a00      	cmp	r2, #0
 8016e0a:	ddee      	ble.n	8016dea <_dtoa_r+0x94a>
 8016e0c:	9901      	ldr	r1, [sp, #4]
 8016e0e:	2201      	movs	r2, #1
 8016e10:	4648      	mov	r0, r9
 8016e12:	f000 faf3 	bl	80173fc <__lshift>
 8016e16:	4621      	mov	r1, r4
 8016e18:	9001      	str	r0, [sp, #4]
 8016e1a:	f000 fb5b 	bl	80174d4 <__mcmp>
 8016e1e:	2800      	cmp	r0, #0
 8016e20:	dc03      	bgt.n	8016e2a <_dtoa_r+0x98a>
 8016e22:	d1e2      	bne.n	8016dea <_dtoa_r+0x94a>
 8016e24:	f01a 0f01 	tst.w	sl, #1
 8016e28:	d0df      	beq.n	8016dea <_dtoa_r+0x94a>
 8016e2a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016e2e:	d1d9      	bne.n	8016de4 <_dtoa_r+0x944>
 8016e30:	2339      	movs	r3, #57	@ 0x39
 8016e32:	f88b 3000 	strb.w	r3, [fp]
 8016e36:	4633      	mov	r3, r6
 8016e38:	461e      	mov	r6, r3
 8016e3a:	3b01      	subs	r3, #1
 8016e3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8016e40:	2a39      	cmp	r2, #57	@ 0x39
 8016e42:	d052      	beq.n	8016eea <_dtoa_r+0xa4a>
 8016e44:	3201      	adds	r2, #1
 8016e46:	701a      	strb	r2, [r3, #0]
 8016e48:	e531      	b.n	80168ae <_dtoa_r+0x40e>
 8016e4a:	2a00      	cmp	r2, #0
 8016e4c:	dd07      	ble.n	8016e5e <_dtoa_r+0x9be>
 8016e4e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8016e52:	d0ed      	beq.n	8016e30 <_dtoa_r+0x990>
 8016e54:	f10a 0301 	add.w	r3, sl, #1
 8016e58:	f88b 3000 	strb.w	r3, [fp]
 8016e5c:	e527      	b.n	80168ae <_dtoa_r+0x40e>
 8016e5e:	9b04      	ldr	r3, [sp, #16]
 8016e60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016e62:	f803 ac01 	strb.w	sl, [r3, #-1]
 8016e66:	4293      	cmp	r3, r2
 8016e68:	d029      	beq.n	8016ebe <_dtoa_r+0xa1e>
 8016e6a:	9901      	ldr	r1, [sp, #4]
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	220a      	movs	r2, #10
 8016e70:	4648      	mov	r0, r9
 8016e72:	f000 f91f 	bl	80170b4 <__multadd>
 8016e76:	45a8      	cmp	r8, r5
 8016e78:	9001      	str	r0, [sp, #4]
 8016e7a:	f04f 0300 	mov.w	r3, #0
 8016e7e:	f04f 020a 	mov.w	r2, #10
 8016e82:	4641      	mov	r1, r8
 8016e84:	4648      	mov	r0, r9
 8016e86:	d107      	bne.n	8016e98 <_dtoa_r+0x9f8>
 8016e88:	f000 f914 	bl	80170b4 <__multadd>
 8016e8c:	4680      	mov	r8, r0
 8016e8e:	4605      	mov	r5, r0
 8016e90:	9b04      	ldr	r3, [sp, #16]
 8016e92:	3301      	adds	r3, #1
 8016e94:	9304      	str	r3, [sp, #16]
 8016e96:	e776      	b.n	8016d86 <_dtoa_r+0x8e6>
 8016e98:	f000 f90c 	bl	80170b4 <__multadd>
 8016e9c:	4629      	mov	r1, r5
 8016e9e:	4680      	mov	r8, r0
 8016ea0:	2300      	movs	r3, #0
 8016ea2:	220a      	movs	r2, #10
 8016ea4:	4648      	mov	r0, r9
 8016ea6:	f000 f905 	bl	80170b4 <__multadd>
 8016eaa:	4605      	mov	r5, r0
 8016eac:	e7f0      	b.n	8016e90 <_dtoa_r+0x9f0>
 8016eae:	f1bb 0f00 	cmp.w	fp, #0
 8016eb2:	bfcc      	ite	gt
 8016eb4:	465e      	movgt	r6, fp
 8016eb6:	2601      	movle	r6, #1
 8016eb8:	443e      	add	r6, r7
 8016eba:	f04f 0800 	mov.w	r8, #0
 8016ebe:	9901      	ldr	r1, [sp, #4]
 8016ec0:	2201      	movs	r2, #1
 8016ec2:	4648      	mov	r0, r9
 8016ec4:	f000 fa9a 	bl	80173fc <__lshift>
 8016ec8:	4621      	mov	r1, r4
 8016eca:	9001      	str	r0, [sp, #4]
 8016ecc:	f000 fb02 	bl	80174d4 <__mcmp>
 8016ed0:	2800      	cmp	r0, #0
 8016ed2:	dcb0      	bgt.n	8016e36 <_dtoa_r+0x996>
 8016ed4:	d102      	bne.n	8016edc <_dtoa_r+0xa3c>
 8016ed6:	f01a 0f01 	tst.w	sl, #1
 8016eda:	d1ac      	bne.n	8016e36 <_dtoa_r+0x996>
 8016edc:	4633      	mov	r3, r6
 8016ede:	461e      	mov	r6, r3
 8016ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016ee4:	2a30      	cmp	r2, #48	@ 0x30
 8016ee6:	d0fa      	beq.n	8016ede <_dtoa_r+0xa3e>
 8016ee8:	e4e1      	b.n	80168ae <_dtoa_r+0x40e>
 8016eea:	429f      	cmp	r7, r3
 8016eec:	d1a4      	bne.n	8016e38 <_dtoa_r+0x998>
 8016eee:	9b05      	ldr	r3, [sp, #20]
 8016ef0:	3301      	adds	r3, #1
 8016ef2:	9305      	str	r3, [sp, #20]
 8016ef4:	2331      	movs	r3, #49	@ 0x31
 8016ef6:	703b      	strb	r3, [r7, #0]
 8016ef8:	e4d9      	b.n	80168ae <_dtoa_r+0x40e>
 8016efa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016efc:	4f16      	ldr	r7, [pc, #88]	@ (8016f58 <_dtoa_r+0xab8>)
 8016efe:	b11b      	cbz	r3, 8016f08 <_dtoa_r+0xa68>
 8016f00:	f107 0308 	add.w	r3, r7, #8
 8016f04:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8016f06:	6013      	str	r3, [r2, #0]
 8016f08:	4638      	mov	r0, r7
 8016f0a:	b011      	add	sp, #68	@ 0x44
 8016f0c:	ecbd 8b02 	vpop	{d8}
 8016f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f14:	9b07      	ldr	r3, [sp, #28]
 8016f16:	2b01      	cmp	r3, #1
 8016f18:	f77f ae2c 	ble.w	8016b74 <_dtoa_r+0x6d4>
 8016f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016f1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016f20:	2001      	movs	r0, #1
 8016f22:	e64c      	b.n	8016bbe <_dtoa_r+0x71e>
 8016f24:	f1bb 0f00 	cmp.w	fp, #0
 8016f28:	f77f aed8 	ble.w	8016cdc <_dtoa_r+0x83c>
 8016f2c:	463e      	mov	r6, r7
 8016f2e:	9801      	ldr	r0, [sp, #4]
 8016f30:	4621      	mov	r1, r4
 8016f32:	f7ff fa2a 	bl	801638a <quorem>
 8016f36:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8016f3a:	f806 ab01 	strb.w	sl, [r6], #1
 8016f3e:	1bf2      	subs	r2, r6, r7
 8016f40:	4593      	cmp	fp, r2
 8016f42:	ddb4      	ble.n	8016eae <_dtoa_r+0xa0e>
 8016f44:	9901      	ldr	r1, [sp, #4]
 8016f46:	2300      	movs	r3, #0
 8016f48:	220a      	movs	r2, #10
 8016f4a:	4648      	mov	r0, r9
 8016f4c:	f000 f8b2 	bl	80170b4 <__multadd>
 8016f50:	9001      	str	r0, [sp, #4]
 8016f52:	e7ec      	b.n	8016f2e <_dtoa_r+0xa8e>
 8016f54:	080193c4 	.word	0x080193c4
 8016f58:	08019348 	.word	0x08019348

08016f5c <_free_r>:
 8016f5c:	b538      	push	{r3, r4, r5, lr}
 8016f5e:	4605      	mov	r5, r0
 8016f60:	2900      	cmp	r1, #0
 8016f62:	d041      	beq.n	8016fe8 <_free_r+0x8c>
 8016f64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f68:	1f0c      	subs	r4, r1, #4
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	bfb8      	it	lt
 8016f6e:	18e4      	addlt	r4, r4, r3
 8016f70:	f7fe fc12 	bl	8015798 <__malloc_lock>
 8016f74:	4a1d      	ldr	r2, [pc, #116]	@ (8016fec <_free_r+0x90>)
 8016f76:	6813      	ldr	r3, [r2, #0]
 8016f78:	b933      	cbnz	r3, 8016f88 <_free_r+0x2c>
 8016f7a:	6063      	str	r3, [r4, #4]
 8016f7c:	6014      	str	r4, [r2, #0]
 8016f7e:	4628      	mov	r0, r5
 8016f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f84:	f7fe bc0e 	b.w	80157a4 <__malloc_unlock>
 8016f88:	42a3      	cmp	r3, r4
 8016f8a:	d908      	bls.n	8016f9e <_free_r+0x42>
 8016f8c:	6820      	ldr	r0, [r4, #0]
 8016f8e:	1821      	adds	r1, r4, r0
 8016f90:	428b      	cmp	r3, r1
 8016f92:	bf01      	itttt	eq
 8016f94:	6819      	ldreq	r1, [r3, #0]
 8016f96:	685b      	ldreq	r3, [r3, #4]
 8016f98:	1809      	addeq	r1, r1, r0
 8016f9a:	6021      	streq	r1, [r4, #0]
 8016f9c:	e7ed      	b.n	8016f7a <_free_r+0x1e>
 8016f9e:	461a      	mov	r2, r3
 8016fa0:	685b      	ldr	r3, [r3, #4]
 8016fa2:	b10b      	cbz	r3, 8016fa8 <_free_r+0x4c>
 8016fa4:	42a3      	cmp	r3, r4
 8016fa6:	d9fa      	bls.n	8016f9e <_free_r+0x42>
 8016fa8:	6811      	ldr	r1, [r2, #0]
 8016faa:	1850      	adds	r0, r2, r1
 8016fac:	42a0      	cmp	r0, r4
 8016fae:	d10b      	bne.n	8016fc8 <_free_r+0x6c>
 8016fb0:	6820      	ldr	r0, [r4, #0]
 8016fb2:	4401      	add	r1, r0
 8016fb4:	1850      	adds	r0, r2, r1
 8016fb6:	4283      	cmp	r3, r0
 8016fb8:	6011      	str	r1, [r2, #0]
 8016fba:	d1e0      	bne.n	8016f7e <_free_r+0x22>
 8016fbc:	6818      	ldr	r0, [r3, #0]
 8016fbe:	685b      	ldr	r3, [r3, #4]
 8016fc0:	6053      	str	r3, [r2, #4]
 8016fc2:	4408      	add	r0, r1
 8016fc4:	6010      	str	r0, [r2, #0]
 8016fc6:	e7da      	b.n	8016f7e <_free_r+0x22>
 8016fc8:	d902      	bls.n	8016fd0 <_free_r+0x74>
 8016fca:	230c      	movs	r3, #12
 8016fcc:	602b      	str	r3, [r5, #0]
 8016fce:	e7d6      	b.n	8016f7e <_free_r+0x22>
 8016fd0:	6820      	ldr	r0, [r4, #0]
 8016fd2:	1821      	adds	r1, r4, r0
 8016fd4:	428b      	cmp	r3, r1
 8016fd6:	bf04      	itt	eq
 8016fd8:	6819      	ldreq	r1, [r3, #0]
 8016fda:	685b      	ldreq	r3, [r3, #4]
 8016fdc:	6063      	str	r3, [r4, #4]
 8016fde:	bf04      	itt	eq
 8016fe0:	1809      	addeq	r1, r1, r0
 8016fe2:	6021      	streq	r1, [r4, #0]
 8016fe4:	6054      	str	r4, [r2, #4]
 8016fe6:	e7ca      	b.n	8016f7e <_free_r+0x22>
 8016fe8:	bd38      	pop	{r3, r4, r5, pc}
 8016fea:	bf00      	nop
 8016fec:	240023f0 	.word	0x240023f0

08016ff0 <_Balloc>:
 8016ff0:	b570      	push	{r4, r5, r6, lr}
 8016ff2:	69c6      	ldr	r6, [r0, #28]
 8016ff4:	4604      	mov	r4, r0
 8016ff6:	460d      	mov	r5, r1
 8016ff8:	b976      	cbnz	r6, 8017018 <_Balloc+0x28>
 8016ffa:	2010      	movs	r0, #16
 8016ffc:	f7fe fb22 	bl	8015644 <malloc>
 8017000:	4602      	mov	r2, r0
 8017002:	61e0      	str	r0, [r4, #28]
 8017004:	b920      	cbnz	r0, 8017010 <_Balloc+0x20>
 8017006:	4b18      	ldr	r3, [pc, #96]	@ (8017068 <_Balloc+0x78>)
 8017008:	4818      	ldr	r0, [pc, #96]	@ (801706c <_Balloc+0x7c>)
 801700a:	216b      	movs	r1, #107	@ 0x6b
 801700c:	f000 fd96 	bl	8017b3c <__assert_func>
 8017010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017014:	6006      	str	r6, [r0, #0]
 8017016:	60c6      	str	r6, [r0, #12]
 8017018:	69e6      	ldr	r6, [r4, #28]
 801701a:	68f3      	ldr	r3, [r6, #12]
 801701c:	b183      	cbz	r3, 8017040 <_Balloc+0x50>
 801701e:	69e3      	ldr	r3, [r4, #28]
 8017020:	68db      	ldr	r3, [r3, #12]
 8017022:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017026:	b9b8      	cbnz	r0, 8017058 <_Balloc+0x68>
 8017028:	2101      	movs	r1, #1
 801702a:	fa01 f605 	lsl.w	r6, r1, r5
 801702e:	1d72      	adds	r2, r6, #5
 8017030:	0092      	lsls	r2, r2, #2
 8017032:	4620      	mov	r0, r4
 8017034:	f000 fda0 	bl	8017b78 <_calloc_r>
 8017038:	b160      	cbz	r0, 8017054 <_Balloc+0x64>
 801703a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801703e:	e00e      	b.n	801705e <_Balloc+0x6e>
 8017040:	2221      	movs	r2, #33	@ 0x21
 8017042:	2104      	movs	r1, #4
 8017044:	4620      	mov	r0, r4
 8017046:	f000 fd97 	bl	8017b78 <_calloc_r>
 801704a:	69e3      	ldr	r3, [r4, #28]
 801704c:	60f0      	str	r0, [r6, #12]
 801704e:	68db      	ldr	r3, [r3, #12]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d1e4      	bne.n	801701e <_Balloc+0x2e>
 8017054:	2000      	movs	r0, #0
 8017056:	bd70      	pop	{r4, r5, r6, pc}
 8017058:	6802      	ldr	r2, [r0, #0]
 801705a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801705e:	2300      	movs	r3, #0
 8017060:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017064:	e7f7      	b.n	8017056 <_Balloc+0x66>
 8017066:	bf00      	nop
 8017068:	08019355 	.word	0x08019355
 801706c:	080193d5 	.word	0x080193d5

08017070 <_Bfree>:
 8017070:	b570      	push	{r4, r5, r6, lr}
 8017072:	69c6      	ldr	r6, [r0, #28]
 8017074:	4605      	mov	r5, r0
 8017076:	460c      	mov	r4, r1
 8017078:	b976      	cbnz	r6, 8017098 <_Bfree+0x28>
 801707a:	2010      	movs	r0, #16
 801707c:	f7fe fae2 	bl	8015644 <malloc>
 8017080:	4602      	mov	r2, r0
 8017082:	61e8      	str	r0, [r5, #28]
 8017084:	b920      	cbnz	r0, 8017090 <_Bfree+0x20>
 8017086:	4b09      	ldr	r3, [pc, #36]	@ (80170ac <_Bfree+0x3c>)
 8017088:	4809      	ldr	r0, [pc, #36]	@ (80170b0 <_Bfree+0x40>)
 801708a:	218f      	movs	r1, #143	@ 0x8f
 801708c:	f000 fd56 	bl	8017b3c <__assert_func>
 8017090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017094:	6006      	str	r6, [r0, #0]
 8017096:	60c6      	str	r6, [r0, #12]
 8017098:	b13c      	cbz	r4, 80170aa <_Bfree+0x3a>
 801709a:	69eb      	ldr	r3, [r5, #28]
 801709c:	6862      	ldr	r2, [r4, #4]
 801709e:	68db      	ldr	r3, [r3, #12]
 80170a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80170a4:	6021      	str	r1, [r4, #0]
 80170a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80170aa:	bd70      	pop	{r4, r5, r6, pc}
 80170ac:	08019355 	.word	0x08019355
 80170b0:	080193d5 	.word	0x080193d5

080170b4 <__multadd>:
 80170b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170b8:	690d      	ldr	r5, [r1, #16]
 80170ba:	4607      	mov	r7, r0
 80170bc:	460c      	mov	r4, r1
 80170be:	461e      	mov	r6, r3
 80170c0:	f101 0c14 	add.w	ip, r1, #20
 80170c4:	2000      	movs	r0, #0
 80170c6:	f8dc 3000 	ldr.w	r3, [ip]
 80170ca:	b299      	uxth	r1, r3
 80170cc:	fb02 6101 	mla	r1, r2, r1, r6
 80170d0:	0c1e      	lsrs	r6, r3, #16
 80170d2:	0c0b      	lsrs	r3, r1, #16
 80170d4:	fb02 3306 	mla	r3, r2, r6, r3
 80170d8:	b289      	uxth	r1, r1
 80170da:	3001      	adds	r0, #1
 80170dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80170e0:	4285      	cmp	r5, r0
 80170e2:	f84c 1b04 	str.w	r1, [ip], #4
 80170e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80170ea:	dcec      	bgt.n	80170c6 <__multadd+0x12>
 80170ec:	b30e      	cbz	r6, 8017132 <__multadd+0x7e>
 80170ee:	68a3      	ldr	r3, [r4, #8]
 80170f0:	42ab      	cmp	r3, r5
 80170f2:	dc19      	bgt.n	8017128 <__multadd+0x74>
 80170f4:	6861      	ldr	r1, [r4, #4]
 80170f6:	4638      	mov	r0, r7
 80170f8:	3101      	adds	r1, #1
 80170fa:	f7ff ff79 	bl	8016ff0 <_Balloc>
 80170fe:	4680      	mov	r8, r0
 8017100:	b928      	cbnz	r0, 801710e <__multadd+0x5a>
 8017102:	4602      	mov	r2, r0
 8017104:	4b0c      	ldr	r3, [pc, #48]	@ (8017138 <__multadd+0x84>)
 8017106:	480d      	ldr	r0, [pc, #52]	@ (801713c <__multadd+0x88>)
 8017108:	21ba      	movs	r1, #186	@ 0xba
 801710a:	f000 fd17 	bl	8017b3c <__assert_func>
 801710e:	6922      	ldr	r2, [r4, #16]
 8017110:	3202      	adds	r2, #2
 8017112:	f104 010c 	add.w	r1, r4, #12
 8017116:	0092      	lsls	r2, r2, #2
 8017118:	300c      	adds	r0, #12
 801711a:	f000 fd01 	bl	8017b20 <memcpy>
 801711e:	4621      	mov	r1, r4
 8017120:	4638      	mov	r0, r7
 8017122:	f7ff ffa5 	bl	8017070 <_Bfree>
 8017126:	4644      	mov	r4, r8
 8017128:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801712c:	3501      	adds	r5, #1
 801712e:	615e      	str	r6, [r3, #20]
 8017130:	6125      	str	r5, [r4, #16]
 8017132:	4620      	mov	r0, r4
 8017134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017138:	080193c4 	.word	0x080193c4
 801713c:	080193d5 	.word	0x080193d5

08017140 <__hi0bits>:
 8017140:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8017144:	4603      	mov	r3, r0
 8017146:	bf36      	itet	cc
 8017148:	0403      	lslcc	r3, r0, #16
 801714a:	2000      	movcs	r0, #0
 801714c:	2010      	movcc	r0, #16
 801714e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017152:	bf3c      	itt	cc
 8017154:	021b      	lslcc	r3, r3, #8
 8017156:	3008      	addcc	r0, #8
 8017158:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801715c:	bf3c      	itt	cc
 801715e:	011b      	lslcc	r3, r3, #4
 8017160:	3004      	addcc	r0, #4
 8017162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017166:	bf3c      	itt	cc
 8017168:	009b      	lslcc	r3, r3, #2
 801716a:	3002      	addcc	r0, #2
 801716c:	2b00      	cmp	r3, #0
 801716e:	db05      	blt.n	801717c <__hi0bits+0x3c>
 8017170:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8017174:	f100 0001 	add.w	r0, r0, #1
 8017178:	bf08      	it	eq
 801717a:	2020      	moveq	r0, #32
 801717c:	4770      	bx	lr

0801717e <__lo0bits>:
 801717e:	6803      	ldr	r3, [r0, #0]
 8017180:	4602      	mov	r2, r0
 8017182:	f013 0007 	ands.w	r0, r3, #7
 8017186:	d00b      	beq.n	80171a0 <__lo0bits+0x22>
 8017188:	07d9      	lsls	r1, r3, #31
 801718a:	d421      	bmi.n	80171d0 <__lo0bits+0x52>
 801718c:	0798      	lsls	r0, r3, #30
 801718e:	bf49      	itett	mi
 8017190:	085b      	lsrmi	r3, r3, #1
 8017192:	089b      	lsrpl	r3, r3, #2
 8017194:	2001      	movmi	r0, #1
 8017196:	6013      	strmi	r3, [r2, #0]
 8017198:	bf5c      	itt	pl
 801719a:	6013      	strpl	r3, [r2, #0]
 801719c:	2002      	movpl	r0, #2
 801719e:	4770      	bx	lr
 80171a0:	b299      	uxth	r1, r3
 80171a2:	b909      	cbnz	r1, 80171a8 <__lo0bits+0x2a>
 80171a4:	0c1b      	lsrs	r3, r3, #16
 80171a6:	2010      	movs	r0, #16
 80171a8:	b2d9      	uxtb	r1, r3
 80171aa:	b909      	cbnz	r1, 80171b0 <__lo0bits+0x32>
 80171ac:	3008      	adds	r0, #8
 80171ae:	0a1b      	lsrs	r3, r3, #8
 80171b0:	0719      	lsls	r1, r3, #28
 80171b2:	bf04      	itt	eq
 80171b4:	091b      	lsreq	r3, r3, #4
 80171b6:	3004      	addeq	r0, #4
 80171b8:	0799      	lsls	r1, r3, #30
 80171ba:	bf04      	itt	eq
 80171bc:	089b      	lsreq	r3, r3, #2
 80171be:	3002      	addeq	r0, #2
 80171c0:	07d9      	lsls	r1, r3, #31
 80171c2:	d403      	bmi.n	80171cc <__lo0bits+0x4e>
 80171c4:	085b      	lsrs	r3, r3, #1
 80171c6:	f100 0001 	add.w	r0, r0, #1
 80171ca:	d003      	beq.n	80171d4 <__lo0bits+0x56>
 80171cc:	6013      	str	r3, [r2, #0]
 80171ce:	4770      	bx	lr
 80171d0:	2000      	movs	r0, #0
 80171d2:	4770      	bx	lr
 80171d4:	2020      	movs	r0, #32
 80171d6:	4770      	bx	lr

080171d8 <__i2b>:
 80171d8:	b510      	push	{r4, lr}
 80171da:	460c      	mov	r4, r1
 80171dc:	2101      	movs	r1, #1
 80171de:	f7ff ff07 	bl	8016ff0 <_Balloc>
 80171e2:	4602      	mov	r2, r0
 80171e4:	b928      	cbnz	r0, 80171f2 <__i2b+0x1a>
 80171e6:	4b05      	ldr	r3, [pc, #20]	@ (80171fc <__i2b+0x24>)
 80171e8:	4805      	ldr	r0, [pc, #20]	@ (8017200 <__i2b+0x28>)
 80171ea:	f240 1145 	movw	r1, #325	@ 0x145
 80171ee:	f000 fca5 	bl	8017b3c <__assert_func>
 80171f2:	2301      	movs	r3, #1
 80171f4:	6144      	str	r4, [r0, #20]
 80171f6:	6103      	str	r3, [r0, #16]
 80171f8:	bd10      	pop	{r4, pc}
 80171fa:	bf00      	nop
 80171fc:	080193c4 	.word	0x080193c4
 8017200:	080193d5 	.word	0x080193d5

08017204 <__multiply>:
 8017204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017208:	4617      	mov	r7, r2
 801720a:	690a      	ldr	r2, [r1, #16]
 801720c:	693b      	ldr	r3, [r7, #16]
 801720e:	429a      	cmp	r2, r3
 8017210:	bfa8      	it	ge
 8017212:	463b      	movge	r3, r7
 8017214:	4689      	mov	r9, r1
 8017216:	bfa4      	itt	ge
 8017218:	460f      	movge	r7, r1
 801721a:	4699      	movge	r9, r3
 801721c:	693d      	ldr	r5, [r7, #16]
 801721e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017222:	68bb      	ldr	r3, [r7, #8]
 8017224:	6879      	ldr	r1, [r7, #4]
 8017226:	eb05 060a 	add.w	r6, r5, sl
 801722a:	42b3      	cmp	r3, r6
 801722c:	b085      	sub	sp, #20
 801722e:	bfb8      	it	lt
 8017230:	3101      	addlt	r1, #1
 8017232:	f7ff fedd 	bl	8016ff0 <_Balloc>
 8017236:	b930      	cbnz	r0, 8017246 <__multiply+0x42>
 8017238:	4602      	mov	r2, r0
 801723a:	4b41      	ldr	r3, [pc, #260]	@ (8017340 <__multiply+0x13c>)
 801723c:	4841      	ldr	r0, [pc, #260]	@ (8017344 <__multiply+0x140>)
 801723e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8017242:	f000 fc7b 	bl	8017b3c <__assert_func>
 8017246:	f100 0414 	add.w	r4, r0, #20
 801724a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801724e:	4623      	mov	r3, r4
 8017250:	2200      	movs	r2, #0
 8017252:	4573      	cmp	r3, lr
 8017254:	d320      	bcc.n	8017298 <__multiply+0x94>
 8017256:	f107 0814 	add.w	r8, r7, #20
 801725a:	f109 0114 	add.w	r1, r9, #20
 801725e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8017262:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8017266:	9302      	str	r3, [sp, #8]
 8017268:	1beb      	subs	r3, r5, r7
 801726a:	3b15      	subs	r3, #21
 801726c:	f023 0303 	bic.w	r3, r3, #3
 8017270:	3304      	adds	r3, #4
 8017272:	3715      	adds	r7, #21
 8017274:	42bd      	cmp	r5, r7
 8017276:	bf38      	it	cc
 8017278:	2304      	movcc	r3, #4
 801727a:	9301      	str	r3, [sp, #4]
 801727c:	9b02      	ldr	r3, [sp, #8]
 801727e:	9103      	str	r1, [sp, #12]
 8017280:	428b      	cmp	r3, r1
 8017282:	d80c      	bhi.n	801729e <__multiply+0x9a>
 8017284:	2e00      	cmp	r6, #0
 8017286:	dd03      	ble.n	8017290 <__multiply+0x8c>
 8017288:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801728c:	2b00      	cmp	r3, #0
 801728e:	d055      	beq.n	801733c <__multiply+0x138>
 8017290:	6106      	str	r6, [r0, #16]
 8017292:	b005      	add	sp, #20
 8017294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017298:	f843 2b04 	str.w	r2, [r3], #4
 801729c:	e7d9      	b.n	8017252 <__multiply+0x4e>
 801729e:	f8b1 a000 	ldrh.w	sl, [r1]
 80172a2:	f1ba 0f00 	cmp.w	sl, #0
 80172a6:	d01f      	beq.n	80172e8 <__multiply+0xe4>
 80172a8:	46c4      	mov	ip, r8
 80172aa:	46a1      	mov	r9, r4
 80172ac:	2700      	movs	r7, #0
 80172ae:	f85c 2b04 	ldr.w	r2, [ip], #4
 80172b2:	f8d9 3000 	ldr.w	r3, [r9]
 80172b6:	fa1f fb82 	uxth.w	fp, r2
 80172ba:	b29b      	uxth	r3, r3
 80172bc:	fb0a 330b 	mla	r3, sl, fp, r3
 80172c0:	443b      	add	r3, r7
 80172c2:	f8d9 7000 	ldr.w	r7, [r9]
 80172c6:	0c12      	lsrs	r2, r2, #16
 80172c8:	0c3f      	lsrs	r7, r7, #16
 80172ca:	fb0a 7202 	mla	r2, sl, r2, r7
 80172ce:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80172d2:	b29b      	uxth	r3, r3
 80172d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80172d8:	4565      	cmp	r5, ip
 80172da:	f849 3b04 	str.w	r3, [r9], #4
 80172de:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80172e2:	d8e4      	bhi.n	80172ae <__multiply+0xaa>
 80172e4:	9b01      	ldr	r3, [sp, #4]
 80172e6:	50e7      	str	r7, [r4, r3]
 80172e8:	9b03      	ldr	r3, [sp, #12]
 80172ea:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80172ee:	3104      	adds	r1, #4
 80172f0:	f1b9 0f00 	cmp.w	r9, #0
 80172f4:	d020      	beq.n	8017338 <__multiply+0x134>
 80172f6:	6823      	ldr	r3, [r4, #0]
 80172f8:	4647      	mov	r7, r8
 80172fa:	46a4      	mov	ip, r4
 80172fc:	f04f 0a00 	mov.w	sl, #0
 8017300:	f8b7 b000 	ldrh.w	fp, [r7]
 8017304:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8017308:	fb09 220b 	mla	r2, r9, fp, r2
 801730c:	4452      	add	r2, sl
 801730e:	b29b      	uxth	r3, r3
 8017310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017314:	f84c 3b04 	str.w	r3, [ip], #4
 8017318:	f857 3b04 	ldr.w	r3, [r7], #4
 801731c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017320:	f8bc 3000 	ldrh.w	r3, [ip]
 8017324:	fb09 330a 	mla	r3, r9, sl, r3
 8017328:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801732c:	42bd      	cmp	r5, r7
 801732e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8017332:	d8e5      	bhi.n	8017300 <__multiply+0xfc>
 8017334:	9a01      	ldr	r2, [sp, #4]
 8017336:	50a3      	str	r3, [r4, r2]
 8017338:	3404      	adds	r4, #4
 801733a:	e79f      	b.n	801727c <__multiply+0x78>
 801733c:	3e01      	subs	r6, #1
 801733e:	e7a1      	b.n	8017284 <__multiply+0x80>
 8017340:	080193c4 	.word	0x080193c4
 8017344:	080193d5 	.word	0x080193d5

08017348 <__pow5mult>:
 8017348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801734c:	4615      	mov	r5, r2
 801734e:	f012 0203 	ands.w	r2, r2, #3
 8017352:	4607      	mov	r7, r0
 8017354:	460e      	mov	r6, r1
 8017356:	d007      	beq.n	8017368 <__pow5mult+0x20>
 8017358:	4c25      	ldr	r4, [pc, #148]	@ (80173f0 <__pow5mult+0xa8>)
 801735a:	3a01      	subs	r2, #1
 801735c:	2300      	movs	r3, #0
 801735e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017362:	f7ff fea7 	bl	80170b4 <__multadd>
 8017366:	4606      	mov	r6, r0
 8017368:	10ad      	asrs	r5, r5, #2
 801736a:	d03d      	beq.n	80173e8 <__pow5mult+0xa0>
 801736c:	69fc      	ldr	r4, [r7, #28]
 801736e:	b97c      	cbnz	r4, 8017390 <__pow5mult+0x48>
 8017370:	2010      	movs	r0, #16
 8017372:	f7fe f967 	bl	8015644 <malloc>
 8017376:	4602      	mov	r2, r0
 8017378:	61f8      	str	r0, [r7, #28]
 801737a:	b928      	cbnz	r0, 8017388 <__pow5mult+0x40>
 801737c:	4b1d      	ldr	r3, [pc, #116]	@ (80173f4 <__pow5mult+0xac>)
 801737e:	481e      	ldr	r0, [pc, #120]	@ (80173f8 <__pow5mult+0xb0>)
 8017380:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8017384:	f000 fbda 	bl	8017b3c <__assert_func>
 8017388:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801738c:	6004      	str	r4, [r0, #0]
 801738e:	60c4      	str	r4, [r0, #12]
 8017390:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8017394:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017398:	b94c      	cbnz	r4, 80173ae <__pow5mult+0x66>
 801739a:	f240 2171 	movw	r1, #625	@ 0x271
 801739e:	4638      	mov	r0, r7
 80173a0:	f7ff ff1a 	bl	80171d8 <__i2b>
 80173a4:	2300      	movs	r3, #0
 80173a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80173aa:	4604      	mov	r4, r0
 80173ac:	6003      	str	r3, [r0, #0]
 80173ae:	f04f 0900 	mov.w	r9, #0
 80173b2:	07eb      	lsls	r3, r5, #31
 80173b4:	d50a      	bpl.n	80173cc <__pow5mult+0x84>
 80173b6:	4631      	mov	r1, r6
 80173b8:	4622      	mov	r2, r4
 80173ba:	4638      	mov	r0, r7
 80173bc:	f7ff ff22 	bl	8017204 <__multiply>
 80173c0:	4631      	mov	r1, r6
 80173c2:	4680      	mov	r8, r0
 80173c4:	4638      	mov	r0, r7
 80173c6:	f7ff fe53 	bl	8017070 <_Bfree>
 80173ca:	4646      	mov	r6, r8
 80173cc:	106d      	asrs	r5, r5, #1
 80173ce:	d00b      	beq.n	80173e8 <__pow5mult+0xa0>
 80173d0:	6820      	ldr	r0, [r4, #0]
 80173d2:	b938      	cbnz	r0, 80173e4 <__pow5mult+0x9c>
 80173d4:	4622      	mov	r2, r4
 80173d6:	4621      	mov	r1, r4
 80173d8:	4638      	mov	r0, r7
 80173da:	f7ff ff13 	bl	8017204 <__multiply>
 80173de:	6020      	str	r0, [r4, #0]
 80173e0:	f8c0 9000 	str.w	r9, [r0]
 80173e4:	4604      	mov	r4, r0
 80173e6:	e7e4      	b.n	80173b2 <__pow5mult+0x6a>
 80173e8:	4630      	mov	r0, r6
 80173ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80173ee:	bf00      	nop
 80173f0:	08019488 	.word	0x08019488
 80173f4:	08019355 	.word	0x08019355
 80173f8:	080193d5 	.word	0x080193d5

080173fc <__lshift>:
 80173fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017400:	460c      	mov	r4, r1
 8017402:	6849      	ldr	r1, [r1, #4]
 8017404:	6923      	ldr	r3, [r4, #16]
 8017406:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801740a:	68a3      	ldr	r3, [r4, #8]
 801740c:	4607      	mov	r7, r0
 801740e:	4691      	mov	r9, r2
 8017410:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017414:	f108 0601 	add.w	r6, r8, #1
 8017418:	42b3      	cmp	r3, r6
 801741a:	db0b      	blt.n	8017434 <__lshift+0x38>
 801741c:	4638      	mov	r0, r7
 801741e:	f7ff fde7 	bl	8016ff0 <_Balloc>
 8017422:	4605      	mov	r5, r0
 8017424:	b948      	cbnz	r0, 801743a <__lshift+0x3e>
 8017426:	4602      	mov	r2, r0
 8017428:	4b28      	ldr	r3, [pc, #160]	@ (80174cc <__lshift+0xd0>)
 801742a:	4829      	ldr	r0, [pc, #164]	@ (80174d0 <__lshift+0xd4>)
 801742c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8017430:	f000 fb84 	bl	8017b3c <__assert_func>
 8017434:	3101      	adds	r1, #1
 8017436:	005b      	lsls	r3, r3, #1
 8017438:	e7ee      	b.n	8017418 <__lshift+0x1c>
 801743a:	2300      	movs	r3, #0
 801743c:	f100 0114 	add.w	r1, r0, #20
 8017440:	f100 0210 	add.w	r2, r0, #16
 8017444:	4618      	mov	r0, r3
 8017446:	4553      	cmp	r3, sl
 8017448:	db33      	blt.n	80174b2 <__lshift+0xb6>
 801744a:	6920      	ldr	r0, [r4, #16]
 801744c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017450:	f104 0314 	add.w	r3, r4, #20
 8017454:	f019 091f 	ands.w	r9, r9, #31
 8017458:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801745c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017460:	d02b      	beq.n	80174ba <__lshift+0xbe>
 8017462:	f1c9 0e20 	rsb	lr, r9, #32
 8017466:	468a      	mov	sl, r1
 8017468:	2200      	movs	r2, #0
 801746a:	6818      	ldr	r0, [r3, #0]
 801746c:	fa00 f009 	lsl.w	r0, r0, r9
 8017470:	4310      	orrs	r0, r2
 8017472:	f84a 0b04 	str.w	r0, [sl], #4
 8017476:	f853 2b04 	ldr.w	r2, [r3], #4
 801747a:	459c      	cmp	ip, r3
 801747c:	fa22 f20e 	lsr.w	r2, r2, lr
 8017480:	d8f3      	bhi.n	801746a <__lshift+0x6e>
 8017482:	ebac 0304 	sub.w	r3, ip, r4
 8017486:	3b15      	subs	r3, #21
 8017488:	f023 0303 	bic.w	r3, r3, #3
 801748c:	3304      	adds	r3, #4
 801748e:	f104 0015 	add.w	r0, r4, #21
 8017492:	4560      	cmp	r0, ip
 8017494:	bf88      	it	hi
 8017496:	2304      	movhi	r3, #4
 8017498:	50ca      	str	r2, [r1, r3]
 801749a:	b10a      	cbz	r2, 80174a0 <__lshift+0xa4>
 801749c:	f108 0602 	add.w	r6, r8, #2
 80174a0:	3e01      	subs	r6, #1
 80174a2:	4638      	mov	r0, r7
 80174a4:	612e      	str	r6, [r5, #16]
 80174a6:	4621      	mov	r1, r4
 80174a8:	f7ff fde2 	bl	8017070 <_Bfree>
 80174ac:	4628      	mov	r0, r5
 80174ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80174b6:	3301      	adds	r3, #1
 80174b8:	e7c5      	b.n	8017446 <__lshift+0x4a>
 80174ba:	3904      	subs	r1, #4
 80174bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80174c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80174c4:	459c      	cmp	ip, r3
 80174c6:	d8f9      	bhi.n	80174bc <__lshift+0xc0>
 80174c8:	e7ea      	b.n	80174a0 <__lshift+0xa4>
 80174ca:	bf00      	nop
 80174cc:	080193c4 	.word	0x080193c4
 80174d0:	080193d5 	.word	0x080193d5

080174d4 <__mcmp>:
 80174d4:	690a      	ldr	r2, [r1, #16]
 80174d6:	4603      	mov	r3, r0
 80174d8:	6900      	ldr	r0, [r0, #16]
 80174da:	1a80      	subs	r0, r0, r2
 80174dc:	b530      	push	{r4, r5, lr}
 80174de:	d10e      	bne.n	80174fe <__mcmp+0x2a>
 80174e0:	3314      	adds	r3, #20
 80174e2:	3114      	adds	r1, #20
 80174e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80174e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80174ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80174f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80174f4:	4295      	cmp	r5, r2
 80174f6:	d003      	beq.n	8017500 <__mcmp+0x2c>
 80174f8:	d205      	bcs.n	8017506 <__mcmp+0x32>
 80174fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80174fe:	bd30      	pop	{r4, r5, pc}
 8017500:	42a3      	cmp	r3, r4
 8017502:	d3f3      	bcc.n	80174ec <__mcmp+0x18>
 8017504:	e7fb      	b.n	80174fe <__mcmp+0x2a>
 8017506:	2001      	movs	r0, #1
 8017508:	e7f9      	b.n	80174fe <__mcmp+0x2a>
	...

0801750c <__mdiff>:
 801750c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017510:	4689      	mov	r9, r1
 8017512:	4606      	mov	r6, r0
 8017514:	4611      	mov	r1, r2
 8017516:	4648      	mov	r0, r9
 8017518:	4614      	mov	r4, r2
 801751a:	f7ff ffdb 	bl	80174d4 <__mcmp>
 801751e:	1e05      	subs	r5, r0, #0
 8017520:	d112      	bne.n	8017548 <__mdiff+0x3c>
 8017522:	4629      	mov	r1, r5
 8017524:	4630      	mov	r0, r6
 8017526:	f7ff fd63 	bl	8016ff0 <_Balloc>
 801752a:	4602      	mov	r2, r0
 801752c:	b928      	cbnz	r0, 801753a <__mdiff+0x2e>
 801752e:	4b3f      	ldr	r3, [pc, #252]	@ (801762c <__mdiff+0x120>)
 8017530:	f240 2137 	movw	r1, #567	@ 0x237
 8017534:	483e      	ldr	r0, [pc, #248]	@ (8017630 <__mdiff+0x124>)
 8017536:	f000 fb01 	bl	8017b3c <__assert_func>
 801753a:	2301      	movs	r3, #1
 801753c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017540:	4610      	mov	r0, r2
 8017542:	b003      	add	sp, #12
 8017544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017548:	bfbc      	itt	lt
 801754a:	464b      	movlt	r3, r9
 801754c:	46a1      	movlt	r9, r4
 801754e:	4630      	mov	r0, r6
 8017550:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8017554:	bfba      	itte	lt
 8017556:	461c      	movlt	r4, r3
 8017558:	2501      	movlt	r5, #1
 801755a:	2500      	movge	r5, #0
 801755c:	f7ff fd48 	bl	8016ff0 <_Balloc>
 8017560:	4602      	mov	r2, r0
 8017562:	b918      	cbnz	r0, 801756c <__mdiff+0x60>
 8017564:	4b31      	ldr	r3, [pc, #196]	@ (801762c <__mdiff+0x120>)
 8017566:	f240 2145 	movw	r1, #581	@ 0x245
 801756a:	e7e3      	b.n	8017534 <__mdiff+0x28>
 801756c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8017570:	6926      	ldr	r6, [r4, #16]
 8017572:	60c5      	str	r5, [r0, #12]
 8017574:	f109 0310 	add.w	r3, r9, #16
 8017578:	f109 0514 	add.w	r5, r9, #20
 801757c:	f104 0e14 	add.w	lr, r4, #20
 8017580:	f100 0b14 	add.w	fp, r0, #20
 8017584:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8017588:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801758c:	9301      	str	r3, [sp, #4]
 801758e:	46d9      	mov	r9, fp
 8017590:	f04f 0c00 	mov.w	ip, #0
 8017594:	9b01      	ldr	r3, [sp, #4]
 8017596:	f85e 0b04 	ldr.w	r0, [lr], #4
 801759a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801759e:	9301      	str	r3, [sp, #4]
 80175a0:	fa1f f38a 	uxth.w	r3, sl
 80175a4:	4619      	mov	r1, r3
 80175a6:	b283      	uxth	r3, r0
 80175a8:	1acb      	subs	r3, r1, r3
 80175aa:	0c00      	lsrs	r0, r0, #16
 80175ac:	4463      	add	r3, ip
 80175ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80175b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80175b6:	b29b      	uxth	r3, r3
 80175b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80175bc:	4576      	cmp	r6, lr
 80175be:	f849 3b04 	str.w	r3, [r9], #4
 80175c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80175c6:	d8e5      	bhi.n	8017594 <__mdiff+0x88>
 80175c8:	1b33      	subs	r3, r6, r4
 80175ca:	3b15      	subs	r3, #21
 80175cc:	f023 0303 	bic.w	r3, r3, #3
 80175d0:	3415      	adds	r4, #21
 80175d2:	3304      	adds	r3, #4
 80175d4:	42a6      	cmp	r6, r4
 80175d6:	bf38      	it	cc
 80175d8:	2304      	movcc	r3, #4
 80175da:	441d      	add	r5, r3
 80175dc:	445b      	add	r3, fp
 80175de:	461e      	mov	r6, r3
 80175e0:	462c      	mov	r4, r5
 80175e2:	4544      	cmp	r4, r8
 80175e4:	d30e      	bcc.n	8017604 <__mdiff+0xf8>
 80175e6:	f108 0103 	add.w	r1, r8, #3
 80175ea:	1b49      	subs	r1, r1, r5
 80175ec:	f021 0103 	bic.w	r1, r1, #3
 80175f0:	3d03      	subs	r5, #3
 80175f2:	45a8      	cmp	r8, r5
 80175f4:	bf38      	it	cc
 80175f6:	2100      	movcc	r1, #0
 80175f8:	440b      	add	r3, r1
 80175fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80175fe:	b191      	cbz	r1, 8017626 <__mdiff+0x11a>
 8017600:	6117      	str	r7, [r2, #16]
 8017602:	e79d      	b.n	8017540 <__mdiff+0x34>
 8017604:	f854 1b04 	ldr.w	r1, [r4], #4
 8017608:	46e6      	mov	lr, ip
 801760a:	0c08      	lsrs	r0, r1, #16
 801760c:	fa1c fc81 	uxtah	ip, ip, r1
 8017610:	4471      	add	r1, lr
 8017612:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8017616:	b289      	uxth	r1, r1
 8017618:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801761c:	f846 1b04 	str.w	r1, [r6], #4
 8017620:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8017624:	e7dd      	b.n	80175e2 <__mdiff+0xd6>
 8017626:	3f01      	subs	r7, #1
 8017628:	e7e7      	b.n	80175fa <__mdiff+0xee>
 801762a:	bf00      	nop
 801762c:	080193c4 	.word	0x080193c4
 8017630:	080193d5 	.word	0x080193d5

08017634 <__d2b>:
 8017634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017638:	460f      	mov	r7, r1
 801763a:	2101      	movs	r1, #1
 801763c:	ec59 8b10 	vmov	r8, r9, d0
 8017640:	4616      	mov	r6, r2
 8017642:	f7ff fcd5 	bl	8016ff0 <_Balloc>
 8017646:	4604      	mov	r4, r0
 8017648:	b930      	cbnz	r0, 8017658 <__d2b+0x24>
 801764a:	4602      	mov	r2, r0
 801764c:	4b23      	ldr	r3, [pc, #140]	@ (80176dc <__d2b+0xa8>)
 801764e:	4824      	ldr	r0, [pc, #144]	@ (80176e0 <__d2b+0xac>)
 8017650:	f240 310f 	movw	r1, #783	@ 0x30f
 8017654:	f000 fa72 	bl	8017b3c <__assert_func>
 8017658:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801765c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017660:	b10d      	cbz	r5, 8017666 <__d2b+0x32>
 8017662:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017666:	9301      	str	r3, [sp, #4]
 8017668:	f1b8 0300 	subs.w	r3, r8, #0
 801766c:	d023      	beq.n	80176b6 <__d2b+0x82>
 801766e:	4668      	mov	r0, sp
 8017670:	9300      	str	r3, [sp, #0]
 8017672:	f7ff fd84 	bl	801717e <__lo0bits>
 8017676:	e9dd 1200 	ldrd	r1, r2, [sp]
 801767a:	b1d0      	cbz	r0, 80176b2 <__d2b+0x7e>
 801767c:	f1c0 0320 	rsb	r3, r0, #32
 8017680:	fa02 f303 	lsl.w	r3, r2, r3
 8017684:	430b      	orrs	r3, r1
 8017686:	40c2      	lsrs	r2, r0
 8017688:	6163      	str	r3, [r4, #20]
 801768a:	9201      	str	r2, [sp, #4]
 801768c:	9b01      	ldr	r3, [sp, #4]
 801768e:	61a3      	str	r3, [r4, #24]
 8017690:	2b00      	cmp	r3, #0
 8017692:	bf0c      	ite	eq
 8017694:	2201      	moveq	r2, #1
 8017696:	2202      	movne	r2, #2
 8017698:	6122      	str	r2, [r4, #16]
 801769a:	b1a5      	cbz	r5, 80176c6 <__d2b+0x92>
 801769c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80176a0:	4405      	add	r5, r0
 80176a2:	603d      	str	r5, [r7, #0]
 80176a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80176a8:	6030      	str	r0, [r6, #0]
 80176aa:	4620      	mov	r0, r4
 80176ac:	b003      	add	sp, #12
 80176ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80176b2:	6161      	str	r1, [r4, #20]
 80176b4:	e7ea      	b.n	801768c <__d2b+0x58>
 80176b6:	a801      	add	r0, sp, #4
 80176b8:	f7ff fd61 	bl	801717e <__lo0bits>
 80176bc:	9b01      	ldr	r3, [sp, #4]
 80176be:	6163      	str	r3, [r4, #20]
 80176c0:	3020      	adds	r0, #32
 80176c2:	2201      	movs	r2, #1
 80176c4:	e7e8      	b.n	8017698 <__d2b+0x64>
 80176c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80176ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80176ce:	6038      	str	r0, [r7, #0]
 80176d0:	6918      	ldr	r0, [r3, #16]
 80176d2:	f7ff fd35 	bl	8017140 <__hi0bits>
 80176d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80176da:	e7e5      	b.n	80176a8 <__d2b+0x74>
 80176dc:	080193c4 	.word	0x080193c4
 80176e0:	080193d5 	.word	0x080193d5

080176e4 <__ssputs_r>:
 80176e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176e8:	688e      	ldr	r6, [r1, #8]
 80176ea:	461f      	mov	r7, r3
 80176ec:	42be      	cmp	r6, r7
 80176ee:	680b      	ldr	r3, [r1, #0]
 80176f0:	4682      	mov	sl, r0
 80176f2:	460c      	mov	r4, r1
 80176f4:	4690      	mov	r8, r2
 80176f6:	d82d      	bhi.n	8017754 <__ssputs_r+0x70>
 80176f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80176fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017700:	d026      	beq.n	8017750 <__ssputs_r+0x6c>
 8017702:	6965      	ldr	r5, [r4, #20]
 8017704:	6909      	ldr	r1, [r1, #16]
 8017706:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801770a:	eba3 0901 	sub.w	r9, r3, r1
 801770e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017712:	1c7b      	adds	r3, r7, #1
 8017714:	444b      	add	r3, r9
 8017716:	106d      	asrs	r5, r5, #1
 8017718:	429d      	cmp	r5, r3
 801771a:	bf38      	it	cc
 801771c:	461d      	movcc	r5, r3
 801771e:	0553      	lsls	r3, r2, #21
 8017720:	d527      	bpl.n	8017772 <__ssputs_r+0x8e>
 8017722:	4629      	mov	r1, r5
 8017724:	f7fd ffb8 	bl	8015698 <_malloc_r>
 8017728:	4606      	mov	r6, r0
 801772a:	b360      	cbz	r0, 8017786 <__ssputs_r+0xa2>
 801772c:	6921      	ldr	r1, [r4, #16]
 801772e:	464a      	mov	r2, r9
 8017730:	f000 f9f6 	bl	8017b20 <memcpy>
 8017734:	89a3      	ldrh	r3, [r4, #12]
 8017736:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801773a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801773e:	81a3      	strh	r3, [r4, #12]
 8017740:	6126      	str	r6, [r4, #16]
 8017742:	6165      	str	r5, [r4, #20]
 8017744:	444e      	add	r6, r9
 8017746:	eba5 0509 	sub.w	r5, r5, r9
 801774a:	6026      	str	r6, [r4, #0]
 801774c:	60a5      	str	r5, [r4, #8]
 801774e:	463e      	mov	r6, r7
 8017750:	42be      	cmp	r6, r7
 8017752:	d900      	bls.n	8017756 <__ssputs_r+0x72>
 8017754:	463e      	mov	r6, r7
 8017756:	6820      	ldr	r0, [r4, #0]
 8017758:	4632      	mov	r2, r6
 801775a:	4641      	mov	r1, r8
 801775c:	f000 f9c6 	bl	8017aec <memmove>
 8017760:	68a3      	ldr	r3, [r4, #8]
 8017762:	1b9b      	subs	r3, r3, r6
 8017764:	60a3      	str	r3, [r4, #8]
 8017766:	6823      	ldr	r3, [r4, #0]
 8017768:	4433      	add	r3, r6
 801776a:	6023      	str	r3, [r4, #0]
 801776c:	2000      	movs	r0, #0
 801776e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017772:	462a      	mov	r2, r5
 8017774:	f000 fa26 	bl	8017bc4 <_realloc_r>
 8017778:	4606      	mov	r6, r0
 801777a:	2800      	cmp	r0, #0
 801777c:	d1e0      	bne.n	8017740 <__ssputs_r+0x5c>
 801777e:	6921      	ldr	r1, [r4, #16]
 8017780:	4650      	mov	r0, sl
 8017782:	f7ff fbeb 	bl	8016f5c <_free_r>
 8017786:	230c      	movs	r3, #12
 8017788:	f8ca 3000 	str.w	r3, [sl]
 801778c:	89a3      	ldrh	r3, [r4, #12]
 801778e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017792:	81a3      	strh	r3, [r4, #12]
 8017794:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017798:	e7e9      	b.n	801776e <__ssputs_r+0x8a>
	...

0801779c <_svfiprintf_r>:
 801779c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177a0:	4698      	mov	r8, r3
 80177a2:	898b      	ldrh	r3, [r1, #12]
 80177a4:	061b      	lsls	r3, r3, #24
 80177a6:	b09d      	sub	sp, #116	@ 0x74
 80177a8:	4607      	mov	r7, r0
 80177aa:	460d      	mov	r5, r1
 80177ac:	4614      	mov	r4, r2
 80177ae:	d510      	bpl.n	80177d2 <_svfiprintf_r+0x36>
 80177b0:	690b      	ldr	r3, [r1, #16]
 80177b2:	b973      	cbnz	r3, 80177d2 <_svfiprintf_r+0x36>
 80177b4:	2140      	movs	r1, #64	@ 0x40
 80177b6:	f7fd ff6f 	bl	8015698 <_malloc_r>
 80177ba:	6028      	str	r0, [r5, #0]
 80177bc:	6128      	str	r0, [r5, #16]
 80177be:	b930      	cbnz	r0, 80177ce <_svfiprintf_r+0x32>
 80177c0:	230c      	movs	r3, #12
 80177c2:	603b      	str	r3, [r7, #0]
 80177c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80177c8:	b01d      	add	sp, #116	@ 0x74
 80177ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177ce:	2340      	movs	r3, #64	@ 0x40
 80177d0:	616b      	str	r3, [r5, #20]
 80177d2:	2300      	movs	r3, #0
 80177d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80177d6:	2320      	movs	r3, #32
 80177d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80177dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80177e0:	2330      	movs	r3, #48	@ 0x30
 80177e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8017980 <_svfiprintf_r+0x1e4>
 80177e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80177ea:	f04f 0901 	mov.w	r9, #1
 80177ee:	4623      	mov	r3, r4
 80177f0:	469a      	mov	sl, r3
 80177f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80177f6:	b10a      	cbz	r2, 80177fc <_svfiprintf_r+0x60>
 80177f8:	2a25      	cmp	r2, #37	@ 0x25
 80177fa:	d1f9      	bne.n	80177f0 <_svfiprintf_r+0x54>
 80177fc:	ebba 0b04 	subs.w	fp, sl, r4
 8017800:	d00b      	beq.n	801781a <_svfiprintf_r+0x7e>
 8017802:	465b      	mov	r3, fp
 8017804:	4622      	mov	r2, r4
 8017806:	4629      	mov	r1, r5
 8017808:	4638      	mov	r0, r7
 801780a:	f7ff ff6b 	bl	80176e4 <__ssputs_r>
 801780e:	3001      	adds	r0, #1
 8017810:	f000 80a7 	beq.w	8017962 <_svfiprintf_r+0x1c6>
 8017814:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017816:	445a      	add	r2, fp
 8017818:	9209      	str	r2, [sp, #36]	@ 0x24
 801781a:	f89a 3000 	ldrb.w	r3, [sl]
 801781e:	2b00      	cmp	r3, #0
 8017820:	f000 809f 	beq.w	8017962 <_svfiprintf_r+0x1c6>
 8017824:	2300      	movs	r3, #0
 8017826:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801782a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801782e:	f10a 0a01 	add.w	sl, sl, #1
 8017832:	9304      	str	r3, [sp, #16]
 8017834:	9307      	str	r3, [sp, #28]
 8017836:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801783a:	931a      	str	r3, [sp, #104]	@ 0x68
 801783c:	4654      	mov	r4, sl
 801783e:	2205      	movs	r2, #5
 8017840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017844:	484e      	ldr	r0, [pc, #312]	@ (8017980 <_svfiprintf_r+0x1e4>)
 8017846:	f7e8 fd4b 	bl	80002e0 <memchr>
 801784a:	9a04      	ldr	r2, [sp, #16]
 801784c:	b9d8      	cbnz	r0, 8017886 <_svfiprintf_r+0xea>
 801784e:	06d0      	lsls	r0, r2, #27
 8017850:	bf44      	itt	mi
 8017852:	2320      	movmi	r3, #32
 8017854:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017858:	0711      	lsls	r1, r2, #28
 801785a:	bf44      	itt	mi
 801785c:	232b      	movmi	r3, #43	@ 0x2b
 801785e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017862:	f89a 3000 	ldrb.w	r3, [sl]
 8017866:	2b2a      	cmp	r3, #42	@ 0x2a
 8017868:	d015      	beq.n	8017896 <_svfiprintf_r+0xfa>
 801786a:	9a07      	ldr	r2, [sp, #28]
 801786c:	4654      	mov	r4, sl
 801786e:	2000      	movs	r0, #0
 8017870:	f04f 0c0a 	mov.w	ip, #10
 8017874:	4621      	mov	r1, r4
 8017876:	f811 3b01 	ldrb.w	r3, [r1], #1
 801787a:	3b30      	subs	r3, #48	@ 0x30
 801787c:	2b09      	cmp	r3, #9
 801787e:	d94b      	bls.n	8017918 <_svfiprintf_r+0x17c>
 8017880:	b1b0      	cbz	r0, 80178b0 <_svfiprintf_r+0x114>
 8017882:	9207      	str	r2, [sp, #28]
 8017884:	e014      	b.n	80178b0 <_svfiprintf_r+0x114>
 8017886:	eba0 0308 	sub.w	r3, r0, r8
 801788a:	fa09 f303 	lsl.w	r3, r9, r3
 801788e:	4313      	orrs	r3, r2
 8017890:	9304      	str	r3, [sp, #16]
 8017892:	46a2      	mov	sl, r4
 8017894:	e7d2      	b.n	801783c <_svfiprintf_r+0xa0>
 8017896:	9b03      	ldr	r3, [sp, #12]
 8017898:	1d19      	adds	r1, r3, #4
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	9103      	str	r1, [sp, #12]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	bfbb      	ittet	lt
 80178a2:	425b      	neglt	r3, r3
 80178a4:	f042 0202 	orrlt.w	r2, r2, #2
 80178a8:	9307      	strge	r3, [sp, #28]
 80178aa:	9307      	strlt	r3, [sp, #28]
 80178ac:	bfb8      	it	lt
 80178ae:	9204      	strlt	r2, [sp, #16]
 80178b0:	7823      	ldrb	r3, [r4, #0]
 80178b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80178b4:	d10a      	bne.n	80178cc <_svfiprintf_r+0x130>
 80178b6:	7863      	ldrb	r3, [r4, #1]
 80178b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80178ba:	d132      	bne.n	8017922 <_svfiprintf_r+0x186>
 80178bc:	9b03      	ldr	r3, [sp, #12]
 80178be:	1d1a      	adds	r2, r3, #4
 80178c0:	681b      	ldr	r3, [r3, #0]
 80178c2:	9203      	str	r2, [sp, #12]
 80178c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80178c8:	3402      	adds	r4, #2
 80178ca:	9305      	str	r3, [sp, #20]
 80178cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017990 <_svfiprintf_r+0x1f4>
 80178d0:	7821      	ldrb	r1, [r4, #0]
 80178d2:	2203      	movs	r2, #3
 80178d4:	4650      	mov	r0, sl
 80178d6:	f7e8 fd03 	bl	80002e0 <memchr>
 80178da:	b138      	cbz	r0, 80178ec <_svfiprintf_r+0x150>
 80178dc:	9b04      	ldr	r3, [sp, #16]
 80178de:	eba0 000a 	sub.w	r0, r0, sl
 80178e2:	2240      	movs	r2, #64	@ 0x40
 80178e4:	4082      	lsls	r2, r0
 80178e6:	4313      	orrs	r3, r2
 80178e8:	3401      	adds	r4, #1
 80178ea:	9304      	str	r3, [sp, #16]
 80178ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178f0:	4824      	ldr	r0, [pc, #144]	@ (8017984 <_svfiprintf_r+0x1e8>)
 80178f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80178f6:	2206      	movs	r2, #6
 80178f8:	f7e8 fcf2 	bl	80002e0 <memchr>
 80178fc:	2800      	cmp	r0, #0
 80178fe:	d036      	beq.n	801796e <_svfiprintf_r+0x1d2>
 8017900:	4b21      	ldr	r3, [pc, #132]	@ (8017988 <_svfiprintf_r+0x1ec>)
 8017902:	bb1b      	cbnz	r3, 801794c <_svfiprintf_r+0x1b0>
 8017904:	9b03      	ldr	r3, [sp, #12]
 8017906:	3307      	adds	r3, #7
 8017908:	f023 0307 	bic.w	r3, r3, #7
 801790c:	3308      	adds	r3, #8
 801790e:	9303      	str	r3, [sp, #12]
 8017910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017912:	4433      	add	r3, r6
 8017914:	9309      	str	r3, [sp, #36]	@ 0x24
 8017916:	e76a      	b.n	80177ee <_svfiprintf_r+0x52>
 8017918:	fb0c 3202 	mla	r2, ip, r2, r3
 801791c:	460c      	mov	r4, r1
 801791e:	2001      	movs	r0, #1
 8017920:	e7a8      	b.n	8017874 <_svfiprintf_r+0xd8>
 8017922:	2300      	movs	r3, #0
 8017924:	3401      	adds	r4, #1
 8017926:	9305      	str	r3, [sp, #20]
 8017928:	4619      	mov	r1, r3
 801792a:	f04f 0c0a 	mov.w	ip, #10
 801792e:	4620      	mov	r0, r4
 8017930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017934:	3a30      	subs	r2, #48	@ 0x30
 8017936:	2a09      	cmp	r2, #9
 8017938:	d903      	bls.n	8017942 <_svfiprintf_r+0x1a6>
 801793a:	2b00      	cmp	r3, #0
 801793c:	d0c6      	beq.n	80178cc <_svfiprintf_r+0x130>
 801793e:	9105      	str	r1, [sp, #20]
 8017940:	e7c4      	b.n	80178cc <_svfiprintf_r+0x130>
 8017942:	fb0c 2101 	mla	r1, ip, r1, r2
 8017946:	4604      	mov	r4, r0
 8017948:	2301      	movs	r3, #1
 801794a:	e7f0      	b.n	801792e <_svfiprintf_r+0x192>
 801794c:	ab03      	add	r3, sp, #12
 801794e:	9300      	str	r3, [sp, #0]
 8017950:	462a      	mov	r2, r5
 8017952:	4b0e      	ldr	r3, [pc, #56]	@ (801798c <_svfiprintf_r+0x1f0>)
 8017954:	a904      	add	r1, sp, #16
 8017956:	4638      	mov	r0, r7
 8017958:	f7fd ffba 	bl	80158d0 <_printf_float>
 801795c:	1c42      	adds	r2, r0, #1
 801795e:	4606      	mov	r6, r0
 8017960:	d1d6      	bne.n	8017910 <_svfiprintf_r+0x174>
 8017962:	89ab      	ldrh	r3, [r5, #12]
 8017964:	065b      	lsls	r3, r3, #25
 8017966:	f53f af2d 	bmi.w	80177c4 <_svfiprintf_r+0x28>
 801796a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801796c:	e72c      	b.n	80177c8 <_svfiprintf_r+0x2c>
 801796e:	ab03      	add	r3, sp, #12
 8017970:	9300      	str	r3, [sp, #0]
 8017972:	462a      	mov	r2, r5
 8017974:	4b05      	ldr	r3, [pc, #20]	@ (801798c <_svfiprintf_r+0x1f0>)
 8017976:	a904      	add	r1, sp, #16
 8017978:	4638      	mov	r0, r7
 801797a:	f7fe fa31 	bl	8015de0 <_printf_i>
 801797e:	e7ed      	b.n	801795c <_svfiprintf_r+0x1c0>
 8017980:	0801942e 	.word	0x0801942e
 8017984:	08019438 	.word	0x08019438
 8017988:	080158d1 	.word	0x080158d1
 801798c:	080176e5 	.word	0x080176e5
 8017990:	08019434 	.word	0x08019434

08017994 <__sflush_r>:
 8017994:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801799c:	0716      	lsls	r6, r2, #28
 801799e:	4605      	mov	r5, r0
 80179a0:	460c      	mov	r4, r1
 80179a2:	d454      	bmi.n	8017a4e <__sflush_r+0xba>
 80179a4:	684b      	ldr	r3, [r1, #4]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	dc02      	bgt.n	80179b0 <__sflush_r+0x1c>
 80179aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	dd48      	ble.n	8017a42 <__sflush_r+0xae>
 80179b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80179b2:	2e00      	cmp	r6, #0
 80179b4:	d045      	beq.n	8017a42 <__sflush_r+0xae>
 80179b6:	2300      	movs	r3, #0
 80179b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80179bc:	682f      	ldr	r7, [r5, #0]
 80179be:	6a21      	ldr	r1, [r4, #32]
 80179c0:	602b      	str	r3, [r5, #0]
 80179c2:	d030      	beq.n	8017a26 <__sflush_r+0x92>
 80179c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80179c6:	89a3      	ldrh	r3, [r4, #12]
 80179c8:	0759      	lsls	r1, r3, #29
 80179ca:	d505      	bpl.n	80179d8 <__sflush_r+0x44>
 80179cc:	6863      	ldr	r3, [r4, #4]
 80179ce:	1ad2      	subs	r2, r2, r3
 80179d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80179d2:	b10b      	cbz	r3, 80179d8 <__sflush_r+0x44>
 80179d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80179d6:	1ad2      	subs	r2, r2, r3
 80179d8:	2300      	movs	r3, #0
 80179da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80179dc:	6a21      	ldr	r1, [r4, #32]
 80179de:	4628      	mov	r0, r5
 80179e0:	47b0      	blx	r6
 80179e2:	1c43      	adds	r3, r0, #1
 80179e4:	89a3      	ldrh	r3, [r4, #12]
 80179e6:	d106      	bne.n	80179f6 <__sflush_r+0x62>
 80179e8:	6829      	ldr	r1, [r5, #0]
 80179ea:	291d      	cmp	r1, #29
 80179ec:	d82b      	bhi.n	8017a46 <__sflush_r+0xb2>
 80179ee:	4a2a      	ldr	r2, [pc, #168]	@ (8017a98 <__sflush_r+0x104>)
 80179f0:	40ca      	lsrs	r2, r1
 80179f2:	07d6      	lsls	r6, r2, #31
 80179f4:	d527      	bpl.n	8017a46 <__sflush_r+0xb2>
 80179f6:	2200      	movs	r2, #0
 80179f8:	6062      	str	r2, [r4, #4]
 80179fa:	04d9      	lsls	r1, r3, #19
 80179fc:	6922      	ldr	r2, [r4, #16]
 80179fe:	6022      	str	r2, [r4, #0]
 8017a00:	d504      	bpl.n	8017a0c <__sflush_r+0x78>
 8017a02:	1c42      	adds	r2, r0, #1
 8017a04:	d101      	bne.n	8017a0a <__sflush_r+0x76>
 8017a06:	682b      	ldr	r3, [r5, #0]
 8017a08:	b903      	cbnz	r3, 8017a0c <__sflush_r+0x78>
 8017a0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8017a0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017a0e:	602f      	str	r7, [r5, #0]
 8017a10:	b1b9      	cbz	r1, 8017a42 <__sflush_r+0xae>
 8017a12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017a16:	4299      	cmp	r1, r3
 8017a18:	d002      	beq.n	8017a20 <__sflush_r+0x8c>
 8017a1a:	4628      	mov	r0, r5
 8017a1c:	f7ff fa9e 	bl	8016f5c <_free_r>
 8017a20:	2300      	movs	r3, #0
 8017a22:	6363      	str	r3, [r4, #52]	@ 0x34
 8017a24:	e00d      	b.n	8017a42 <__sflush_r+0xae>
 8017a26:	2301      	movs	r3, #1
 8017a28:	4628      	mov	r0, r5
 8017a2a:	47b0      	blx	r6
 8017a2c:	4602      	mov	r2, r0
 8017a2e:	1c50      	adds	r0, r2, #1
 8017a30:	d1c9      	bne.n	80179c6 <__sflush_r+0x32>
 8017a32:	682b      	ldr	r3, [r5, #0]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d0c6      	beq.n	80179c6 <__sflush_r+0x32>
 8017a38:	2b1d      	cmp	r3, #29
 8017a3a:	d001      	beq.n	8017a40 <__sflush_r+0xac>
 8017a3c:	2b16      	cmp	r3, #22
 8017a3e:	d11e      	bne.n	8017a7e <__sflush_r+0xea>
 8017a40:	602f      	str	r7, [r5, #0]
 8017a42:	2000      	movs	r0, #0
 8017a44:	e022      	b.n	8017a8c <__sflush_r+0xf8>
 8017a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a4a:	b21b      	sxth	r3, r3
 8017a4c:	e01b      	b.n	8017a86 <__sflush_r+0xf2>
 8017a4e:	690f      	ldr	r7, [r1, #16]
 8017a50:	2f00      	cmp	r7, #0
 8017a52:	d0f6      	beq.n	8017a42 <__sflush_r+0xae>
 8017a54:	0793      	lsls	r3, r2, #30
 8017a56:	680e      	ldr	r6, [r1, #0]
 8017a58:	bf08      	it	eq
 8017a5a:	694b      	ldreq	r3, [r1, #20]
 8017a5c:	600f      	str	r7, [r1, #0]
 8017a5e:	bf18      	it	ne
 8017a60:	2300      	movne	r3, #0
 8017a62:	eba6 0807 	sub.w	r8, r6, r7
 8017a66:	608b      	str	r3, [r1, #8]
 8017a68:	f1b8 0f00 	cmp.w	r8, #0
 8017a6c:	dde9      	ble.n	8017a42 <__sflush_r+0xae>
 8017a6e:	6a21      	ldr	r1, [r4, #32]
 8017a70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017a72:	4643      	mov	r3, r8
 8017a74:	463a      	mov	r2, r7
 8017a76:	4628      	mov	r0, r5
 8017a78:	47b0      	blx	r6
 8017a7a:	2800      	cmp	r0, #0
 8017a7c:	dc08      	bgt.n	8017a90 <__sflush_r+0xfc>
 8017a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a86:	81a3      	strh	r3, [r4, #12]
 8017a88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a90:	4407      	add	r7, r0
 8017a92:	eba8 0800 	sub.w	r8, r8, r0
 8017a96:	e7e7      	b.n	8017a68 <__sflush_r+0xd4>
 8017a98:	20400001 	.word	0x20400001

08017a9c <_fflush_r>:
 8017a9c:	b538      	push	{r3, r4, r5, lr}
 8017a9e:	690b      	ldr	r3, [r1, #16]
 8017aa0:	4605      	mov	r5, r0
 8017aa2:	460c      	mov	r4, r1
 8017aa4:	b913      	cbnz	r3, 8017aac <_fflush_r+0x10>
 8017aa6:	2500      	movs	r5, #0
 8017aa8:	4628      	mov	r0, r5
 8017aaa:	bd38      	pop	{r3, r4, r5, pc}
 8017aac:	b118      	cbz	r0, 8017ab6 <_fflush_r+0x1a>
 8017aae:	6a03      	ldr	r3, [r0, #32]
 8017ab0:	b90b      	cbnz	r3, 8017ab6 <_fflush_r+0x1a>
 8017ab2:	f7fe fb3f 	bl	8016134 <__sinit>
 8017ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d0f3      	beq.n	8017aa6 <_fflush_r+0xa>
 8017abe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017ac0:	07d0      	lsls	r0, r2, #31
 8017ac2:	d404      	bmi.n	8017ace <_fflush_r+0x32>
 8017ac4:	0599      	lsls	r1, r3, #22
 8017ac6:	d402      	bmi.n	8017ace <_fflush_r+0x32>
 8017ac8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017aca:	f7fe fc5c 	bl	8016386 <__retarget_lock_acquire_recursive>
 8017ace:	4628      	mov	r0, r5
 8017ad0:	4621      	mov	r1, r4
 8017ad2:	f7ff ff5f 	bl	8017994 <__sflush_r>
 8017ad6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017ad8:	07da      	lsls	r2, r3, #31
 8017ada:	4605      	mov	r5, r0
 8017adc:	d4e4      	bmi.n	8017aa8 <_fflush_r+0xc>
 8017ade:	89a3      	ldrh	r3, [r4, #12]
 8017ae0:	059b      	lsls	r3, r3, #22
 8017ae2:	d4e1      	bmi.n	8017aa8 <_fflush_r+0xc>
 8017ae4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ae6:	f7fe fc4f 	bl	8016388 <__retarget_lock_release_recursive>
 8017aea:	e7dd      	b.n	8017aa8 <_fflush_r+0xc>

08017aec <memmove>:
 8017aec:	4288      	cmp	r0, r1
 8017aee:	b510      	push	{r4, lr}
 8017af0:	eb01 0402 	add.w	r4, r1, r2
 8017af4:	d902      	bls.n	8017afc <memmove+0x10>
 8017af6:	4284      	cmp	r4, r0
 8017af8:	4623      	mov	r3, r4
 8017afa:	d807      	bhi.n	8017b0c <memmove+0x20>
 8017afc:	1e43      	subs	r3, r0, #1
 8017afe:	42a1      	cmp	r1, r4
 8017b00:	d008      	beq.n	8017b14 <memmove+0x28>
 8017b02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017b0a:	e7f8      	b.n	8017afe <memmove+0x12>
 8017b0c:	4402      	add	r2, r0
 8017b0e:	4601      	mov	r1, r0
 8017b10:	428a      	cmp	r2, r1
 8017b12:	d100      	bne.n	8017b16 <memmove+0x2a>
 8017b14:	bd10      	pop	{r4, pc}
 8017b16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017b1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017b1e:	e7f7      	b.n	8017b10 <memmove+0x24>

08017b20 <memcpy>:
 8017b20:	440a      	add	r2, r1
 8017b22:	4291      	cmp	r1, r2
 8017b24:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017b28:	d100      	bne.n	8017b2c <memcpy+0xc>
 8017b2a:	4770      	bx	lr
 8017b2c:	b510      	push	{r4, lr}
 8017b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017b32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017b36:	4291      	cmp	r1, r2
 8017b38:	d1f9      	bne.n	8017b2e <memcpy+0xe>
 8017b3a:	bd10      	pop	{r4, pc}

08017b3c <__assert_func>:
 8017b3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017b3e:	4614      	mov	r4, r2
 8017b40:	461a      	mov	r2, r3
 8017b42:	4b09      	ldr	r3, [pc, #36]	@ (8017b68 <__assert_func+0x2c>)
 8017b44:	681b      	ldr	r3, [r3, #0]
 8017b46:	4605      	mov	r5, r0
 8017b48:	68d8      	ldr	r0, [r3, #12]
 8017b4a:	b14c      	cbz	r4, 8017b60 <__assert_func+0x24>
 8017b4c:	4b07      	ldr	r3, [pc, #28]	@ (8017b6c <__assert_func+0x30>)
 8017b4e:	9100      	str	r1, [sp, #0]
 8017b50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017b54:	4906      	ldr	r1, [pc, #24]	@ (8017b70 <__assert_func+0x34>)
 8017b56:	462b      	mov	r3, r5
 8017b58:	f000 f870 	bl	8017c3c <fiprintf>
 8017b5c:	f000 f880 	bl	8017c60 <abort>
 8017b60:	4b04      	ldr	r3, [pc, #16]	@ (8017b74 <__assert_func+0x38>)
 8017b62:	461c      	mov	r4, r3
 8017b64:	e7f3      	b.n	8017b4e <__assert_func+0x12>
 8017b66:	bf00      	nop
 8017b68:	24000118 	.word	0x24000118
 8017b6c:	08019449 	.word	0x08019449
 8017b70:	08019456 	.word	0x08019456
 8017b74:	08019484 	.word	0x08019484

08017b78 <_calloc_r>:
 8017b78:	b570      	push	{r4, r5, r6, lr}
 8017b7a:	fba1 5402 	umull	r5, r4, r1, r2
 8017b7e:	b934      	cbnz	r4, 8017b8e <_calloc_r+0x16>
 8017b80:	4629      	mov	r1, r5
 8017b82:	f7fd fd89 	bl	8015698 <_malloc_r>
 8017b86:	4606      	mov	r6, r0
 8017b88:	b928      	cbnz	r0, 8017b96 <_calloc_r+0x1e>
 8017b8a:	4630      	mov	r0, r6
 8017b8c:	bd70      	pop	{r4, r5, r6, pc}
 8017b8e:	220c      	movs	r2, #12
 8017b90:	6002      	str	r2, [r0, #0]
 8017b92:	2600      	movs	r6, #0
 8017b94:	e7f9      	b.n	8017b8a <_calloc_r+0x12>
 8017b96:	462a      	mov	r2, r5
 8017b98:	4621      	mov	r1, r4
 8017b9a:	f7fe fb66 	bl	801626a <memset>
 8017b9e:	e7f4      	b.n	8017b8a <_calloc_r+0x12>

08017ba0 <__ascii_mbtowc>:
 8017ba0:	b082      	sub	sp, #8
 8017ba2:	b901      	cbnz	r1, 8017ba6 <__ascii_mbtowc+0x6>
 8017ba4:	a901      	add	r1, sp, #4
 8017ba6:	b142      	cbz	r2, 8017bba <__ascii_mbtowc+0x1a>
 8017ba8:	b14b      	cbz	r3, 8017bbe <__ascii_mbtowc+0x1e>
 8017baa:	7813      	ldrb	r3, [r2, #0]
 8017bac:	600b      	str	r3, [r1, #0]
 8017bae:	7812      	ldrb	r2, [r2, #0]
 8017bb0:	1e10      	subs	r0, r2, #0
 8017bb2:	bf18      	it	ne
 8017bb4:	2001      	movne	r0, #1
 8017bb6:	b002      	add	sp, #8
 8017bb8:	4770      	bx	lr
 8017bba:	4610      	mov	r0, r2
 8017bbc:	e7fb      	b.n	8017bb6 <__ascii_mbtowc+0x16>
 8017bbe:	f06f 0001 	mvn.w	r0, #1
 8017bc2:	e7f8      	b.n	8017bb6 <__ascii_mbtowc+0x16>

08017bc4 <_realloc_r>:
 8017bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bc8:	4607      	mov	r7, r0
 8017bca:	4614      	mov	r4, r2
 8017bcc:	460d      	mov	r5, r1
 8017bce:	b921      	cbnz	r1, 8017bda <_realloc_r+0x16>
 8017bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017bd4:	4611      	mov	r1, r2
 8017bd6:	f7fd bd5f 	b.w	8015698 <_malloc_r>
 8017bda:	b92a      	cbnz	r2, 8017be8 <_realloc_r+0x24>
 8017bdc:	f7ff f9be 	bl	8016f5c <_free_r>
 8017be0:	4625      	mov	r5, r4
 8017be2:	4628      	mov	r0, r5
 8017be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017be8:	f000 f841 	bl	8017c6e <_malloc_usable_size_r>
 8017bec:	4284      	cmp	r4, r0
 8017bee:	4606      	mov	r6, r0
 8017bf0:	d802      	bhi.n	8017bf8 <_realloc_r+0x34>
 8017bf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017bf6:	d8f4      	bhi.n	8017be2 <_realloc_r+0x1e>
 8017bf8:	4621      	mov	r1, r4
 8017bfa:	4638      	mov	r0, r7
 8017bfc:	f7fd fd4c 	bl	8015698 <_malloc_r>
 8017c00:	4680      	mov	r8, r0
 8017c02:	b908      	cbnz	r0, 8017c08 <_realloc_r+0x44>
 8017c04:	4645      	mov	r5, r8
 8017c06:	e7ec      	b.n	8017be2 <_realloc_r+0x1e>
 8017c08:	42b4      	cmp	r4, r6
 8017c0a:	4622      	mov	r2, r4
 8017c0c:	4629      	mov	r1, r5
 8017c0e:	bf28      	it	cs
 8017c10:	4632      	movcs	r2, r6
 8017c12:	f7ff ff85 	bl	8017b20 <memcpy>
 8017c16:	4629      	mov	r1, r5
 8017c18:	4638      	mov	r0, r7
 8017c1a:	f7ff f99f 	bl	8016f5c <_free_r>
 8017c1e:	e7f1      	b.n	8017c04 <_realloc_r+0x40>

08017c20 <__ascii_wctomb>:
 8017c20:	4603      	mov	r3, r0
 8017c22:	4608      	mov	r0, r1
 8017c24:	b141      	cbz	r1, 8017c38 <__ascii_wctomb+0x18>
 8017c26:	2aff      	cmp	r2, #255	@ 0xff
 8017c28:	d904      	bls.n	8017c34 <__ascii_wctomb+0x14>
 8017c2a:	228a      	movs	r2, #138	@ 0x8a
 8017c2c:	601a      	str	r2, [r3, #0]
 8017c2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017c32:	4770      	bx	lr
 8017c34:	700a      	strb	r2, [r1, #0]
 8017c36:	2001      	movs	r0, #1
 8017c38:	4770      	bx	lr
	...

08017c3c <fiprintf>:
 8017c3c:	b40e      	push	{r1, r2, r3}
 8017c3e:	b503      	push	{r0, r1, lr}
 8017c40:	4601      	mov	r1, r0
 8017c42:	ab03      	add	r3, sp, #12
 8017c44:	4805      	ldr	r0, [pc, #20]	@ (8017c5c <fiprintf+0x20>)
 8017c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c4a:	6800      	ldr	r0, [r0, #0]
 8017c4c:	9301      	str	r3, [sp, #4]
 8017c4e:	f000 f83f 	bl	8017cd0 <_vfiprintf_r>
 8017c52:	b002      	add	sp, #8
 8017c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c58:	b003      	add	sp, #12
 8017c5a:	4770      	bx	lr
 8017c5c:	24000118 	.word	0x24000118

08017c60 <abort>:
 8017c60:	b508      	push	{r3, lr}
 8017c62:	2006      	movs	r0, #6
 8017c64:	f000 fa08 	bl	8018078 <raise>
 8017c68:	2001      	movs	r0, #1
 8017c6a:	f7ea faad 	bl	80021c8 <_exit>

08017c6e <_malloc_usable_size_r>:
 8017c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c72:	1f18      	subs	r0, r3, #4
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	bfbc      	itt	lt
 8017c78:	580b      	ldrlt	r3, [r1, r0]
 8017c7a:	18c0      	addlt	r0, r0, r3
 8017c7c:	4770      	bx	lr

08017c7e <__sfputc_r>:
 8017c7e:	6893      	ldr	r3, [r2, #8]
 8017c80:	3b01      	subs	r3, #1
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	b410      	push	{r4}
 8017c86:	6093      	str	r3, [r2, #8]
 8017c88:	da08      	bge.n	8017c9c <__sfputc_r+0x1e>
 8017c8a:	6994      	ldr	r4, [r2, #24]
 8017c8c:	42a3      	cmp	r3, r4
 8017c8e:	db01      	blt.n	8017c94 <__sfputc_r+0x16>
 8017c90:	290a      	cmp	r1, #10
 8017c92:	d103      	bne.n	8017c9c <__sfputc_r+0x1e>
 8017c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c98:	f000 b932 	b.w	8017f00 <__swbuf_r>
 8017c9c:	6813      	ldr	r3, [r2, #0]
 8017c9e:	1c58      	adds	r0, r3, #1
 8017ca0:	6010      	str	r0, [r2, #0]
 8017ca2:	7019      	strb	r1, [r3, #0]
 8017ca4:	4608      	mov	r0, r1
 8017ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017caa:	4770      	bx	lr

08017cac <__sfputs_r>:
 8017cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cae:	4606      	mov	r6, r0
 8017cb0:	460f      	mov	r7, r1
 8017cb2:	4614      	mov	r4, r2
 8017cb4:	18d5      	adds	r5, r2, r3
 8017cb6:	42ac      	cmp	r4, r5
 8017cb8:	d101      	bne.n	8017cbe <__sfputs_r+0x12>
 8017cba:	2000      	movs	r0, #0
 8017cbc:	e007      	b.n	8017cce <__sfputs_r+0x22>
 8017cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017cc2:	463a      	mov	r2, r7
 8017cc4:	4630      	mov	r0, r6
 8017cc6:	f7ff ffda 	bl	8017c7e <__sfputc_r>
 8017cca:	1c43      	adds	r3, r0, #1
 8017ccc:	d1f3      	bne.n	8017cb6 <__sfputs_r+0xa>
 8017cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017cd0 <_vfiprintf_r>:
 8017cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cd4:	460d      	mov	r5, r1
 8017cd6:	b09d      	sub	sp, #116	@ 0x74
 8017cd8:	4614      	mov	r4, r2
 8017cda:	4698      	mov	r8, r3
 8017cdc:	4606      	mov	r6, r0
 8017cde:	b118      	cbz	r0, 8017ce8 <_vfiprintf_r+0x18>
 8017ce0:	6a03      	ldr	r3, [r0, #32]
 8017ce2:	b90b      	cbnz	r3, 8017ce8 <_vfiprintf_r+0x18>
 8017ce4:	f7fe fa26 	bl	8016134 <__sinit>
 8017ce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017cea:	07d9      	lsls	r1, r3, #31
 8017cec:	d405      	bmi.n	8017cfa <_vfiprintf_r+0x2a>
 8017cee:	89ab      	ldrh	r3, [r5, #12]
 8017cf0:	059a      	lsls	r2, r3, #22
 8017cf2:	d402      	bmi.n	8017cfa <_vfiprintf_r+0x2a>
 8017cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017cf6:	f7fe fb46 	bl	8016386 <__retarget_lock_acquire_recursive>
 8017cfa:	89ab      	ldrh	r3, [r5, #12]
 8017cfc:	071b      	lsls	r3, r3, #28
 8017cfe:	d501      	bpl.n	8017d04 <_vfiprintf_r+0x34>
 8017d00:	692b      	ldr	r3, [r5, #16]
 8017d02:	b99b      	cbnz	r3, 8017d2c <_vfiprintf_r+0x5c>
 8017d04:	4629      	mov	r1, r5
 8017d06:	4630      	mov	r0, r6
 8017d08:	f000 f938 	bl	8017f7c <__swsetup_r>
 8017d0c:	b170      	cbz	r0, 8017d2c <_vfiprintf_r+0x5c>
 8017d0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017d10:	07dc      	lsls	r4, r3, #31
 8017d12:	d504      	bpl.n	8017d1e <_vfiprintf_r+0x4e>
 8017d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017d18:	b01d      	add	sp, #116	@ 0x74
 8017d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d1e:	89ab      	ldrh	r3, [r5, #12]
 8017d20:	0598      	lsls	r0, r3, #22
 8017d22:	d4f7      	bmi.n	8017d14 <_vfiprintf_r+0x44>
 8017d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017d26:	f7fe fb2f 	bl	8016388 <__retarget_lock_release_recursive>
 8017d2a:	e7f3      	b.n	8017d14 <_vfiprintf_r+0x44>
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017d30:	2320      	movs	r3, #32
 8017d32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8017d3a:	2330      	movs	r3, #48	@ 0x30
 8017d3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017eec <_vfiprintf_r+0x21c>
 8017d40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017d44:	f04f 0901 	mov.w	r9, #1
 8017d48:	4623      	mov	r3, r4
 8017d4a:	469a      	mov	sl, r3
 8017d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d50:	b10a      	cbz	r2, 8017d56 <_vfiprintf_r+0x86>
 8017d52:	2a25      	cmp	r2, #37	@ 0x25
 8017d54:	d1f9      	bne.n	8017d4a <_vfiprintf_r+0x7a>
 8017d56:	ebba 0b04 	subs.w	fp, sl, r4
 8017d5a:	d00b      	beq.n	8017d74 <_vfiprintf_r+0xa4>
 8017d5c:	465b      	mov	r3, fp
 8017d5e:	4622      	mov	r2, r4
 8017d60:	4629      	mov	r1, r5
 8017d62:	4630      	mov	r0, r6
 8017d64:	f7ff ffa2 	bl	8017cac <__sfputs_r>
 8017d68:	3001      	adds	r0, #1
 8017d6a:	f000 80a7 	beq.w	8017ebc <_vfiprintf_r+0x1ec>
 8017d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017d70:	445a      	add	r2, fp
 8017d72:	9209      	str	r2, [sp, #36]	@ 0x24
 8017d74:	f89a 3000 	ldrb.w	r3, [sl]
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	f000 809f 	beq.w	8017ebc <_vfiprintf_r+0x1ec>
 8017d7e:	2300      	movs	r3, #0
 8017d80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d88:	f10a 0a01 	add.w	sl, sl, #1
 8017d8c:	9304      	str	r3, [sp, #16]
 8017d8e:	9307      	str	r3, [sp, #28]
 8017d90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017d94:	931a      	str	r3, [sp, #104]	@ 0x68
 8017d96:	4654      	mov	r4, sl
 8017d98:	2205      	movs	r2, #5
 8017d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d9e:	4853      	ldr	r0, [pc, #332]	@ (8017eec <_vfiprintf_r+0x21c>)
 8017da0:	f7e8 fa9e 	bl	80002e0 <memchr>
 8017da4:	9a04      	ldr	r2, [sp, #16]
 8017da6:	b9d8      	cbnz	r0, 8017de0 <_vfiprintf_r+0x110>
 8017da8:	06d1      	lsls	r1, r2, #27
 8017daa:	bf44      	itt	mi
 8017dac:	2320      	movmi	r3, #32
 8017dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017db2:	0713      	lsls	r3, r2, #28
 8017db4:	bf44      	itt	mi
 8017db6:	232b      	movmi	r3, #43	@ 0x2b
 8017db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8017dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8017dc2:	d015      	beq.n	8017df0 <_vfiprintf_r+0x120>
 8017dc4:	9a07      	ldr	r2, [sp, #28]
 8017dc6:	4654      	mov	r4, sl
 8017dc8:	2000      	movs	r0, #0
 8017dca:	f04f 0c0a 	mov.w	ip, #10
 8017dce:	4621      	mov	r1, r4
 8017dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017dd4:	3b30      	subs	r3, #48	@ 0x30
 8017dd6:	2b09      	cmp	r3, #9
 8017dd8:	d94b      	bls.n	8017e72 <_vfiprintf_r+0x1a2>
 8017dda:	b1b0      	cbz	r0, 8017e0a <_vfiprintf_r+0x13a>
 8017ddc:	9207      	str	r2, [sp, #28]
 8017dde:	e014      	b.n	8017e0a <_vfiprintf_r+0x13a>
 8017de0:	eba0 0308 	sub.w	r3, r0, r8
 8017de4:	fa09 f303 	lsl.w	r3, r9, r3
 8017de8:	4313      	orrs	r3, r2
 8017dea:	9304      	str	r3, [sp, #16]
 8017dec:	46a2      	mov	sl, r4
 8017dee:	e7d2      	b.n	8017d96 <_vfiprintf_r+0xc6>
 8017df0:	9b03      	ldr	r3, [sp, #12]
 8017df2:	1d19      	adds	r1, r3, #4
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	9103      	str	r1, [sp, #12]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	bfbb      	ittet	lt
 8017dfc:	425b      	neglt	r3, r3
 8017dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8017e02:	9307      	strge	r3, [sp, #28]
 8017e04:	9307      	strlt	r3, [sp, #28]
 8017e06:	bfb8      	it	lt
 8017e08:	9204      	strlt	r2, [sp, #16]
 8017e0a:	7823      	ldrb	r3, [r4, #0]
 8017e0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8017e0e:	d10a      	bne.n	8017e26 <_vfiprintf_r+0x156>
 8017e10:	7863      	ldrb	r3, [r4, #1]
 8017e12:	2b2a      	cmp	r3, #42	@ 0x2a
 8017e14:	d132      	bne.n	8017e7c <_vfiprintf_r+0x1ac>
 8017e16:	9b03      	ldr	r3, [sp, #12]
 8017e18:	1d1a      	adds	r2, r3, #4
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	9203      	str	r2, [sp, #12]
 8017e1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017e22:	3402      	adds	r4, #2
 8017e24:	9305      	str	r3, [sp, #20]
 8017e26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017efc <_vfiprintf_r+0x22c>
 8017e2a:	7821      	ldrb	r1, [r4, #0]
 8017e2c:	2203      	movs	r2, #3
 8017e2e:	4650      	mov	r0, sl
 8017e30:	f7e8 fa56 	bl	80002e0 <memchr>
 8017e34:	b138      	cbz	r0, 8017e46 <_vfiprintf_r+0x176>
 8017e36:	9b04      	ldr	r3, [sp, #16]
 8017e38:	eba0 000a 	sub.w	r0, r0, sl
 8017e3c:	2240      	movs	r2, #64	@ 0x40
 8017e3e:	4082      	lsls	r2, r0
 8017e40:	4313      	orrs	r3, r2
 8017e42:	3401      	adds	r4, #1
 8017e44:	9304      	str	r3, [sp, #16]
 8017e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e4a:	4829      	ldr	r0, [pc, #164]	@ (8017ef0 <_vfiprintf_r+0x220>)
 8017e4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017e50:	2206      	movs	r2, #6
 8017e52:	f7e8 fa45 	bl	80002e0 <memchr>
 8017e56:	2800      	cmp	r0, #0
 8017e58:	d03f      	beq.n	8017eda <_vfiprintf_r+0x20a>
 8017e5a:	4b26      	ldr	r3, [pc, #152]	@ (8017ef4 <_vfiprintf_r+0x224>)
 8017e5c:	bb1b      	cbnz	r3, 8017ea6 <_vfiprintf_r+0x1d6>
 8017e5e:	9b03      	ldr	r3, [sp, #12]
 8017e60:	3307      	adds	r3, #7
 8017e62:	f023 0307 	bic.w	r3, r3, #7
 8017e66:	3308      	adds	r3, #8
 8017e68:	9303      	str	r3, [sp, #12]
 8017e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e6c:	443b      	add	r3, r7
 8017e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e70:	e76a      	b.n	8017d48 <_vfiprintf_r+0x78>
 8017e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e76:	460c      	mov	r4, r1
 8017e78:	2001      	movs	r0, #1
 8017e7a:	e7a8      	b.n	8017dce <_vfiprintf_r+0xfe>
 8017e7c:	2300      	movs	r3, #0
 8017e7e:	3401      	adds	r4, #1
 8017e80:	9305      	str	r3, [sp, #20]
 8017e82:	4619      	mov	r1, r3
 8017e84:	f04f 0c0a 	mov.w	ip, #10
 8017e88:	4620      	mov	r0, r4
 8017e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e8e:	3a30      	subs	r2, #48	@ 0x30
 8017e90:	2a09      	cmp	r2, #9
 8017e92:	d903      	bls.n	8017e9c <_vfiprintf_r+0x1cc>
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d0c6      	beq.n	8017e26 <_vfiprintf_r+0x156>
 8017e98:	9105      	str	r1, [sp, #20]
 8017e9a:	e7c4      	b.n	8017e26 <_vfiprintf_r+0x156>
 8017e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8017ea0:	4604      	mov	r4, r0
 8017ea2:	2301      	movs	r3, #1
 8017ea4:	e7f0      	b.n	8017e88 <_vfiprintf_r+0x1b8>
 8017ea6:	ab03      	add	r3, sp, #12
 8017ea8:	9300      	str	r3, [sp, #0]
 8017eaa:	462a      	mov	r2, r5
 8017eac:	4b12      	ldr	r3, [pc, #72]	@ (8017ef8 <_vfiprintf_r+0x228>)
 8017eae:	a904      	add	r1, sp, #16
 8017eb0:	4630      	mov	r0, r6
 8017eb2:	f7fd fd0d 	bl	80158d0 <_printf_float>
 8017eb6:	4607      	mov	r7, r0
 8017eb8:	1c78      	adds	r0, r7, #1
 8017eba:	d1d6      	bne.n	8017e6a <_vfiprintf_r+0x19a>
 8017ebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017ebe:	07d9      	lsls	r1, r3, #31
 8017ec0:	d405      	bmi.n	8017ece <_vfiprintf_r+0x1fe>
 8017ec2:	89ab      	ldrh	r3, [r5, #12]
 8017ec4:	059a      	lsls	r2, r3, #22
 8017ec6:	d402      	bmi.n	8017ece <_vfiprintf_r+0x1fe>
 8017ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017eca:	f7fe fa5d 	bl	8016388 <__retarget_lock_release_recursive>
 8017ece:	89ab      	ldrh	r3, [r5, #12]
 8017ed0:	065b      	lsls	r3, r3, #25
 8017ed2:	f53f af1f 	bmi.w	8017d14 <_vfiprintf_r+0x44>
 8017ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017ed8:	e71e      	b.n	8017d18 <_vfiprintf_r+0x48>
 8017eda:	ab03      	add	r3, sp, #12
 8017edc:	9300      	str	r3, [sp, #0]
 8017ede:	462a      	mov	r2, r5
 8017ee0:	4b05      	ldr	r3, [pc, #20]	@ (8017ef8 <_vfiprintf_r+0x228>)
 8017ee2:	a904      	add	r1, sp, #16
 8017ee4:	4630      	mov	r0, r6
 8017ee6:	f7fd ff7b 	bl	8015de0 <_printf_i>
 8017eea:	e7e4      	b.n	8017eb6 <_vfiprintf_r+0x1e6>
 8017eec:	0801942e 	.word	0x0801942e
 8017ef0:	08019438 	.word	0x08019438
 8017ef4:	080158d1 	.word	0x080158d1
 8017ef8:	08017cad 	.word	0x08017cad
 8017efc:	08019434 	.word	0x08019434

08017f00 <__swbuf_r>:
 8017f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f02:	460e      	mov	r6, r1
 8017f04:	4614      	mov	r4, r2
 8017f06:	4605      	mov	r5, r0
 8017f08:	b118      	cbz	r0, 8017f12 <__swbuf_r+0x12>
 8017f0a:	6a03      	ldr	r3, [r0, #32]
 8017f0c:	b90b      	cbnz	r3, 8017f12 <__swbuf_r+0x12>
 8017f0e:	f7fe f911 	bl	8016134 <__sinit>
 8017f12:	69a3      	ldr	r3, [r4, #24]
 8017f14:	60a3      	str	r3, [r4, #8]
 8017f16:	89a3      	ldrh	r3, [r4, #12]
 8017f18:	071a      	lsls	r2, r3, #28
 8017f1a:	d501      	bpl.n	8017f20 <__swbuf_r+0x20>
 8017f1c:	6923      	ldr	r3, [r4, #16]
 8017f1e:	b943      	cbnz	r3, 8017f32 <__swbuf_r+0x32>
 8017f20:	4621      	mov	r1, r4
 8017f22:	4628      	mov	r0, r5
 8017f24:	f000 f82a 	bl	8017f7c <__swsetup_r>
 8017f28:	b118      	cbz	r0, 8017f32 <__swbuf_r+0x32>
 8017f2a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017f2e:	4638      	mov	r0, r7
 8017f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f32:	6823      	ldr	r3, [r4, #0]
 8017f34:	6922      	ldr	r2, [r4, #16]
 8017f36:	1a98      	subs	r0, r3, r2
 8017f38:	6963      	ldr	r3, [r4, #20]
 8017f3a:	b2f6      	uxtb	r6, r6
 8017f3c:	4283      	cmp	r3, r0
 8017f3e:	4637      	mov	r7, r6
 8017f40:	dc05      	bgt.n	8017f4e <__swbuf_r+0x4e>
 8017f42:	4621      	mov	r1, r4
 8017f44:	4628      	mov	r0, r5
 8017f46:	f7ff fda9 	bl	8017a9c <_fflush_r>
 8017f4a:	2800      	cmp	r0, #0
 8017f4c:	d1ed      	bne.n	8017f2a <__swbuf_r+0x2a>
 8017f4e:	68a3      	ldr	r3, [r4, #8]
 8017f50:	3b01      	subs	r3, #1
 8017f52:	60a3      	str	r3, [r4, #8]
 8017f54:	6823      	ldr	r3, [r4, #0]
 8017f56:	1c5a      	adds	r2, r3, #1
 8017f58:	6022      	str	r2, [r4, #0]
 8017f5a:	701e      	strb	r6, [r3, #0]
 8017f5c:	6962      	ldr	r2, [r4, #20]
 8017f5e:	1c43      	adds	r3, r0, #1
 8017f60:	429a      	cmp	r2, r3
 8017f62:	d004      	beq.n	8017f6e <__swbuf_r+0x6e>
 8017f64:	89a3      	ldrh	r3, [r4, #12]
 8017f66:	07db      	lsls	r3, r3, #31
 8017f68:	d5e1      	bpl.n	8017f2e <__swbuf_r+0x2e>
 8017f6a:	2e0a      	cmp	r6, #10
 8017f6c:	d1df      	bne.n	8017f2e <__swbuf_r+0x2e>
 8017f6e:	4621      	mov	r1, r4
 8017f70:	4628      	mov	r0, r5
 8017f72:	f7ff fd93 	bl	8017a9c <_fflush_r>
 8017f76:	2800      	cmp	r0, #0
 8017f78:	d0d9      	beq.n	8017f2e <__swbuf_r+0x2e>
 8017f7a:	e7d6      	b.n	8017f2a <__swbuf_r+0x2a>

08017f7c <__swsetup_r>:
 8017f7c:	b538      	push	{r3, r4, r5, lr}
 8017f7e:	4b29      	ldr	r3, [pc, #164]	@ (8018024 <__swsetup_r+0xa8>)
 8017f80:	4605      	mov	r5, r0
 8017f82:	6818      	ldr	r0, [r3, #0]
 8017f84:	460c      	mov	r4, r1
 8017f86:	b118      	cbz	r0, 8017f90 <__swsetup_r+0x14>
 8017f88:	6a03      	ldr	r3, [r0, #32]
 8017f8a:	b90b      	cbnz	r3, 8017f90 <__swsetup_r+0x14>
 8017f8c:	f7fe f8d2 	bl	8016134 <__sinit>
 8017f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f94:	0719      	lsls	r1, r3, #28
 8017f96:	d422      	bmi.n	8017fde <__swsetup_r+0x62>
 8017f98:	06da      	lsls	r2, r3, #27
 8017f9a:	d407      	bmi.n	8017fac <__swsetup_r+0x30>
 8017f9c:	2209      	movs	r2, #9
 8017f9e:	602a      	str	r2, [r5, #0]
 8017fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017fa4:	81a3      	strh	r3, [r4, #12]
 8017fa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017faa:	e033      	b.n	8018014 <__swsetup_r+0x98>
 8017fac:	0758      	lsls	r0, r3, #29
 8017fae:	d512      	bpl.n	8017fd6 <__swsetup_r+0x5a>
 8017fb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017fb2:	b141      	cbz	r1, 8017fc6 <__swsetup_r+0x4a>
 8017fb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017fb8:	4299      	cmp	r1, r3
 8017fba:	d002      	beq.n	8017fc2 <__swsetup_r+0x46>
 8017fbc:	4628      	mov	r0, r5
 8017fbe:	f7fe ffcd 	bl	8016f5c <_free_r>
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8017fc6:	89a3      	ldrh	r3, [r4, #12]
 8017fc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017fcc:	81a3      	strh	r3, [r4, #12]
 8017fce:	2300      	movs	r3, #0
 8017fd0:	6063      	str	r3, [r4, #4]
 8017fd2:	6923      	ldr	r3, [r4, #16]
 8017fd4:	6023      	str	r3, [r4, #0]
 8017fd6:	89a3      	ldrh	r3, [r4, #12]
 8017fd8:	f043 0308 	orr.w	r3, r3, #8
 8017fdc:	81a3      	strh	r3, [r4, #12]
 8017fde:	6923      	ldr	r3, [r4, #16]
 8017fe0:	b94b      	cbnz	r3, 8017ff6 <__swsetup_r+0x7a>
 8017fe2:	89a3      	ldrh	r3, [r4, #12]
 8017fe4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017fec:	d003      	beq.n	8017ff6 <__swsetup_r+0x7a>
 8017fee:	4621      	mov	r1, r4
 8017ff0:	4628      	mov	r0, r5
 8017ff2:	f000 f883 	bl	80180fc <__smakebuf_r>
 8017ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ffa:	f013 0201 	ands.w	r2, r3, #1
 8017ffe:	d00a      	beq.n	8018016 <__swsetup_r+0x9a>
 8018000:	2200      	movs	r2, #0
 8018002:	60a2      	str	r2, [r4, #8]
 8018004:	6962      	ldr	r2, [r4, #20]
 8018006:	4252      	negs	r2, r2
 8018008:	61a2      	str	r2, [r4, #24]
 801800a:	6922      	ldr	r2, [r4, #16]
 801800c:	b942      	cbnz	r2, 8018020 <__swsetup_r+0xa4>
 801800e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018012:	d1c5      	bne.n	8017fa0 <__swsetup_r+0x24>
 8018014:	bd38      	pop	{r3, r4, r5, pc}
 8018016:	0799      	lsls	r1, r3, #30
 8018018:	bf58      	it	pl
 801801a:	6962      	ldrpl	r2, [r4, #20]
 801801c:	60a2      	str	r2, [r4, #8]
 801801e:	e7f4      	b.n	801800a <__swsetup_r+0x8e>
 8018020:	2000      	movs	r0, #0
 8018022:	e7f7      	b.n	8018014 <__swsetup_r+0x98>
 8018024:	24000118 	.word	0x24000118

08018028 <_raise_r>:
 8018028:	291f      	cmp	r1, #31
 801802a:	b538      	push	{r3, r4, r5, lr}
 801802c:	4605      	mov	r5, r0
 801802e:	460c      	mov	r4, r1
 8018030:	d904      	bls.n	801803c <_raise_r+0x14>
 8018032:	2316      	movs	r3, #22
 8018034:	6003      	str	r3, [r0, #0]
 8018036:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801803a:	bd38      	pop	{r3, r4, r5, pc}
 801803c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801803e:	b112      	cbz	r2, 8018046 <_raise_r+0x1e>
 8018040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018044:	b94b      	cbnz	r3, 801805a <_raise_r+0x32>
 8018046:	4628      	mov	r0, r5
 8018048:	f000 f830 	bl	80180ac <_getpid_r>
 801804c:	4622      	mov	r2, r4
 801804e:	4601      	mov	r1, r0
 8018050:	4628      	mov	r0, r5
 8018052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018056:	f000 b817 	b.w	8018088 <_kill_r>
 801805a:	2b01      	cmp	r3, #1
 801805c:	d00a      	beq.n	8018074 <_raise_r+0x4c>
 801805e:	1c59      	adds	r1, r3, #1
 8018060:	d103      	bne.n	801806a <_raise_r+0x42>
 8018062:	2316      	movs	r3, #22
 8018064:	6003      	str	r3, [r0, #0]
 8018066:	2001      	movs	r0, #1
 8018068:	e7e7      	b.n	801803a <_raise_r+0x12>
 801806a:	2100      	movs	r1, #0
 801806c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018070:	4620      	mov	r0, r4
 8018072:	4798      	blx	r3
 8018074:	2000      	movs	r0, #0
 8018076:	e7e0      	b.n	801803a <_raise_r+0x12>

08018078 <raise>:
 8018078:	4b02      	ldr	r3, [pc, #8]	@ (8018084 <raise+0xc>)
 801807a:	4601      	mov	r1, r0
 801807c:	6818      	ldr	r0, [r3, #0]
 801807e:	f7ff bfd3 	b.w	8018028 <_raise_r>
 8018082:	bf00      	nop
 8018084:	24000118 	.word	0x24000118

08018088 <_kill_r>:
 8018088:	b538      	push	{r3, r4, r5, lr}
 801808a:	4d07      	ldr	r5, [pc, #28]	@ (80180a8 <_kill_r+0x20>)
 801808c:	2300      	movs	r3, #0
 801808e:	4604      	mov	r4, r0
 8018090:	4608      	mov	r0, r1
 8018092:	4611      	mov	r1, r2
 8018094:	602b      	str	r3, [r5, #0]
 8018096:	f7ea f887 	bl	80021a8 <_kill>
 801809a:	1c43      	adds	r3, r0, #1
 801809c:	d102      	bne.n	80180a4 <_kill_r+0x1c>
 801809e:	682b      	ldr	r3, [r5, #0]
 80180a0:	b103      	cbz	r3, 80180a4 <_kill_r+0x1c>
 80180a2:	6023      	str	r3, [r4, #0]
 80180a4:	bd38      	pop	{r3, r4, r5, pc}
 80180a6:	bf00      	nop
 80180a8:	24002530 	.word	0x24002530

080180ac <_getpid_r>:
 80180ac:	f7ea b874 	b.w	8002198 <_getpid>

080180b0 <__swhatbuf_r>:
 80180b0:	b570      	push	{r4, r5, r6, lr}
 80180b2:	460c      	mov	r4, r1
 80180b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180b8:	2900      	cmp	r1, #0
 80180ba:	b096      	sub	sp, #88	@ 0x58
 80180bc:	4615      	mov	r5, r2
 80180be:	461e      	mov	r6, r3
 80180c0:	da0d      	bge.n	80180de <__swhatbuf_r+0x2e>
 80180c2:	89a3      	ldrh	r3, [r4, #12]
 80180c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80180c8:	f04f 0100 	mov.w	r1, #0
 80180cc:	bf14      	ite	ne
 80180ce:	2340      	movne	r3, #64	@ 0x40
 80180d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80180d4:	2000      	movs	r0, #0
 80180d6:	6031      	str	r1, [r6, #0]
 80180d8:	602b      	str	r3, [r5, #0]
 80180da:	b016      	add	sp, #88	@ 0x58
 80180dc:	bd70      	pop	{r4, r5, r6, pc}
 80180de:	466a      	mov	r2, sp
 80180e0:	f000 f848 	bl	8018174 <_fstat_r>
 80180e4:	2800      	cmp	r0, #0
 80180e6:	dbec      	blt.n	80180c2 <__swhatbuf_r+0x12>
 80180e8:	9901      	ldr	r1, [sp, #4]
 80180ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80180ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80180f2:	4259      	negs	r1, r3
 80180f4:	4159      	adcs	r1, r3
 80180f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80180fa:	e7eb      	b.n	80180d4 <__swhatbuf_r+0x24>

080180fc <__smakebuf_r>:
 80180fc:	898b      	ldrh	r3, [r1, #12]
 80180fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018100:	079d      	lsls	r5, r3, #30
 8018102:	4606      	mov	r6, r0
 8018104:	460c      	mov	r4, r1
 8018106:	d507      	bpl.n	8018118 <__smakebuf_r+0x1c>
 8018108:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801810c:	6023      	str	r3, [r4, #0]
 801810e:	6123      	str	r3, [r4, #16]
 8018110:	2301      	movs	r3, #1
 8018112:	6163      	str	r3, [r4, #20]
 8018114:	b003      	add	sp, #12
 8018116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018118:	ab01      	add	r3, sp, #4
 801811a:	466a      	mov	r2, sp
 801811c:	f7ff ffc8 	bl	80180b0 <__swhatbuf_r>
 8018120:	9f00      	ldr	r7, [sp, #0]
 8018122:	4605      	mov	r5, r0
 8018124:	4639      	mov	r1, r7
 8018126:	4630      	mov	r0, r6
 8018128:	f7fd fab6 	bl	8015698 <_malloc_r>
 801812c:	b948      	cbnz	r0, 8018142 <__smakebuf_r+0x46>
 801812e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018132:	059a      	lsls	r2, r3, #22
 8018134:	d4ee      	bmi.n	8018114 <__smakebuf_r+0x18>
 8018136:	f023 0303 	bic.w	r3, r3, #3
 801813a:	f043 0302 	orr.w	r3, r3, #2
 801813e:	81a3      	strh	r3, [r4, #12]
 8018140:	e7e2      	b.n	8018108 <__smakebuf_r+0xc>
 8018142:	89a3      	ldrh	r3, [r4, #12]
 8018144:	6020      	str	r0, [r4, #0]
 8018146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801814a:	81a3      	strh	r3, [r4, #12]
 801814c:	9b01      	ldr	r3, [sp, #4]
 801814e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8018152:	b15b      	cbz	r3, 801816c <__smakebuf_r+0x70>
 8018154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018158:	4630      	mov	r0, r6
 801815a:	f000 f81d 	bl	8018198 <_isatty_r>
 801815e:	b128      	cbz	r0, 801816c <__smakebuf_r+0x70>
 8018160:	89a3      	ldrh	r3, [r4, #12]
 8018162:	f023 0303 	bic.w	r3, r3, #3
 8018166:	f043 0301 	orr.w	r3, r3, #1
 801816a:	81a3      	strh	r3, [r4, #12]
 801816c:	89a3      	ldrh	r3, [r4, #12]
 801816e:	431d      	orrs	r5, r3
 8018170:	81a5      	strh	r5, [r4, #12]
 8018172:	e7cf      	b.n	8018114 <__smakebuf_r+0x18>

08018174 <_fstat_r>:
 8018174:	b538      	push	{r3, r4, r5, lr}
 8018176:	4d07      	ldr	r5, [pc, #28]	@ (8018194 <_fstat_r+0x20>)
 8018178:	2300      	movs	r3, #0
 801817a:	4604      	mov	r4, r0
 801817c:	4608      	mov	r0, r1
 801817e:	4611      	mov	r1, r2
 8018180:	602b      	str	r3, [r5, #0]
 8018182:	f7ea f871 	bl	8002268 <_fstat>
 8018186:	1c43      	adds	r3, r0, #1
 8018188:	d102      	bne.n	8018190 <_fstat_r+0x1c>
 801818a:	682b      	ldr	r3, [r5, #0]
 801818c:	b103      	cbz	r3, 8018190 <_fstat_r+0x1c>
 801818e:	6023      	str	r3, [r4, #0]
 8018190:	bd38      	pop	{r3, r4, r5, pc}
 8018192:	bf00      	nop
 8018194:	24002530 	.word	0x24002530

08018198 <_isatty_r>:
 8018198:	b538      	push	{r3, r4, r5, lr}
 801819a:	4d06      	ldr	r5, [pc, #24]	@ (80181b4 <_isatty_r+0x1c>)
 801819c:	2300      	movs	r3, #0
 801819e:	4604      	mov	r4, r0
 80181a0:	4608      	mov	r0, r1
 80181a2:	602b      	str	r3, [r5, #0]
 80181a4:	f7ea f870 	bl	8002288 <_isatty>
 80181a8:	1c43      	adds	r3, r0, #1
 80181aa:	d102      	bne.n	80181b2 <_isatty_r+0x1a>
 80181ac:	682b      	ldr	r3, [r5, #0]
 80181ae:	b103      	cbz	r3, 80181b2 <_isatty_r+0x1a>
 80181b0:	6023      	str	r3, [r4, #0]
 80181b2:	bd38      	pop	{r3, r4, r5, pc}
 80181b4:	24002530 	.word	0x24002530

080181b8 <_init>:
 80181b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181ba:	bf00      	nop
 80181bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181be:	bc08      	pop	{r3}
 80181c0:	469e      	mov	lr, r3
 80181c2:	4770      	bx	lr

080181c4 <_fini>:
 80181c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181c6:	bf00      	nop
 80181c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80181ca:	bc08      	pop	{r3}
 80181cc:	469e      	mov	lr, r3
 80181ce:	4770      	bx	lr
